// ************************************************************************ //
// The types declared in this file were generated from data read from the
// WSDL File described below:
// WSDL     : https://localhost/LNetworkServer/LNetworkService.svc?wsdl
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?wsdl=wsdl0
//  >Import : https://localhost/LNetworkServer/LNetworkService.svc?wsdl>0
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd55
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd1
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd46
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd7
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd0
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd2
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd5
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd6
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd28
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd22
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd30
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd19
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd25
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd26
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd21
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd4
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd27
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd50
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd51
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd52
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd31
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd20
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd44
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd8
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd9
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd10
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd11
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd12
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd13
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd14
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd24
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd15
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd16
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd17
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd18
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd23
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd29
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd32
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd33
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd34
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd35
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd36
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd37
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd38
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd39
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd40
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd41
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd42
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd45
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd47
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd48
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd49
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd53
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd54
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd3
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?xsd=xsd43
//  >Import : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc?wsdl=wsdl0>0
// Encoding : utf-8
// Version  : 1.0
// (08.03.2020 11:10:28 - - $Rev: 96726 $)
// ************************************************************************ //

unit LNetworkService;

interface

uses Soap.InvokeRegistry, Soap.SOAPHTTPClient, System.Types, Soap.XSBuiltIns;

const
  IS_OPTN = $0001;
  IS_UNBD = $0002;
  IS_NLBL = $0004;
  IS_ATTR = $0010;
  IS_REF  = $0080;


type

  // ************************************************************************ //
  // The following types, referred to in the WSDL document are not being represented
  // in this file. They are either aliases[@] of other types represented or were referred
  // to but never[!] declared in the document. The types from the latter category
  // typically map to predefined/known XML or Embarcadero types; however, they could also
  // indicate incorrect WSDL documents that failed to declare or import a schema type.
  // ************************************************************************ //
  // !:schema          - "http://www.w3.org/2001/XMLSchema"[GblElm]
  // !:unsignedShort   - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:unsignedLong    - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:string          - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:base64Binary    - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:boolean         - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:int             - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:duration        - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:QName           - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:unsignedByte    - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:unsignedInt     - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:long            - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:dateTime        - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:decimal         - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:double          - "http://www.w3.org/2001/XMLSchema"[Gbl]

  GeEmployeesViewResult = class;                { "http://www.rusguardsecurity.ru"[Cplx] }
  UserPassEditorSaveData2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblCplx] }
  UserPassEditorSaveData = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblElm] }
  Editor               = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[Cplx] }
  AcsBoxAccessLevelSaveData2 = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"[GblCplx] }
  AcsBoxAccessLevelSaveData = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"[GblElm] }
  TagSaveData2         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }
  TagSaveData          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblElm] }
  AcsAccessLevelSlimBase2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblCplx] }
  AcsAccessLevelSaveData2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblCplx] }
  AcsAccessLevelSaveData = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblElm] }
  AcsAccessLevelSlimBase = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblElm] }
  ReactionSaveData2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionSaveData     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  WorkScheduleSlimSaveData2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  WorkScheduleSlimSaveData = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblElm] }
  WorkZoneSlimSaveData2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  WorkZoneSlimSaveData = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblElm] }
  EmployeeViewFieldMetadata2 = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  EmployeeViewFieldMetadata = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  ScreenLayoutSaveData2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblCplx] }
  ScreenLayoutSaveData = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblElm] }
  ReactionExecuteProgramActionSaveData2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionExecuteProgramActionSaveData = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  ReactionExecuteProgramActionSlimInfo2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionExecuteProgramActionSlimInfo = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  ReactionEventSaveData2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionEventSaveData = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  AcsAccessPointBase2  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblCplx] }
  AcsAccessPointBase   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblElm] }
  DepartmentTreeModel2 = class;                 { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }
  EmployeePositionSlimInfo2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"[GblCplx] }
  EmployeePositionSlimInfo = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"[GblElm] }
  LEmployeePositionInfo2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"[GblCplx] }
  LEmployeePositionInfo = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"[GblElm] }
  AcsBoxAccessLevelSlimInfo2 = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"[GblCplx] }
  AcsBoxAccessLevelSlimInfo = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"[GblElm] }
  AcsAccessLevelSimpleInfo2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblCplx] }
  AcsAccessLevelSimpleInfo = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblElm] }
  ScreenLayoutInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblCplx] }
  ScreenLayoutInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblElm] }
  ReactionEventsFromDevicesSaveData2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionEventsFromDevicesSaveData = class;    { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  ReactionEventsFromDevicesSlimInfo2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionEventsFromDevicesSlimInfo = class;    { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  UserPassEditorData2  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblCplx] }
  UserPassEditorData   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblElm] }
  ReactionEventSlimInfo2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionEventSlimInfo = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  ReactionSlimInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionSlimInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  ReactionFullInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionFullInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  WorkScheduleSlimInfo2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  WorkScheduleSlimInfo = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblElm] }
  WorkZoneSlimInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  WorkZoneSlimInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblElm] }
  WorkZonesAccessPointBase2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  WorkZonesAccessPointBase = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblElm] }
  WorkZonesAccessPointSlimInfo2 = class;        { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  WorkZonesAccessPointSlimInfo = class;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblElm] }
  WorkZonesAccessPointSaveData2 = class;        { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  WorkZonesAccessPointSaveData = class;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblElm] }
  AcsAccessPointSaveData2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblCplx] }
  AcsAccessPointSaveData = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblElm] }
  AcsAccessPointSlimInfo2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblCplx] }
  AcsAccessPointSlimInfo = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblElm] }
  AcsVehicleSearched2  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsVehicleSearched   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeeFaceVector2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeFaceVector = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeeFaceVectorFull2 = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeFaceVectorFull = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeeFaceVectorSaveData2 = class;       { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeFaceVectorSaveData = class;        { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  EmployeeShortInfo2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  EmployeeShortInfo    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployee2         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployee          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeePhotosInfo2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeePhotosInfo = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  Absent2              = class;                 { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }
  AcsBoxAccessElementSaveInfo2 = class;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"[GblCplx] }
  AcsBoxAccessLevelElementSlimInfo2 = class;    { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"[GblCplx] }
  AcsBoxAccessLevelElementSlimInfo = class;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"[GblElm] }
  AcsBoxAccessElementSaveInfo = class;          { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"[GblElm] }
  FavoriteFolderSaveData2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"[GblCplx] }
  FavoriteFolderSaveData = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"[GblElm] }
  FavoriteFolderInfo2  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"[GblCplx] }
  FavoriteFolderInfo   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"[GblElm] }
  FavoriteFolderInfoWithEmployeeGroup2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"[GblCplx] }
  FavoriteFolderInfoWithEmployeeGroup = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"[GblElm] }
  ScreenCellSaveData2  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblCplx] }
  ScreenCellSaveData   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblElm] }
  ScreenCellInfo2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblCplx] }
  ScreenCellTreeInfo2  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblCplx] }
  ScreenCellTreeInfo   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblElm] }
  ScreenCellInfo       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblElm] }
  ReactionRecordVideoActionSaveData2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionRecordVideoActionSlimInfo2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionRecordVideoActionSlimInfo = class;    { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  ReactionRecordVideoActionSaveData = class;    { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  ReportSaveData2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report"[GblCplx] }
  ReportSlimInfo2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report"[GblCplx] }
  ReportSlimInfo       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report"[GblElm] }
  UserPassSlimSaveData2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblCplx] }
  UserPassSlimData2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblCplx] }
  UserPassSlimData     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblElm] }
  UserPassSlimSaveData = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblElm] }
  UserPassFullSaveData2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblCplx] }
  UserPassFullSaveData = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblElm] }
  UserPassFullData2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblCplx] }
  UserPassFullData     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblElm] }
  ReactionActionSaveData2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionActionSlimInfo2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionActionSlimInfo = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  ReactionActionSaveData = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  DayTypeSaveData2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  DayTypeSlimInfo2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  DayTypeSlimInfo      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblElm] }
  DayTypeSaveData      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblElm] }
  AccessPointData2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblCplx] }
  AccessPointData      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblElm] }
  AcsEmployeeSlimBase2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeSlimBase  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeeInfo2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeInfo      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  EmployeesData2       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  EmployeesData        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  EmployeeCurentInfo2  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  EmployeeCurentInfo   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  Exception2           = class;                 { "http://schemas.datacontract.org/2004/07/System"[GblCplx] }
  SystemException2     = class;                 { "http://schemas.datacontract.org/2004/07/System"[GblCplx] }
  ArgumentException2   = class;                 { "http://schemas.datacontract.org/2004/07/System"[GblCplx] }
  ArgumentNullException2 = class;               { "http://schemas.datacontract.org/2004/07/System"[GblCplx] }
  InvalidOperationException2 = class;           { "http://schemas.datacontract.org/2004/07/System"[GblCplx] }
  ApplicationException2 = class;                { "http://schemas.datacontract.org/2004/07/System"[GblCplx] }
  DriverVisualStyleNotFoundException2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[GblCplx] }
  AssignmentAcsKeyException2 = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[GblCplx] }
  RemoveCardTypeException2 = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[GblCplx] }
  DriverNotFoundException2 = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[GblCplx] }
  DataNotFoundException2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[GblCplx] }
  DataConsistencyException2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[GblCplx] }
  DataAlreadyExistsException2 = class;          { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[GblCplx] }
  DataNotFoundException = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[Flt][GblElm] }
  DataConsistencyException = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[Flt][GblElm] }
  DataAlreadyExistsException = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[Flt][GblElm] }
  DriverNotFoundException = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[Flt][GblElm] }
  RemoveCardTypeException = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[Flt][GblElm] }
  DriverVisualStyleNotFoundException = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[Flt][GblElm] }
  AssignmentAcsKeyException = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions"[Flt][GblElm] }
  LEmployeePositionsData2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"[GblCplx] }
  LEmployeePositionsData = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"[GblElm] }
  LAccessLevelsData2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblCplx] }
  LAccessLevelsData    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblElm] }
  WorkSchedulesData2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  WorkSchedulesData    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblElm] }
  WorkZonesData2       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  WorkZonesData        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblElm] }
  EmployeesInfoData22  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  EmployeesInfoData2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  EmployeesInfoData3   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  EmployeesInfoData    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsAccessLevelSlimInfo2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblCplx] }
  AcsAccessLevelSlimInfo = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblElm] }
  AcsKeySaveData2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys"[GblCplx] }
  AcsKeySaveData       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys"[GblElm] }
  AcsKeyInfo2          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys"[GblCplx] }
  AcsKeyInfo           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys"[GblElm] }
  WorkTimetableSlimInfo2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  WorkTimetableSlimInfo = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblElm] }
  AcsEmployeeScheduleSaveData2 = class;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeSchedule2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeSchedule  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeeScheduleSaveData = class;          { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeeFullBase2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeSaveData2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeSaveData  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeeFullBase  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeeFull2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeFull      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeeSlim2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeSlim      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeeGroup2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeGroup     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AscEmployeePhotoModificationDateTimeInfo2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AscEmployeePhotoModificationDateTimeInfo = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  SearchCondition2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  SearchCondition      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeeDocumentsSaveData2 = class;        { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeDocumentsSaveData = class;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeeDocumentsData2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeDocumentsData = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  DataForPeriodModel2  = class;                 { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }
  DataOnPresenceInWorkplace2 = class;           { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }
  PlanModel2           = class;                 { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }
  TagFullInfo2         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }
  ResourceTagsData2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }
  ResourceTagsData     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblElm] }
  BoxAccessLevelTagsData2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }
  BoxAccessLevelTagsData = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblElm] }
  AccessLevelTagsData2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }
  AccessLevelTagsData  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblElm] }
  TagFullInfo          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblElm] }
  KeyValueOfstringstring = class;               { "http://schemas.microsoft.com/2003/10/Serialization/Arrays"[Cplx] }
  EmployeeGroupTagsData2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }
  EmployeeGroupTagsData = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblElm] }
  ReportTagsData2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }
  ReportTagsData       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblElm] }
  MifareProfileTagsData2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }
  MifareProfileTagsData = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblElm] }
  DepartmentTreeModel  = class;                 { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblElm] }
  DataForPeriodModel   = class;                 { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblElm] }
  DataOnPresenceInWorkplace = class;            { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblElm] }
  PlanModel            = class;                 { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblElm] }
  DataForViolator2     = class;                 { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }
  Violator2            = class;                 { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }
  ReactionSendEmailActionSaveData2 = class;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionSendEmailActionSlimInfo2 = class;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionSendEmailActionSlimInfo = class;      { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  ReactionSendEmailActionSaveData = class;      { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  ReactionSendSMSActionSaveData2 = class;       { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionSendSMSActionSaveData = class;        { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  ReactionSendSMSActionSlimInfo2 = class;       { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ReactionSendSMSActionSlimInfo = class;        { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblElm] }
  AcsEmployeeGroupReactionInfo2 = class;        { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeGroupReactionInfo = class;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  AcsEmployeeGroupReportInfo2 = class;          { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  AcsEmployeeGroupReportInfo = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  Absent               = class;                 { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblElm] }
  DataForViolator      = class;                 { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblElm] }
  Violator             = class;                 { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblElm] }
  ArgumentOutOfRangeException2 = class;         { "http://schemas.datacontract.org/2004/07/System"[GblCplx] }
  EmployeeInfo2        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  EmployeeInfo         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblElm] }
  ReportingServicesData2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  ReportingServicesData = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  TimeOfDay2           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  TimeOfDay            = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  LServerAdded2        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  LServerAdded         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  AccessPoint2CameraSaveData2 = class;          { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  AccessPoint2CameraSaveData = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  AccessPoint2CameraChain2 = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  AcsWeekFull2         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  AcsWeekFull          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblElm] }
  AcsWeekSlim2         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  AcsWeekSlim          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblElm] }
  AcsCustomizableDayBase2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  AcsCustomDay2        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  AcsCustomDay         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblElm] }
  AcsWorkDayWithTransfer2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  AcsWorkDayWithTransfer = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblElm] }
  AcsCustomizableDayBase = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblElm] }
  AccessPoint2CameraChain = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  AcsScheduleSlimInfo2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  AcsScheduleSlimInfo  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblElm] }
  AcsScheduleBase2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  AcsMultiDaySchedule2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  AcsMultiDaySchedule  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblElm] }
  AcsScheduleBase      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblElm] }
  AcsWeekScheduleFull2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  AcsWeekScheduleFull  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblElm] }
  AcsWeekScheduleSlim2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  AcsWeekScheduleSlim  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblElm] }
  AcsDaySchedule2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  AcsDaySchedule       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblElm] }
  RGDayIntervals2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  RGDayIntervals       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblElm] }
  RGTimeInterval2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  RGTimeInterval       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblElm] }
  ExternalException2   = class;                 { "http://schemas.datacontract.org/2004/07/System.Runtime.InteropServices"[GblCplx] }
  Win32Exception2      = class;                 { "http://schemas.datacontract.org/2004/07/System.ComponentModel"[GblCplx] }
  Win32Exception       = class;                 { "http://schemas.datacontract.org/2004/07/System.ComponentModel"[GblElm] }
  ExternalException    = class;                 { "http://schemas.datacontract.org/2004/07/System.Runtime.InteropServices"[GblElm] }
  OperationCanceledException = class;           { "http://schemas.datacontract.org/2004/07/System"[Flt][GblElm] }
  WebException         = class;                 { "http://schemas.datacontract.org/2004/07/System.Net"[Flt][GblElm] }
  WebException2        = class;                 { "http://schemas.datacontract.org/2004/07/System.Net"[GblCplx] }
  SocketException2     = class;                 { "http://schemas.datacontract.org/2004/07/System.Net.Sockets"[GblCplx] }
  IPAddress2           = class;                 { "http://schemas.datacontract.org/2004/07/System.Net"[GblCplx] }
  SocketException      = class;                 { "http://schemas.datacontract.org/2004/07/System.Net.Sockets"[Flt][GblElm] }
  TupleOfguidNullableOfdateTimeGOBf0pnW2 = class;   { "http://schemas.datacontract.org/2004/07/System"[GblCplx] }
  TupleOfguidNullableOfdateTimeGOBf0pnW = class;   { "http://schemas.datacontract.org/2004/07/System"[GblElm] }
  ApplicationException = class;                 { "http://schemas.datacontract.org/2004/07/System"[Flt][GblElm] }
  TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH2 = class;   { "http://schemas.datacontract.org/2004/07/System"[GblCplx] }
  TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH = class;   { "http://schemas.datacontract.org/2004/07/System"[GblElm] }
  TimeoutException2    = class;                 { "http://schemas.datacontract.org/2004/07/System"[GblCplx] }
  TupleOfArrayOfguidArrayOfguid0dMmj3_Sh2 = class;   { "http://schemas.datacontract.org/2004/07/System"[GblCplx] }
  TupleOfArrayOfguidArrayOfguid0dMmj3_Sh = class;   { "http://schemas.datacontract.org/2004/07/System"[GblElm] }
  OperationCanceledException2 = class;          { "http://schemas.datacontract.org/2004/07/System"[GblCplx] }
  ArgumentNullException = class;                { "http://schemas.datacontract.org/2004/07/System"[Flt][GblElm] }
  ArgumentOutOfRangeException = class;          { "http://schemas.datacontract.org/2004/07/System"[Flt][GblElm] }
  TimeoutException     = class;                 { "http://schemas.datacontract.org/2004/07/System"[Flt][GblElm] }
  ArgumentException    = class;                 { "http://schemas.datacontract.org/2004/07/System"[Flt][GblElm] }
  Exception            = class;                 { "http://schemas.datacontract.org/2004/07/System"[GblElm] }
  InvalidOperationException = class;            { "http://schemas.datacontract.org/2004/07/System"[Flt][GblElm] }
  SystemException      = class;                 { "http://schemas.datacontract.org/2004/07/System"[GblElm] }
  LDriverAdded2        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  LDriverAdded         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  LProperty2           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  LProperty            = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  LResourcePropertyValue2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  LResourcePropertyValue = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  LResourceProperty2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  LResourceProperty    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  LResourceInfo2       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  LResourceInfo        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  LNetworkAdded2       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  LNetworkAdded        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  LOperationResult2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  LOperationResult     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  LDriverFullInfo2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  LDriverFullInfo      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  IPAddress            = class;                 { "http://schemas.datacontract.org/2004/07/System.Net"[GblElm] }
  NetConfiguration2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver"[GblCplx] }
  NetConfiguration     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver"[GblElm] }
  AcsAccessPointDriverInfo2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblCplx] }
  AcsAccessPointDriverInfo = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblElm] }
  LServerInfo2         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  LServerInfo          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  LNetInfo2            = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  LNetInfo             = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  License2             = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  License              = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  VariableInfo2        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  VariableInfo         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblElm] }
  EmailAddressSaveData2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblCplx] }
  EmailAddressInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblCplx] }
  IvideonCameraDriverInfo2 = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IvidionCamera"[GblCplx] }
  IvideonCameraDriverInfo = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IvidionCamera"[GblElm] }
  EmailDistributionAddressSaveData2 = class;    { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblCplx] }
  EmailDistributionAddressInfo2 = class;        { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblCplx] }
  PhoneNumberSaveData2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblCplx] }
  PhoneNumberInfo2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblCplx] }
  AccessBits2          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblCplx] }
  CellContentCameraSaveData2 = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera"[GblCplx] }
  CellContentCameraInfo2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera"[GblCplx] }
  CellContentCameraSaveData = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera"[GblElm] }
  CellContentCameraInfo = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera"[GblElm] }
  AccessBits           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblElm] }
  DeviceDriverInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }
  LResourcePropertyValues2 = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }
  LPropertyValue2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }
  LResourcePropertyValues = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblElm] }
  PropertyValue2       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }
  PhoneNumberInfo      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblElm] }
  PhoneNumberSaveData  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblElm] }
  EmailDistributionAddressInfo = class;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblElm] }
  EmailAddressSaveData = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblElm] }
  EmailAddressInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblElm] }
  Operation2           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }
  Operation            = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblElm] }
  DeviceOperation2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }
  DeviceOperation      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblElm] }
  DeviceCallMethodOperation2 = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }
  DeviceCallMethodOperation = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblElm] }
  LLinkChanged2        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }
  LLinkChanged         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblElm] }
  EmailDistributionAddressSaveData = class;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblElm] }
  LNetworkChanges2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }
  LNetworkChanges      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblElm] }
  ISS_DriverEventPlaybackSaveData2 = class;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_DriverEventPlaybackSlimInfo2 = class;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_Driver_SaveData2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_Recognition_SaveData2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_Driver_SlimInfo2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_Recognition_SlimInfo2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_Recognition_SlimInfo = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  VisitorsScoreboardWorkplaceModuleSaveData2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars"[GblCplx] }
  VisitorsScoreboardWorkplaceModuleInfo2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars"[GblCplx] }
  VisitorsScoreboardWorkplaceModuleInfo = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars"[GblElm] }
  VisitorsScoreboardWorkplaceModuleSaveData = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars"[GblElm] }
  WorkZoneVisitorsCountDTO2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars"[GblCplx] }
  WorkZoneVisitorsCountDTO = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars"[GblElm] }
  MifareProfileSaveData2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblCplx] }
  MifareProfileSaveData = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblElm] }
  MifareProfileFullSaveData2 = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblCplx] }
  MifareProfileFullInfo2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblCplx] }
  MifareProfileFullInfo = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblElm] }
  MifareProfileFullSaveData = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblElm] }
  UidKeyInfo2          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblCplx] }
  UidKeyInfo           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblElm] }
  MifareProfileInfo2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblCplx] }
  MifareProfileInfo    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblElm] }
  ISS_DriverEventPlaybackSaveData = class;      { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  ISS_DriverEventPlaybackSlimInfo = class;      { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  ISS_Recognition_SaveData = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  ISS_Driver_SlimInfo  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  ISS_Driver_SaveData  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  DriverFigureSaveData2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"[GblCplx] }
  DriverFigureSaveData = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"[GblElm] }
  MapSaveData2         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"[GblCplx] }
  MapSaveData          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"[GblElm] }
  MapInfo2             = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"[GblCplx] }
  MapInfo              = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"[GblElm] }
  DriverFigureInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"[GblCplx] }
  DriverFigureInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"[GblElm] }
  LPropertyValue       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblElm] }
  GetControllerConfigurationsResult_Config2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  GetControllerConfigurationsResult_FailedConfig2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  CanDeviceInfo2       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  CanDeviceInfo        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  CanDeviceNetConfig2  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  CanDeviceNetConfig   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  LanCanConverter2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  LanCanConverter      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  FindControllersResult2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  FindControllersResult = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  SetDevicesAddressBySidResult_FailedAddress2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  SetDevicesAddressBySidResult_FailedAddress = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  GetControllerConfigurationsResult2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  GetControllerConfigurationsResult = class;    { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  FindControllersResult_FailedConverterInfo2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  FindControllersResult_FailedConverterInfo = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  SetDevicesAddressBySidResult2 = class;        { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  SetDevicesAddressBySidResult = class;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  LDriversCustomizableDays2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }
  LCustomizableDayInfo2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }
  LDriversCustomizableDays = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblElm] }
  LCustomizableDayInfo = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblElm] }
  LChangedKeys2        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }
  LChangedKeys         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblElm] }
  CardTypeBiometricPermission2 = class;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }
  CardTypeBiometricPermission = class;          { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblElm] }
  GetControllerConfigurationsResult_Config = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  GetControllerConfigurationsResult_FailedConfig = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  DoorRelay2           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }
  DoorRelay            = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblElm] }
  LChangedCustomizableDays2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }
  LChangedCustomizableDays = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblElm] }
  DoorRelays2          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }
  DoorRelays           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblElm] }
  DriverSettings2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }
  DriverSettings       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblElm] }
  LStateBase2          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }
  LStateBase           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblElm] }
  LKeyInfo2            = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }
  LKeyInfo             = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblElm] }
  CardTypeSaveInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType"[GblCplx] }
  CardTypeInfo2        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType"[GblCplx] }
  CardTypeSaveInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType"[GblElm] }
  CardTypeInfo         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType"[GblElm] }
  CardTypesInfoData2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType"[GblCplx] }
  CardTypesInfoData    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType"[GblElm] }
  LUserGroup2          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblCplx] }
  LUserGroup           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblElm] }
  LUsersData2          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblCplx] }
  LUsersData           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblElm] }
  DeviceDriverInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblElm] }
  PropertyValue        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblElm] }
  LUser2               = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblCplx] }
  LUser                = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblElm] }
  ClaimSaveData2       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblCplx] }
  ClaimSaveData        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblElm] }
  LUserGroupsData2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblCplx] }
  LUserGroupsData      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblElm] }
  ClaimInfo2           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblCplx] }
  ClaimInfo            = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblElm] }
  IvideonCameraCollectionResult2 = class;       { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon"[GblCplx] }
  IvideonRemoteServerCollectionResult2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon"[GblCplx] }
  IvideonCameraCollectionResult = class;        { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon"[GblElm] }
  LanCanConverterAddress2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  LanCanConverterAddress = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  UsbCanConverterAddress2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  UsbCanConverterAddress = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  CanConverterAddress2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  CanConverterAddress  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  IvideonRemoteServerCollectionResult = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon"[GblElm] }
  FindConvertersResult2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  FindConvertersResult = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblElm] }
  NUUOCamera2          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO"[GblCplx] }
  NUUOCamera           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO"[GblElm] }
  PanasonicCameraCollectionResult2 = class;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Panasonic"[GblCplx] }
  NotificationInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications"[GblCplx] }
  NotificationInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications"[GblElm] }
  NUUOVideoRecorder2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO"[GblCplx] }
  NUUOVideoRecorder    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO"[GblElm] }
  NUUOArchiveServer2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO"[GblCplx] }
  NUUOArchiveServer    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO"[GblElm] }
  PanasonicCameraCollectionResult = class;      { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Panasonic"[GblElm] }
  NUUOArchiveServerCollectionResult2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO"[GblCplx] }
  NUUOArchiveServerCollectionResult = class;    { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO"[GblElm] }
  Employee2OrganizationAssignment2 = class;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  FirebirdIncidentEventsResult2 = class;        { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  ViolatorFilter2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  Template             = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[Cplx] }
  Employee2OrganizationAssignmentFull2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  IncidentTemplateSaveData2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  Violation2           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  IncidentTemplateInfo2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  IncidentStatisticData2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents"[GblCplx] }
  Employee2OrganizationAssignment = class;      { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  IncidentTemplateInfo = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  IncidentTemplateSaveData = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  Employee2OrganizationAssignmentFull = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  PhotoidentificationPersonalDataSaveInfo2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification"[GblCplx] }
  PhotoidentificationPersonalData2 = class;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification"[GblCplx] }
  IncidentStatisticData = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents"[GblElm] }
  Violation            = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  ViolatorFilter       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  FirebirdIncidentEventsResult = class;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  AcsVehicleSavedData2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle"[GblCplx] }
  AcsVehicle2          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle"[GblCplx] }
  AcsVehicleSavedData  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle"[GblElm] }
  DictionaryElementSaveInfo2 = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  DictionaryElementSaveInfo = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  AcsVehicle           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle"[GblElm] }
  DictionaryElementInfo2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  IncidentTypeInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents"[GblCplx] }
  IncidentTypeInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents"[GblElm] }
  DictionaryElementInfo = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  EmployeesVehicle2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle"[GblCplx] }
  EmployeesVehicle     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle"[GblElm] }
  LogMessageTypeSlimInfo2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblCplx] }
  LogMessageTypeSlimInfo = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblElm] }
  ReportSaveData       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report"[GblElm] }
  DriverEventNotification2 = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications"[GblCplx] }
  DriverEventNotification = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications"[GblElm] }
  EmployeePassageNotification2 = class;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications"[GblCplx] }
  EmployeePassageNotification = class;          { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications"[GblElm] }
  LogMessage2          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblCplx] }
  LogMessage           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblElm] }
  LogMessageSubtypeSlimInfo2 = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblCplx] }
  LogMessageSubtypeSlimInfo = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblElm] }
  LogData2             = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblCplx] }
  LogData              = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblElm] }
  DocumentForActionSaveInfo2 = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  DocumentForActionSaveInfo = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  DocumentFullForActionInfo2 = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  DocumentFullForActionInfo = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  DocumentSaveInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  DocumentSaveInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  DocumentFullInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  DocumentFullInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  ViolatorSaveInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  ViolatorSaveInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  ViolatorFullInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  ViolatorFullInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  ViolationSaveInfo2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  ViolationSaveInfo    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  ViolationFullInfo2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  ViolationFullInfo    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  TangiblesSaveInfo2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  TangiblesSaveInfo    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  TangiblesFullInfo2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  TangiblesFullInfo    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  DictionaryElementsInfoData2 = class;          { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  DictionaryElementsInfoData = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  IncidentsFilter2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  IncidentsFilter      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  OrganizationDictionaryElementInfo2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  OrganizationDictionaryElementInfo = class;    { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  SecurityGroupDictionaryElementSaveInfo2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  SecurityGroupDictionaryElementSaveInfo = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  OrganizationElementSaveInfo2 = class;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  OrganizationElementSaveInfo = class;          { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  SecurityGroupDictionaryElementInfo2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  SecurityGroupDictionaryElementInfo = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  IncidentSaveInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  IncidentSaveInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  IncidentElementFullInfo2 = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  IncidentElementFullInfo = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  IncidentsMegaFilter2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  IncidentsMegaFilter  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  IncidentsInfoData2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  IncidentsInfoData    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblElm] }
  PhotoBankShort2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank"[GblCplx] }
  PhotoBank2           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank"[GblCplx] }
  PhotoBank            = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank"[GblElm] }
  PhotoBankShort       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank"[GblElm] }
  EmployeeGroupForAlcoGroup2 = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"[GblCplx] }
  EmployeeGroupForAlcoGroupFull2 = class;       { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"[GblCplx] }
  AcsAlcoGroupSaveData2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"[GblCplx] }
  AcsAlcoGroupSlimInfo2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"[GblCplx] }
  RemoteTerminalInfo2  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal"[GblCplx] }
  RemoteTerminalInfo   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal"[GblElm] }
  RemoteTerminalSaveData2 = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal"[GblCplx] }
  RemoteTerminalSaveData = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal"[GblElm] }
  ISS_Entity_Base2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_Display_SlimInfo2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_Display_SlimInfo = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  ISS_RusGuard_SlimInfo2 = class;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_RusGuard_SlimInfo = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  ISS_EventViewer_SlimInfo2 = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_EventViewer_SlimInfo = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  ISS_Monitor_SlimInfo2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_Monitor_SlimInfo = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  ISS_IntegrationPoint_SlimInfo2 = class;       { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_IntegrationPoint_SlimInfo = class;        { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  ISS_Cam_SlimInfo2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_Cam_SlimInfo     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  ISS_Entity_Base      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  ISS_Slave_SlimInfo2  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_Slave_SlimInfo   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  ISS_IIDK_SaveData2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_IIDK_SaveData    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  ISS_IIDK_SlimInfo2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ISS_IIDK_SlimInfo    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblElm] }
  AcsConfiguratorSaveData2 = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblCplx] }
  AcsConfiguratorSaveData = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblElm] }
  EmployeeGroupForAlcoGroup = class;            { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"[GblElm] }
  EmployeeGroupForAlcoGroupFull = class;        { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"[GblElm] }
  AcsAlcoGroupSlimInfo = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"[GblElm] }
  AcsAlcoGroupSaveData = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"[GblElm] }
  WorkplaceModuleSaveData2 = class;             { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblCplx] }
  WorkplaceModuleSaveData = class;              { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblElm] }
  AcsConfiguratorInfo2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblCplx] }
  AcsConfiguratorInfo  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblElm] }
  WorkplaceModuleInfo2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblCplx] }
  WorkplaceModuleInfo  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblElm] }
  WorkplaceSaveData2   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblCplx] }
  WorkplaceInfo2       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblCplx] }
  WorkplaceInfo        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblElm] }
  WorkplaceSaveData    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblElm] }
  OwnerValueBase2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  OwnerDateTimeValue2  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  OwnerDoubleValue2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  AdditionalFieldValue2 = class;                { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  ListItem2            = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  OwnerAdditionalFieldsValue2 = class;          { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  OwnerAdditionalFieldsValue = class;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  OwnerListValue2      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  OwnerListValue       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  OwnerIntValue2       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  OwnerStringValue2    = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  OwnerColorValue2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  CellContentFotoIdentificationSaveData2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification"[GblCplx] }
  CellContentFotoIdentificationSaveData = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification"[GblElm] }
  CellContentFotoIdentificationInfo2 = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification"[GblCplx] }
  CellContentFotoIdentificationInfo = class;    { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification"[GblElm] }
  PhotoidentificationPersonalData = class;      { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification"[GblElm] }
  PhotoidentificationPersonalDataSaveInfo = class;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification"[GblElm] }
  AdditionalFieldBase2 = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  IntegerField2        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  ColorField2          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  StringField2         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  DoubleField2         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  ListField2           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  DateTimeField2       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  ColorField           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  ListField            = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  ListItem             = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  StringField          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  DateTimeField        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  IntegerField         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  DoubleField          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  OwnerIntValue        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  OwnerStringValue     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  OwnerColorValue      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  OwnerDoubleValue     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  AdditionalFieldValue = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  OwnerValueBase       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  OwnerDateTimeValue   = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  AdditionalFieldBase  = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  AddFieldInfo2        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  AddDateTimeInfo2     = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  AddDateTimeInfo      = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  AddDoubleInfo2       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  AddDoubleInfo        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  AddIntInfo2          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  AddIntInfo           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  AddFieldInfo         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  AddListInfo2         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  AddListInfo          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  PhotoOrder2          = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Photo"[GblCplx] }
  PhotoOrder           = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Photo"[GblElm] }
  AddStringInfo2       = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  AddStringInfo        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }
  AddColorInfo2        = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  AddColorInfo         = class;                 { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblElm] }

  {$SCOPEDENUMS ON}
  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblSmpl] }
  SearchWay = (FIO, TableNumber, Keys, Email, Phone, Birthday, PassportNumber, AddField);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblSmpl] }
  EmployeeGroupType = (None, GuestGroup, Violators);

  { "http://schemas.datacontract.org/2004/07/System.Data"[GblSmpl] }
  SqlDbType = (
      BigInt,
      Binary,
      Bit,
      Char,
      DateTime,
      Decimal,
      Float,
      Image,
      Int,
      Money,
      NChar,
      NText,
      NVarChar,
      Real,
      UniqueIdentifier,
      SmallDateTime,
      SmallInt_,
      SmallMoney,
      Text,
      Timestamp,
      TinyInt,
      VarBinary,
      VarChar,
      Variant,
      Xml,
      Udt,
      Structured,
      Date,
      Time,
      DateTime2,
      DateTimeOffset
  );

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblSmpl] }
  FaceSourceType = (Image, Camera);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblSmpl] }
  PassageByRuleOfTwoPersonsMode = (Off, FirstPerson, SecondPerson, DoublePass);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblSmpl] }
  ServerIdentificationType = (Face, Vehicle, AlcoFarme);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblSmpl] }
  AccessPointSortType = (None, Name_, Type_);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblSmpl] }
  WorkZonesAccessPointEventType = (Entry, Exit, LastEntry);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblSmpl] }
  WorkZonesAccessPointType = (Exit, Entry);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblSmpl] }
  WorkSchedulesOwner = (Parent, Self);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblSmpl] }
  WorkZoneSortedColumn = (None, Name_, Description);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblSmpl] }
  WorkZonesOwner = (Parent, Self);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblSmpl] }
  WorkScheduleSortedColumn = (None, Name_, Description);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblSmpl] }
  DayForm = (Weekday, Weekend, Holiday);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblSmpl] }
  DayMode = (Absent, ByThePresence, OnSchedule);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblSmpl] }
  EmployeeImageType = (Photo, PassportImage, DriverLicenseImage, ForeignPassportImage);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblSmpl] }
  ReactionEventType = (EventsFromDevices);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblSmpl] }
  ReactionActionType = (SendSMS, SendEmail, ExecuteProgram, RecordVideo);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblSmpl] }
  PassBackgroundType = (None, Color, Image);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblSmpl] }
  EmployeesSortedColumn = (None, ID, FIO, EmployeeGroup, Position, TabNumber);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblSmpl] }
  DocumentType = (Passport, DriverLicense, ForeignPassport);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblSmpl] }
  GroupTypeSearch = (Name_, Code, Description);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblSmpl] }
  VehicleTypeSearch = (Name_, Brand, RegistrationNumber);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblSmpl] }
  EmployeeSortedColumn = (None, FullName, LastName, FirstName, SecondName, TabNumber, Position, Satatus);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblSmpl] }
  ScreenCellContentType = (None, PhotoIdentification, Camera);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblSmpl] }
  ScreenAspectRatio = (AspectRatio16x9, AspectRatio16x10, AspectRatio4x3);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblSmpl] }
  ScreenScaleMode = (Fit, Stretch);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblSmpl] }
  AccessLevelSortedColumn = (None, Name_, Description);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblSmpl] }
  AccessLevelsOwner = (Parent, Self);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"[GblSmpl] }
  BoxAccessLevelMode = (User, FullAccess);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"[GblSmpl] }
  EmployeePositionSortedColumn = (None, Name_, Comment, Code);

  { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblSmpl] }
  ViolationType = (PVTR, Late, LessThanDailyAllowance, EarlyDeparture, LongLunchBrake, AfterHours);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblSmpl] }
  CUDType = (Create, Delete);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblSmpl] }
  LinkType = (NetworkToSubnetwork, ZoneToDriver);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblSmpl] }
  SortOrder = (None, Ascending, Descending);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblSmpl] }
  EntryType = (Enter, Exit);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblSmpl] }
  AcsScheduleOwnerType = (ACSSchedule, ReactionSchedule);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblSmpl] }
  AcsCustomizableDayType = (Holiday);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblSmpl] }
  AcsScheduleType = (Day, MultiDay, Week);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblSmpl] }
  AcsTimeIntervalType = (Pass, Entry, Exit, Service);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblSmpl] }
  AcsScheduleBuiltInType = (Custom, Always, Never, General);

  { "http://schemas.datacontract.org/2004/07/System.Net.Sockets"[GblSmpl] }
  AddressFamily = (
      Unknown,
      Unspecified,
      Unix,
      InterNetwork,
      ImpLink,
      Pup,
      Chaos,
      NS,
      Ipx,
      Iso,
      Osi,
      Ecma,
      DataKit,
      Ccitt,
      Sna,
      DecNet,
      DataLink,
      Lat,
      HyperChannel,
      AppleTalk,
      NetBios,
      VoiceView,
      FireFox,
      Banyan,
      Atm,
      InterNetworkV6,
      Cluster,
      Ieee12844,
      Irda,
      NetworkDesigners,
      Max
  );

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblSmpl] }
  ResourceType = (Driver, Server, Net, Zone, CommonInterface);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver"[GblSmpl] }
  OperationType = (MethodInvoke);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver"[GblSmpl] }
  OperationResultType = (Success, Fault);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver"[GblSmpl] }
  DeviceStateEnum = (OK, Malfunction, WrongDriverType, Activating, Shutdowning, Shutdowned);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver"[GblSmpl] }
  AcsAccessPointType = (Unknown, Door, OneSidedDoor, Tourniquet, Gate, Locker);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblSmpl] }
  ServerType = (DeviceServer, OperationCoordinator, DataServer, LNetworkServer, ResourceBroker, CloudDispatcher);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IvidionCamera"[GblSmpl] }
  CameraProductType = (Ivideon, Panasonic, ISS, NUUO);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblSmpl] }
  SmtpEncryptionType = (NotRequired, SSL, TLS, Auto);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblSmpl] }
  EmissionProtectionLevel = (SL1, SL3);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblSmpl] }
  BlockData = (None, Key);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblSmpl] }
  StateType = (New, Deleting, Modifying, ModifyingDeviceIdentificator, Unknown);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblSmpl] }
  EmailAddressOwner = (Employee);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblSmpl] }
  PhoneNumberOwner = (Employee);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblSmpl] }
  SectorAuthentication = (ProtectionDataAndUID, ProtectionData, ProtectionDataOrUID, Sector);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblSmpl] }
  ProfileType = (Mifare, AppleGooglePay, RusGuardAccessMobile);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblSmpl] }
  CustomizableDayType = (Holiday, Transfer);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblSmpl] }
  StorageStateEnum = (Add, Change, Delete);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType"[GblSmpl] }
  CardTypeSortedColumn = (None, Name_, Comment);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblSmpl] }
  UserGroupType = (Custom, Administrators);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblSmpl] }
  UserSortedColumn = (None, Login, FullName, Description);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblSmpl] }
  UserGroupSortedColumn = (None, Name_, Description);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblSmpl] }
  CanConverterAddress_TagEnum = (Usb, Lan);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblSmpl] }
  IncidentSortedColumn = (None, DateAndTime);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblSmpl] }
  DictionaryType = (
      DocumentType,
      Significance,
      Position,
      Location,
      LocationClarification,
      SecurityGroup,
      IncidentType,
      IncidentNature,
      TheftMethod,
      Organization,
      Subdivision,
      StatusOfPerson,
      Punishment,
      Detention,
      WhoTransferredWealth,
      WhoTransferredDocument,
      WhoTransferredDecisionDocument,
      PersonalDocumentType,
      DecisionDocumentType,
      FinalPunishment,
      ExtraFinalPunishment,
      Measure,
      Tangibles,
      OrganizationType,
      VehicleType
  );

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblSmpl] }
  DictionaryElementSortedColumn = (None, Name_, Description);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents"[GblSmpl] }
  Extension = (Word_, Excel);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblSmpl] }
  LogMessageSortedColumn = (None, Id, DateTime, LogMessageType, LogMessageSubType, Message_, Details);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblSmpl] }
  LogMsgType = (Information, Warning, Error, Alarm);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblSmpl] }
  LogMsgSubType = (
      ControllerReload,
      DeviceStateChanged,
      DriverMethodCall,
      ControllerTamperAlarm,
      ControllerTamperNorm,
      ControllerPowerNorm,
      ControllerPowerBackup,
      ControllerAccumulatorNorm,
      ControllerAccumulatorDischarged,
      ControllerPowerChannelShortCircuit,
      ControllerPowerChannelEndShortCircuit,
      ControllerHardwareFailure,
      AccessPointAlarm,
      AccessPointBroken,
      AccessPointArmedGuard,
      AccessPointDisarmedGuard,
      AccessPointBlocked,
      AccessPointUnblocked,
      AccessPointArmGuardDeniedAccess,
      AccessPointBlockDeniedAccess,
      AccessPointArmGuardDeniedSensor,
      AccessPointEmergencyOpened,
      AccessPointEmergencyEnd,
      AccessPointEmergencyEndDeniedButton,
      AccessPointPassDenied,
      AccessPointKeyQuery,
      AccessPointEntry,
      AccessPointExit,
      AccessPointExitByCardReceiver,
      AccessPointPassUnknown,
      AccessPointFirstPersonEntry,
      AccessPointFirstPersonExit,
      AccessPointFirstPersonExitByCardReceiver,
      AccessPointFirstPersonPassUnknown,
      AccessPointSecondPersonEntry,
      AccessPointSecondPersonExit,
      AccessPointSecondPersonExitByCardReceiver,
      AccessPointSecondPersonPassUnknown,
      AccessPointPassRefused,
      AccessPointEnteredPinUnderCompulsion,
      AccessPointDoorLeftOpened,
      AccessPointDoorLongOpened,
      AccessPointDoorLongOpenedEnd,
      AccessPointNotReceivedPermissionToPass,
      AccessPointButtonPressed,
      AccessPointOnGuardDelayStarted,
      AccessPointSirenOn,
      AccessPointSirenOff,
      AccessPointCardReaderTamperAlert,
      AccessPointCardReaderTamperNorm,
      DriverActivated,
      DriverDeactivated,
      DeviceOnline,
      DeviceOffline,
      AccessPointCardReaderContainerFull,
      AccessPointEndBroken,
      AccessPointAlarmDelayStarted,
      AccessPointDoorClosed,
      ConverterNotFound,
      ConverterNoDevicesOnCanBus,
      ConverterOk,
      AccessPointArmedGuardByKey,
      AccessPointDisarmedGuardByKey,
      AccessPointBlockedByKey,
      AccessPointUnblockedByKey,
      AccessPointArmGuardDeniedSensorByKey,
      AccessPointEntryByKey,
      AccessPointExitByKey,
      AccessPointPassUnknownByKey,
      AccessPointPassRefusedByKey,
      AccessPointDoorLongOpenedByKey,
      AccessPointDoorLongOpenedEndByKey,
      AccessPointOnGuardDelayStartedByKey,
      AccessPointDoorLeftOpenedByKey,
      AccessPointDoorClosedByKey,
      AccessPointKeyAppliedEntry,
      AccessPointKeyAppliedExit,
      GateCarPassDenied,
      GateCarKeyAppliedEntry,
      GateCarKeyAppliedExit,
      GateCarKeyQuery,
      GateCarEntry,
      GateCarExit,
      GateCarExitByCardReceiver,
      GateCarPassUnknown,
      GateCarEntryByKey,
      GateCarExitByKey,
      GateCarPassUnknownByKey,
      GateCarFirstPersonEntry,
      GateCarFirstPersonExit,
      GateCarFirstPersonExitByCardReceiver,
      GateCarFirstPersonPassUnknown,
      GateCarSecondPersonEntry,
      GateCarSecondPersonExit,
      GateCarSecondPersonExitByCardReceiver,
      GateCarSecondPersonPassUnknown,
      GateCarPassRefused,
      GateCarPassRefusedByKey,
      GateCarArrived,
      Fire,
      AttentionFireWarning,
      FireEquipmentFault,
      PenetrationAlarm,
      TrainBreak,
      ElecticNetworkCrash,
      ElectricNetworkRestored,
      TemperatureIncrease,
      NormalTemperature,
      InputAlarm,
      OutputShortCurcuit,
      OutputBreak,
      OutputOff,
      OutputOn,
      OutputRestoration,
      OutputStateChanged,
      DeviceCaseOpened,
      DeviceCaseClosed,
      VoiceNotificationOn,
      VoiceNotificationOff,
      ValveReady,
      ValveFault,
      ValveError,
      ValveRestoration,
      TrainParametersError,
      TrainOff,
      TrainOn,
      DPLS1NotConnected,
      DPLS2NotConnected,
      DPLS1ConnectionRestored,
      DPLS2ConnectionRestored,
      DPLSShortCircuit,
      DPLSCrash,
      TrainShortCircuit,
      SensorTriggered,
      SDUTriggered,
      SDUFault,
      ConnectionLost,
      ConnectionRestored,
      PumpOn,
      PumpOff,
      StartCircuitOperation,
      FaultFireFighting,
      AutomaticStartDelay,
      Extinguishing,
      EmergencyASPTStart,
      StartAUP,
      BlockStartAUP,
      AutomaticOn,
      AutomaticOff,
      StopAUP,
      AutomaticTestError,
      ManualTest,
      PowerCrash,
      AKBTestError,
      AKBDischarged,
      BatteryFault,
      RIPChargerFault,
      RIPOverload,
      RIPNotOverload,
      RIPChargerRestoration,
      PowerRestoration,
      BatteryRestoration,
      RIPOff,
      RIPOn,
      DeviceRestart,
      NeedMaintenance,
      RS485Off,
      RS485Restored,
      TrainDisturbance,
      TrainRestoration,
      StopTrainAlarm,
      TrainDisarmed,
      ThermometerRestoration,
      AlarmWaterLevelIncrease,
      AlarmWaterLevelDecrease,
      WaterLevelIncrease,
      NormalWaterLevel,
      WaterLevelDecrease,
      SilentAlarm,
      DPLSRestoration,
      FireEquipmentNormRestoration,
      LowTemperature,
      UnknownDevice,
      ControlRestoration,
      TrainOnDelay,
      TrainArmed,
      Identification,
      TechTrainRestoration,
      TechTrainDisturbance,
      ThermometerFault,
      TechTrainDisturbance2,
      FailedTrainOn,
      InnerZoneRestored,
      DepartmentArmed,
      DepartmentDisarmed,
      OrionRelayOn,
      OrionRelayOff,
      AccessPointEmegancyExitButton,
      AccessPointEmegancyExitButtonEnd,
      DoorOpenDenied,
      DoorOpen,
      InvalidDoorNumber,
      CommunicationModuleRestored,
      NewModule,
      NoCommunicationModule,
      ImpossibleKeyOperation,
      ImpossibleOpenDoor,
      BreathalyzerCheckSuccessful,
      VerificationTimeExpired,
      TimeIntervalProhibition,
      DataAuthenticationError,
      CardAuthorizationError,
      EnabledOperatorControl,
      DisabledOperatorControl,
      ReaderTamperAlert,
      ReaderTamperNorm,
      ReaderConnectionLost,
      ReaderConnectionRestored,
      RusgardFacePhotoProcessing,
      BiometricDeviceConnectionLost,
      BiometricDeviceConnectionRestored,
      BiometricAutentificationError,
      ControllerKeyProcessingError,
      BiometricVerificationError
  );

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblSmpl] }
  LogMessageContentDataType = (IVideonLocalArchiveRecord, IVideonAccountArchiveRecord, PanasonicArchveRecord, ISSArchiveRecord, NUUOArchiveRecord);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblSmpl] }
  LogSubjectType = (None, Operator, OperatorGroup, Employee, EmployeeGroup);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"[GblSmpl] }
  EmployeeAssignmentType = (Manual, Auto);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"[GblSmpl] }
  AssignmentFilter = (Position, Group, PositionCode);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblSmpl] }
  WorkplaceModuleType = (
      EquipmentConfigurator,
      AcsConfigurator,
      WorkstationConfigurator,
      SystemConfigurator,
      Maps,
      Reports,
      PhotoIdentification,
      Statistics,
      VisitorsScoreboard,
      Administrator,
      Leader,
      RemoteTerminal,
      Incidents
  );

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblSmpl] }
  FavoriteType = (Workplace, User);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification"[GblSmpl] }
  ShowPreviousVisitorMode = (None, Right, Bottom);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblSmpl] }
  FieldType = (String_, Integer_, Double_, DateTime, Color, List);

  { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblSmpl] }
  OwnerFieldType = (Employee);

  {$SCOPEDENUMS OFF}



  // ************************************************************************ //
  // XML       : GeEmployeesViewResult, <complexType>
  // Namespace : http://www.rusguardsecurity.ru
  // ************************************************************************ //
  GeEmployeesViewResult = class(TRemotable)
  private
    Fschema: TXMLData;
  public
    destructor Destroy; override;
  published
    property schema: TXMLData  Index (IS_REF) read Fschema write Fschema;
  end;

  ArrayOfAcsEmployeePhotosInfo = array of AcsEmployeePhotosInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfAscEmployeePhotoModificationDateTimeInfo = array of AscEmployeePhotoModificationDateTimeInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfAcsEmployeeGroupReportInfo = array of AcsEmployeeGroupReportInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfAcsEmployee = array of AcsEmployee2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfEmployeeShortInfo = array of EmployeeShortInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfAcsEmployeeGroupReactionInfo = array of AcsEmployeeGroupReactionInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfAcsEmployeeGroup = array of AcsEmployeeGroup2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfEmployeeViewFieldMetadata = array of EmployeeViewFieldMetadata2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfAcsEmployeeFaceVectorFull = array of AcsEmployeeFaceVectorFull2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfAcsEmployeeFaceVector = array of AcsEmployeeFaceVector2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfAcsEmployeeFaceVectorSaveData = array of AcsEmployeeFaceVectorSaveData2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfEmployeeCurentInfo = array of EmployeeCurentInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfAcsEmployeeFull = array of AcsEmployeeFull2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfAcsEmployeeSchedule = array of AcsEmployeeSchedule2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfAcsEmployeeSlim = array of AcsEmployeeSlim2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfAcsVehicleSearched = array of AcsVehicleSearched2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfAcsEmployeeInfo = array of AcsEmployeeInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"[GblCplx] }
  ArrayOfServerIdentificationType = array of ServerIdentificationType;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblCplx] }
  ArrayOfAcsAccessPointSlimInfo = array of AcsAccessPointSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblCplx] }
  ArrayOfAcsAccessPointDriverInfo = array of AcsAccessPointDriverInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblCplx] }
  ArrayOfWorkZonesAccessPointSlimInfo = array of WorkZonesAccessPointSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  ArrayOfWorkTimetableSlimInfo = array of WorkTimetableSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  ArrayOfWorkZoneSlimInfo = array of WorkZoneSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  ArrayOfWorkScheduleSlimInfo = array of WorkScheduleSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  ArrayOfDayTypeSlimInfo = array of DayTypeSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"[GblCplx] }
  ArrayOfReactionEventSlimInfo = array of ReactionEventSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ArrayOfReactionActionSlimInfo = array of ReactionActionSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ArrayOfReactionSlimInfo = array of ReactionSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"[GblCplx] }
  ArrayOfUserPassEditorData = array of UserPassEditorData2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblCplx] }


  // ************************************************************************ //
  // XML       : UserPassEditorSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass
  // ************************************************************************ //
  UserPassEditorSaveData2 = class(TRemotable)
  private
    FEditor: Editor;
    FEditor_Specified: boolean;
    procedure SetEditor(Index: Integer; const AEditor: Editor);
    function  Editor_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Editor: Editor  Index (IS_OPTN or IS_NLBL) read FEditor write SetEditor stored Editor_Specified;
  end;



  // ************************************************************************ //
  // XML       : UserPassEditorSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass
  // ************************************************************************ //
  UserPassEditorSaveData = class(UserPassEditorSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : Editor, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass
  // ************************************************************************ //
  Editor = class(TRemotable)
  private
  published
  end;

  ArrayOfReportSlimInfo = array of ReportSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report"[GblCplx] }
  ArrayOfScreenCellSaveData = array of ScreenCellSaveData2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblCplx] }
  ArrayOfScreenCellTreeInfo = array of ScreenCellTreeInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblCplx] }
  ArrayOfUserPassSlimData = array of UserPassSlimData2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"[GblCplx] }
  ArrayOfScreenCellInfo = array of ScreenCellInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"[GblCplx] }
  ArrayOfFavoriteFolderInfo = array of FavoriteFolderInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"[GblCplx] }
  ArrayOfFavoriteFolderInfoWithEmployeeGroup = array of FavoriteFolderInfoWithEmployeeGroup2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"[GblCplx] }
  ArrayOfAcsAccessLevelSimpleInfo = array of AcsAccessLevelSimpleInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblCplx] }
  ArrayOfAcsKeyInfo = array of AcsKeyInfo2;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys"[GblCplx] }
  ArrayOfBoxAccessLevelTagsData = array of BoxAccessLevelTagsData2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }
  ArrayOfAcsAccessLevelSlimInfo = array of AcsAccessLevelSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"[GblCplx] }
  ArrayOfAcsBoxAccessElementSaveInfo = array of AcsBoxAccessElementSaveInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"[GblCplx] }
  ArrayOfAcsBoxAccessLevelSlimInfo = array of AcsBoxAccessLevelSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"[GblCplx] }
  ArrayOfLEmployeePositionInfo = array of LEmployeePositionInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"[GblCplx] }
  ArrayOfEmployeePositionSlimInfo = array of EmployeePositionSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"[GblCplx] }
  ArrayOfAcsBoxAccessLevelElementSlimInfo = array of AcsBoxAccessLevelElementSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"[GblCplx] }
  ArrayOfDepartmentTreeModel = array of DepartmentTreeModel2;   { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }
  ArrayOfDataForPeriodModel = array of DataForPeriodModel2;   { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }
  ArrayOfPlanModel = array of PlanModel2;       { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }
  ArrayOfAbsent = array of Absent2;             { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }
  ArrayOfDataForViolator = array of DataForViolator2;   { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }
  ArrayOfDataOnPresenceInWorkplace = array of DataOnPresenceInWorkplace2;   { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }


  // ************************************************************************ //
  // XML       : AcsBoxAccessLevelSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel
  // ************************************************************************ //
  AcsBoxAccessLevelSaveData2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FMode: BoxAccessLevelMode;
    FMode_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetMode(Index: Integer; const ABoxAccessLevelMode: BoxAccessLevelMode);
    function  Mode_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Description: string              Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property Mode:        BoxAccessLevelMode  Index (IS_OPTN) read FMode write SetMode stored Mode_Specified;
    property Name_:       string              Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsBoxAccessLevelSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel
  // ************************************************************************ //
  AcsBoxAccessLevelSaveData = class(AcsBoxAccessLevelSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : TagSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  TagSaveData2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Description: string  Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property Name_:       string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : TagSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  TagSaveData = class(TagSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsAccessLevelSlimBase, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels
  // ************************************************************************ //
  AcsAccessLevelSlimBase2 = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Name_: string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsAccessLevelSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels
  // ************************************************************************ //
  AcsAccessLevelSaveData2 = class(AcsAccessLevelSlimBase2)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
  published
    property Description: string  Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsAccessLevelSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels
  // ************************************************************************ //
  AcsAccessLevelSaveData = class(AcsAccessLevelSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsAccessLevelSlimBase, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels
  // ************************************************************************ //
  AcsAccessLevelSlimBase = class(AcsAccessLevelSlimBase2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionSaveData2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Description: string  Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property Name_:       string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionSaveData = class(ReactionSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkScheduleSlimSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkScheduleSlimSaveData2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Description: string  Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property Name_:       string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkScheduleSlimSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkScheduleSlimSaveData = class(WorkScheduleSlimSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkZoneSlimSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkZoneSlimSaveData2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Description: string  Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property Name_:       string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkZoneSlimSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkZoneSlimSaveData = class(WorkZoneSlimSaveData2)
  private
  published
  end;

  ControllerIdentificationType =  type string;      { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblSmpl] }
  MainIdentificationType =  type string;      { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"[GblSmpl] }


  // ************************************************************************ //
  // XML       : EmployeeViewFieldMetadata, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeeViewFieldMetadata2 = class(TRemotable)
  private
    FFieldDBType: SqlDbType;
    FFieldDBType_Specified: boolean;
    FFieldName: string;
    FFieldName_Specified: boolean;
    FFieldType: string;
    FFieldType_Specified: boolean;
    procedure SetFieldDBType(Index: Integer; const ASqlDbType: SqlDbType);
    function  FieldDBType_Specified(Index: Integer): boolean;
    procedure SetFieldName(Index: Integer; const Astring: string);
    function  FieldName_Specified(Index: Integer): boolean;
    procedure SetFieldType(Index: Integer; const Astring: string);
    function  FieldType_Specified(Index: Integer): boolean;
  published
    property FieldDBType: SqlDbType  Index (IS_OPTN) read FFieldDBType write SetFieldDBType stored FieldDBType_Specified;
    property FieldName:   string     Index (IS_OPTN or IS_NLBL) read FFieldName write SetFieldName stored FieldName_Specified;
    property FieldType:   string     Index (IS_OPTN or IS_NLBL) read FFieldType write SetFieldType stored FieldType_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmployeeViewFieldMetadata, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeeViewFieldMetadata = class(EmployeeViewFieldMetadata2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ScreenLayoutSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout
  // ************************************************************************ //
  ScreenLayoutSaveData2 = class(TRemotable)
  private
    FAspectRatio: ScreenAspectRatio;
    FAspectRatio_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FScaleMode: ScreenScaleMode;
    FScaleMode_Specified: boolean;
    FShowGrid: Boolean;
    FShowGrid_Specified: boolean;
    FShowName: Boolean;
    FShowName_Specified: boolean;
    procedure SetAspectRatio(Index: Integer; const AScreenAspectRatio: ScreenAspectRatio);
    function  AspectRatio_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetScaleMode(Index: Integer; const AScreenScaleMode: ScreenScaleMode);
    function  ScaleMode_Specified(Index: Integer): boolean;
    procedure SetShowGrid(Index: Integer; const ABoolean: Boolean);
    function  ShowGrid_Specified(Index: Integer): boolean;
    procedure SetShowName(Index: Integer; const ABoolean: Boolean);
    function  ShowName_Specified(Index: Integer): boolean;
  published
    property AspectRatio: ScreenAspectRatio  Index (IS_OPTN) read FAspectRatio write SetAspectRatio stored AspectRatio_Specified;
    property Name_:       string             Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property ScaleMode:   ScreenScaleMode    Index (IS_OPTN) read FScaleMode write SetScaleMode stored ScaleMode_Specified;
    property ShowGrid:    Boolean            Index (IS_OPTN) read FShowGrid write SetShowGrid stored ShowGrid_Specified;
    property ShowName:    Boolean            Index (IS_OPTN) read FShowName write SetShowName stored ShowName_Specified;
  end;



  // ************************************************************************ //
  // XML       : ScreenLayoutSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout
  // ************************************************************************ //
  ScreenLayoutSaveData = class(ScreenLayoutSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionExecuteProgramActionSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionExecuteProgramActionSaveData2 = class(TRemotable)
  private
    FArgs: string;
    FArgs_Specified: boolean;
    FFilePath: string;
    FFilePath_Specified: boolean;
    FIsUseEventInfoForArgs: Boolean;
    FIsUseEventInfoForArgs_Specified: boolean;
    FWorkingDir: string;
    FWorkingDir_Specified: boolean;
    procedure SetArgs(Index: Integer; const Astring: string);
    function  Args_Specified(Index: Integer): boolean;
    procedure SetFilePath(Index: Integer; const Astring: string);
    function  FilePath_Specified(Index: Integer): boolean;
    procedure SetIsUseEventInfoForArgs(Index: Integer; const ABoolean: Boolean);
    function  IsUseEventInfoForArgs_Specified(Index: Integer): boolean;
    procedure SetWorkingDir(Index: Integer; const Astring: string);
    function  WorkingDir_Specified(Index: Integer): boolean;
  published
    property Args:                  string   Index (IS_OPTN or IS_NLBL) read FArgs write SetArgs stored Args_Specified;
    property FilePath:              string   Index (IS_OPTN or IS_NLBL) read FFilePath write SetFilePath stored FilePath_Specified;
    property IsUseEventInfoForArgs: Boolean  Index (IS_OPTN) read FIsUseEventInfoForArgs write SetIsUseEventInfoForArgs stored IsUseEventInfoForArgs_Specified;
    property WorkingDir:            string   Index (IS_OPTN or IS_NLBL) read FWorkingDir write SetWorkingDir stored WorkingDir_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionExecuteProgramActionSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionExecuteProgramActionSaveData = class(ReactionExecuteProgramActionSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionExecuteProgramActionSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionExecuteProgramActionSlimInfo2 = class(ReactionExecuteProgramActionSaveData2)
  private
    FCommonData: ReactionActionSlimInfo2;
    FCommonData_Specified: boolean;
    procedure SetCommonData(Index: Integer; const AReactionActionSlimInfo2: ReactionActionSlimInfo2);
    function  CommonData_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CommonData: ReactionActionSlimInfo2  Index (IS_OPTN or IS_NLBL) read FCommonData write SetCommonData stored CommonData_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionExecuteProgramActionSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionExecuteProgramActionSlimInfo = class(ReactionExecuteProgramActionSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionEventSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionEventSaveData2 = class(TRemotable)
  private
    FIsActive: Boolean;
    FIsActive_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetIsActive(Index: Integer; const ABoolean: Boolean);
    function  IsActive_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property IsActive: Boolean  Index (IS_OPTN) read FIsActive write SetIsActive stored IsActive_Specified;
    property Name_:    string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionEventSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionEventSaveData = class(ReactionEventSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsAccessPointBase, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints
  // ************************************************************************ //
  AcsAccessPointBase2 = class(TRemotable)
  private
    FAntipassback: Boolean;
    FAntipassback_Specified: boolean;
    FControllerIdentification: ControllerIdentificationType;
    FControllerIdentification_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FDontCheckExternalResolution: Boolean;
    FDontCheckExternalResolution_Specified: boolean;
    FDontRequireOpConfirmation: Boolean;
    FDontRequireOpConfirmation_Specified: boolean;
    FIsGuardOffModeOn: Boolean;
    FIsGuardOffModeOn_Specified: boolean;
    FIsGuardOnModeOn: Boolean;
    FIsGuardOnModeOn_Specified: boolean;
    FIsLockModeOn: Boolean;
    FIsLockModeOn_Specified: boolean;
    FIsMultiIdentification: Boolean;
    FIsMultiIdentification_Specified: boolean;
    FIsOpenForALongTimeModeOn: Boolean;
    FIsOpenForALongTimeModeOn_Specified: boolean;
    FMainIdentification: MainIdentificationType;
    FMainIdentification_Specified: boolean;
    FOrderedServerIdentification: ArrayOfServerIdentificationType;
    FOrderedServerIdentification_Specified: boolean;
    FOrderedServerIdentificationInString: string;
    FOrderedServerIdentificationInString_Specified: boolean;
    FPassageByRuleOfTwoPersonsMode: PassageByRuleOfTwoPersonsMode;
    FPassageByRuleOfTwoPersonsMode_Specified: boolean;
    FServerAlcoFrame: Boolean;
    FServerAlcoFrame_Specified: boolean;
    FServerFace: Boolean;
    FServerFace_Specified: boolean;
    FServerVehicle: Boolean;
    FServerVehicle_Specified: boolean;
    FUseHolidaysAndTransfers: Boolean;
    FUseHolidaysAndTransfers_Specified: boolean;
    procedure SetAntipassback(Index: Integer; const ABoolean: Boolean);
    function  Antipassback_Specified(Index: Integer): boolean;
    procedure SetControllerIdentification(Index: Integer; const AControllerIdentificationType: ControllerIdentificationType);
    function  ControllerIdentification_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetDontCheckExternalResolution(Index: Integer; const ABoolean: Boolean);
    function  DontCheckExternalResolution_Specified(Index: Integer): boolean;
    procedure SetDontRequireOpConfirmation(Index: Integer; const ABoolean: Boolean);
    function  DontRequireOpConfirmation_Specified(Index: Integer): boolean;
    procedure SetIsGuardOffModeOn(Index: Integer; const ABoolean: Boolean);
    function  IsGuardOffModeOn_Specified(Index: Integer): boolean;
    procedure SetIsGuardOnModeOn(Index: Integer; const ABoolean: Boolean);
    function  IsGuardOnModeOn_Specified(Index: Integer): boolean;
    procedure SetIsLockModeOn(Index: Integer; const ABoolean: Boolean);
    function  IsLockModeOn_Specified(Index: Integer): boolean;
    procedure SetIsMultiIdentification(Index: Integer; const ABoolean: Boolean);
    function  IsMultiIdentification_Specified(Index: Integer): boolean;
    procedure SetIsOpenForALongTimeModeOn(Index: Integer; const ABoolean: Boolean);
    function  IsOpenForALongTimeModeOn_Specified(Index: Integer): boolean;
    procedure SetMainIdentification(Index: Integer; const AMainIdentificationType: MainIdentificationType);
    function  MainIdentification_Specified(Index: Integer): boolean;
    procedure SetOrderedServerIdentification(Index: Integer; const AArrayOfServerIdentificationType: ArrayOfServerIdentificationType);
    function  OrderedServerIdentification_Specified(Index: Integer): boolean;
    procedure SetOrderedServerIdentificationInString(Index: Integer; const Astring: string);
    function  OrderedServerIdentificationInString_Specified(Index: Integer): boolean;
    procedure SetPassageByRuleOfTwoPersonsMode(Index: Integer; const APassageByRuleOfTwoPersonsMode: PassageByRuleOfTwoPersonsMode);
    function  PassageByRuleOfTwoPersonsMode_Specified(Index: Integer): boolean;
    procedure SetServerAlcoFrame(Index: Integer; const ABoolean: Boolean);
    function  ServerAlcoFrame_Specified(Index: Integer): boolean;
    procedure SetServerFace(Index: Integer; const ABoolean: Boolean);
    function  ServerFace_Specified(Index: Integer): boolean;
    procedure SetServerVehicle(Index: Integer; const ABoolean: Boolean);
    function  ServerVehicle_Specified(Index: Integer): boolean;
    procedure SetUseHolidaysAndTransfers(Index: Integer; const ABoolean: Boolean);
    function  UseHolidaysAndTransfers_Specified(Index: Integer): boolean;
  published
    property Antipassback:                        Boolean                          Index (IS_OPTN or IS_NLBL) read FAntipassback write SetAntipassback stored Antipassback_Specified;
    property ControllerIdentification:            ControllerIdentificationType     Index (IS_OPTN) read FControllerIdentification write SetControllerIdentification stored ControllerIdentification_Specified;
    property Description:                         string                           Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property DontCheckExternalResolution:         Boolean                          Index (IS_OPTN or IS_NLBL) read FDontCheckExternalResolution write SetDontCheckExternalResolution stored DontCheckExternalResolution_Specified;
    property DontRequireOpConfirmation:           Boolean                          Index (IS_OPTN or IS_NLBL) read FDontRequireOpConfirmation write SetDontRequireOpConfirmation stored DontRequireOpConfirmation_Specified;
    property IsGuardOffModeOn:                    Boolean                          Index (IS_OPTN or IS_NLBL) read FIsGuardOffModeOn write SetIsGuardOffModeOn stored IsGuardOffModeOn_Specified;
    property IsGuardOnModeOn:                     Boolean                          Index (IS_OPTN or IS_NLBL) read FIsGuardOnModeOn write SetIsGuardOnModeOn stored IsGuardOnModeOn_Specified;
    property IsLockModeOn:                        Boolean                          Index (IS_OPTN or IS_NLBL) read FIsLockModeOn write SetIsLockModeOn stored IsLockModeOn_Specified;
    property IsMultiIdentification:               Boolean                          Index (IS_OPTN or IS_NLBL) read FIsMultiIdentification write SetIsMultiIdentification stored IsMultiIdentification_Specified;
    property IsOpenForALongTimeModeOn:            Boolean                          Index (IS_OPTN or IS_NLBL) read FIsOpenForALongTimeModeOn write SetIsOpenForALongTimeModeOn stored IsOpenForALongTimeModeOn_Specified;
    property MainIdentification:                  MainIdentificationType           Index (IS_OPTN) read FMainIdentification write SetMainIdentification stored MainIdentification_Specified;
    property OrderedServerIdentification:         ArrayOfServerIdentificationType  Index (IS_OPTN or IS_NLBL) read FOrderedServerIdentification write SetOrderedServerIdentification stored OrderedServerIdentification_Specified;
    property OrderedServerIdentificationInString: string                           Index (IS_OPTN or IS_NLBL) read FOrderedServerIdentificationInString write SetOrderedServerIdentificationInString stored OrderedServerIdentificationInString_Specified;
    property PassageByRuleOfTwoPersonsMode:       PassageByRuleOfTwoPersonsMode    Index (IS_OPTN) read FPassageByRuleOfTwoPersonsMode write SetPassageByRuleOfTwoPersonsMode stored PassageByRuleOfTwoPersonsMode_Specified;
    property ServerAlcoFrame:                     Boolean                          Index (IS_OPTN or IS_NLBL) read FServerAlcoFrame write SetServerAlcoFrame stored ServerAlcoFrame_Specified;
    property ServerFace:                          Boolean                          Index (IS_OPTN or IS_NLBL) read FServerFace write SetServerFace stored ServerFace_Specified;
    property ServerVehicle:                       Boolean                          Index (IS_OPTN or IS_NLBL) read FServerVehicle write SetServerVehicle stored ServerVehicle_Specified;
    property UseHolidaysAndTransfers:             Boolean                          Index (IS_OPTN or IS_NLBL) read FUseHolidaysAndTransfers write SetUseHolidaysAndTransfers stored UseHolidaysAndTransfers_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsAccessPointBase, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints
  // ************************************************************************ //
  AcsAccessPointBase = class(AcsAccessPointBase2)
  private
  published
  end;

  guid            =  type string;      { "http://schemas.microsoft.com/2003/10/Serialization/"[GblSmpl] }


  // ************************************************************************ //
  // XML       : DepartmentTreeModel, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  DepartmentTreeModel2 = class(TRemotable)
  private
    FHasChild: Boolean;
    FHasChild_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FIsInherited: Boolean;
    FIsInherited_Specified: boolean;
    FList: string;
    FList_Specified: boolean;
    FListName: string;
    FListName_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FParentID: guid;
    FParentID_Specified: boolean;
    procedure SetHasChild(Index: Integer; const ABoolean: Boolean);
    function  HasChild_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetIsInherited(Index: Integer; const ABoolean: Boolean);
    function  IsInherited_Specified(Index: Integer): boolean;
    procedure SetList(Index: Integer; const Astring: string);
    function  List_Specified(Index: Integer): boolean;
    procedure SetListName(Index: Integer; const Astring: string);
    function  ListName_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetParentID(Index: Integer; const Aguid: guid);
    function  ParentID_Specified(Index: Integer): boolean;
  published
    property HasChild:    Boolean  Index (IS_OPTN) read FHasChild write SetHasChild stored HasChild_Specified;
    property Id:          guid     Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property IsInherited: Boolean  Index (IS_OPTN) read FIsInherited write SetIsInherited stored IsInherited_Specified;
    property List:        string   Index (IS_OPTN or IS_NLBL) read FList write SetList stored List_Specified;
    property ListName:    string   Index (IS_OPTN or IS_NLBL) read FListName write SetListName stored ListName_Specified;
    property Name_:       string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property ParentID:    guid     Index (IS_OPTN or IS_NLBL) read FParentID write SetParentID stored ParentID_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmployeePositionSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS
  // ************************************************************************ //
  EmployeePositionSlimInfo2 = class(TRemotable)
  private
    FId: guid;
    FId_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Id:        guid     Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property IsRemoved: Boolean  Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
    property Name_:     string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : EmployeePositionSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS
  // ************************************************************************ //
  EmployeePositionSlimInfo = class(EmployeePositionSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LEmployeePositionInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS
  // ************************************************************************ //
  LEmployeePositionInfo2 = class(TRemotable)
  private
    FCode: string;
    FCode_Specified: boolean;
    FComment: string;
    FComment_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetCode(Index: Integer; const Astring: string);
    function  Code_Specified(Index: Integer): boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Code:      string   Index (IS_OPTN or IS_NLBL) read FCode write SetCode stored Code_Specified;
    property Comment:   string   Index (IS_OPTN or IS_NLBL) read FComment write SetComment stored Comment_Specified;
    property ID:        guid     Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property IsRemoved: Boolean  Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
    property Name_:     string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : LEmployeePositionInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS
  // ************************************************************************ //
  LEmployeePositionInfo = class(LEmployeePositionInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsBoxAccessLevelSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel
  // ************************************************************************ //
  AcsBoxAccessLevelSlimInfo2 = class(AcsBoxAccessLevelSaveData2)
  private
    FBoxAccessElements: ArrayOfAcsBoxAccessLevelElementSlimInfo;
    FBoxAccessElements_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    procedure SetBoxAccessElements(Index: Integer; const AArrayOfAcsBoxAccessLevelElementSlimInfo: ArrayOfAcsBoxAccessLevelElementSlimInfo);
    function  BoxAccessElements_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property BoxAccessElements: ArrayOfAcsBoxAccessLevelElementSlimInfo  Index (IS_OPTN or IS_NLBL) read FBoxAccessElements write SetBoxAccessElements stored BoxAccessElements_Specified;
    property Id:                guid                                     Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property IsRemoved:         Boolean                                  Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsBoxAccessLevelSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel
  // ************************************************************************ //
  AcsBoxAccessLevelSlimInfo = class(AcsBoxAccessLevelSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsAccessLevelSimpleInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels
  // ************************************************************************ //
  AcsAccessLevelSimpleInfo2 = class(AcsAccessLevelSlimBase2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsAccessLevelSimpleInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels
  // ************************************************************************ //
  AcsAccessLevelSimpleInfo = class(AcsAccessLevelSimpleInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ScreenLayoutInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout
  // ************************************************************************ //
  ScreenLayoutInfo2 = class(ScreenLayoutSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    FRootCell: ScreenCellTreeInfo2;
    FRootCell_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetRootCell(Index: Integer; const AScreenCellTreeInfo2: ScreenCellTreeInfo2);
    function  RootCell_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Id:       guid                 Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property RootCell: ScreenCellTreeInfo2  Index (IS_OPTN or IS_NLBL) read FRootCell write SetRootCell stored RootCell_Specified;
  end;



  // ************************************************************************ //
  // XML       : ScreenLayoutInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout
  // ************************************************************************ //
  ScreenLayoutInfo = class(ScreenLayoutInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionEventsFromDevicesSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionEventsFromDevicesSaveData2 = class(TRemotable)
  private
    FEventsFromAnyDevice: Boolean;
    FEventsFromAnyDevice_Specified: boolean;
    FEventsWithAnyKnownEmployee: Boolean;
    FEventsWithAnyKnownEmployee_Specified: boolean;
    FEventsWithAnySubtype: Boolean;
    FEventsWithAnySubtype_Specified: boolean;
    FEventsWithUnknownEmployee: Boolean;
    FEventsWithUnknownEmployee_Specified: boolean;
    FScheduleId: guid;
    FScheduleId_Specified: boolean;
    procedure SetEventsFromAnyDevice(Index: Integer; const ABoolean: Boolean);
    function  EventsFromAnyDevice_Specified(Index: Integer): boolean;
    procedure SetEventsWithAnyKnownEmployee(Index: Integer; const ABoolean: Boolean);
    function  EventsWithAnyKnownEmployee_Specified(Index: Integer): boolean;
    procedure SetEventsWithAnySubtype(Index: Integer; const ABoolean: Boolean);
    function  EventsWithAnySubtype_Specified(Index: Integer): boolean;
    procedure SetEventsWithUnknownEmployee(Index: Integer; const ABoolean: Boolean);
    function  EventsWithUnknownEmployee_Specified(Index: Integer): boolean;
    procedure SetScheduleId(Index: Integer; const Aguid: guid);
    function  ScheduleId_Specified(Index: Integer): boolean;
  published
    property EventsFromAnyDevice:        Boolean  Index (IS_OPTN) read FEventsFromAnyDevice write SetEventsFromAnyDevice stored EventsFromAnyDevice_Specified;
    property EventsWithAnyKnownEmployee: Boolean  Index (IS_OPTN) read FEventsWithAnyKnownEmployee write SetEventsWithAnyKnownEmployee stored EventsWithAnyKnownEmployee_Specified;
    property EventsWithAnySubtype:       Boolean  Index (IS_OPTN) read FEventsWithAnySubtype write SetEventsWithAnySubtype stored EventsWithAnySubtype_Specified;
    property EventsWithUnknownEmployee:  Boolean  Index (IS_OPTN) read FEventsWithUnknownEmployee write SetEventsWithUnknownEmployee stored EventsWithUnknownEmployee_Specified;
    property ScheduleId:                 guid     Index (IS_OPTN or IS_NLBL) read FScheduleId write SetScheduleId stored ScheduleId_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionEventsFromDevicesSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionEventsFromDevicesSaveData = class(ReactionEventsFromDevicesSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionEventsFromDevicesSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionEventsFromDevicesSlimInfo2 = class(ReactionEventsFromDevicesSaveData2)
  private
    FCommonData: ReactionEventSlimInfo2;
    FCommonData_Specified: boolean;
    procedure SetCommonData(Index: Integer; const AReactionEventSlimInfo2: ReactionEventSlimInfo2);
    function  CommonData_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CommonData: ReactionEventSlimInfo2  Index (IS_OPTN or IS_NLBL) read FCommonData write SetCommonData stored CommonData_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionEventsFromDevicesSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionEventsFromDevicesSlimInfo = class(ReactionEventsFromDevicesSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : UserPassEditorData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass
  // ************************************************************************ //
  UserPassEditorData2 = class(UserPassEditorSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN or IS_NLBL) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : UserPassEditorData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass
  // ************************************************************************ //
  UserPassEditorData = class(UserPassEditorData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionEventSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionEventSlimInfo2 = class(ReactionEventSaveData2)
  private
    FEventType: ReactionEventType;
    FEventType_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FReactionId: guid;
    FReactionId_Specified: boolean;
    procedure SetEventType(Index: Integer; const AReactionEventType: ReactionEventType);
    function  EventType_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetReactionId(Index: Integer; const Aguid: guid);
    function  ReactionId_Specified(Index: Integer): boolean;
  published
    property EventType:  ReactionEventType  Index (IS_OPTN) read FEventType write SetEventType stored EventType_Specified;
    property Id:         guid               Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property ReactionId: guid               Index (IS_OPTN) read FReactionId write SetReactionId stored ReactionId_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionEventSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionEventSlimInfo = class(ReactionEventSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionSlimInfo2 = class(TRemotable)
  private
    FId: guid;
    FId_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Id:    guid    Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property Name_: string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionSlimInfo = class(ReactionSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionFullInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionFullInfo2 = class(ReactionSlimInfo2)
  private
    FActions: ArrayOfReactionActionSlimInfo;
    FActions_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FEvents: ArrayOfReactionEventSlimInfo;
    FEvents_Specified: boolean;
    procedure SetActions(Index: Integer; const AArrayOfReactionActionSlimInfo: ArrayOfReactionActionSlimInfo);
    function  Actions_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetEvents(Index: Integer; const AArrayOfReactionEventSlimInfo: ArrayOfReactionEventSlimInfo);
    function  Events_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Actions:     ArrayOfReactionActionSlimInfo  Index (IS_OPTN or IS_NLBL) read FActions write SetActions stored Actions_Specified;
    property Description: string                         Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property Events:      ArrayOfReactionEventSlimInfo   Index (IS_OPTN or IS_NLBL) read FEvents write SetEvents stored Events_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionFullInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionFullInfo = class(ReactionFullInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkScheduleSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkScheduleSlimInfo2 = class(WorkScheduleSlimSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkScheduleSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkScheduleSlimInfo = class(WorkScheduleSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkZoneSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkZoneSlimInfo2 = class(WorkZoneSlimSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkZoneSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkZoneSlimInfo = class(WorkZoneSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkZonesAccessPointBase, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkZonesAccessPointBase2 = class(TRemotable)
  private
    FAccesPointType: WorkZonesAccessPointType;
    FAccesPointType_Specified: boolean;
    FEventType: WorkZonesAccessPointEventType;
    FEventType_Specified: boolean;
    FWorkZoneId: guid;
    FWorkZoneId_Specified: boolean;
    procedure SetAccesPointType(Index: Integer; const AWorkZonesAccessPointType: WorkZonesAccessPointType);
    function  AccesPointType_Specified(Index: Integer): boolean;
    procedure SetEventType(Index: Integer; const AWorkZonesAccessPointEventType: WorkZonesAccessPointEventType);
    function  EventType_Specified(Index: Integer): boolean;
    procedure SetWorkZoneId(Index: Integer; const Aguid: guid);
    function  WorkZoneId_Specified(Index: Integer): boolean;
  published
    property AccesPointType: WorkZonesAccessPointType       Index (IS_OPTN) read FAccesPointType write SetAccesPointType stored AccesPointType_Specified;
    property EventType:      WorkZonesAccessPointEventType  Index (IS_OPTN) read FEventType write SetEventType stored EventType_Specified;
    property WorkZoneId:     guid                           Index (IS_OPTN) read FWorkZoneId write SetWorkZoneId stored WorkZoneId_Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkZonesAccessPointBase, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkZonesAccessPointBase = class(WorkZonesAccessPointBase2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkZonesAccessPointSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkZonesAccessPointSlimInfo2 = class(WorkZonesAccessPointBase2)
  private
    FAcsAccessPointDriverInfo: AcsAccessPointDriverInfo2;
    FAcsAccessPointDriverInfo_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    procedure SetAcsAccessPointDriverInfo(Index: Integer; const AAcsAccessPointDriverInfo2: AcsAccessPointDriverInfo2);
    function  AcsAccessPointDriverInfo_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AcsAccessPointDriverInfo: AcsAccessPointDriverInfo2  Index (IS_OPTN or IS_NLBL) read FAcsAccessPointDriverInfo write SetAcsAccessPointDriverInfo stored AcsAccessPointDriverInfo_Specified;
    property Id:                       guid                       Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkZonesAccessPointSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkZonesAccessPointSlimInfo = class(WorkZonesAccessPointSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkZonesAccessPointSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkZonesAccessPointSaveData2 = class(WorkZonesAccessPointBase2)
  private
    FDriverID: guid;
    FDriverID_Specified: boolean;
    procedure SetDriverID(Index: Integer; const Aguid: guid);
    function  DriverID_Specified(Index: Integer): boolean;
  published
    property DriverID: guid  Index (IS_OPTN) read FDriverID write SetDriverID stored DriverID_Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkZonesAccessPointSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkZonesAccessPointSaveData = class(WorkZonesAccessPointSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsAccessPointSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints
  // ************************************************************************ //
  AcsAccessPointSaveData2 = class(AcsAccessPointBase2)
  private
    FAcsBoxAccessLevelID: guid;
    FAcsBoxAccessLevelID_Specified: boolean;
    FScheduleId: guid;
    FScheduleId_Specified: boolean;
    procedure SetAcsBoxAccessLevelID(Index: Integer; const Aguid: guid);
    function  AcsBoxAccessLevelID_Specified(Index: Integer): boolean;
    procedure SetScheduleId(Index: Integer; const Aguid: guid);
    function  ScheduleId_Specified(Index: Integer): boolean;
  published
    property AcsBoxAccessLevelID: guid  Index (IS_OPTN or IS_NLBL) read FAcsBoxAccessLevelID write SetAcsBoxAccessLevelID stored AcsBoxAccessLevelID_Specified;
    property ScheduleId:          guid  Index (IS_OPTN) read FScheduleId write SetScheduleId stored ScheduleId_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsAccessPointSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints
  // ************************************************************************ //
  AcsAccessPointSaveData = class(AcsAccessPointSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsAccessPointSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints
  // ************************************************************************ //
  AcsAccessPointSlimInfo2 = class(AcsAccessPointBase2)
  private
    FAcsAccessLevelId: guid;
    FAcsAccessLevelId_Specified: boolean;
    FAcsAccessPointDriverInfo: AcsAccessPointDriverInfo2;
    FAcsAccessPointDriverInfo_Specified: boolean;
    FBoxAccessLevel: AcsBoxAccessLevelSlimInfo2;
    FBoxAccessLevel_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    FSchedule: AcsScheduleSlimInfo2;
    FSchedule_Specified: boolean;
    procedure SetAcsAccessLevelId(Index: Integer; const Aguid: guid);
    function  AcsAccessLevelId_Specified(Index: Integer): boolean;
    procedure SetAcsAccessPointDriverInfo(Index: Integer; const AAcsAccessPointDriverInfo2: AcsAccessPointDriverInfo2);
    function  AcsAccessPointDriverInfo_Specified(Index: Integer): boolean;
    procedure SetBoxAccessLevel(Index: Integer; const AAcsBoxAccessLevelSlimInfo2: AcsBoxAccessLevelSlimInfo2);
    function  BoxAccessLevel_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
    procedure SetSchedule(Index: Integer; const AAcsScheduleSlimInfo2: AcsScheduleSlimInfo2);
    function  Schedule_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AcsAccessLevelId:         guid                        Index (IS_OPTN) read FAcsAccessLevelId write SetAcsAccessLevelId stored AcsAccessLevelId_Specified;
    property AcsAccessPointDriverInfo: AcsAccessPointDriverInfo2   Index (IS_OPTN or IS_NLBL) read FAcsAccessPointDriverInfo write SetAcsAccessPointDriverInfo stored AcsAccessPointDriverInfo_Specified;
    property BoxAccessLevel:           AcsBoxAccessLevelSlimInfo2  Index (IS_OPTN or IS_NLBL) read FBoxAccessLevel write SetBoxAccessLevel stored BoxAccessLevel_Specified;
    property Id:                       guid                        Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property IsRemoved:                Boolean                     Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
    property Schedule:                 AcsScheduleSlimInfo2        Index (IS_OPTN or IS_NLBL) read FSchedule write SetSchedule stored Schedule_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsAccessPointSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints
  // ************************************************************************ //
  AcsAccessPointSlimInfo = class(AcsAccessPointSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsVehicleSearched, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsVehicleSearched2 = class(TRemotable)
  private
    FGroupID: guid;
    FGroupID_Specified: boolean;
    FVehicleID: guid;
    FVehicleID_Specified: boolean;
    procedure SetGroupID(Index: Integer; const Aguid: guid);
    function  GroupID_Specified(Index: Integer): boolean;
    procedure SetVehicleID(Index: Integer; const Aguid: guid);
    function  VehicleID_Specified(Index: Integer): boolean;
  published
    property GroupID:   guid  Index (IS_OPTN) read FGroupID write SetGroupID stored GroupID_Specified;
    property VehicleID: guid  Index (IS_OPTN) read FVehicleID write SetVehicleID stored VehicleID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsVehicleSearched, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsVehicleSearched = class(AcsVehicleSearched2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeFaceVector, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeFaceVector2 = class(TRemotable)
  private
    FEmployeeID: guid;
    FEmployeeID_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FSourceName: string;
    FSourceName_Specified: boolean;
    FSourcePath: string;
    FSourcePath_Specified: boolean;
    FSourceType: FaceSourceType;
    FSourceType_Specified: boolean;
    procedure SetEmployeeID(Index: Integer; const Aguid: guid);
    function  EmployeeID_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetSourceName(Index: Integer; const Astring: string);
    function  SourceName_Specified(Index: Integer): boolean;
    procedure SetSourcePath(Index: Integer; const Astring: string);
    function  SourcePath_Specified(Index: Integer): boolean;
    procedure SetSourceType(Index: Integer; const AFaceSourceType: FaceSourceType);
    function  SourceType_Specified(Index: Integer): boolean;
  published
    property EmployeeID: guid            Index (IS_OPTN) read FEmployeeID write SetEmployeeID stored EmployeeID_Specified;
    property ID:         guid            Index (IS_OPTN or IS_NLBL) read FID write SetID stored ID_Specified;
    property Name_:      string          Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property SourceName: string          Index (IS_OPTN or IS_NLBL) read FSourceName write SetSourceName stored SourceName_Specified;
    property SourcePath: string          Index (IS_OPTN or IS_NLBL) read FSourcePath write SetSourcePath stored SourcePath_Specified;
    property SourceType: FaceSourceType  Index (IS_OPTN) read FSourceType write SetSourceType stored SourceType_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeFaceVector, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeFaceVector = class(AcsEmployeeFaceVector2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeFaceVectorFull, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeFaceVectorFull2 = class(AcsEmployeeFaceVector2)
  private
    FFaceVector: TArray<System.Byte>;
    FFaceVector_Specified: boolean;
    FImage: TArray<System.Byte>;
    FImage_Specified: boolean;
    FInfo: string;
    FInfo_Specified: boolean;
    procedure SetFaceVector(Index: Integer; const ATArray: TArray<System.Byte>);
    function  FaceVector_Specified(Index: Integer): boolean;
    procedure SetImage(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Image_Specified(Index: Integer): boolean;
    procedure SetInfo(Index: Integer; const Astring: string);
    function  Info_Specified(Index: Integer): boolean;
  published
    property FaceVector: TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFaceVector write SetFaceVector stored FaceVector_Specified;
    property Image:      TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FImage write SetImage stored Image_Specified;
    property Info:       string               Index (IS_OPTN or IS_NLBL) read FInfo write SetInfo stored Info_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeFaceVectorFull, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeFaceVectorFull = class(AcsEmployeeFaceVectorFull2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeFaceVectorSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeFaceVectorSaveData2 = class(AcsEmployeeFaceVectorFull2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeFaceVectorSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeFaceVectorSaveData = class(AcsEmployeeFaceVectorSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmployeeShortInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeeShortInfo2 = class(TRemotable)
  private
    FEmployeeGroup: string;
    FEmployeeGroup_Specified: boolean;
    FEmployeeGroupID: guid;
    FEmployeeGroupID_Specified: boolean;
    FFIO: string;
    FFIO_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    procedure SetEmployeeGroup(Index: Integer; const Astring: string);
    function  EmployeeGroup_Specified(Index: Integer): boolean;
    procedure SetEmployeeGroupID(Index: Integer; const Aguid: guid);
    function  EmployeeGroupID_Specified(Index: Integer): boolean;
    procedure SetFIO(Index: Integer; const Astring: string);
    function  FIO_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
  published
    property EmployeeGroup:   string  Index (IS_OPTN or IS_NLBL) read FEmployeeGroup write SetEmployeeGroup stored EmployeeGroup_Specified;
    property EmployeeGroupID: guid    Index (IS_OPTN) read FEmployeeGroupID write SetEmployeeGroupID stored EmployeeGroupID_Specified;
    property FIO:             string  Index (IS_OPTN or IS_NLBL) read FFIO write SetFIO stored FIO_Specified;
    property ID:              guid    Index (IS_OPTN) read FID write SetID stored ID_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmployeeShortInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeeShortInfo = class(EmployeeShortInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployee, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployee2 = class(TRemotable)
  private
    FEmployeeID: guid;
    FEmployeeID_Specified: boolean;
    FGroupID: guid;
    FGroupID_Specified: boolean;
    procedure SetEmployeeID(Index: Integer; const Aguid: guid);
    function  EmployeeID_Specified(Index: Integer): boolean;
    procedure SetGroupID(Index: Integer; const Aguid: guid);
    function  GroupID_Specified(Index: Integer): boolean;
  published
    property EmployeeID: guid  Index (IS_OPTN) read FEmployeeID write SetEmployeeID stored EmployeeID_Specified;
    property GroupID:    guid  Index (IS_OPTN) read FGroupID write SetGroupID stored GroupID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployee, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployee = class(AcsEmployee2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeePhotosInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeePhotosInfo2 = class(TRemotable)
  private
    FFirstName: string;
    FFirstName_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    FLastName: string;
    FLastName_Specified: boolean;
    FPhotos: ArrayOfAscEmployeePhotoModificationDateTimeInfo;
    FPhotos_Specified: boolean;
    FSecondName: string;
    FSecondName_Specified: boolean;
    procedure SetFirstName(Index: Integer; const Astring: string);
    function  FirstName_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
    procedure SetLastName(Index: Integer; const Astring: string);
    function  LastName_Specified(Index: Integer): boolean;
    procedure SetPhotos(Index: Integer; const AArrayOfAscEmployeePhotoModificationDateTimeInfo: ArrayOfAscEmployeePhotoModificationDateTimeInfo);
    function  Photos_Specified(Index: Integer): boolean;
    procedure SetSecondName(Index: Integer; const Astring: string);
    function  SecondName_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property FirstName:  string                                           Index (IS_OPTN or IS_NLBL) read FFirstName write SetFirstName stored FirstName_Specified;
    property Id:         guid                                             Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property IsRemoved:  Boolean                                          Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
    property LastName:   string                                           Index (IS_OPTN or IS_NLBL) read FLastName write SetLastName stored LastName_Specified;
    property Photos:     ArrayOfAscEmployeePhotoModificationDateTimeInfo  Index (IS_OPTN or IS_NLBL) read FPhotos write SetPhotos stored Photos_Specified;
    property SecondName: string                                           Index (IS_OPTN or IS_NLBL) read FSecondName write SetSecondName stored SecondName_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeePhotosInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeePhotosInfo = class(AcsEmployeePhotosInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : Absent, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  Absent2 = class(TRemotable)
  private
    FDeparmentGuid: guid;
    FDeparmentGuid_Specified: boolean;
    FDepartmentName: string;
    FDepartmentName_Specified: boolean;
    FEmployeeGuid: guid;
    FEmployeeGuid_Specified: boolean;
    FFirstName: string;
    FFirstName_Specified: boolean;
    FLastName: string;
    FLastName_Specified: boolean;
    FPhoneNumber: string;
    FPhoneNumber_Specified: boolean;
    FPosition: string;
    FPosition_Specified: boolean;
    FSecondName: string;
    FSecondName_Specified: boolean;
    FTableNumber: Integer;
    FTableNumber_Specified: boolean;
    procedure SetDeparmentGuid(Index: Integer; const Aguid: guid);
    function  DeparmentGuid_Specified(Index: Integer): boolean;
    procedure SetDepartmentName(Index: Integer; const Astring: string);
    function  DepartmentName_Specified(Index: Integer): boolean;
    procedure SetEmployeeGuid(Index: Integer; const Aguid: guid);
    function  EmployeeGuid_Specified(Index: Integer): boolean;
    procedure SetFirstName(Index: Integer; const Astring: string);
    function  FirstName_Specified(Index: Integer): boolean;
    procedure SetLastName(Index: Integer; const Astring: string);
    function  LastName_Specified(Index: Integer): boolean;
    procedure SetPhoneNumber(Index: Integer; const Astring: string);
    function  PhoneNumber_Specified(Index: Integer): boolean;
    procedure SetPosition(Index: Integer; const Astring: string);
    function  Position_Specified(Index: Integer): boolean;
    procedure SetSecondName(Index: Integer; const Astring: string);
    function  SecondName_Specified(Index: Integer): boolean;
    procedure SetTableNumber(Index: Integer; const AInteger: Integer);
    function  TableNumber_Specified(Index: Integer): boolean;
  published
    property DeparmentGuid:  guid     Index (IS_OPTN) read FDeparmentGuid write SetDeparmentGuid stored DeparmentGuid_Specified;
    property DepartmentName: string   Index (IS_OPTN or IS_NLBL) read FDepartmentName write SetDepartmentName stored DepartmentName_Specified;
    property EmployeeGuid:   guid     Index (IS_OPTN) read FEmployeeGuid write SetEmployeeGuid stored EmployeeGuid_Specified;
    property FirstName:      string   Index (IS_OPTN or IS_NLBL) read FFirstName write SetFirstName stored FirstName_Specified;
    property LastName:       string   Index (IS_OPTN or IS_NLBL) read FLastName write SetLastName stored LastName_Specified;
    property PhoneNumber:    string   Index (IS_OPTN or IS_NLBL) read FPhoneNumber write SetPhoneNumber stored PhoneNumber_Specified;
    property Position:       string   Index (IS_OPTN or IS_NLBL) read FPosition write SetPosition stored Position_Specified;
    property SecondName:     string   Index (IS_OPTN or IS_NLBL) read FSecondName write SetSecondName stored SecondName_Specified;
    property TableNumber:    Integer  Index (IS_OPTN or IS_NLBL) read FTableNumber write SetTableNumber stored TableNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsBoxAccessElementSaveInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel
  // ************************************************************************ //
  AcsBoxAccessElementSaveInfo2 = class(TRemotable)
  private
    FAccess: Boolean;
    FAccess_Specified: boolean;
    FAcsBoxAccessLevelId: guid;
    FAcsBoxAccessLevelId_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FPosition: Integer;
    FPosition_Specified: boolean;
    procedure SetAccess(Index: Integer; const ABoolean: Boolean);
    function  Access_Specified(Index: Integer): boolean;
    procedure SetAcsBoxAccessLevelId(Index: Integer; const Aguid: guid);
    function  AcsBoxAccessLevelId_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetPosition(Index: Integer; const AInteger: Integer);
    function  Position_Specified(Index: Integer): boolean;
  published
    property Access:              Boolean  Index (IS_OPTN) read FAccess write SetAccess stored Access_Specified;
    property AcsBoxAccessLevelId: guid     Index (IS_OPTN) read FAcsBoxAccessLevelId write SetAcsBoxAccessLevelId stored AcsBoxAccessLevelId_Specified;
    property Name_:               string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property Position:            Integer  Index (IS_OPTN) read FPosition write SetPosition stored Position_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsBoxAccessLevelElementSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel
  // ************************************************************************ //
  AcsBoxAccessLevelElementSlimInfo2 = class(AcsBoxAccessElementSaveInfo2)
  private
    FId: guid;
    FId_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
  published
    property Id:        guid     Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property IsRemoved: Boolean  Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsBoxAccessLevelElementSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel
  // ************************************************************************ //
  AcsBoxAccessLevelElementSlimInfo = class(AcsBoxAccessLevelElementSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsBoxAccessElementSaveInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel
  // ************************************************************************ //
  AcsBoxAccessElementSaveInfo = class(AcsBoxAccessElementSaveInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : FavoriteFolderSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder
  // ************************************************************************ //
  FavoriteFolderSaveData2 = class(TRemotable)
  private
    FLeft: Integer;
    FLeft_Specified: boolean;
    FLevel: Integer;
    FLevel_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FParentID: guid;
    FParentID_Specified: boolean;
    FUserID: guid;
    FUserID_Specified: boolean;
    FWorkplaceID: guid;
    FWorkplaceID_Specified: boolean;
    procedure SetLeft(Index: Integer; const AInteger: Integer);
    function  Left_Specified(Index: Integer): boolean;
    procedure SetLevel(Index: Integer; const AInteger: Integer);
    function  Level_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetParentID(Index: Integer; const Aguid: guid);
    function  ParentID_Specified(Index: Integer): boolean;
    procedure SetUserID(Index: Integer; const Aguid: guid);
    function  UserID_Specified(Index: Integer): boolean;
    procedure SetWorkplaceID(Index: Integer; const Aguid: guid);
    function  WorkplaceID_Specified(Index: Integer): boolean;
  published
    property Left:        Integer  Index (IS_OPTN) read FLeft write SetLeft stored Left_Specified;
    property Level:       Integer  Index (IS_OPTN) read FLevel write SetLevel stored Level_Specified;
    property Name_:       string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property ParentID:    guid     Index (IS_OPTN or IS_NLBL) read FParentID write SetParentID stored ParentID_Specified;
    property UserID:      guid     Index (IS_OPTN or IS_NLBL) read FUserID write SetUserID stored UserID_Specified;
    property WorkplaceID: guid     Index (IS_OPTN or IS_NLBL) read FWorkplaceID write SetWorkplaceID stored WorkplaceID_Specified;
  end;



  // ************************************************************************ //
  // XML       : FavoriteFolderSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder
  // ************************************************************************ //
  FavoriteFolderSaveData = class(FavoriteFolderSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : FavoriteFolderInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder
  // ************************************************************************ //
  FavoriteFolderInfo2 = class(FavoriteFolderSaveData2)
  private
    FFavoreteFolderRelationName: string;
    FFavoreteFolderRelationName_Specified: boolean;
    FFavoreteFolderRelationPath: string;
    FFavoreteFolderRelationPath_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FLevel: Integer;
    FLevel_Specified: boolean;
    FRight: Integer;
    FRight_Specified: boolean;
    procedure SetFavoreteFolderRelationName(Index: Integer; const Astring: string);
    function  FavoreteFolderRelationName_Specified(Index: Integer): boolean;
    procedure SetFavoreteFolderRelationPath(Index: Integer; const Astring: string);
    function  FavoreteFolderRelationPath_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetLevel(Index: Integer; const AInteger: Integer);
    function  Level_Specified(Index: Integer): boolean;
    procedure SetRight(Index: Integer; const AInteger: Integer);
    function  Right_Specified(Index: Integer): boolean;
  published
    property FavoreteFolderRelationName: string   Index (IS_OPTN or IS_NLBL) read FFavoreteFolderRelationName write SetFavoreteFolderRelationName stored FavoreteFolderRelationName_Specified;
    property FavoreteFolderRelationPath: string   Index (IS_OPTN or IS_NLBL) read FFavoreteFolderRelationPath write SetFavoreteFolderRelationPath stored FavoreteFolderRelationPath_Specified;
    property ID:                         guid     Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property Level:                      Integer  Index (IS_OPTN) read FLevel write SetLevel stored Level_Specified;
    property Right:                      Integer  Index (IS_OPTN) read FRight write SetRight stored Right_Specified;
  end;



  // ************************************************************************ //
  // XML       : FavoriteFolderInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder
  // ************************************************************************ //
  FavoriteFolderInfo = class(FavoriteFolderInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : FavoriteFolderInfoWithEmployeeGroup, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder
  // ************************************************************************ //
  FavoriteFolderInfoWithEmployeeGroup2 = class(FavoriteFolderInfo2)
  private
    FGroups: ArrayOfAcsEmployeeGroup;
    FGroups_Specified: boolean;
    procedure SetGroups(Index: Integer; const AArrayOfAcsEmployeeGroup: ArrayOfAcsEmployeeGroup);
    function  Groups_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Groups: ArrayOfAcsEmployeeGroup  Index (IS_OPTN or IS_NLBL) read FGroups write SetGroups stored Groups_Specified;
  end;



  // ************************************************************************ //
  // XML       : FavoriteFolderInfoWithEmployeeGroup, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder
  // ************************************************************************ //
  FavoriteFolderInfoWithEmployeeGroup = class(FavoriteFolderInfoWithEmployeeGroup2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ScreenCellSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout
  // ************************************************************************ //
  ScreenCellSaveData2 = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FScaleMode: ScreenScaleMode;
    FScaleMode_Specified: boolean;
    FShowName: Boolean;
    FShowName_Specified: boolean;
    FX: Integer;
    FX_Specified: boolean;
    FY: Integer;
    FY_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetScaleMode(Index: Integer; const AScreenScaleMode: ScreenScaleMode);
    function  ScaleMode_Specified(Index: Integer): boolean;
    procedure SetShowName(Index: Integer; const ABoolean: Boolean);
    function  ShowName_Specified(Index: Integer): boolean;
    procedure SetX(Index: Integer; const AInteger: Integer);
    function  X_Specified(Index: Integer): boolean;
    procedure SetY(Index: Integer; const AInteger: Integer);
    function  Y_Specified(Index: Integer): boolean;
  published
    property Name_:     string           Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property ScaleMode: ScreenScaleMode  Index (IS_OPTN) read FScaleMode write SetScaleMode stored ScaleMode_Specified;
    property ShowName:  Boolean          Index (IS_OPTN) read FShowName write SetShowName stored ShowName_Specified;
    property X:         Integer          Index (IS_OPTN) read FX write SetX stored X_Specified;
    property Y:         Integer          Index (IS_OPTN) read FY write SetY stored Y_Specified;
  end;



  // ************************************************************************ //
  // XML       : ScreenCellSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout
  // ************************************************************************ //
  ScreenCellSaveData = class(ScreenCellSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ScreenCellInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout
  // ************************************************************************ //
  ScreenCellInfo2 = class(ScreenCellSaveData2)
  private
    FContentType: ScreenCellContentType;
    FContentType_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    procedure SetContentType(Index: Integer; const AScreenCellContentType: ScreenCellContentType);
    function  ContentType_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property ContentType: ScreenCellContentType  Index (IS_OPTN) read FContentType write SetContentType stored ContentType_Specified;
    property Id:          guid                   Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : ScreenCellTreeInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout
  // ************************************************************************ //
  ScreenCellTreeInfo2 = class(ScreenCellInfo2)
  private
    FChildren: ArrayOfScreenCellTreeInfo;
    FChildren_Specified: boolean;
    procedure SetChildren(Index: Integer; const AArrayOfScreenCellTreeInfo: ArrayOfScreenCellTreeInfo);
    function  Children_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Children: ArrayOfScreenCellTreeInfo  Index (IS_OPTN or IS_NLBL) read FChildren write SetChildren stored Children_Specified;
  end;



  // ************************************************************************ //
  // XML       : ScreenCellTreeInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout
  // ************************************************************************ //
  ScreenCellTreeInfo = class(ScreenCellTreeInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ScreenCellInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout
  // ************************************************************************ //
  ScreenCellInfo = class(ScreenCellInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionRecordVideoActionSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionRecordVideoActionSaveData2 = class(TRemotable)
  private
    FCameraDriverId: guid;
    FCameraDriverId_Specified: boolean;
    FRecordVideoDuration: Integer;
    FRecordVideoDuration_Specified: boolean;
    FRecordVideoFromBufferDuration: Integer;
    FRecordVideoFromBufferDuration_Specified: boolean;
    FRecordVideoPlayOffset: Integer;
    FRecordVideoPlayOffset_Specified: boolean;
    procedure SetCameraDriverId(Index: Integer; const Aguid: guid);
    function  CameraDriverId_Specified(Index: Integer): boolean;
    procedure SetRecordVideoDuration(Index: Integer; const AInteger: Integer);
    function  RecordVideoDuration_Specified(Index: Integer): boolean;
    procedure SetRecordVideoFromBufferDuration(Index: Integer; const AInteger: Integer);
    function  RecordVideoFromBufferDuration_Specified(Index: Integer): boolean;
    procedure SetRecordVideoPlayOffset(Index: Integer; const AInteger: Integer);
    function  RecordVideoPlayOffset_Specified(Index: Integer): boolean;
  published
    property CameraDriverId:                guid     Index (IS_OPTN or IS_NLBL) read FCameraDriverId write SetCameraDriverId stored CameraDriverId_Specified;
    property RecordVideoDuration:           Integer  Index (IS_OPTN) read FRecordVideoDuration write SetRecordVideoDuration stored RecordVideoDuration_Specified;
    property RecordVideoFromBufferDuration: Integer  Index (IS_OPTN) read FRecordVideoFromBufferDuration write SetRecordVideoFromBufferDuration stored RecordVideoFromBufferDuration_Specified;
    property RecordVideoPlayOffset:         Integer  Index (IS_OPTN) read FRecordVideoPlayOffset write SetRecordVideoPlayOffset stored RecordVideoPlayOffset_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionRecordVideoActionSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionRecordVideoActionSlimInfo2 = class(ReactionRecordVideoActionSaveData2)
  private
    FCommonData: ReactionActionSlimInfo2;
    FCommonData_Specified: boolean;
    procedure SetCommonData(Index: Integer; const AReactionActionSlimInfo2: ReactionActionSlimInfo2);
    function  CommonData_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CommonData: ReactionActionSlimInfo2  Index (IS_OPTN or IS_NLBL) read FCommonData write SetCommonData stored CommonData_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionRecordVideoActionSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionRecordVideoActionSlimInfo = class(ReactionRecordVideoActionSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionRecordVideoActionSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionRecordVideoActionSaveData = class(ReactionRecordVideoActionSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReportSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report
  // ************************************************************************ //
  ReportSaveData2 = class(TRemotable)
  private
    FAdditionalField1: string;
    FAdditionalField1_Specified: boolean;
    FAdditionalField2: string;
    FAdditionalField2_Specified: boolean;
    FAdditionalField3: string;
    FAdditionalField3_Specified: boolean;
    FCompany: string;
    FCompany_Specified: boolean;
    FDepartment: string;
    FDepartment_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FFilter: Integer;
    FFilter_Specified: boolean;
    FIdentity: string;
    FIdentity_Specified: boolean;
    FIsShowAllDevices: Boolean;
    FIsShowAllDevices_Specified: boolean;
    FIsShowAllEmployees: Boolean;
    FIsShowAllEmployees_Specified: boolean;
    FIsShowAllEvents: Boolean;
    FIsShowAllEvents_Specified: boolean;
    FIsShowAllWorkZones: Boolean;
    FIsShowAllWorkZones_Specified: boolean;
    FIsShowEventsWithRelatedData: Boolean;
    FIsShowEventsWithRelatedData_Specified: boolean;
    FIsShowRemovedEmployees: Boolean;
    FIsShowRemovedEmployees_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetAdditionalField1(Index: Integer; const Astring: string);
    function  AdditionalField1_Specified(Index: Integer): boolean;
    procedure SetAdditionalField2(Index: Integer; const Astring: string);
    function  AdditionalField2_Specified(Index: Integer): boolean;
    procedure SetAdditionalField3(Index: Integer; const Astring: string);
    function  AdditionalField3_Specified(Index: Integer): boolean;
    procedure SetCompany(Index: Integer; const Astring: string);
    function  Company_Specified(Index: Integer): boolean;
    procedure SetDepartment(Index: Integer; const Astring: string);
    function  Department_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetFilter(Index: Integer; const AInteger: Integer);
    function  Filter_Specified(Index: Integer): boolean;
    procedure SetIdentity(Index: Integer; const Astring: string);
    function  Identity_Specified(Index: Integer): boolean;
    procedure SetIsShowAllDevices(Index: Integer; const ABoolean: Boolean);
    function  IsShowAllDevices_Specified(Index: Integer): boolean;
    procedure SetIsShowAllEmployees(Index: Integer; const ABoolean: Boolean);
    function  IsShowAllEmployees_Specified(Index: Integer): boolean;
    procedure SetIsShowAllEvents(Index: Integer; const ABoolean: Boolean);
    function  IsShowAllEvents_Specified(Index: Integer): boolean;
    procedure SetIsShowAllWorkZones(Index: Integer; const ABoolean: Boolean);
    function  IsShowAllWorkZones_Specified(Index: Integer): boolean;
    procedure SetIsShowEventsWithRelatedData(Index: Integer; const ABoolean: Boolean);
    function  IsShowEventsWithRelatedData_Specified(Index: Integer): boolean;
    procedure SetIsShowRemovedEmployees(Index: Integer; const ABoolean: Boolean);
    function  IsShowRemovedEmployees_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property AdditionalField1:            string   Index (IS_OPTN or IS_NLBL) read FAdditionalField1 write SetAdditionalField1 stored AdditionalField1_Specified;
    property AdditionalField2:            string   Index (IS_OPTN or IS_NLBL) read FAdditionalField2 write SetAdditionalField2 stored AdditionalField2_Specified;
    property AdditionalField3:            string   Index (IS_OPTN or IS_NLBL) read FAdditionalField3 write SetAdditionalField3 stored AdditionalField3_Specified;
    property Company:                     string   Index (IS_OPTN or IS_NLBL) read FCompany write SetCompany stored Company_Specified;
    property Department:                  string   Index (IS_OPTN or IS_NLBL) read FDepartment write SetDepartment stored Department_Specified;
    property Description:                 string   Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property Filter:                      Integer  Index (IS_OPTN) read FFilter write SetFilter stored Filter_Specified;
    property Identity:                    string   Index (IS_OPTN or IS_NLBL) read FIdentity write SetIdentity stored Identity_Specified;
    property IsShowAllDevices:            Boolean  Index (IS_OPTN) read FIsShowAllDevices write SetIsShowAllDevices stored IsShowAllDevices_Specified;
    property IsShowAllEmployees:          Boolean  Index (IS_OPTN) read FIsShowAllEmployees write SetIsShowAllEmployees stored IsShowAllEmployees_Specified;
    property IsShowAllEvents:             Boolean  Index (IS_OPTN) read FIsShowAllEvents write SetIsShowAllEvents stored IsShowAllEvents_Specified;
    property IsShowAllWorkZones:          Boolean  Index (IS_OPTN) read FIsShowAllWorkZones write SetIsShowAllWorkZones stored IsShowAllWorkZones_Specified;
    property IsShowEventsWithRelatedData: Boolean  Index (IS_OPTN) read FIsShowEventsWithRelatedData write SetIsShowEventsWithRelatedData stored IsShowEventsWithRelatedData_Specified;
    property IsShowRemovedEmployees:      Boolean  Index (IS_OPTN) read FIsShowRemovedEmployees write SetIsShowRemovedEmployees stored IsShowRemovedEmployees_Specified;
    property Name_:                       string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : ReportSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report
  // ************************************************************************ //
  ReportSlimInfo2 = class(ReportSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReportSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report
  // ************************************************************************ //
  ReportSlimInfo = class(ReportSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : UserPassSlimSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass
  // ************************************************************************ //
  UserPassSlimSaveData2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FHeight: Integer;
    FHeight_Specified: boolean;
    FIsStandart: Boolean;
    FIsStandart_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FStandartHeight: Integer;
    FStandartHeight_Specified: boolean;
    FStandartWidth: Integer;
    FStandartWidth_Specified: boolean;
    FWidth: Integer;
    FWidth_Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetHeight(Index: Integer; const AInteger: Integer);
    function  Height_Specified(Index: Integer): boolean;
    procedure SetIsStandart(Index: Integer; const ABoolean: Boolean);
    function  IsStandart_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetStandartHeight(Index: Integer; const AInteger: Integer);
    function  StandartHeight_Specified(Index: Integer): boolean;
    procedure SetStandartWidth(Index: Integer; const AInteger: Integer);
    function  StandartWidth_Specified(Index: Integer): boolean;
    procedure SetWidth(Index: Integer; const AInteger: Integer);
    function  Width_Specified(Index: Integer): boolean;
  published
    property Description:    string   Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property Height:         Integer  Index (IS_OPTN) read FHeight write SetHeight stored Height_Specified;
    property IsStandart:     Boolean  Index (IS_OPTN) read FIsStandart write SetIsStandart stored IsStandart_Specified;
    property Name_:          string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property StandartHeight: Integer  Index (IS_OPTN) read FStandartHeight write SetStandartHeight stored StandartHeight_Specified;
    property StandartWidth:  Integer  Index (IS_OPTN) read FStandartWidth write SetStandartWidth stored StandartWidth_Specified;
    property Width:          Integer  Index (IS_OPTN) read FWidth write SetWidth stored Width_Specified;
  end;



  // ************************************************************************ //
  // XML       : UserPassSlimData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass
  // ************************************************************************ //
  UserPassSlimData2 = class(UserPassSlimSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : UserPassSlimData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass
  // ************************************************************************ //
  UserPassSlimData = class(UserPassSlimData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : UserPassSlimSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass
  // ************************************************************************ //
  UserPassSlimSaveData = class(UserPassSlimSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : UserPassFullSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass
  // ************************************************************************ //
  UserPassFullSaveData2 = class(TRemotable)
  private
    FBackgroindImage: TArray<System.Byte>;
    FBackgroindImage_Specified: boolean;
    FBackgroundColor: TArray<System.Byte>;
    FBackgroundColor_Specified: boolean;
    FBackgroundScaleMode: ScreenScaleMode;
    FBackgroundScaleMode_Specified: boolean;
    FBackgroundType: PassBackgroundType;
    FBackgroundType_Specified: boolean;
    FHeight: Integer;
    FHeight_Specified: boolean;
    FIsStandart: Boolean;
    FIsStandart_Specified: boolean;
    FStandartHeight: Integer;
    FStandartHeight_Specified: boolean;
    FStandartWidth: Integer;
    FStandartWidth_Specified: boolean;
    FWidth: Integer;
    FWidth_Specified: boolean;
    procedure SetBackgroindImage(Index: Integer; const ATArray: TArray<System.Byte>);
    function  BackgroindImage_Specified(Index: Integer): boolean;
    procedure SetBackgroundColor(Index: Integer; const ATArray: TArray<System.Byte>);
    function  BackgroundColor_Specified(Index: Integer): boolean;
    procedure SetBackgroundScaleMode(Index: Integer; const AScreenScaleMode: ScreenScaleMode);
    function  BackgroundScaleMode_Specified(Index: Integer): boolean;
    procedure SetBackgroundType(Index: Integer; const APassBackgroundType: PassBackgroundType);
    function  BackgroundType_Specified(Index: Integer): boolean;
    procedure SetHeight(Index: Integer; const AInteger: Integer);
    function  Height_Specified(Index: Integer): boolean;
    procedure SetIsStandart(Index: Integer; const ABoolean: Boolean);
    function  IsStandart_Specified(Index: Integer): boolean;
    procedure SetStandartHeight(Index: Integer; const AInteger: Integer);
    function  StandartHeight_Specified(Index: Integer): boolean;
    procedure SetStandartWidth(Index: Integer; const AInteger: Integer);
    function  StandartWidth_Specified(Index: Integer): boolean;
    procedure SetWidth(Index: Integer; const AInteger: Integer);
    function  Width_Specified(Index: Integer): boolean;
  published
    property BackgroindImage:     TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FBackgroindImage write SetBackgroindImage stored BackgroindImage_Specified;
    property BackgroundColor:     TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FBackgroundColor write SetBackgroundColor stored BackgroundColor_Specified;
    property BackgroundScaleMode: ScreenScaleMode      Index (IS_OPTN) read FBackgroundScaleMode write SetBackgroundScaleMode stored BackgroundScaleMode_Specified;
    property BackgroundType:      PassBackgroundType   Index (IS_OPTN) read FBackgroundType write SetBackgroundType stored BackgroundType_Specified;
    property Height:              Integer              Index (IS_OPTN) read FHeight write SetHeight stored Height_Specified;
    property IsStandart:          Boolean              Index (IS_OPTN) read FIsStandart write SetIsStandart stored IsStandart_Specified;
    property StandartHeight:      Integer              Index (IS_OPTN) read FStandartHeight write SetStandartHeight stored StandartHeight_Specified;
    property StandartWidth:       Integer              Index (IS_OPTN) read FStandartWidth write SetStandartWidth stored StandartWidth_Specified;
    property Width:               Integer              Index (IS_OPTN) read FWidth write SetWidth stored Width_Specified;
  end;



  // ************************************************************************ //
  // XML       : UserPassFullSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass
  // ************************************************************************ //
  UserPassFullSaveData = class(UserPassFullSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : UserPassFullData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass
  // ************************************************************************ //
  UserPassFullData2 = class(UserPassFullSaveData2)
  private
    FUserPassEditors: ArrayOfUserPassEditorData;
    FUserPassEditors_Specified: boolean;
    procedure SetUserPassEditors(Index: Integer; const AArrayOfUserPassEditorData: ArrayOfUserPassEditorData);
    function  UserPassEditors_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property UserPassEditors: ArrayOfUserPassEditorData  Index (IS_OPTN or IS_NLBL) read FUserPassEditors write SetUserPassEditors stored UserPassEditors_Specified;
  end;



  // ************************************************************************ //
  // XML       : UserPassFullData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass
  // ************************************************************************ //
  UserPassFullData = class(UserPassFullData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionActionSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionActionSaveData2 = class(TRemotable)
  private
    FIsActive: Boolean;
    FIsActive_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FOrderNumber: Integer;
    FOrderNumber_Specified: boolean;
    procedure SetIsActive(Index: Integer; const ABoolean: Boolean);
    function  IsActive_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetOrderNumber(Index: Integer; const AInteger: Integer);
    function  OrderNumber_Specified(Index: Integer): boolean;
  published
    property IsActive:    Boolean  Index (IS_OPTN) read FIsActive write SetIsActive stored IsActive_Specified;
    property Name_:       string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property OrderNumber: Integer  Index (IS_OPTN) read FOrderNumber write SetOrderNumber stored OrderNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionActionSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionActionSlimInfo2 = class(ReactionActionSaveData2)
  private
    FActionType: ReactionActionType;
    FActionType_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FReactionId: guid;
    FReactionId_Specified: boolean;
    procedure SetActionType(Index: Integer; const AReactionActionType: ReactionActionType);
    function  ActionType_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetReactionId(Index: Integer; const Aguid: guid);
    function  ReactionId_Specified(Index: Integer): boolean;
  published
    property ActionType: ReactionActionType  Index (IS_OPTN) read FActionType write SetActionType stored ActionType_Specified;
    property Id:         guid                Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property ReactionId: guid                Index (IS_OPTN) read FReactionId write SetReactionId stored ReactionId_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionActionSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionActionSlimInfo = class(ReactionActionSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionActionSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionActionSaveData = class(ReactionActionSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DayTypeSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  DayTypeSaveData2 = class(TRemotable)
  private
    FConvention: string;
    FConvention_Specified: boolean;
    FDayMode: DayMode;
    FDayMode_Specified: boolean;
    FDigitalConvention: Integer;
    FDigitalConvention_Specified: boolean;
    FIsStandart: Boolean;
    FIsStandart_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FRowColor: TArray<System.Byte>;
    FRowColor_Specified: boolean;
    procedure SetConvention(Index: Integer; const Astring: string);
    function  Convention_Specified(Index: Integer): boolean;
    procedure SetDayMode(Index: Integer; const ADayMode: DayMode);
    function  DayMode_Specified(Index: Integer): boolean;
    procedure SetDigitalConvention(Index: Integer; const AInteger: Integer);
    function  DigitalConvention_Specified(Index: Integer): boolean;
    procedure SetIsStandart(Index: Integer; const ABoolean: Boolean);
    function  IsStandart_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetRowColor(Index: Integer; const ATArray: TArray<System.Byte>);
    function  RowColor_Specified(Index: Integer): boolean;
  published
    property Convention:        string               Index (IS_OPTN or IS_NLBL) read FConvention write SetConvention stored Convention_Specified;
    property DayMode:           DayMode              Index (IS_OPTN) read FDayMode write SetDayMode stored DayMode_Specified;
    property DigitalConvention: Integer              Index (IS_OPTN or IS_NLBL) read FDigitalConvention write SetDigitalConvention stored DigitalConvention_Specified;
    property IsStandart:        Boolean              Index (IS_OPTN) read FIsStandart write SetIsStandart stored IsStandart_Specified;
    property Name_:             string               Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property RowColor:          TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FRowColor write SetRowColor stored RowColor_Specified;
  end;



  // ************************************************************************ //
  // XML       : DayTypeSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  DayTypeSlimInfo2 = class(DayTypeSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : DayTypeSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  DayTypeSlimInfo = class(DayTypeSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DayTypeSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  DayTypeSaveData = class(DayTypeSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AccessPointData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints
  // ************************************************************************ //
  AccessPointData2 = class(TRemotable)
  private
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    FPageSize: Integer;
    FPageSize_Specified: boolean;
    FPoints: ArrayOfAcsAccessPointDriverInfo;
    FPoints_Specified: boolean;
    FTotalCount: Integer;
    FTotalCount_Specified: boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
    procedure SetPageSize(Index: Integer; const AInteger: Integer);
    function  PageSize_Specified(Index: Integer): boolean;
    procedure SetPoints(Index: Integer; const AArrayOfAcsAccessPointDriverInfo: ArrayOfAcsAccessPointDriverInfo);
    function  Points_Specified(Index: Integer): boolean;
    procedure SetTotalCount(Index: Integer; const AInteger: Integer);
    function  TotalCount_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property PageNumber: Integer                          Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
    property PageSize:   Integer                          Index (IS_OPTN) read FPageSize write SetPageSize stored PageSize_Specified;
    property Points:     ArrayOfAcsAccessPointDriverInfo  Index (IS_OPTN or IS_NLBL) read FPoints write SetPoints stored Points_Specified;
    property TotalCount: Integer                          Index (IS_OPTN) read FTotalCount write SetTotalCount stored TotalCount_Specified;
  end;



  // ************************************************************************ //
  // XML       : AccessPointData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints
  // ************************************************************************ //
  AccessPointData = class(AccessPointData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeSlimBase, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeSlimBase2 = class(TRemotable)
  private
    FComment: string;
    FComment_Specified: boolean;
    FFirstName: string;
    FFirstName_Specified: boolean;
    FIsLocked: Boolean;
    FIsLocked_Specified: boolean;
    FLastName: string;
    FLastName_Specified: boolean;
    FNumber: Integer;
    FNumber_Specified: boolean;
    FSecondName: string;
    FSecondName_Specified: boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
    procedure SetFirstName(Index: Integer; const Astring: string);
    function  FirstName_Specified(Index: Integer): boolean;
    procedure SetIsLocked(Index: Integer; const ABoolean: Boolean);
    function  IsLocked_Specified(Index: Integer): boolean;
    procedure SetLastName(Index: Integer; const Astring: string);
    function  LastName_Specified(Index: Integer): boolean;
    procedure SetNumber(Index: Integer; const AInteger: Integer);
    function  Number_Specified(Index: Integer): boolean;
    procedure SetSecondName(Index: Integer; const Astring: string);
    function  SecondName_Specified(Index: Integer): boolean;
  published
    property Comment:    string   Index (IS_OPTN or IS_NLBL) read FComment write SetComment stored Comment_Specified;
    property FirstName:  string   Index (IS_OPTN or IS_NLBL) read FFirstName write SetFirstName stored FirstName_Specified;
    property IsLocked:   Boolean  Index (IS_OPTN) read FIsLocked write SetIsLocked stored IsLocked_Specified;
    property LastName:   string   Index (IS_OPTN or IS_NLBL) read FLastName write SetLastName stored LastName_Specified;
    property Number:     Integer  Index (IS_OPTN or IS_NLBL) read FNumber write SetNumber stored Number_Specified;
    property SecondName: string   Index (IS_OPTN or IS_NLBL) read FSecondName write SetSecondName stored SecondName_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeSlimBase, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeSlimBase = class(AcsEmployeeSlimBase2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeInfo2 = class(AcsEmployeeSlimBase2)
  private
    FGroupCode: string;
    FGroupCode_Specified: boolean;
    FGroupID: guid;
    FGroupID_Specified: boolean;
    FGroupName: string;
    FGroupName_Specified: boolean;
    FGroupPath: string;
    FGroupPath_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FPositionCode: string;
    FPositionCode_Specified: boolean;
    FPositionName: string;
    FPositionName_Specified: boolean;
    FSecurityGroupID: guid;
    FSecurityGroupID_Specified: boolean;
    FSecurityGroupName: string;
    FSecurityGroupName_Specified: boolean;
    procedure SetGroupCode(Index: Integer; const Astring: string);
    function  GroupCode_Specified(Index: Integer): boolean;
    procedure SetGroupID(Index: Integer; const Aguid: guid);
    function  GroupID_Specified(Index: Integer): boolean;
    procedure SetGroupName(Index: Integer; const Astring: string);
    function  GroupName_Specified(Index: Integer): boolean;
    procedure SetGroupPath(Index: Integer; const Astring: string);
    function  GroupPath_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetPositionCode(Index: Integer; const Astring: string);
    function  PositionCode_Specified(Index: Integer): boolean;
    procedure SetPositionName(Index: Integer; const Astring: string);
    function  PositionName_Specified(Index: Integer): boolean;
    procedure SetSecurityGroupID(Index: Integer; const Aguid: guid);
    function  SecurityGroupID_Specified(Index: Integer): boolean;
    procedure SetSecurityGroupName(Index: Integer; const Astring: string);
    function  SecurityGroupName_Specified(Index: Integer): boolean;
  published
    property GroupCode:         string  Index (IS_OPTN or IS_NLBL) read FGroupCode write SetGroupCode stored GroupCode_Specified;
    property GroupID:           guid    Index (IS_OPTN) read FGroupID write SetGroupID stored GroupID_Specified;
    property GroupName:         string  Index (IS_OPTN or IS_NLBL) read FGroupName write SetGroupName stored GroupName_Specified;
    property GroupPath:         string  Index (IS_OPTN or IS_NLBL) read FGroupPath write SetGroupPath stored GroupPath_Specified;
    property ID:                guid    Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property PositionCode:      string  Index (IS_OPTN or IS_NLBL) read FPositionCode write SetPositionCode stored PositionCode_Specified;
    property PositionName:      string  Index (IS_OPTN or IS_NLBL) read FPositionName write SetPositionName stored PositionName_Specified;
    property SecurityGroupID:   guid    Index (IS_OPTN) read FSecurityGroupID write SetSecurityGroupID stored SecurityGroupID_Specified;
    property SecurityGroupName: string  Index (IS_OPTN or IS_NLBL) read FSecurityGroupName write SetSecurityGroupName stored SecurityGroupName_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeInfo = class(AcsEmployeeInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmployeesData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeesData2 = class(TRemotable)
  private
    FEmployees: ArrayOfEmployeeCurentInfo;
    FEmployees_Specified: boolean;
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    FPageSize: Integer;
    FPageSize_Specified: boolean;
    FTotalCount: Integer;
    FTotalCount_Specified: boolean;
    procedure SetEmployees(Index: Integer; const AArrayOfEmployeeCurentInfo: ArrayOfEmployeeCurentInfo);
    function  Employees_Specified(Index: Integer): boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
    procedure SetPageSize(Index: Integer; const AInteger: Integer);
    function  PageSize_Specified(Index: Integer): boolean;
    procedure SetTotalCount(Index: Integer; const AInteger: Integer);
    function  TotalCount_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Employees:  ArrayOfEmployeeCurentInfo  Index (IS_OPTN or IS_NLBL) read FEmployees write SetEmployees stored Employees_Specified;
    property PageNumber: Integer                    Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
    property PageSize:   Integer                    Index (IS_OPTN) read FPageSize write SetPageSize stored PageSize_Specified;
    property TotalCount: Integer                    Index (IS_OPTN) read FTotalCount write SetTotalCount stored TotalCount_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmployeesData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeesData = class(EmployeesData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmployeeCurentInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeeCurentInfo2 = class(TRemotable)
  private
    FEmployeeGroup: string;
    FEmployeeGroup_Specified: boolean;
    FFIO: string;
    FFIO_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FPosition: string;
    FPosition_Specified: boolean;
    FTabNumber: Integer;
    FTabNumber_Specified: boolean;
    procedure SetEmployeeGroup(Index: Integer; const Astring: string);
    function  EmployeeGroup_Specified(Index: Integer): boolean;
    procedure SetFIO(Index: Integer; const Astring: string);
    function  FIO_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetPosition(Index: Integer; const Astring: string);
    function  Position_Specified(Index: Integer): boolean;
    procedure SetTabNumber(Index: Integer; const AInteger: Integer);
    function  TabNumber_Specified(Index: Integer): boolean;
  published
    property EmployeeGroup: string   Index (IS_OPTN or IS_NLBL) read FEmployeeGroup write SetEmployeeGroup stored EmployeeGroup_Specified;
    property FIO:           string   Index (IS_OPTN or IS_NLBL) read FFIO write SetFIO stored FIO_Specified;
    property ID:            guid     Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property Position:      string   Index (IS_OPTN or IS_NLBL) read FPosition write SetPosition stored Position_Specified;
    property TabNumber:     Integer  Index (IS_OPTN or IS_NLBL) read FTabNumber write SetTabNumber stored TabNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmployeeCurentInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeeCurentInfo = class(EmployeeCurentInfo2)
  private
  published
  end;

  duration        = class(TXSDuration) end;      { "http://schemas.microsoft.com/2003/10/Serialization/"[GblSmpl] }
  FactoryType     =  type string;      { "http://schemas.microsoft.com/2003/10/Serialization/"[GblAttr] }


  // ************************************************************************ //
  // XML       : Exception, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  Exception2 = class(TRemotable)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : SystemException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  SystemException2 = class(Exception2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ArgumentException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  ArgumentException2 = class(SystemException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ArgumentNullException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  ArgumentNullException2 = class(ArgumentException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : InvalidOperationException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  InvalidOperationException2 = class(SystemException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ApplicationException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  ApplicationException2 = class(Exception2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DriverVisualStyleNotFoundException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // ************************************************************************ //
  DriverVisualStyleNotFoundException2 = class(ApplicationException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AssignmentAcsKeyException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // ************************************************************************ //
  AssignmentAcsKeyException2 = class(ApplicationException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RemoveCardTypeException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // ************************************************************************ //
  RemoveCardTypeException2 = class(ApplicationException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DriverNotFoundException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // ************************************************************************ //
  DriverNotFoundException2 = class(ApplicationException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DataNotFoundException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // ************************************************************************ //
  DataNotFoundException2 = class(ApplicationException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DataConsistencyException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // ************************************************************************ //
  DataConsistencyException2 = class(ApplicationException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DataAlreadyExistsException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // ************************************************************************ //
  DataAlreadyExistsException2 = class(ApplicationException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DataNotFoundException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // Info      : Fault
  // Base Types: Exception, ApplicationException, DataNotFoundException
  // ************************************************************************ //
  DataNotFoundException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : DataConsistencyException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // Info      : Fault
  // Base Types: Exception, ApplicationException, DataConsistencyException
  // ************************************************************************ //
  DataConsistencyException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : DataAlreadyExistsException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // Info      : Fault
  // Base Types: Exception, ApplicationException, DataAlreadyExistsException
  // ************************************************************************ //
  DataAlreadyExistsException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : DriverNotFoundException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // Info      : Fault
  // Base Types: Exception, ApplicationException, DriverNotFoundException
  // ************************************************************************ //
  DriverNotFoundException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : RemoveCardTypeException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // Info      : Fault
  // Base Types: Exception, ApplicationException, RemoveCardTypeException
  // ************************************************************************ //
  RemoveCardTypeException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : DriverVisualStyleNotFoundException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // Info      : Fault
  // Base Types: Exception, ApplicationException, DriverVisualStyleNotFoundException
  // ************************************************************************ //
  DriverVisualStyleNotFoundException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : AssignmentAcsKeyException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions
  // Info      : Fault
  // Base Types: Exception, ApplicationException, AssignmentAcsKeyException
  // ************************************************************************ //
  AssignmentAcsKeyException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : LEmployeePositionsData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS
  // ************************************************************************ //
  LEmployeePositionsData2 = class(TRemotable)
  private
    FCount: Int64;
    FCount_Specified: boolean;
    FUserPositions: ArrayOfLEmployeePositionInfo;
    FUserPositions_Specified: boolean;
    procedure SetCount(Index: Integer; const AInt64: Int64);
    function  Count_Specified(Index: Integer): boolean;
    procedure SetUserPositions(Index: Integer; const AArrayOfLEmployeePositionInfo: ArrayOfLEmployeePositionInfo);
    function  UserPositions_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Count:         Int64                         Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
    property UserPositions: ArrayOfLEmployeePositionInfo  Index (IS_OPTN or IS_NLBL) read FUserPositions write SetUserPositions stored UserPositions_Specified;
  end;



  // ************************************************************************ //
  // XML       : LEmployeePositionsData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS
  // ************************************************************************ //
  LEmployeePositionsData = class(LEmployeePositionsData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LAccessLevelsData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels
  // ************************************************************************ //
  LAccessLevelsData2 = class(TRemotable)
  private
    FAccessLevelsSlimInfo: ArrayOfAcsAccessLevelSlimInfo;
    FAccessLevelsSlimInfo_Specified: boolean;
    FCount: Int64;
    FCount_Specified: boolean;
    FIsRootOwner: Boolean;
    FIsRootOwner_Specified: boolean;
    FUseParentAccessLevel: Boolean;
    FUseParentAccessLevel_Specified: boolean;
    procedure SetAccessLevelsSlimInfo(Index: Integer; const AArrayOfAcsAccessLevelSlimInfo: ArrayOfAcsAccessLevelSlimInfo);
    function  AccessLevelsSlimInfo_Specified(Index: Integer): boolean;
    procedure SetCount(Index: Integer; const AInt64: Int64);
    function  Count_Specified(Index: Integer): boolean;
    procedure SetIsRootOwner(Index: Integer; const ABoolean: Boolean);
    function  IsRootOwner_Specified(Index: Integer): boolean;
    procedure SetUseParentAccessLevel(Index: Integer; const ABoolean: Boolean);
    function  UseParentAccessLevel_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AccessLevelsSlimInfo: ArrayOfAcsAccessLevelSlimInfo  Index (IS_OPTN or IS_NLBL) read FAccessLevelsSlimInfo write SetAccessLevelsSlimInfo stored AccessLevelsSlimInfo_Specified;
    property Count:                Int64                          Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
    property IsRootOwner:          Boolean                        Index (IS_OPTN) read FIsRootOwner write SetIsRootOwner stored IsRootOwner_Specified;
    property UseParentAccessLevel: Boolean                        Index (IS_OPTN) read FUseParentAccessLevel write SetUseParentAccessLevel stored UseParentAccessLevel_Specified;
  end;



  // ************************************************************************ //
  // XML       : LAccessLevelsData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels
  // ************************************************************************ //
  LAccessLevelsData = class(LAccessLevelsData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkSchedulesData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkSchedulesData2 = class(TRemotable)
  private
    FCount: Int64;
    FCount_Specified: boolean;
    FIsRootOwner: Boolean;
    FIsRootOwner_Specified: boolean;
    FUseParentWorkSchedule: Boolean;
    FUseParentWorkSchedule_Specified: boolean;
    FWorkSchedulesSlimInfo: ArrayOfWorkScheduleSlimInfo;
    FWorkSchedulesSlimInfo_Specified: boolean;
    procedure SetCount(Index: Integer; const AInt64: Int64);
    function  Count_Specified(Index: Integer): boolean;
    procedure SetIsRootOwner(Index: Integer; const ABoolean: Boolean);
    function  IsRootOwner_Specified(Index: Integer): boolean;
    procedure SetUseParentWorkSchedule(Index: Integer; const ABoolean: Boolean);
    function  UseParentWorkSchedule_Specified(Index: Integer): boolean;
    procedure SetWorkSchedulesSlimInfo(Index: Integer; const AArrayOfWorkScheduleSlimInfo: ArrayOfWorkScheduleSlimInfo);
    function  WorkSchedulesSlimInfo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Count:                 Int64                        Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
    property IsRootOwner:           Boolean                      Index (IS_OPTN) read FIsRootOwner write SetIsRootOwner stored IsRootOwner_Specified;
    property UseParentWorkSchedule: Boolean                      Index (IS_OPTN) read FUseParentWorkSchedule write SetUseParentWorkSchedule stored UseParentWorkSchedule_Specified;
    property WorkSchedulesSlimInfo: ArrayOfWorkScheduleSlimInfo  Index (IS_OPTN or IS_NLBL) read FWorkSchedulesSlimInfo write SetWorkSchedulesSlimInfo stored WorkSchedulesSlimInfo_Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkSchedulesData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkSchedulesData = class(WorkSchedulesData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkZonesData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkZonesData2 = class(TRemotable)
  private
    FCount: Int64;
    FCount_Specified: boolean;
    FIsRootOwner: Boolean;
    FIsRootOwner_Specified: boolean;
    FUseParentWorkZone: Boolean;
    FUseParentWorkZone_Specified: boolean;
    FWorkZonesSlimInfo: ArrayOfWorkZoneSlimInfo;
    FWorkZonesSlimInfo_Specified: boolean;
    procedure SetCount(Index: Integer; const AInt64: Int64);
    function  Count_Specified(Index: Integer): boolean;
    procedure SetIsRootOwner(Index: Integer; const ABoolean: Boolean);
    function  IsRootOwner_Specified(Index: Integer): boolean;
    procedure SetUseParentWorkZone(Index: Integer; const ABoolean: Boolean);
    function  UseParentWorkZone_Specified(Index: Integer): boolean;
    procedure SetWorkZonesSlimInfo(Index: Integer; const AArrayOfWorkZoneSlimInfo: ArrayOfWorkZoneSlimInfo);
    function  WorkZonesSlimInfo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Count:             Int64                    Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
    property IsRootOwner:       Boolean                  Index (IS_OPTN) read FIsRootOwner write SetIsRootOwner stored IsRootOwner_Specified;
    property UseParentWorkZone: Boolean                  Index (IS_OPTN) read FUseParentWorkZone write SetUseParentWorkZone stored UseParentWorkZone_Specified;
    property WorkZonesSlimInfo: ArrayOfWorkZoneSlimInfo  Index (IS_OPTN or IS_NLBL) read FWorkZonesSlimInfo write SetWorkZonesSlimInfo stored WorkZonesSlimInfo_Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkZonesData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkZonesData = class(WorkZonesData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmployeesInfoData2, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeesInfoData22 = class(TRemotable)
  private
    FCount: Int64;
    FCount_Specified: boolean;
    FEmployees: ArrayOfAcsEmployeeInfo;
    FEmployees_Specified: boolean;
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    procedure SetCount(Index: Integer; const AInt64: Int64);
    function  Count_Specified(Index: Integer): boolean;
    procedure SetEmployees(Index: Integer; const AArrayOfAcsEmployeeInfo: ArrayOfAcsEmployeeInfo);
    function  Employees_Specified(Index: Integer): boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Count:      Int64                   Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
    property Employees:  ArrayOfAcsEmployeeInfo  Index (IS_OPTN or IS_NLBL) read FEmployees write SetEmployees stored Employees_Specified;
    property PageNumber: Integer                 Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmployeesInfoData2, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeesInfoData2 = class(EmployeesInfoData22)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmployeesInfoData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeesInfoData3 = class(TRemotable)
  private
    FCount: Int64;
    FCount_Specified: boolean;
    FEmployees: ArrayOfAcsEmployeeSlim;
    FEmployees_Specified: boolean;
    FIsFound: Boolean;
    FIsFound_Specified: boolean;
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    procedure SetCount(Index: Integer; const AInt64: Int64);
    function  Count_Specified(Index: Integer): boolean;
    procedure SetEmployees(Index: Integer; const AArrayOfAcsEmployeeSlim: ArrayOfAcsEmployeeSlim);
    function  Employees_Specified(Index: Integer): boolean;
    procedure SetIsFound(Index: Integer; const ABoolean: Boolean);
    function  IsFound_Specified(Index: Integer): boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Count:      Int64                   Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
    property Employees:  ArrayOfAcsEmployeeSlim  Index (IS_OPTN or IS_NLBL) read FEmployees write SetEmployees stored Employees_Specified;
    property IsFound:    Boolean                 Index (IS_OPTN) read FIsFound write SetIsFound stored IsFound_Specified;
    property PageNumber: Integer                 Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmployeesInfoData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeesInfoData = class(EmployeesInfoData3)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsAccessLevelSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels
  // ************************************************************************ //
  AcsAccessLevelSlimInfo2 = class(AcsAccessLevelSaveData2)
  private
    FEndDate: TXSDateTime;
    FEndDate_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    FReadRightDisabled: Boolean;
    FReadRightDisabled_Specified: boolean;
    procedure SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndDate_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
    procedure SetReadRightDisabled(Index: Integer; const ABoolean: Boolean);
    function  ReadRightDisabled_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property EndDate:           TXSDateTime  Index (IS_OPTN or IS_NLBL) read FEndDate write SetEndDate stored EndDate_Specified;
    property Id:                guid         Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property IsRemoved:         Boolean      Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
    property ReadRightDisabled: Boolean      Index (IS_OPTN or IS_NLBL) read FReadRightDisabled write SetReadRightDisabled stored ReadRightDisabled_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsAccessLevelSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels
  // ************************************************************************ //
  AcsAccessLevelSlimInfo = class(AcsAccessLevelSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsKeySaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys
  // ************************************************************************ //
  AcsKeySaveData2 = class(TRemotable)
  private
    FCardTypeID: guid;
    FCardTypeID_Specified: boolean;
    FCardTypeName: string;
    FCardTypeName_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FEndDate: TXSDateTime;
    FEndDate_Specified: boolean;
    FFinger1_Image: TArray<System.Byte>;
    FFinger1_Image_Specified: boolean;
    FFinger1_Template: TArray<System.Byte>;
    FFinger1_Template_Specified: boolean;
    FFinger2_Image: TArray<System.Byte>;
    FFinger2_Image_Specified: boolean;
    FFinger2_Template: TArray<System.Byte>;
    FFinger2_Template_Specified: boolean;
    FFinger3_Image: TArray<System.Byte>;
    FFinger3_Image_Specified: boolean;
    FFinger3_Template: TArray<System.Byte>;
    FFinger3_Template_Specified: boolean;
    FFinger4_Image: TArray<System.Byte>;
    FFinger4_Image_Specified: boolean;
    FFinger4_Template: TArray<System.Byte>;
    FFinger4_Template_Specified: boolean;
    FFinger5_Image: TArray<System.Byte>;
    FFinger5_Image_Specified: boolean;
    FFinger5_Template: TArray<System.Byte>;
    FFinger5_Template_Specified: boolean;
    FKeyNumber: Int64;
    FKeyNumber_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FStartDate: TXSDateTime;
    FStartDate_Specified: boolean;
    procedure SetCardTypeID(Index: Integer; const Aguid: guid);
    function  CardTypeID_Specified(Index: Integer): boolean;
    procedure SetCardTypeName(Index: Integer; const Astring: string);
    function  CardTypeName_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndDate_Specified(Index: Integer): boolean;
    procedure SetFinger1_Image(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger1_Image_Specified(Index: Integer): boolean;
    procedure SetFinger1_Template(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger1_Template_Specified(Index: Integer): boolean;
    procedure SetFinger2_Image(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger2_Image_Specified(Index: Integer): boolean;
    procedure SetFinger2_Template(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger2_Template_Specified(Index: Integer): boolean;
    procedure SetFinger3_Image(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger3_Image_Specified(Index: Integer): boolean;
    procedure SetFinger3_Template(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger3_Template_Specified(Index: Integer): boolean;
    procedure SetFinger4_Image(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger4_Image_Specified(Index: Integer): boolean;
    procedure SetFinger4_Template(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger4_Template_Specified(Index: Integer): boolean;
    procedure SetFinger5_Image(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger5_Image_Specified(Index: Integer): boolean;
    procedure SetFinger5_Template(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger5_Template_Specified(Index: Integer): boolean;
    procedure SetKeyNumber(Index: Integer; const AInt64: Int64);
    function  KeyNumber_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetStartDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartDate_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CardTypeID:       guid                 Index (IS_OPTN or IS_NLBL) read FCardTypeID write SetCardTypeID stored CardTypeID_Specified;
    property CardTypeName:     string               Index (IS_OPTN or IS_NLBL) read FCardTypeName write SetCardTypeName stored CardTypeName_Specified;
    property Description:      string               Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property EndDate:          TXSDateTime          Index (IS_OPTN or IS_NLBL) read FEndDate write SetEndDate stored EndDate_Specified;
    property Finger1_Image:    TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger1_Image write SetFinger1_Image stored Finger1_Image_Specified;
    property Finger1_Template: TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger1_Template write SetFinger1_Template stored Finger1_Template_Specified;
    property Finger2_Image:    TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger2_Image write SetFinger2_Image stored Finger2_Image_Specified;
    property Finger2_Template: TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger2_Template write SetFinger2_Template stored Finger2_Template_Specified;
    property Finger3_Image:    TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger3_Image write SetFinger3_Image stored Finger3_Image_Specified;
    property Finger3_Template: TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger3_Template write SetFinger3_Template stored Finger3_Template_Specified;
    property Finger4_Image:    TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger4_Image write SetFinger4_Image stored Finger4_Image_Specified;
    property Finger4_Template: TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger4_Template write SetFinger4_Template stored Finger4_Template_Specified;
    property Finger5_Image:    TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger5_Image write SetFinger5_Image stored Finger5_Image_Specified;
    property Finger5_Template: TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger5_Template write SetFinger5_Template stored Finger5_Template_Specified;
    property KeyNumber:        Int64                Index (IS_OPTN) read FKeyNumber write SetKeyNumber stored KeyNumber_Specified;
    property Name_:            string               Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property StartDate:        TXSDateTime          Index (IS_OPTN or IS_NLBL) read FStartDate write SetStartDate stored StartDate_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsKeySaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys
  // ************************************************************************ //
  AcsKeySaveData = class(AcsKeySaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsKeyInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys
  // ************************************************************************ //
  AcsKeyInfo2 = class(AcsKeySaveData2)
  private
    FAcsEmployeeId: guid;
    FAcsEmployeeId_Specified: boolean;
    FAssignmentModificationDateTime: TXSDateTime;
    FAssignmentModificationDateTime_Specified: boolean;
    FIndexNumber: Integer;
    FIndexNumber_Specified: boolean;
    FIsLost: Boolean;
    FIsLost_Specified: boolean;
    procedure SetAcsEmployeeId(Index: Integer; const Aguid: guid);
    function  AcsEmployeeId_Specified(Index: Integer): boolean;
    procedure SetAssignmentModificationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  AssignmentModificationDateTime_Specified(Index: Integer): boolean;
    procedure SetIndexNumber(Index: Integer; const AInteger: Integer);
    function  IndexNumber_Specified(Index: Integer): boolean;
    procedure SetIsLost(Index: Integer; const ABoolean: Boolean);
    function  IsLost_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AcsEmployeeId:                  guid         Index (IS_OPTN or IS_NLBL) read FAcsEmployeeId write SetAcsEmployeeId stored AcsEmployeeId_Specified;
    property AssignmentModificationDateTime: TXSDateTime  Index (IS_OPTN) read FAssignmentModificationDateTime write SetAssignmentModificationDateTime stored AssignmentModificationDateTime_Specified;
    property IndexNumber:                    Integer      Index (IS_OPTN) read FIndexNumber write SetIndexNumber stored IndexNumber_Specified;
    property IsLost:                         Boolean      Index (IS_OPTN) read FIsLost write SetIsLost stored IsLost_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsKeyInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys
  // ************************************************************************ //
  AcsKeyInfo = class(AcsKeyInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkTimetableSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkTimetableSlimInfo2 = class(TRemotable)
  private
    FAbsence: duration;
    FAbsence_Specified: boolean;
    FBreakBeginTime: duration;
    FBreakBeginTime_Specified: boolean;
    FBreakEndTime: duration;
    FBreakEndTime_Specified: boolean;
    FComment: string;
    FComment_Specified: boolean;
    FDate: TXSDateTime;
    FDate_Specified: boolean;
    FDayForm: DayForm;
    FDayForm_Specified: boolean;
    FDayMode: DayTypeSlimInfo2;
    FDayMode_Specified: boolean;
    FEarlyArrival: duration;
    FEarlyArrival_Specified: boolean;
    FEarlyDeparture: duration;
    FEarlyDeparture_Specified: boolean;
    FEntryTime: duration;
    FEntryTime_Specified: boolean;
    FExitTime: duration;
    FExitTime_Specified: boolean;
    FIsEveningOvertime: Boolean;
    FIsEveningOvertime_Specified: boolean;
    FIsMoningOvertime: Boolean;
    FIsMoningOvertime_Specified: boolean;
    FIsNightShift: Boolean;
    FIsNightShift_Specified: boolean;
    FLateArrival: duration;
    FLateArrival_Specified: boolean;
    FLateDeparture: duration;
    FLateDeparture_Specified: boolean;
    FMaxAbsence: duration;
    FMaxAbsence_Specified: boolean;
    FOrder: Integer;
    FOrder_Specified: boolean;
    FWorkBreak: duration;
    FWorkBreak_Specified: boolean;
    FWorkTime: duration;
    FWorkTime_Specified: boolean;
    procedure SetAbsence(Index: Integer; const Aduration: duration);
    function  Absence_Specified(Index: Integer): boolean;
    procedure SetBreakBeginTime(Index: Integer; const Aduration: duration);
    function  BreakBeginTime_Specified(Index: Integer): boolean;
    procedure SetBreakEndTime(Index: Integer; const Aduration: duration);
    function  BreakEndTime_Specified(Index: Integer): boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
    procedure SetDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  Date_Specified(Index: Integer): boolean;
    procedure SetDayForm(Index: Integer; const ADayForm: DayForm);
    function  DayForm_Specified(Index: Integer): boolean;
    procedure SetDayMode(Index: Integer; const ADayTypeSlimInfo2: DayTypeSlimInfo2);
    function  DayMode_Specified(Index: Integer): boolean;
    procedure SetEarlyArrival(Index: Integer; const Aduration: duration);
    function  EarlyArrival_Specified(Index: Integer): boolean;
    procedure SetEarlyDeparture(Index: Integer; const Aduration: duration);
    function  EarlyDeparture_Specified(Index: Integer): boolean;
    procedure SetEntryTime(Index: Integer; const Aduration: duration);
    function  EntryTime_Specified(Index: Integer): boolean;
    procedure SetExitTime(Index: Integer; const Aduration: duration);
    function  ExitTime_Specified(Index: Integer): boolean;
    procedure SetIsEveningOvertime(Index: Integer; const ABoolean: Boolean);
    function  IsEveningOvertime_Specified(Index: Integer): boolean;
    procedure SetIsMoningOvertime(Index: Integer; const ABoolean: Boolean);
    function  IsMoningOvertime_Specified(Index: Integer): boolean;
    procedure SetIsNightShift(Index: Integer; const ABoolean: Boolean);
    function  IsNightShift_Specified(Index: Integer): boolean;
    procedure SetLateArrival(Index: Integer; const Aduration: duration);
    function  LateArrival_Specified(Index: Integer): boolean;
    procedure SetLateDeparture(Index: Integer; const Aduration: duration);
    function  LateDeparture_Specified(Index: Integer): boolean;
    procedure SetMaxAbsence(Index: Integer; const Aduration: duration);
    function  MaxAbsence_Specified(Index: Integer): boolean;
    procedure SetOrder(Index: Integer; const AInteger: Integer);
    function  Order_Specified(Index: Integer): boolean;
    procedure SetWorkBreak(Index: Integer; const Aduration: duration);
    function  WorkBreak_Specified(Index: Integer): boolean;
    procedure SetWorkTime(Index: Integer; const Aduration: duration);
    function  WorkTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Absence:           duration          Index (IS_OPTN) read FAbsence write SetAbsence stored Absence_Specified;
    property BreakBeginTime:    duration          Index (IS_OPTN) read FBreakBeginTime write SetBreakBeginTime stored BreakBeginTime_Specified;
    property BreakEndTime:      duration          Index (IS_OPTN) read FBreakEndTime write SetBreakEndTime stored BreakEndTime_Specified;
    property Comment:           string            Index (IS_OPTN or IS_NLBL) read FComment write SetComment stored Comment_Specified;
    property Date:              TXSDateTime       Index (IS_OPTN) read FDate write SetDate stored Date_Specified;
    property DayForm:           DayForm           Index (IS_OPTN) read FDayForm write SetDayForm stored DayForm_Specified;
    property DayMode:           DayTypeSlimInfo2  Index (IS_OPTN or IS_NLBL) read FDayMode write SetDayMode stored DayMode_Specified;
    property EarlyArrival:      duration          Index (IS_OPTN) read FEarlyArrival write SetEarlyArrival stored EarlyArrival_Specified;
    property EarlyDeparture:    duration          Index (IS_OPTN) read FEarlyDeparture write SetEarlyDeparture stored EarlyDeparture_Specified;
    property EntryTime:         duration          Index (IS_OPTN) read FEntryTime write SetEntryTime stored EntryTime_Specified;
    property ExitTime:          duration          Index (IS_OPTN) read FExitTime write SetExitTime stored ExitTime_Specified;
    property IsEveningOvertime: Boolean           Index (IS_OPTN) read FIsEveningOvertime write SetIsEveningOvertime stored IsEveningOvertime_Specified;
    property IsMoningOvertime:  Boolean           Index (IS_OPTN) read FIsMoningOvertime write SetIsMoningOvertime stored IsMoningOvertime_Specified;
    property IsNightShift:      Boolean           Index (IS_OPTN) read FIsNightShift write SetIsNightShift stored IsNightShift_Specified;
    property LateArrival:       duration          Index (IS_OPTN) read FLateArrival write SetLateArrival stored LateArrival_Specified;
    property LateDeparture:     duration          Index (IS_OPTN) read FLateDeparture write SetLateDeparture stored LateDeparture_Specified;
    property MaxAbsence:        duration          Index (IS_OPTN) read FMaxAbsence write SetMaxAbsence stored MaxAbsence_Specified;
    property Order:             Integer           Index (IS_OPTN) read FOrder write SetOrder stored Order_Specified;
    property WorkBreak:         duration          Index (IS_OPTN) read FWorkBreak write SetWorkBreak stored WorkBreak_Specified;
    property WorkTime:          duration          Index (IS_OPTN) read FWorkTime write SetWorkTime stored WorkTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkTimetableSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking
  // ************************************************************************ //
  WorkTimetableSlimInfo = class(WorkTimetableSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeScheduleSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeScheduleSaveData2 = class(TRemotable)
  private
    FBeginDate: TXSDateTime;
    FBeginDate_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FEmployeeID: guid;
    FEmployeeID_Specified: boolean;
    FEndDate: TXSDateTime;
    FEndDate_Specified: boolean;
    procedure SetBeginDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  BeginDate_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetEmployeeID(Index: Integer; const Aguid: guid);
    function  EmployeeID_Specified(Index: Integer): boolean;
    procedure SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndDate_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property BeginDate:   TXSDateTime  Index (IS_OPTN) read FBeginDate write SetBeginDate stored BeginDate_Specified;
    property Description: string       Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property EmployeeID:  guid         Index (IS_OPTN) read FEmployeeID write SetEmployeeID stored EmployeeID_Specified;
    property EndDate:     TXSDateTime  Index (IS_OPTN) read FEndDate write SetEndDate stored EndDate_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeSchedule, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeSchedule2 = class(AcsEmployeeScheduleSaveData2)
  private
    FID: guid;
    FID_Specified: boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
  published
    property ID: guid  Index (IS_OPTN) read FID write SetID stored ID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeSchedule, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeSchedule = class(AcsEmployeeSchedule2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeScheduleSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeScheduleSaveData = class(AcsEmployeeScheduleSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeFullBase, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeFullBase2 = class(AcsEmployeeSlimBase2)
  private
    FAuthority: string;
    FAuthority_Specified: boolean;
    FDateOfIssue: TXSDateTime;
    FDateOfIssue_Specified: boolean;
    FIsChangePin: Boolean;
    FIsChangePin_Specified: boolean;
    FPINCode: Int64;
    FPINCode_Specified: boolean;
    FPINCodeDescription: string;
    FPINCodeDescription_Specified: boolean;
    FPINCodeUnderPressure: Int64;
    FPINCodeUnderPressure_Specified: boolean;
    FPINCodeUnderPressureDescription: string;
    FPINCodeUnderPressureDescription_Specified: boolean;
    FPassportIssue: string;
    FPassportIssue_Specified: boolean;
    FPassportNumber: string;
    FPassportNumber_Specified: boolean;
    FRegistrationAddress: string;
    FRegistrationAddress_Specified: boolean;
    FResidentialAddress: string;
    FResidentialAddress_Specified: boolean;
    procedure SetAuthority(Index: Integer; const Astring: string);
    function  Authority_Specified(Index: Integer): boolean;
    procedure SetDateOfIssue(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DateOfIssue_Specified(Index: Integer): boolean;
    procedure SetIsChangePin(Index: Integer; const ABoolean: Boolean);
    function  IsChangePin_Specified(Index: Integer): boolean;
    procedure SetPINCode(Index: Integer; const AInt64: Int64);
    function  PINCode_Specified(Index: Integer): boolean;
    procedure SetPINCodeDescription(Index: Integer; const Astring: string);
    function  PINCodeDescription_Specified(Index: Integer): boolean;
    procedure SetPINCodeUnderPressure(Index: Integer; const AInt64: Int64);
    function  PINCodeUnderPressure_Specified(Index: Integer): boolean;
    procedure SetPINCodeUnderPressureDescription(Index: Integer; const Astring: string);
    function  PINCodeUnderPressureDescription_Specified(Index: Integer): boolean;
    procedure SetPassportIssue(Index: Integer; const Astring: string);
    function  PassportIssue_Specified(Index: Integer): boolean;
    procedure SetPassportNumber(Index: Integer; const Astring: string);
    function  PassportNumber_Specified(Index: Integer): boolean;
    procedure SetRegistrationAddress(Index: Integer; const Astring: string);
    function  RegistrationAddress_Specified(Index: Integer): boolean;
    procedure SetResidentialAddress(Index: Integer; const Astring: string);
    function  ResidentialAddress_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Authority:                       string       Index (IS_OPTN or IS_NLBL) read FAuthority write SetAuthority stored Authority_Specified;
    property DateOfIssue:                     TXSDateTime  Index (IS_OPTN or IS_NLBL) read FDateOfIssue write SetDateOfIssue stored DateOfIssue_Specified;
    property IsChangePin:                     Boolean      Index (IS_OPTN) read FIsChangePin write SetIsChangePin stored IsChangePin_Specified;
    property PINCode:                         Int64        Index (IS_OPTN or IS_NLBL) read FPINCode write SetPINCode stored PINCode_Specified;
    property PINCodeDescription:              string       Index (IS_OPTN or IS_NLBL) read FPINCodeDescription write SetPINCodeDescription stored PINCodeDescription_Specified;
    property PINCodeUnderPressure:            Int64        Index (IS_OPTN or IS_NLBL) read FPINCodeUnderPressure write SetPINCodeUnderPressure stored PINCodeUnderPressure_Specified;
    property PINCodeUnderPressureDescription: string       Index (IS_OPTN or IS_NLBL) read FPINCodeUnderPressureDescription write SetPINCodeUnderPressureDescription stored PINCodeUnderPressureDescription_Specified;
    property PassportIssue:                   string       Index (IS_OPTN or IS_NLBL) read FPassportIssue write SetPassportIssue stored PassportIssue_Specified;
    property PassportNumber:                  string       Index (IS_OPTN or IS_NLBL) read FPassportNumber write SetPassportNumber stored PassportNumber_Specified;
    property RegistrationAddress:             string       Index (IS_OPTN or IS_NLBL) read FRegistrationAddress write SetRegistrationAddress stored RegistrationAddress_Specified;
    property ResidentialAddress:              string       Index (IS_OPTN or IS_NLBL) read FResidentialAddress write SetResidentialAddress stored ResidentialAddress_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeSaveData2 = class(AcsEmployeeFullBase2)
  private
    FEmployeePositionID: guid;
    FEmployeePositionID_Specified: boolean;
    procedure SetEmployeePositionID(Index: Integer; const Aguid: guid);
    function  EmployeePositionID_Specified(Index: Integer): boolean;
  published
    property EmployeePositionID: guid  Index (IS_OPTN or IS_NLBL) read FEmployeePositionID write SetEmployeePositionID stored EmployeePositionID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeSaveData = class(AcsEmployeeSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeFullBase, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeFullBase = class(AcsEmployeeFullBase2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeFull, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeFull2 = class(AcsEmployeeFullBase2)
  private
    FCreationDateTime: TXSDateTime;
    FCreationDateTime_Specified: boolean;
    FEmployeeGroupID: guid;
    FEmployeeGroupID_Specified: boolean;
    FEmployeeGroupPath: string;
    FEmployeeGroupPath_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    FModificationDateTime: TXSDateTime;
    FModificationDateTime_Specified: boolean;
    FPosition: LEmployeePositionInfo2;
    FPosition_Specified: boolean;
    procedure SetCreationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreationDateTime_Specified(Index: Integer): boolean;
    procedure SetEmployeeGroupID(Index: Integer; const Aguid: guid);
    function  EmployeeGroupID_Specified(Index: Integer): boolean;
    procedure SetEmployeeGroupPath(Index: Integer; const Astring: string);
    function  EmployeeGroupPath_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
    procedure SetModificationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModificationDateTime_Specified(Index: Integer): boolean;
    procedure SetPosition(Index: Integer; const ALEmployeePositionInfo2: LEmployeePositionInfo2);
    function  Position_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CreationDateTime:     TXSDateTime             Index (IS_OPTN) read FCreationDateTime write SetCreationDateTime stored CreationDateTime_Specified;
    property EmployeeGroupID:      guid                    Index (IS_OPTN) read FEmployeeGroupID write SetEmployeeGroupID stored EmployeeGroupID_Specified;
    property EmployeeGroupPath:    string                  Index (IS_OPTN or IS_NLBL) read FEmployeeGroupPath write SetEmployeeGroupPath stored EmployeeGroupPath_Specified;
    property ID:                   guid                    Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property IsRemoved:            Boolean                 Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
    property ModificationDateTime: TXSDateTime             Index (IS_OPTN) read FModificationDateTime write SetModificationDateTime stored ModificationDateTime_Specified;
    property Position:             LEmployeePositionInfo2  Index (IS_OPTN or IS_NLBL) read FPosition write SetPosition stored Position_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeFull, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeFull = class(AcsEmployeeFull2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeSlim, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeSlim2 = class(AcsEmployeeSlimBase2)
  private
    FAccessLevels: ArrayOfAcsAccessLevelSlimInfo;
    FAccessLevels_Specified: boolean;
    FCreationDateTime: TXSDateTime;
    FCreationDateTime_Specified: boolean;
    FEmployeeGroupID: guid;
    FEmployeeGroupID_Specified: boolean;
    FEmployeeGroupPath: string;
    FEmployeeGroupPath_Specified: boolean;
    FGroupCode: string;
    FGroupCode_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FIsAccessLevelsInherited: Boolean;
    FIsAccessLevelsInherited_Specified: boolean;
    FIsPhotoAny: Boolean;
    FIsPhotoAny_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    FIsWorkSchedulesInherited: Boolean;
    FIsWorkSchedulesInherited_Specified: boolean;
    FIsWorkZonesInherited: Boolean;
    FIsWorkZonesInherited_Specified: boolean;
    FKeys: ArrayOfAcsKeyInfo;
    FKeys_Specified: boolean;
    FModificationDateTime: TXSDateTime;
    FModificationDateTime_Specified: boolean;
    FPosition: LEmployeePositionInfo2;
    FPosition_Specified: boolean;
    FWorkSchedules: ArrayOfWorkScheduleSlimInfo;
    FWorkSchedules_Specified: boolean;
    FWorkZones: ArrayOfWorkZoneSlimInfo;
    FWorkZones_Specified: boolean;
    procedure SetAccessLevels(Index: Integer; const AArrayOfAcsAccessLevelSlimInfo: ArrayOfAcsAccessLevelSlimInfo);
    function  AccessLevels_Specified(Index: Integer): boolean;
    procedure SetCreationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreationDateTime_Specified(Index: Integer): boolean;
    procedure SetEmployeeGroupID(Index: Integer; const Aguid: guid);
    function  EmployeeGroupID_Specified(Index: Integer): boolean;
    procedure SetEmployeeGroupPath(Index: Integer; const Astring: string);
    function  EmployeeGroupPath_Specified(Index: Integer): boolean;
    procedure SetGroupCode(Index: Integer; const Astring: string);
    function  GroupCode_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetIsAccessLevelsInherited(Index: Integer; const ABoolean: Boolean);
    function  IsAccessLevelsInherited_Specified(Index: Integer): boolean;
    procedure SetIsPhotoAny(Index: Integer; const ABoolean: Boolean);
    function  IsPhotoAny_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
    procedure SetIsWorkSchedulesInherited(Index: Integer; const ABoolean: Boolean);
    function  IsWorkSchedulesInherited_Specified(Index: Integer): boolean;
    procedure SetIsWorkZonesInherited(Index: Integer; const ABoolean: Boolean);
    function  IsWorkZonesInherited_Specified(Index: Integer): boolean;
    procedure SetKeys(Index: Integer; const AArrayOfAcsKeyInfo: ArrayOfAcsKeyInfo);
    function  Keys_Specified(Index: Integer): boolean;
    procedure SetModificationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModificationDateTime_Specified(Index: Integer): boolean;
    procedure SetPosition(Index: Integer; const ALEmployeePositionInfo2: LEmployeePositionInfo2);
    function  Position_Specified(Index: Integer): boolean;
    procedure SetWorkSchedules(Index: Integer; const AArrayOfWorkScheduleSlimInfo: ArrayOfWorkScheduleSlimInfo);
    function  WorkSchedules_Specified(Index: Integer): boolean;
    procedure SetWorkZones(Index: Integer; const AArrayOfWorkZoneSlimInfo: ArrayOfWorkZoneSlimInfo);
    function  WorkZones_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AccessLevels:             ArrayOfAcsAccessLevelSlimInfo  Index (IS_OPTN or IS_NLBL) read FAccessLevels write SetAccessLevels stored AccessLevels_Specified;
    property CreationDateTime:         TXSDateTime                    Index (IS_OPTN) read FCreationDateTime write SetCreationDateTime stored CreationDateTime_Specified;
    property EmployeeGroupID:          guid                           Index (IS_OPTN) read FEmployeeGroupID write SetEmployeeGroupID stored EmployeeGroupID_Specified;
    property EmployeeGroupPath:        string                         Index (IS_OPTN or IS_NLBL) read FEmployeeGroupPath write SetEmployeeGroupPath stored EmployeeGroupPath_Specified;
    property GroupCode:                string                         Index (IS_OPTN or IS_NLBL) read FGroupCode write SetGroupCode stored GroupCode_Specified;
    property ID:                       guid                           Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property IsAccessLevelsInherited:  Boolean                        Index (IS_OPTN) read FIsAccessLevelsInherited write SetIsAccessLevelsInherited stored IsAccessLevelsInherited_Specified;
    property IsPhotoAny:               Boolean                        Index (IS_OPTN) read FIsPhotoAny write SetIsPhotoAny stored IsPhotoAny_Specified;
    property IsRemoved:                Boolean                        Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
    property IsWorkSchedulesInherited: Boolean                        Index (IS_OPTN) read FIsWorkSchedulesInherited write SetIsWorkSchedulesInherited stored IsWorkSchedulesInherited_Specified;
    property IsWorkZonesInherited:     Boolean                        Index (IS_OPTN) read FIsWorkZonesInherited write SetIsWorkZonesInherited stored IsWorkZonesInherited_Specified;
    property Keys:                     ArrayOfAcsKeyInfo              Index (IS_OPTN or IS_NLBL) read FKeys write SetKeys stored Keys_Specified;
    property ModificationDateTime:     TXSDateTime                    Index (IS_OPTN) read FModificationDateTime write SetModificationDateTime stored ModificationDateTime_Specified;
    property Position:                 LEmployeePositionInfo2         Index (IS_OPTN or IS_NLBL) read FPosition write SetPosition stored Position_Specified;
    property WorkSchedules:            ArrayOfWorkScheduleSlimInfo    Index (IS_OPTN or IS_NLBL) read FWorkSchedules write SetWorkSchedules stored WorkSchedules_Specified;
    property WorkZones:                ArrayOfWorkZoneSlimInfo        Index (IS_OPTN or IS_NLBL) read FWorkZones write SetWorkZones stored WorkZones_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeSlim, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeSlim = class(AcsEmployeeSlim2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeGroup, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeGroup2 = class(TRemotable)
  private
    FComment: string;
    FComment_Specified: boolean;
    FCreationDateTime: TXSDateTime;
    FCreationDateTime_Specified: boolean;
    FEmployeeGroups: ArrayOfAcsEmployeeGroup;
    FEmployeeGroups_Specified: boolean;
    FFavoriteName: string;
    FFavoriteName_Specified: boolean;
    FFavoritePath: string;
    FFavoritePath_Specified: boolean;
    FGroupCode: string;
    FGroupCode_Specified: boolean;
    FGroupType: EmployeeGroupType;
    FGroupType_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FIsGuestGroup: Boolean;
    FIsGuestGroup_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    FModificationDateTime: TXSDateTime;
    FModificationDateTime_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
    procedure SetCreationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreationDateTime_Specified(Index: Integer): boolean;
    procedure SetEmployeeGroups(Index: Integer; const AArrayOfAcsEmployeeGroup: ArrayOfAcsEmployeeGroup);
    function  EmployeeGroups_Specified(Index: Integer): boolean;
    procedure SetFavoriteName(Index: Integer; const Astring: string);
    function  FavoriteName_Specified(Index: Integer): boolean;
    procedure SetFavoritePath(Index: Integer; const Astring: string);
    function  FavoritePath_Specified(Index: Integer): boolean;
    procedure SetGroupCode(Index: Integer; const Astring: string);
    function  GroupCode_Specified(Index: Integer): boolean;
    procedure SetGroupType(Index: Integer; const AEmployeeGroupType: EmployeeGroupType);
    function  GroupType_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetIsGuestGroup(Index: Integer; const ABoolean: Boolean);
    function  IsGuestGroup_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
    procedure SetModificationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModificationDateTime_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Comment:              string                   Index (IS_OPTN or IS_NLBL) read FComment write SetComment stored Comment_Specified;
    property CreationDateTime:     TXSDateTime              Index (IS_OPTN) read FCreationDateTime write SetCreationDateTime stored CreationDateTime_Specified;
    property EmployeeGroups:       ArrayOfAcsEmployeeGroup  Index (IS_OPTN or IS_NLBL) read FEmployeeGroups write SetEmployeeGroups stored EmployeeGroups_Specified;
    property FavoriteName:         string                   Index (IS_OPTN or IS_NLBL) read FFavoriteName write SetFavoriteName stored FavoriteName_Specified;
    property FavoritePath:         string                   Index (IS_OPTN or IS_NLBL) read FFavoritePath write SetFavoritePath stored FavoritePath_Specified;
    property GroupCode:            string                   Index (IS_OPTN or IS_NLBL) read FGroupCode write SetGroupCode stored GroupCode_Specified;
    property GroupType:            EmployeeGroupType        Index (IS_OPTN) read FGroupType write SetGroupType stored GroupType_Specified;
    property ID:                   guid                     Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property IsGuestGroup:         Boolean                  Index (IS_OPTN) read FIsGuestGroup write SetIsGuestGroup stored IsGuestGroup_Specified;
    property IsRemoved:            Boolean                  Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
    property ModificationDateTime: TXSDateTime              Index (IS_OPTN) read FModificationDateTime write SetModificationDateTime stored ModificationDateTime_Specified;
    property Name_:                string                   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeGroup, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeGroup = class(AcsEmployeeGroup2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AscEmployeePhotoModificationDateTimeInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AscEmployeePhotoModificationDateTimeInfo2 = class(TRemotable)
  private
    FModificationDateTime: TXSDateTime;
    FModificationDateTime_Specified: boolean;
    FPhotoNumber: Integer;
    FPhotoNumber_Specified: boolean;
    procedure SetModificationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModificationDateTime_Specified(Index: Integer): boolean;
    procedure SetPhotoNumber(Index: Integer; const AInteger: Integer);
    function  PhotoNumber_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ModificationDateTime: TXSDateTime  Index (IS_OPTN) read FModificationDateTime write SetModificationDateTime stored ModificationDateTime_Specified;
    property PhotoNumber:          Integer      Index (IS_OPTN) read FPhotoNumber write SetPhotoNumber stored PhotoNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : AscEmployeePhotoModificationDateTimeInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AscEmployeePhotoModificationDateTimeInfo = class(AscEmployeePhotoModificationDateTimeInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SearchCondition, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  SearchCondition2 = class(TRemotable)
  private
    FAddField: string;
    FAddField_Specified: boolean;
    FAdditionalFieldID: guid;
    FAdditionalFieldID_Specified: boolean;
    FBirthday: TXSDateTime;
    FBirthday_Specified: boolean;
    FEmail: string;
    FEmail_Specified: boolean;
    FFirstName: string;
    FFirstName_Specified: boolean;
    FIsFullMatch: Boolean;
    FIsFullMatch_Specified: boolean;
    FKeyDescription: string;
    FKeyDescription_Specified: boolean;
    FKeyNumber: Int64;
    FKeyNumber_Specified: boolean;
    FLastName: string;
    FLastName_Specified: boolean;
    FPassportNumber: string;
    FPassportNumber_Specified: boolean;
    FPhone: string;
    FPhone_Specified: boolean;
    FSearchWay: SearchWay;
    FSearchWay_Specified: boolean;
    FSecondName: string;
    FSecondName_Specified: boolean;
    FTableNumber: Integer;
    FTableNumber_Specified: boolean;
    procedure SetAddField(Index: Integer; const Astring: string);
    function  AddField_Specified(Index: Integer): boolean;
    procedure SetAdditionalFieldID(Index: Integer; const Aguid: guid);
    function  AdditionalFieldID_Specified(Index: Integer): boolean;
    procedure SetBirthday(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  Birthday_Specified(Index: Integer): boolean;
    procedure SetEmail(Index: Integer; const Astring: string);
    function  Email_Specified(Index: Integer): boolean;
    procedure SetFirstName(Index: Integer; const Astring: string);
    function  FirstName_Specified(Index: Integer): boolean;
    procedure SetIsFullMatch(Index: Integer; const ABoolean: Boolean);
    function  IsFullMatch_Specified(Index: Integer): boolean;
    procedure SetKeyDescription(Index: Integer; const Astring: string);
    function  KeyDescription_Specified(Index: Integer): boolean;
    procedure SetKeyNumber(Index: Integer; const AInt64: Int64);
    function  KeyNumber_Specified(Index: Integer): boolean;
    procedure SetLastName(Index: Integer; const Astring: string);
    function  LastName_Specified(Index: Integer): boolean;
    procedure SetPassportNumber(Index: Integer; const Astring: string);
    function  PassportNumber_Specified(Index: Integer): boolean;
    procedure SetPhone(Index: Integer; const Astring: string);
    function  Phone_Specified(Index: Integer): boolean;
    procedure SetSearchWay(Index: Integer; const ASearchWay: SearchWay);
    function  SearchWay_Specified(Index: Integer): boolean;
    procedure SetSecondName(Index: Integer; const Astring: string);
    function  SecondName_Specified(Index: Integer): boolean;
    procedure SetTableNumber(Index: Integer; const AInteger: Integer);
    function  TableNumber_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AddField:          string       Index (IS_OPTN or IS_NLBL) read FAddField write SetAddField stored AddField_Specified;
    property AdditionalFieldID: guid         Index (IS_OPTN or IS_NLBL) read FAdditionalFieldID write SetAdditionalFieldID stored AdditionalFieldID_Specified;
    property Birthday:          TXSDateTime  Index (IS_OPTN or IS_NLBL) read FBirthday write SetBirthday stored Birthday_Specified;
    property Email:             string       Index (IS_OPTN or IS_NLBL) read FEmail write SetEmail stored Email_Specified;
    property FirstName:         string       Index (IS_OPTN or IS_NLBL) read FFirstName write SetFirstName stored FirstName_Specified;
    property IsFullMatch:       Boolean      Index (IS_OPTN) read FIsFullMatch write SetIsFullMatch stored IsFullMatch_Specified;
    property KeyDescription:    string       Index (IS_OPTN or IS_NLBL) read FKeyDescription write SetKeyDescription stored KeyDescription_Specified;
    property KeyNumber:         Int64        Index (IS_OPTN or IS_NLBL) read FKeyNumber write SetKeyNumber stored KeyNumber_Specified;
    property LastName:          string       Index (IS_OPTN or IS_NLBL) read FLastName write SetLastName stored LastName_Specified;
    property PassportNumber:    string       Index (IS_OPTN or IS_NLBL) read FPassportNumber write SetPassportNumber stored PassportNumber_Specified;
    property Phone:             string       Index (IS_OPTN or IS_NLBL) read FPhone write SetPhone stored Phone_Specified;
    property SearchWay:         SearchWay    Index (IS_OPTN) read FSearchWay write SetSearchWay stored SearchWay_Specified;
    property SecondName:        string       Index (IS_OPTN or IS_NLBL) read FSecondName write SetSecondName stored SecondName_Specified;
    property TableNumber:       Integer      Index (IS_OPTN or IS_NLBL) read FTableNumber write SetTableNumber stored TableNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : SearchCondition, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  SearchCondition = class(SearchCondition2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeDocumentsSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeDocumentsSaveData2 = class(TRemotable)
  private
    FDriverDateOfBirth: TXSDateTime;
    FDriverDateOfBirth_Specified: boolean;
    FDriverDateOfExpiry: TXSDateTime;
    FDriverDateOfExpiry_Specified: boolean;
    FDriverDateOfIssue: TXSDateTime;
    FDriverDateOfIssue_Specified: boolean;
    FDriverFirstName: string;
    FDriverFirstName_Specified: boolean;
    FDriverLastName: string;
    FDriverLastName_Specified: boolean;
    FDriverMiddleName: string;
    FDriverMiddleName_Specified: boolean;
    FDriverNumber: string;
    FDriverNumber_Specified: boolean;
    FDriverPlaceOfBirth: string;
    FDriverPlaceOfBirth_Specified: boolean;
    FDriverSeries: string;
    FDriverSeries_Specified: boolean;
    FForeignPassportCodeOfIssuingState: string;
    FForeignPassportCodeOfIssuingState_Specified: boolean;
    FForeignPassportDateOfBirth: TXSDateTime;
    FForeignPassportDateOfBirth_Specified: boolean;
    FForeignPassportDateOfExpiry: TXSDateTime;
    FForeignPassportDateOfExpiry_Specified: boolean;
    FForeignPassportFirstName: string;
    FForeignPassportFirstName_Specified: boolean;
    FForeignPassportLastName: string;
    FForeignPassportLastName_Specified: boolean;
    FForeignPassportMRZ: string;
    FForeignPassportMRZ_Specified: boolean;
    FForeignPassportMiddleName: string;
    FForeignPassportMiddleName_Specified: boolean;
    FForeignPassportNationality: string;
    FForeignPassportNationality_Specified: boolean;
    FForeignPassportNumber: string;
    FForeignPassportNumber_Specified: boolean;
    FForeignPassportPersonalCode: string;
    FForeignPassportPersonalCode_Specified: boolean;
    FForeignPassportSex: string;
    FForeignPassportSex_Specified: boolean;
    FPassportDateOfBirth: TXSDateTime;
    FPassportDateOfBirth_Specified: boolean;
    FPassportDateOfIssue: TXSDateTime;
    FPassportDateOfIssue_Specified: boolean;
    FPassportDepartmentCode: string;
    FPassportDepartmentCode_Specified: boolean;
    FPassportFirstName: string;
    FPassportFirstName_Specified: boolean;
    FPassportIssue: string;
    FPassportIssue_Specified: boolean;
    FPassportLastName: string;
    FPassportLastName_Specified: boolean;
    FPassportMiddleName: string;
    FPassportMiddleName_Specified: boolean;
    FPassportNumber: string;
    FPassportNumber_Specified: boolean;
    FPassportPlaceOfBirth: string;
    FPassportPlaceOfBirth_Specified: boolean;
    FPassportRegistrationAddress: string;
    FPassportRegistrationAddress_Specified: boolean;
    FPassportSeries: string;
    FPassportSeries_Specified: boolean;
    FPassportSex: string;
    FPassportSex_Specified: boolean;
    procedure SetDriverDateOfBirth(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DriverDateOfBirth_Specified(Index: Integer): boolean;
    procedure SetDriverDateOfExpiry(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DriverDateOfExpiry_Specified(Index: Integer): boolean;
    procedure SetDriverDateOfIssue(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DriverDateOfIssue_Specified(Index: Integer): boolean;
    procedure SetDriverFirstName(Index: Integer; const Astring: string);
    function  DriverFirstName_Specified(Index: Integer): boolean;
    procedure SetDriverLastName(Index: Integer; const Astring: string);
    function  DriverLastName_Specified(Index: Integer): boolean;
    procedure SetDriverMiddleName(Index: Integer; const Astring: string);
    function  DriverMiddleName_Specified(Index: Integer): boolean;
    procedure SetDriverNumber(Index: Integer; const Astring: string);
    function  DriverNumber_Specified(Index: Integer): boolean;
    procedure SetDriverPlaceOfBirth(Index: Integer; const Astring: string);
    function  DriverPlaceOfBirth_Specified(Index: Integer): boolean;
    procedure SetDriverSeries(Index: Integer; const Astring: string);
    function  DriverSeries_Specified(Index: Integer): boolean;
    procedure SetForeignPassportCodeOfIssuingState(Index: Integer; const Astring: string);
    function  ForeignPassportCodeOfIssuingState_Specified(Index: Integer): boolean;
    procedure SetForeignPassportDateOfBirth(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ForeignPassportDateOfBirth_Specified(Index: Integer): boolean;
    procedure SetForeignPassportDateOfExpiry(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ForeignPassportDateOfExpiry_Specified(Index: Integer): boolean;
    procedure SetForeignPassportFirstName(Index: Integer; const Astring: string);
    function  ForeignPassportFirstName_Specified(Index: Integer): boolean;
    procedure SetForeignPassportLastName(Index: Integer; const Astring: string);
    function  ForeignPassportLastName_Specified(Index: Integer): boolean;
    procedure SetForeignPassportMRZ(Index: Integer; const Astring: string);
    function  ForeignPassportMRZ_Specified(Index: Integer): boolean;
    procedure SetForeignPassportMiddleName(Index: Integer; const Astring: string);
    function  ForeignPassportMiddleName_Specified(Index: Integer): boolean;
    procedure SetForeignPassportNationality(Index: Integer; const Astring: string);
    function  ForeignPassportNationality_Specified(Index: Integer): boolean;
    procedure SetForeignPassportNumber(Index: Integer; const Astring: string);
    function  ForeignPassportNumber_Specified(Index: Integer): boolean;
    procedure SetForeignPassportPersonalCode(Index: Integer; const Astring: string);
    function  ForeignPassportPersonalCode_Specified(Index: Integer): boolean;
    procedure SetForeignPassportSex(Index: Integer; const Astring: string);
    function  ForeignPassportSex_Specified(Index: Integer): boolean;
    procedure SetPassportDateOfBirth(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  PassportDateOfBirth_Specified(Index: Integer): boolean;
    procedure SetPassportDateOfIssue(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  PassportDateOfIssue_Specified(Index: Integer): boolean;
    procedure SetPassportDepartmentCode(Index: Integer; const Astring: string);
    function  PassportDepartmentCode_Specified(Index: Integer): boolean;
    procedure SetPassportFirstName(Index: Integer; const Astring: string);
    function  PassportFirstName_Specified(Index: Integer): boolean;
    procedure SetPassportIssue(Index: Integer; const Astring: string);
    function  PassportIssue_Specified(Index: Integer): boolean;
    procedure SetPassportLastName(Index: Integer; const Astring: string);
    function  PassportLastName_Specified(Index: Integer): boolean;
    procedure SetPassportMiddleName(Index: Integer; const Astring: string);
    function  PassportMiddleName_Specified(Index: Integer): boolean;
    procedure SetPassportNumber(Index: Integer; const Astring: string);
    function  PassportNumber_Specified(Index: Integer): boolean;
    procedure SetPassportPlaceOfBirth(Index: Integer; const Astring: string);
    function  PassportPlaceOfBirth_Specified(Index: Integer): boolean;
    procedure SetPassportRegistrationAddress(Index: Integer; const Astring: string);
    function  PassportRegistrationAddress_Specified(Index: Integer): boolean;
    procedure SetPassportSeries(Index: Integer; const Astring: string);
    function  PassportSeries_Specified(Index: Integer): boolean;
    procedure SetPassportSex(Index: Integer; const Astring: string);
    function  PassportSex_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DriverDateOfBirth:                 TXSDateTime  Index (IS_OPTN or IS_NLBL) read FDriverDateOfBirth write SetDriverDateOfBirth stored DriverDateOfBirth_Specified;
    property DriverDateOfExpiry:                TXSDateTime  Index (IS_OPTN or IS_NLBL) read FDriverDateOfExpiry write SetDriverDateOfExpiry stored DriverDateOfExpiry_Specified;
    property DriverDateOfIssue:                 TXSDateTime  Index (IS_OPTN or IS_NLBL) read FDriverDateOfIssue write SetDriverDateOfIssue stored DriverDateOfIssue_Specified;
    property DriverFirstName:                   string       Index (IS_OPTN or IS_NLBL) read FDriverFirstName write SetDriverFirstName stored DriverFirstName_Specified;
    property DriverLastName:                    string       Index (IS_OPTN or IS_NLBL) read FDriverLastName write SetDriverLastName stored DriverLastName_Specified;
    property DriverMiddleName:                  string       Index (IS_OPTN or IS_NLBL) read FDriverMiddleName write SetDriverMiddleName stored DriverMiddleName_Specified;
    property DriverNumber:                      string       Index (IS_OPTN or IS_NLBL) read FDriverNumber write SetDriverNumber stored DriverNumber_Specified;
    property DriverPlaceOfBirth:                string       Index (IS_OPTN or IS_NLBL) read FDriverPlaceOfBirth write SetDriverPlaceOfBirth stored DriverPlaceOfBirth_Specified;
    property DriverSeries:                      string       Index (IS_OPTN or IS_NLBL) read FDriverSeries write SetDriverSeries stored DriverSeries_Specified;
    property ForeignPassportCodeOfIssuingState: string       Index (IS_OPTN or IS_NLBL) read FForeignPassportCodeOfIssuingState write SetForeignPassportCodeOfIssuingState stored ForeignPassportCodeOfIssuingState_Specified;
    property ForeignPassportDateOfBirth:        TXSDateTime  Index (IS_OPTN or IS_NLBL) read FForeignPassportDateOfBirth write SetForeignPassportDateOfBirth stored ForeignPassportDateOfBirth_Specified;
    property ForeignPassportDateOfExpiry:       TXSDateTime  Index (IS_OPTN or IS_NLBL) read FForeignPassportDateOfExpiry write SetForeignPassportDateOfExpiry stored ForeignPassportDateOfExpiry_Specified;
    property ForeignPassportFirstName:          string       Index (IS_OPTN or IS_NLBL) read FForeignPassportFirstName write SetForeignPassportFirstName stored ForeignPassportFirstName_Specified;
    property ForeignPassportLastName:           string       Index (IS_OPTN or IS_NLBL) read FForeignPassportLastName write SetForeignPassportLastName stored ForeignPassportLastName_Specified;
    property ForeignPassportMRZ:                string       Index (IS_OPTN or IS_NLBL) read FForeignPassportMRZ write SetForeignPassportMRZ stored ForeignPassportMRZ_Specified;
    property ForeignPassportMiddleName:         string       Index (IS_OPTN or IS_NLBL) read FForeignPassportMiddleName write SetForeignPassportMiddleName stored ForeignPassportMiddleName_Specified;
    property ForeignPassportNationality:        string       Index (IS_OPTN or IS_NLBL) read FForeignPassportNationality write SetForeignPassportNationality stored ForeignPassportNationality_Specified;
    property ForeignPassportNumber:             string       Index (IS_OPTN or IS_NLBL) read FForeignPassportNumber write SetForeignPassportNumber stored ForeignPassportNumber_Specified;
    property ForeignPassportPersonalCode:       string       Index (IS_OPTN or IS_NLBL) read FForeignPassportPersonalCode write SetForeignPassportPersonalCode stored ForeignPassportPersonalCode_Specified;
    property ForeignPassportSex:                string       Index (IS_OPTN or IS_NLBL) read FForeignPassportSex write SetForeignPassportSex stored ForeignPassportSex_Specified;
    property PassportDateOfBirth:               TXSDateTime  Index (IS_OPTN or IS_NLBL) read FPassportDateOfBirth write SetPassportDateOfBirth stored PassportDateOfBirth_Specified;
    property PassportDateOfIssue:               TXSDateTime  Index (IS_OPTN or IS_NLBL) read FPassportDateOfIssue write SetPassportDateOfIssue stored PassportDateOfIssue_Specified;
    property PassportDepartmentCode:            string       Index (IS_OPTN or IS_NLBL) read FPassportDepartmentCode write SetPassportDepartmentCode stored PassportDepartmentCode_Specified;
    property PassportFirstName:                 string       Index (IS_OPTN or IS_NLBL) read FPassportFirstName write SetPassportFirstName stored PassportFirstName_Specified;
    property PassportIssue:                     string       Index (IS_OPTN or IS_NLBL) read FPassportIssue write SetPassportIssue stored PassportIssue_Specified;
    property PassportLastName:                  string       Index (IS_OPTN or IS_NLBL) read FPassportLastName write SetPassportLastName stored PassportLastName_Specified;
    property PassportMiddleName:                string       Index (IS_OPTN or IS_NLBL) read FPassportMiddleName write SetPassportMiddleName stored PassportMiddleName_Specified;
    property PassportNumber:                    string       Index (IS_OPTN or IS_NLBL) read FPassportNumber write SetPassportNumber stored PassportNumber_Specified;
    property PassportPlaceOfBirth:              string       Index (IS_OPTN or IS_NLBL) read FPassportPlaceOfBirth write SetPassportPlaceOfBirth stored PassportPlaceOfBirth_Specified;
    property PassportRegistrationAddress:       string       Index (IS_OPTN or IS_NLBL) read FPassportRegistrationAddress write SetPassportRegistrationAddress stored PassportRegistrationAddress_Specified;
    property PassportSeries:                    string       Index (IS_OPTN or IS_NLBL) read FPassportSeries write SetPassportSeries stored PassportSeries_Specified;
    property PassportSex:                       string       Index (IS_OPTN or IS_NLBL) read FPassportSex write SetPassportSex stored PassportSex_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeDocumentsSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeDocumentsSaveData = class(AcsEmployeeDocumentsSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeDocumentsData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeDocumentsData2 = class(AcsEmployeeDocumentsSaveData2)
  private
    FID: guid;
    FID_Specified: boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
  published
    property ID: guid  Index (IS_OPTN) read FID write SetID stored ID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeDocumentsData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeDocumentsData = class(AcsEmployeeDocumentsData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DataForPeriodModel, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  DataForPeriodModel2 = class(TRemotable)
  private
    FActualNumberEmployee: Integer;
    FActualNumberEmployee_Specified: boolean;
    FActualPercentValue: Double;
    FActualPercentValue_Specified: boolean;
    FDeparmentGuid: guid;
    FDeparmentGuid_Specified: boolean;
    FEvaluationSystem: Integer;
    FEvaluationSystem_Specified: boolean;
    FMessageError: string;
    FMessageError_Specified: boolean;
    FNumberOfEmployees: Integer;
    FNumberOfEmployees_Specified: boolean;
    FPlanNumberEmployee: Integer;
    FPlanNumberEmployee_Specified: boolean;
    FPlanPercentValue: Double;
    FPlanPercentValue_Specified: boolean;
    FVType: ViolationType;
    FVType_Specified: boolean;
    procedure SetActualNumberEmployee(Index: Integer; const AInteger: Integer);
    function  ActualNumberEmployee_Specified(Index: Integer): boolean;
    procedure SetActualPercentValue(Index: Integer; const ADouble: Double);
    function  ActualPercentValue_Specified(Index: Integer): boolean;
    procedure SetDeparmentGuid(Index: Integer; const Aguid: guid);
    function  DeparmentGuid_Specified(Index: Integer): boolean;
    procedure SetEvaluationSystem(Index: Integer; const AInteger: Integer);
    function  EvaluationSystem_Specified(Index: Integer): boolean;
    procedure SetMessageError(Index: Integer; const Astring: string);
    function  MessageError_Specified(Index: Integer): boolean;
    procedure SetNumberOfEmployees(Index: Integer; const AInteger: Integer);
    function  NumberOfEmployees_Specified(Index: Integer): boolean;
    procedure SetPlanNumberEmployee(Index: Integer; const AInteger: Integer);
    function  PlanNumberEmployee_Specified(Index: Integer): boolean;
    procedure SetPlanPercentValue(Index: Integer; const ADouble: Double);
    function  PlanPercentValue_Specified(Index: Integer): boolean;
    procedure SetVType(Index: Integer; const AViolationType: ViolationType);
    function  VType_Specified(Index: Integer): boolean;
  published
    property ActualNumberEmployee: Integer        Index (IS_OPTN) read FActualNumberEmployee write SetActualNumberEmployee stored ActualNumberEmployee_Specified;
    property ActualPercentValue:   Double         Index (IS_OPTN) read FActualPercentValue write SetActualPercentValue stored ActualPercentValue_Specified;
    property DeparmentGuid:        guid           Index (IS_OPTN) read FDeparmentGuid write SetDeparmentGuid stored DeparmentGuid_Specified;
    property EvaluationSystem:     Integer        Index (IS_OPTN or IS_NLBL) read FEvaluationSystem write SetEvaluationSystem stored EvaluationSystem_Specified;
    property MessageError:         string         Index (IS_OPTN or IS_NLBL) read FMessageError write SetMessageError stored MessageError_Specified;
    property NumberOfEmployees:    Integer        Index (IS_OPTN) read FNumberOfEmployees write SetNumberOfEmployees stored NumberOfEmployees_Specified;
    property PlanNumberEmployee:   Integer        Index (IS_OPTN) read FPlanNumberEmployee write SetPlanNumberEmployee stored PlanNumberEmployee_Specified;
    property PlanPercentValue:     Double         Index (IS_OPTN) read FPlanPercentValue write SetPlanPercentValue stored PlanPercentValue_Specified;
    property VType:                ViolationType  Index (IS_OPTN) read FVType write SetVType stored VType_Specified;
  end;



  // ************************************************************************ //
  // XML       : DataOnPresenceInWorkplace, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  DataOnPresenceInWorkplace2 = class(TRemotable)
  private
    FActualNumberEmployee: Integer;
    FActualNumberEmployee_Specified: boolean;
    FActualPercentValue: Double;
    FActualPercentValue_Specified: boolean;
    FDeparmentGuid: guid;
    FDeparmentGuid_Specified: boolean;
    FTotalNumberEmployee: Integer;
    FTotalNumberEmployee_Specified: boolean;
    procedure SetActualNumberEmployee(Index: Integer; const AInteger: Integer);
    function  ActualNumberEmployee_Specified(Index: Integer): boolean;
    procedure SetActualPercentValue(Index: Integer; const ADouble: Double);
    function  ActualPercentValue_Specified(Index: Integer): boolean;
    procedure SetDeparmentGuid(Index: Integer; const Aguid: guid);
    function  DeparmentGuid_Specified(Index: Integer): boolean;
    procedure SetTotalNumberEmployee(Index: Integer; const AInteger: Integer);
    function  TotalNumberEmployee_Specified(Index: Integer): boolean;
  published
    property ActualNumberEmployee: Integer  Index (IS_OPTN) read FActualNumberEmployee write SetActualNumberEmployee stored ActualNumberEmployee_Specified;
    property ActualPercentValue:   Double   Index (IS_OPTN) read FActualPercentValue write SetActualPercentValue stored ActualPercentValue_Specified;
    property DeparmentGuid:        guid     Index (IS_OPTN) read FDeparmentGuid write SetDeparmentGuid stored DeparmentGuid_Specified;
    property TotalNumberEmployee:  Integer  Index (IS_OPTN) read FTotalNumberEmployee write SetTotalNumberEmployee stored TotalNumberEmployee_Specified;
  end;



  // ************************************************************************ //
  // XML       : PlanModel, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  PlanModel2 = class(TRemotable)
  private
    FDepartmentGuid: guid;
    FDepartmentGuid_Specified: boolean;
    FDeviationValue: Double;
    FDeviationValue_Specified: boolean;
    FPlanValue: Double;
    FPlanValue_Specified: boolean;
    FVType: Integer;
    FVType_Specified: boolean;
    procedure SetDepartmentGuid(Index: Integer; const Aguid: guid);
    function  DepartmentGuid_Specified(Index: Integer): boolean;
    procedure SetDeviationValue(Index: Integer; const ADouble: Double);
    function  DeviationValue_Specified(Index: Integer): boolean;
    procedure SetPlanValue(Index: Integer; const ADouble: Double);
    function  PlanValue_Specified(Index: Integer): boolean;
    procedure SetVType(Index: Integer; const AInteger: Integer);
    function  VType_Specified(Index: Integer): boolean;
  published
    property DepartmentGuid: guid     Index (IS_OPTN or IS_NLBL) read FDepartmentGuid write SetDepartmentGuid stored DepartmentGuid_Specified;
    property DeviationValue: Double   Index (IS_OPTN or IS_NLBL) read FDeviationValue write SetDeviationValue stored DeviationValue_Specified;
    property PlanValue:      Double   Index (IS_OPTN or IS_NLBL) read FPlanValue write SetPlanValue stored PlanValue_Specified;
    property VType:          Integer  Index (IS_OPTN) read FVType write SetVType stored VType_Specified;
  end;



  // ************************************************************************ //
  // XML       : TagFullInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  TagFullInfo2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Description: string  Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property Id:          guid    Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property Name_:       string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : ResourceTagsData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  ResourceTagsData2 = class(TagFullInfo2)
  private
    FResourceID: guid;
    FResourceID_Specified: boolean;
    FTagID: guid;
    FTagID_Specified: boolean;
    procedure SetResourceID(Index: Integer; const Aguid: guid);
    function  ResourceID_Specified(Index: Integer): boolean;
    procedure SetTagID(Index: Integer; const Aguid: guid);
    function  TagID_Specified(Index: Integer): boolean;
  published
    property ResourceID: guid  Index (IS_OPTN) read FResourceID write SetResourceID stored ResourceID_Specified;
    property TagID:      guid  Index (IS_OPTN) read FTagID write SetTagID stored TagID_Specified;
  end;



  // ************************************************************************ //
  // XML       : ResourceTagsData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  ResourceTagsData = class(ResourceTagsData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BoxAccessLevelTagsData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  BoxAccessLevelTagsData2 = class(TagFullInfo2)
  private
    FBoxAccessLevelID: guid;
    FBoxAccessLevelID_Specified: boolean;
    FTagID: guid;
    FTagID_Specified: boolean;
    procedure SetBoxAccessLevelID(Index: Integer; const Aguid: guid);
    function  BoxAccessLevelID_Specified(Index: Integer): boolean;
    procedure SetTagID(Index: Integer; const Aguid: guid);
    function  TagID_Specified(Index: Integer): boolean;
  published
    property BoxAccessLevelID: guid  Index (IS_OPTN) read FBoxAccessLevelID write SetBoxAccessLevelID stored BoxAccessLevelID_Specified;
    property TagID:            guid  Index (IS_OPTN) read FTagID write SetTagID stored TagID_Specified;
  end;



  // ************************************************************************ //
  // XML       : BoxAccessLevelTagsData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  BoxAccessLevelTagsData = class(BoxAccessLevelTagsData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AccessLevelTagsData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  AccessLevelTagsData2 = class(TagFullInfo2)
  private
    FAccessLevelID: guid;
    FAccessLevelID_Specified: boolean;
    FTagID: guid;
    FTagID_Specified: boolean;
    procedure SetAccessLevelID(Index: Integer; const Aguid: guid);
    function  AccessLevelID_Specified(Index: Integer): boolean;
    procedure SetTagID(Index: Integer; const Aguid: guid);
    function  TagID_Specified(Index: Integer): boolean;
  published
    property AccessLevelID: guid  Index (IS_OPTN) read FAccessLevelID write SetAccessLevelID stored AccessLevelID_Specified;
    property TagID:         guid  Index (IS_OPTN) read FTagID write SetTagID stored TagID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AccessLevelTagsData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  AccessLevelTagsData = class(AccessLevelTagsData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : TagFullInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  TagFullInfo = class(TagFullInfo2)
  private
  published
  end;

  ArrayOfTagFullInfo = array of TagFullInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }
  ArrayOfResourceTagsData = array of ResourceTagsData2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }
  ArrayOfKeyValueOfstringstring = array of KeyValueOfstringstring;   { "http://schemas.microsoft.com/2003/10/Serialization/Arrays"[GblCplx] }


  // ************************************************************************ //
  // XML       : KeyValueOfstringstring, <complexType>
  // Namespace : http://schemas.microsoft.com/2003/10/Serialization/Arrays
  // ************************************************************************ //
  KeyValueOfstringstring = class(TRemotable)
  private
    FKey: string;
    FValue: string;
  published
    property Key:   string  Index (IS_NLBL) read FKey write FKey;
    property Value: string  Index (IS_NLBL) read FValue write FValue;
  end;

  ArrayOfunsignedShort = array of Word;         { "http://schemas.microsoft.com/2003/10/Serialization/Arrays"[GblCplx] }
  ArrayOfEmployeeGroupTagsData = array of EmployeeGroupTagsData2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }


  // ************************************************************************ //
  // XML       : EmployeeGroupTagsData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  EmployeeGroupTagsData2 = class(TagFullInfo2)
  private
    FEmployeeGroupID: guid;
    FEmployeeGroupID_Specified: boolean;
    FTagID: guid;
    FTagID_Specified: boolean;
    procedure SetEmployeeGroupID(Index: Integer; const Aguid: guid);
    function  EmployeeGroupID_Specified(Index: Integer): boolean;
    procedure SetTagID(Index: Integer; const Aguid: guid);
    function  TagID_Specified(Index: Integer): boolean;
  published
    property EmployeeGroupID: guid  Index (IS_OPTN) read FEmployeeGroupID write SetEmployeeGroupID stored EmployeeGroupID_Specified;
    property TagID:           guid  Index (IS_OPTN) read FTagID write SetTagID stored TagID_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmployeeGroupTagsData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  EmployeeGroupTagsData = class(EmployeeGroupTagsData2)
  private
  published
  end;

  ArrayOfAccessLevelTagsData = array of AccessLevelTagsData2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }


  // ************************************************************************ //
  // XML       : ReportTagsData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  ReportTagsData2 = class(TagFullInfo2)
  private
    FReportID: guid;
    FReportID_Specified: boolean;
    FTagID: guid;
    FTagID_Specified: boolean;
    procedure SetReportID(Index: Integer; const Aguid: guid);
    function  ReportID_Specified(Index: Integer): boolean;
    procedure SetTagID(Index: Integer; const Aguid: guid);
    function  TagID_Specified(Index: Integer): boolean;
  published
    property ReportID: guid  Index (IS_OPTN) read FReportID write SetReportID stored ReportID_Specified;
    property TagID:    guid  Index (IS_OPTN) read FTagID write SetTagID stored TagID_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReportTagsData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  ReportTagsData = class(ReportTagsData2)
  private
  published
  end;

  ArrayOfMifareProfileTagsData = array of MifareProfileTagsData2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }


  // ************************************************************************ //
  // XML       : MifareProfileTagsData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  MifareProfileTagsData2 = class(TagFullInfo2)
  private
    FMifareProfileID: guid;
    FMifareProfileID_Specified: boolean;
    FTagID: guid;
    FTagID_Specified: boolean;
    procedure SetMifareProfileID(Index: Integer; const Aguid: guid);
    function  MifareProfileID_Specified(Index: Integer): boolean;
    procedure SetTagID(Index: Integer; const Aguid: guid);
    function  TagID_Specified(Index: Integer): boolean;
  published
    property MifareProfileID: guid  Index (IS_OPTN) read FMifareProfileID write SetMifareProfileID stored MifareProfileID_Specified;
    property TagID:           guid  Index (IS_OPTN) read FTagID write SetTagID stored TagID_Specified;
  end;



  // ************************************************************************ //
  // XML       : MifareProfileTagsData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag
  // ************************************************************************ //
  MifareProfileTagsData = class(MifareProfileTagsData2)
  private
  published
  end;

  ArrayOfReportTagsData = array of ReportTagsData2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"[GblCplx] }
  ArrayOfArrayOfKeyValueOfstringstring = array of ArrayOfKeyValueOfstringstring;   { "http://schemas.microsoft.com/2003/10/Serialization/Arrays"[GblCplx] }


  // ************************************************************************ //
  // XML       : DepartmentTreeModel, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  DepartmentTreeModel = class(DepartmentTreeModel2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DataForPeriodModel, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  DataForPeriodModel = class(DataForPeriodModel2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DataOnPresenceInWorkplace, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  DataOnPresenceInWorkplace = class(DataOnPresenceInWorkplace2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PlanModel, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  PlanModel = class(PlanModel2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DataForViolator, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  DataForViolator2 = class(TRemotable)
  private
    FDate: TXSDateTime;
    FDate_Specified: boolean;
    FDeparmentGuid: guid;
    FDeparmentGuid_Specified: boolean;
    FPercentValue: Double;
    FPercentValue_Specified: boolean;
    FValue: Integer;
    FValue_Specified: boolean;
    procedure SetDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  Date_Specified(Index: Integer): boolean;
    procedure SetDeparmentGuid(Index: Integer; const Aguid: guid);
    function  DeparmentGuid_Specified(Index: Integer): boolean;
    procedure SetPercentValue(Index: Integer; const ADouble: Double);
    function  PercentValue_Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const AInteger: Integer);
    function  Value_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Date:          TXSDateTime  Index (IS_OPTN) read FDate write SetDate stored Date_Specified;
    property DeparmentGuid: guid         Index (IS_OPTN) read FDeparmentGuid write SetDeparmentGuid stored DeparmentGuid_Specified;
    property PercentValue:  Double       Index (IS_OPTN) read FPercentValue write SetPercentValue stored PercentValue_Specified;
    property Value:         Integer      Index (IS_OPTN) read FValue write SetValue stored Value_Specified;
  end;

  ArrayOfViolator = array of Violator2;         { "http://schemas.datacontract.org/2004/07/RusGuard.Models"[GblCplx] }


  // ************************************************************************ //
  // XML       : Violator, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  Violator2 = class(Absent2)
  private
    FIsSystematic: Boolean;
    FIsSystematic_Specified: boolean;
    FMessageError: string;
    FMessageError_Specified: boolean;
    procedure SetIsSystematic(Index: Integer; const ABoolean: Boolean);
    function  IsSystematic_Specified(Index: Integer): boolean;
    procedure SetMessageError(Index: Integer; const Astring: string);
    function  MessageError_Specified(Index: Integer): boolean;
  published
    property IsSystematic: Boolean  Index (IS_OPTN) read FIsSystematic write SetIsSystematic stored IsSystematic_Specified;
    property MessageError: string   Index (IS_OPTN or IS_NLBL) read FMessageError write SetMessageError stored MessageError_Specified;
  end;

  ArrayOfint = array of Integer;                { "http://schemas.microsoft.com/2003/10/Serialization/Arrays"[GblCplx] }


  // ************************************************************************ //
  // XML       : ReactionSendEmailActionSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionSendEmailActionSaveData2 = class(TRemotable)
  private
    FCustomText: string;
    FCustomText_Specified: boolean;
    FEmailDistributionAddressId: guid;
    FEmailDistributionAddressId_Specified: boolean;
    FNumbersToSendEmailForEmployeesFromEvents: ArrayOfint;
    FNumbersToSendEmailForEmployeesFromEvents_Specified: boolean;
    FNumbersToSendEmailForEmployeesFromList: ArrayOfint;
    FNumbersToSendEmailForEmployeesFromList_Specified: boolean;
    FSendCustomText: Boolean;
    FSendCustomText_Specified: boolean;
    FSendToAllEmailAddressesOfEmployeesFromEvents: Boolean;
    FSendToAllEmailAddressesOfEmployeesFromEvents_Specified: boolean;
    FSendToAllEmailAddressesOfEmployeesFromList: Boolean;
    FSendToAllEmailAddressesOfEmployeesFromList_Specified: boolean;
    FWhetherToSendEmployeesFromEvents: Boolean;
    FWhetherToSendEmployeesFromEvents_Specified: boolean;
    FWhetherToSendEmployeesFromList: Boolean;
    FWhetherToSendEmployeesFromList_Specified: boolean;
    procedure SetCustomText(Index: Integer; const Astring: string);
    function  CustomText_Specified(Index: Integer): boolean;
    procedure SetEmailDistributionAddressId(Index: Integer; const Aguid: guid);
    function  EmailDistributionAddressId_Specified(Index: Integer): boolean;
    procedure SetNumbersToSendEmailForEmployeesFromEvents(Index: Integer; const AArrayOfint: ArrayOfint);
    function  NumbersToSendEmailForEmployeesFromEvents_Specified(Index: Integer): boolean;
    procedure SetNumbersToSendEmailForEmployeesFromList(Index: Integer; const AArrayOfint: ArrayOfint);
    function  NumbersToSendEmailForEmployeesFromList_Specified(Index: Integer): boolean;
    procedure SetSendCustomText(Index: Integer; const ABoolean: Boolean);
    function  SendCustomText_Specified(Index: Integer): boolean;
    procedure SetSendToAllEmailAddressesOfEmployeesFromEvents(Index: Integer; const ABoolean: Boolean);
    function  SendToAllEmailAddressesOfEmployeesFromEvents_Specified(Index: Integer): boolean;
    procedure SetSendToAllEmailAddressesOfEmployeesFromList(Index: Integer; const ABoolean: Boolean);
    function  SendToAllEmailAddressesOfEmployeesFromList_Specified(Index: Integer): boolean;
    procedure SetWhetherToSendEmployeesFromEvents(Index: Integer; const ABoolean: Boolean);
    function  WhetherToSendEmployeesFromEvents_Specified(Index: Integer): boolean;
    procedure SetWhetherToSendEmployeesFromList(Index: Integer; const ABoolean: Boolean);
    function  WhetherToSendEmployeesFromList_Specified(Index: Integer): boolean;
  published
    property CustomText:                                   string      Index (IS_OPTN or IS_NLBL) read FCustomText write SetCustomText stored CustomText_Specified;
    property EmailDistributionAddressId:                   guid        Index (IS_OPTN or IS_NLBL) read FEmailDistributionAddressId write SetEmailDistributionAddressId stored EmailDistributionAddressId_Specified;
    property NumbersToSendEmailForEmployeesFromEvents:     ArrayOfint  Index (IS_OPTN or IS_NLBL) read FNumbersToSendEmailForEmployeesFromEvents write SetNumbersToSendEmailForEmployeesFromEvents stored NumbersToSendEmailForEmployeesFromEvents_Specified;
    property NumbersToSendEmailForEmployeesFromList:       ArrayOfint  Index (IS_OPTN or IS_NLBL) read FNumbersToSendEmailForEmployeesFromList write SetNumbersToSendEmailForEmployeesFromList stored NumbersToSendEmailForEmployeesFromList_Specified;
    property SendCustomText:                               Boolean     Index (IS_OPTN) read FSendCustomText write SetSendCustomText stored SendCustomText_Specified;
    property SendToAllEmailAddressesOfEmployeesFromEvents: Boolean     Index (IS_OPTN) read FSendToAllEmailAddressesOfEmployeesFromEvents write SetSendToAllEmailAddressesOfEmployeesFromEvents stored SendToAllEmailAddressesOfEmployeesFromEvents_Specified;
    property SendToAllEmailAddressesOfEmployeesFromList:   Boolean     Index (IS_OPTN) read FSendToAllEmailAddressesOfEmployeesFromList write SetSendToAllEmailAddressesOfEmployeesFromList stored SendToAllEmailAddressesOfEmployeesFromList_Specified;
    property WhetherToSendEmployeesFromEvents:             Boolean     Index (IS_OPTN) read FWhetherToSendEmployeesFromEvents write SetWhetherToSendEmployeesFromEvents stored WhetherToSendEmployeesFromEvents_Specified;
    property WhetherToSendEmployeesFromList:               Boolean     Index (IS_OPTN) read FWhetherToSendEmployeesFromList write SetWhetherToSendEmployeesFromList stored WhetherToSendEmployeesFromList_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionSendEmailActionSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionSendEmailActionSlimInfo2 = class(ReactionSendEmailActionSaveData2)
  private
    FCommonData: ReactionActionSlimInfo2;
    FCommonData_Specified: boolean;
    procedure SetCommonData(Index: Integer; const AReactionActionSlimInfo2: ReactionActionSlimInfo2);
    function  CommonData_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CommonData: ReactionActionSlimInfo2  Index (IS_OPTN or IS_NLBL) read FCommonData write SetCommonData stored CommonData_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionSendEmailActionSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionSendEmailActionSlimInfo = class(ReactionSendEmailActionSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionSendEmailActionSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionSendEmailActionSaveData = class(ReactionSendEmailActionSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionSendSMSActionSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionSendSMSActionSaveData2 = class(TRemotable)
  private
    FCustomText: string;
    FCustomText_Specified: boolean;
    FGsmModemDriverId: guid;
    FGsmModemDriverId_Specified: boolean;
    FNumbersToSendSMSForEmployeesFromEvents: ArrayOfint;
    FNumbersToSendSMSForEmployeesFromEvents_Specified: boolean;
    FNumbersToSendSMSForEmployeesFromList: ArrayOfint;
    FNumbersToSendSMSForEmployeesFromList_Specified: boolean;
    FSendCustomText: Boolean;
    FSendCustomText_Specified: boolean;
    FSendToAllPhoneNumbersOfEmployeesFromEvents: Boolean;
    FSendToAllPhoneNumbersOfEmployeesFromEvents_Specified: boolean;
    FSendToAllPhoneNumbersOfEmployeesFromList: Boolean;
    FSendToAllPhoneNumbersOfEmployeesFromList_Specified: boolean;
    FWhetherToSendEmployeesFromEvents: Boolean;
    FWhetherToSendEmployeesFromEvents_Specified: boolean;
    FWhetherToSendEmployeesFromList: Boolean;
    FWhetherToSendEmployeesFromList_Specified: boolean;
    procedure SetCustomText(Index: Integer; const Astring: string);
    function  CustomText_Specified(Index: Integer): boolean;
    procedure SetGsmModemDriverId(Index: Integer; const Aguid: guid);
    function  GsmModemDriverId_Specified(Index: Integer): boolean;
    procedure SetNumbersToSendSMSForEmployeesFromEvents(Index: Integer; const AArrayOfint: ArrayOfint);
    function  NumbersToSendSMSForEmployeesFromEvents_Specified(Index: Integer): boolean;
    procedure SetNumbersToSendSMSForEmployeesFromList(Index: Integer; const AArrayOfint: ArrayOfint);
    function  NumbersToSendSMSForEmployeesFromList_Specified(Index: Integer): boolean;
    procedure SetSendCustomText(Index: Integer; const ABoolean: Boolean);
    function  SendCustomText_Specified(Index: Integer): boolean;
    procedure SetSendToAllPhoneNumbersOfEmployeesFromEvents(Index: Integer; const ABoolean: Boolean);
    function  SendToAllPhoneNumbersOfEmployeesFromEvents_Specified(Index: Integer): boolean;
    procedure SetSendToAllPhoneNumbersOfEmployeesFromList(Index: Integer; const ABoolean: Boolean);
    function  SendToAllPhoneNumbersOfEmployeesFromList_Specified(Index: Integer): boolean;
    procedure SetWhetherToSendEmployeesFromEvents(Index: Integer; const ABoolean: Boolean);
    function  WhetherToSendEmployeesFromEvents_Specified(Index: Integer): boolean;
    procedure SetWhetherToSendEmployeesFromList(Index: Integer; const ABoolean: Boolean);
    function  WhetherToSendEmployeesFromList_Specified(Index: Integer): boolean;
  published
    property CustomText:                                 string      Index (IS_OPTN or IS_NLBL) read FCustomText write SetCustomText stored CustomText_Specified;
    property GsmModemDriverId:                           guid        Index (IS_OPTN or IS_NLBL) read FGsmModemDriverId write SetGsmModemDriverId stored GsmModemDriverId_Specified;
    property NumbersToSendSMSForEmployeesFromEvents:     ArrayOfint  Index (IS_OPTN or IS_NLBL) read FNumbersToSendSMSForEmployeesFromEvents write SetNumbersToSendSMSForEmployeesFromEvents stored NumbersToSendSMSForEmployeesFromEvents_Specified;
    property NumbersToSendSMSForEmployeesFromList:       ArrayOfint  Index (IS_OPTN or IS_NLBL) read FNumbersToSendSMSForEmployeesFromList write SetNumbersToSendSMSForEmployeesFromList stored NumbersToSendSMSForEmployeesFromList_Specified;
    property SendCustomText:                             Boolean     Index (IS_OPTN) read FSendCustomText write SetSendCustomText stored SendCustomText_Specified;
    property SendToAllPhoneNumbersOfEmployeesFromEvents: Boolean     Index (IS_OPTN) read FSendToAllPhoneNumbersOfEmployeesFromEvents write SetSendToAllPhoneNumbersOfEmployeesFromEvents stored SendToAllPhoneNumbersOfEmployeesFromEvents_Specified;
    property SendToAllPhoneNumbersOfEmployeesFromList:   Boolean     Index (IS_OPTN) read FSendToAllPhoneNumbersOfEmployeesFromList write SetSendToAllPhoneNumbersOfEmployeesFromList stored SendToAllPhoneNumbersOfEmployeesFromList_Specified;
    property WhetherToSendEmployeesFromEvents:           Boolean     Index (IS_OPTN) read FWhetherToSendEmployeesFromEvents write SetWhetherToSendEmployeesFromEvents stored WhetherToSendEmployeesFromEvents_Specified;
    property WhetherToSendEmployeesFromList:             Boolean     Index (IS_OPTN) read FWhetherToSendEmployeesFromList write SetWhetherToSendEmployeesFromList stored WhetherToSendEmployeesFromList_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionSendSMSActionSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionSendSMSActionSaveData = class(ReactionSendSMSActionSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReactionSendSMSActionSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionSendSMSActionSlimInfo2 = class(ReactionSendSMSActionSaveData2)
  private
    FCommonData: ReactionActionSlimInfo2;
    FCommonData_Specified: boolean;
    procedure SetCommonData(Index: Integer; const AReactionActionSlimInfo2: ReactionActionSlimInfo2);
    function  CommonData_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CommonData: ReactionActionSlimInfo2  Index (IS_OPTN or IS_NLBL) read FCommonData write SetCommonData stored CommonData_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReactionSendSMSActionSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction
  // ************************************************************************ //
  ReactionSendSMSActionSlimInfo = class(ReactionSendSMSActionSlimInfo2)
  private
  published
  end;

  ArrayOfstring = array of string;              { "http://schemas.microsoft.com/2003/10/Serialization/Arrays"[GblCplx] }
  ArrayOfdateTime = array of TXSDateTime;       { "http://schemas.microsoft.com/2003/10/Serialization/Arrays"[GblCplx] }
  ArrayOfguid = array of guid;                  { "http://schemas.microsoft.com/2003/10/Serialization/Arrays"[GblCplx] }


  // ************************************************************************ //
  // XML       : AcsEmployeeGroupReactionInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeGroupReactionInfo2 = class(AcsEmployeeGroup2)
  private
    FEmployeeGroups1: ArrayOfAcsEmployeeGroupReactionInfo;
    FEmployeeGroups1_Specified: boolean;
    FEmployeesFromGroupsGuids: ArrayOfguid;
    FEmployeesFromGroupsGuids_Specified: boolean;
    FSelectedEmployeesGuids: ArrayOfguid;
    FSelectedEmployeesGuids_Specified: boolean;
    procedure SetEmployeeGroups1(Index: Integer; const AArrayOfAcsEmployeeGroupReactionInfo: ArrayOfAcsEmployeeGroupReactionInfo);
    function  EmployeeGroups1_Specified(Index: Integer): boolean;
    procedure SetEmployeesFromGroupsGuids(Index: Integer; const AArrayOfguid: ArrayOfguid);
    function  EmployeesFromGroupsGuids_Specified(Index: Integer): boolean;
    procedure SetSelectedEmployeesGuids(Index: Integer; const AArrayOfguid: ArrayOfguid);
    function  SelectedEmployeesGuids_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property EmployeeGroups1:          ArrayOfAcsEmployeeGroupReactionInfo  Index (IS_OPTN or IS_NLBL) read FEmployeeGroups1 write SetEmployeeGroups1 stored EmployeeGroups1_Specified;
    property EmployeesFromGroupsGuids: ArrayOfguid                          Index (IS_OPTN or IS_NLBL) read FEmployeesFromGroupsGuids write SetEmployeesFromGroupsGuids stored EmployeesFromGroupsGuids_Specified;
    property SelectedEmployeesGuids:   ArrayOfguid                          Index (IS_OPTN or IS_NLBL) read FSelectedEmployeesGuids write SetSelectedEmployeesGuids stored SelectedEmployeesGuids_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeGroupReactionInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeGroupReactionInfo = class(AcsEmployeeGroupReactionInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeGroupReportInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeGroupReportInfo2 = class(AcsEmployeeGroup2)
  private
    FEmployeeGroups2: ArrayOfAcsEmployeeGroupReportInfo;
    FEmployeeGroups2_Specified: boolean;
    FEmployeesFromGroupsGuids: ArrayOfguid;
    FEmployeesFromGroupsGuids_Specified: boolean;
    FSelectedEmployeesGuids: ArrayOfguid;
    FSelectedEmployeesGuids_Specified: boolean;
    procedure SetEmployeeGroups2(Index: Integer; const AArrayOfAcsEmployeeGroupReportInfo: ArrayOfAcsEmployeeGroupReportInfo);
    function  EmployeeGroups2_Specified(Index: Integer): boolean;
    procedure SetEmployeesFromGroupsGuids(Index: Integer; const AArrayOfguid: ArrayOfguid);
    function  EmployeesFromGroupsGuids_Specified(Index: Integer): boolean;
    procedure SetSelectedEmployeesGuids(Index: Integer; const AArrayOfguid: ArrayOfguid);
    function  SelectedEmployeesGuids_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property EmployeeGroups2:          ArrayOfAcsEmployeeGroupReportInfo  Index (IS_OPTN or IS_NLBL) read FEmployeeGroups2 write SetEmployeeGroups2 stored EmployeeGroups2_Specified;
    property EmployeesFromGroupsGuids: ArrayOfguid                        Index (IS_OPTN or IS_NLBL) read FEmployeesFromGroupsGuids write SetEmployeesFromGroupsGuids stored EmployeesFromGroupsGuids_Specified;
    property SelectedEmployeesGuids:   ArrayOfguid                        Index (IS_OPTN or IS_NLBL) read FSelectedEmployeesGuids write SetSelectedEmployeesGuids stored SelectedEmployeesGuids_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsEmployeeGroupReportInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  AcsEmployeeGroupReportInfo = class(AcsEmployeeGroupReportInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : Absent, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  Absent = class(Absent2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DataForViolator, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  DataForViolator = class(DataForViolator2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : Violator, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/RusGuard.Models
  // ************************************************************************ //
  Violator = class(Violator2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ArgumentOutOfRangeException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  ArgumentOutOfRangeException2 = class(ArgumentException2)
  private
  published
  end;

  ArrayOfVariableInfo = array of VariableInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }


  // ************************************************************************ //
  // XML       : EmployeeInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeeInfo2 = class(TRemotable)
  private
    FEmployeeID: guid;
    FEmployeeID_Specified: boolean;
    FFields: ArrayOfVariableInfo;
    FFields_Specified: boolean;
    FPhoto: TArray<System.Byte>;
    FPhoto_Specified: boolean;
    procedure SetEmployeeID(Index: Integer; const Aguid: guid);
    function  EmployeeID_Specified(Index: Integer): boolean;
    procedure SetFields(Index: Integer; const AArrayOfVariableInfo: ArrayOfVariableInfo);
    function  Fields_Specified(Index: Integer): boolean;
    procedure SetPhoto(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Photo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property EmployeeID: guid                 Index (IS_OPTN) read FEmployeeID write SetEmployeeID stored EmployeeID_Specified;
    property Fields:     ArrayOfVariableInfo  Index (IS_OPTN or IS_NLBL) read FFields write SetFields stored Fields_Specified;
    property Photo:      TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FPhoto write SetPhoto stored Photo_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmployeeInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees
  // ************************************************************************ //
  EmployeeInfo = class(EmployeeInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReportingServicesData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  ReportingServicesData2 = class(TRemotable)
  private
    FLogin: string;
    FLogin_Specified: boolean;
    FPassword: string;
    FPassword_Specified: boolean;
    FUrl: string;
    FUrl_Specified: boolean;
    procedure SetLogin(Index: Integer; const Astring: string);
    function  Login_Specified(Index: Integer): boolean;
    procedure SetPassword(Index: Integer; const Astring: string);
    function  Password_Specified(Index: Integer): boolean;
    procedure SetUrl(Index: Integer; const Astring: string);
    function  Url_Specified(Index: Integer): boolean;
  published
    property Login:    string  Index (IS_OPTN or IS_NLBL) read FLogin write SetLogin stored Login_Specified;
    property Password: string  Index (IS_OPTN or IS_NLBL) read FPassword write SetPassword stored Password_Specified;
    property Url:      string  Index (IS_OPTN or IS_NLBL) read FUrl write SetUrl stored Url_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReportingServicesData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  ReportingServicesData = class(ReportingServicesData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : TimeOfDay, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  TimeOfDay2 = class(TRemotable)
  private
    F_hours: Integer;
    F_minutes: Integer;
    F_seconds: Integer;
  published
    property _hours:   Integer  read F_hours write F_hours;
    property _minutes: Integer  read F_minutes write F_minutes;
    property _seconds: Integer  read F_seconds write F_seconds;
  end;



  // ************************************************************************ //
  // XML       : TimeOfDay, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  TimeOfDay = class(TimeOfDay2)
  private
  published
  end;

  ArrayOfLServerAdded = array of LServerAdded2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }


  // ************************************************************************ //
  // XML       : LServerAdded, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LServerAdded2 = class(TRemotable)
  private
    FServerInfo: LServerInfo2;
    FServerInfo_Specified: boolean;
    procedure SetServerInfo(Index: Integer; const ALServerInfo2: LServerInfo2);
    function  ServerInfo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ServerInfo: LServerInfo2  Index (IS_OPTN or IS_NLBL) read FServerInfo write SetServerInfo stored ServerInfo_Specified;
  end;



  // ************************************************************************ //
  // XML       : LServerAdded, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LServerAdded = class(LServerAdded2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AccessPoint2CameraSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  AccessPoint2CameraSaveData2 = class(TRemotable)
  private
    FAccessPointID: guid;
    FAccessPointID_Specified: boolean;
    FCameraID: guid;
    FCameraID_Specified: boolean;
    FDirection: EntryType;
    FDirection_Specified: boolean;
    procedure SetAccessPointID(Index: Integer; const Aguid: guid);
    function  AccessPointID_Specified(Index: Integer): boolean;
    procedure SetCameraID(Index: Integer; const Aguid: guid);
    function  CameraID_Specified(Index: Integer): boolean;
    procedure SetDirection(Index: Integer; const AEntryType: EntryType);
    function  Direction_Specified(Index: Integer): boolean;
  published
    property AccessPointID: guid       Index (IS_OPTN) read FAccessPointID write SetAccessPointID stored AccessPointID_Specified;
    property CameraID:      guid       Index (IS_OPTN) read FCameraID write SetCameraID stored CameraID_Specified;
    property Direction:     EntryType  Index (IS_OPTN) read FDirection write SetDirection stored Direction_Specified;
  end;



  // ************************************************************************ //
  // XML       : AccessPoint2CameraSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  AccessPoint2CameraSaveData = class(AccessPoint2CameraSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AccessPoint2CameraChain, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  AccessPoint2CameraChain2 = class(AccessPoint2CameraSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;

  ArrayOfAccessPoint2CameraChain = array of AccessPoint2CameraChain2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  ArrayOfAcsWeekFull = array of AcsWeekFull2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }


  // ************************************************************************ //
  // XML       : AcsWeekFull, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsWeekFull2 = class(TRemotable)
  private
    FFriday: AcsDaySchedule2;
    FFriday_Specified: boolean;
    FMonday: AcsDaySchedule2;
    FMonday_Specified: boolean;
    FSaturday: AcsDaySchedule2;
    FSaturday_Specified: boolean;
    FSunday: AcsDaySchedule2;
    FSunday_Specified: boolean;
    FThursday: AcsDaySchedule2;
    FThursday_Specified: boolean;
    FTuesday: AcsDaySchedule2;
    FTuesday_Specified: boolean;
    FWednesday: AcsDaySchedule2;
    FWednesday_Specified: boolean;
    procedure SetFriday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
    function  Friday_Specified(Index: Integer): boolean;
    procedure SetMonday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
    function  Monday_Specified(Index: Integer): boolean;
    procedure SetSaturday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
    function  Saturday_Specified(Index: Integer): boolean;
    procedure SetSunday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
    function  Sunday_Specified(Index: Integer): boolean;
    procedure SetThursday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
    function  Thursday_Specified(Index: Integer): boolean;
    procedure SetTuesday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
    function  Tuesday_Specified(Index: Integer): boolean;
    procedure SetWednesday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
    function  Wednesday_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Friday:    AcsDaySchedule2  Index (IS_OPTN or IS_NLBL) read FFriday write SetFriday stored Friday_Specified;
    property Monday:    AcsDaySchedule2  Index (IS_OPTN or IS_NLBL) read FMonday write SetMonday stored Monday_Specified;
    property Saturday:  AcsDaySchedule2  Index (IS_OPTN or IS_NLBL) read FSaturday write SetSaturday stored Saturday_Specified;
    property Sunday:    AcsDaySchedule2  Index (IS_OPTN or IS_NLBL) read FSunday write SetSunday stored Sunday_Specified;
    property Thursday:  AcsDaySchedule2  Index (IS_OPTN or IS_NLBL) read FThursday write SetThursday stored Thursday_Specified;
    property Tuesday:   AcsDaySchedule2  Index (IS_OPTN or IS_NLBL) read FTuesday write SetTuesday stored Tuesday_Specified;
    property Wednesday: AcsDaySchedule2  Index (IS_OPTN or IS_NLBL) read FWednesday write SetWednesday stored Wednesday_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsWeekFull, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsWeekFull = class(AcsWeekFull2)
  private
  published
  end;

  ArrayOfAcsWeekScheduleFull = array of AcsWeekScheduleFull2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  ArrayOfAcsWeekSlim = array of AcsWeekSlim2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }


  // ************************************************************************ //
  // XML       : AcsWeekSlim, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsWeekSlim2 = class(TRemotable)
  private
    FFriday: guid;
    FFriday_Specified: boolean;
    FMonday: guid;
    FMonday_Specified: boolean;
    FSaturday: guid;
    FSaturday_Specified: boolean;
    FSunday: guid;
    FSunday_Specified: boolean;
    FThursday: guid;
    FThursday_Specified: boolean;
    FTuesday: guid;
    FTuesday_Specified: boolean;
    FWednesday: guid;
    FWednesday_Specified: boolean;
    procedure SetFriday(Index: Integer; const Aguid: guid);
    function  Friday_Specified(Index: Integer): boolean;
    procedure SetMonday(Index: Integer; const Aguid: guid);
    function  Monday_Specified(Index: Integer): boolean;
    procedure SetSaturday(Index: Integer; const Aguid: guid);
    function  Saturday_Specified(Index: Integer): boolean;
    procedure SetSunday(Index: Integer; const Aguid: guid);
    function  Sunday_Specified(Index: Integer): boolean;
    procedure SetThursday(Index: Integer; const Aguid: guid);
    function  Thursday_Specified(Index: Integer): boolean;
    procedure SetTuesday(Index: Integer; const Aguid: guid);
    function  Tuesday_Specified(Index: Integer): boolean;
    procedure SetWednesday(Index: Integer; const Aguid: guid);
    function  Wednesday_Specified(Index: Integer): boolean;
  published
    property Friday:    guid  Index (IS_OPTN) read FFriday write SetFriday stored Friday_Specified;
    property Monday:    guid  Index (IS_OPTN) read FMonday write SetMonday stored Monday_Specified;
    property Saturday:  guid  Index (IS_OPTN) read FSaturday write SetSaturday stored Saturday_Specified;
    property Sunday:    guid  Index (IS_OPTN) read FSunday write SetSunday stored Sunday_Specified;
    property Thursday:  guid  Index (IS_OPTN) read FThursday write SetThursday stored Thursday_Specified;
    property Tuesday:   guid  Index (IS_OPTN) read FTuesday write SetTuesday stored Tuesday_Specified;
    property Wednesday: guid  Index (IS_OPTN) read FWednesday write SetWednesday stored Wednesday_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsWeekSlim, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsWeekSlim = class(AcsWeekSlim2)
  private
  published
  end;

  ArrayOfAcsWorkDayWithTransfer = array of AcsWorkDayWithTransfer2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  ArrayOfAcsCustomDay = array of AcsCustomDay2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }


  // ************************************************************************ //
  // XML       : AcsCustomizableDayBase, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsCustomizableDayBase2 = class(TRemotable)
  private
    FDate: TXSDateTime;
    FDate_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  Date_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Date:      TXSDateTime  Index (IS_OPTN) read FDate write SetDate stored Date_Specified;
    property Id:        guid         Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property IsRemoved: Boolean      Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
    property Name_:     string       Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsCustomDay, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsCustomDay2 = class(AcsCustomizableDayBase2)
  private
    FDayType: AcsCustomizableDayType;
    FDayType_Specified: boolean;
    procedure SetDayType(Index: Integer; const AAcsCustomizableDayType: AcsCustomizableDayType);
    function  DayType_Specified(Index: Integer): boolean;
  published
    property DayType: AcsCustomizableDayType  Index (IS_OPTN) read FDayType write SetDayType stored DayType_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsCustomDay, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsCustomDay = class(AcsCustomDay2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsWorkDayWithTransfer, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsWorkDayWithTransfer2 = class(AcsCustomizableDayBase2)
  private
    FTransferedDate: TXSDateTime;
    FTransferedDate_Specified: boolean;
    procedure SetTransferedDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  TransferedDate_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property TransferedDate: TXSDateTime  Index (IS_OPTN) read FTransferedDate write SetTransferedDate stored TransferedDate_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsWorkDayWithTransfer, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsWorkDayWithTransfer = class(AcsWorkDayWithTransfer2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsCustomizableDayBase, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsCustomizableDayBase = class(AcsCustomizableDayBase2)
  private
  published
  end;

  ArrayOfAcsWeekScheduleSlim = array of AcsWeekScheduleSlim2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  ArrayOfAcsDaySchedule = array of AcsDaySchedule2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }


  // ************************************************************************ //
  // XML       : AccessPoint2CameraChain, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  AccessPoint2CameraChain = class(AccessPoint2CameraChain2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsScheduleSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsScheduleSlimInfo2 = class(TRemotable)
  private
    FAcsScheduleType: AcsScheduleType;
    FAcsScheduleType_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetAcsScheduleType(Index: Integer; const AAcsScheduleType: AcsScheduleType);
    function  AcsScheduleType_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property AcsScheduleType: AcsScheduleType  Index (IS_OPTN) read FAcsScheduleType write SetAcsScheduleType stored AcsScheduleType_Specified;
    property Id:              guid             Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property Name_:           string           Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsScheduleSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsScheduleSlimInfo = class(AcsScheduleSlimInfo2)
  private
  published
  end;

  ArrayOfAcsMultiDaySchedule = array of AcsMultiDaySchedule2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }
  ArrayOfRGDayIntervals = array of RGDayIntervals2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }


  // ************************************************************************ //
  // XML       : AcsScheduleBase, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsScheduleBase2 = class(TRemotable)
  private
    FBuiltInType: AcsScheduleBuiltInType;
    FBuiltInType_Specified: boolean;
    FComment: string;
    FComment_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetBuiltInType(Index: Integer; const AAcsScheduleBuiltInType: AcsScheduleBuiltInType);
    function  BuiltInType_Specified(Index: Integer): boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property BuiltInType: AcsScheduleBuiltInType  Index (IS_OPTN) read FBuiltInType write SetBuiltInType stored BuiltInType_Specified;
    property Comment:     string                  Index (IS_OPTN or IS_NLBL) read FComment write SetComment stored Comment_Specified;
    property ID:          guid                    Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property IsRemoved:   Boolean                 Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
    property Name_:       string                  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsMultiDaySchedule, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsMultiDaySchedule2 = class(AcsScheduleBase2)
  private
    FDayIntervals: ArrayOfRGDayIntervals;
    FDayIntervals_Specified: boolean;
    procedure SetDayIntervals(Index: Integer; const AArrayOfRGDayIntervals: ArrayOfRGDayIntervals);
    function  DayIntervals_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DayIntervals: ArrayOfRGDayIntervals  Index (IS_OPTN or IS_NLBL) read FDayIntervals write SetDayIntervals stored DayIntervals_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsMultiDaySchedule, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsMultiDaySchedule = class(AcsMultiDaySchedule2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsScheduleBase, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsScheduleBase = class(AcsScheduleBase2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsWeekScheduleFull, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsWeekScheduleFull2 = class(AcsScheduleBase2)
  private
    FWeeks: ArrayOfAcsWeekFull;
    FWeeks_Specified: boolean;
    procedure SetWeeks(Index: Integer; const AArrayOfAcsWeekFull: ArrayOfAcsWeekFull);
    function  Weeks_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Weeks: ArrayOfAcsWeekFull  Index (IS_OPTN or IS_NLBL) read FWeeks write SetWeeks stored Weeks_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsWeekScheduleFull, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsWeekScheduleFull = class(AcsWeekScheduleFull2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsWeekScheduleSlim, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsWeekScheduleSlim2 = class(AcsScheduleBase2)
  private
    FWeeks: ArrayOfAcsWeekSlim;
    FWeeks_Specified: boolean;
    procedure SetWeeks(Index: Integer; const AArrayOfAcsWeekSlim: ArrayOfAcsWeekSlim);
    function  Weeks_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Weeks: ArrayOfAcsWeekSlim  Index (IS_OPTN or IS_NLBL) read FWeeks write SetWeeks stored Weeks_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsWeekScheduleSlim, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsWeekScheduleSlim = class(AcsWeekScheduleSlim2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsDaySchedule, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsDaySchedule2 = class(AcsScheduleBase2)
  private
    FDayIntervals: RGDayIntervals2;
    FDayIntervals_Specified: boolean;
    procedure SetDayIntervals(Index: Integer; const ARGDayIntervals2: RGDayIntervals2);
    function  DayIntervals_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DayIntervals: RGDayIntervals2  Index (IS_OPTN or IS_NLBL) read FDayIntervals write SetDayIntervals stored DayIntervals_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsDaySchedule, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  AcsDaySchedule = class(AcsDaySchedule2)
  private
  published
  end;

  ArrayOfRGTimeInterval = array of RGTimeInterval2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"[GblCplx] }


  // ************************************************************************ //
  // XML       : RGDayIntervals, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  RGDayIntervals2 = class(TRemotable)
  private
    FTimeIntervals: ArrayOfRGTimeInterval;
    FTimeIntervals_Specified: boolean;
    procedure SetTimeIntervals(Index: Integer; const AArrayOfRGTimeInterval: ArrayOfRGTimeInterval);
    function  TimeIntervals_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property TimeIntervals: ArrayOfRGTimeInterval  Index (IS_OPTN or IS_NLBL) read FTimeIntervals write SetTimeIntervals stored TimeIntervals_Specified;
  end;



  // ************************************************************************ //
  // XML       : RGDayIntervals, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  RGDayIntervals = class(RGDayIntervals2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RGTimeInterval, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  RGTimeInterval2 = class(TRemotable)
  private
    FEndTime: TimeOfDay2;
    FEndTime_Specified: boolean;
    FIntervalType: AcsTimeIntervalType;
    FIntervalType_Specified: boolean;
    FStartTime: TimeOfDay2;
    FStartTime_Specified: boolean;
    procedure SetEndTime(Index: Integer; const ATimeOfDay2: TimeOfDay2);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetIntervalType(Index: Integer; const AAcsTimeIntervalType: AcsTimeIntervalType);
    function  IntervalType_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATimeOfDay2: TimeOfDay2);
    function  StartTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property EndTime:      TimeOfDay2           Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property IntervalType: AcsTimeIntervalType  Index (IS_OPTN) read FIntervalType write SetIntervalType stored IntervalType_Specified;
    property StartTime:    TimeOfDay2           Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : RGTimeInterval, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule
  // ************************************************************************ //
  RGTimeInterval = class(RGTimeInterval2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ExternalException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System.Runtime.InteropServices
  // ************************************************************************ //
  ExternalException2 = class(SystemException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : Win32Exception, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System.ComponentModel
  // ************************************************************************ //
  Win32Exception2 = class(ExternalException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : Win32Exception, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System.ComponentModel
  // ************************************************************************ //
  Win32Exception = class(Win32Exception2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ExternalException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System.Runtime.InteropServices
  // ************************************************************************ //
  ExternalException = class(ExternalException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OperationCanceledException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // Info      : Fault
  // Base Types: Exception, SystemException, OperationCanceledException
  // ************************************************************************ //
  OperationCanceledException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;

  ArrayOfIPAddress = array of IPAddress2;       { "http://schemas.datacontract.org/2004/07/System.Net"[GblCplx] }


  // ************************************************************************ //
  // XML       : WebException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System.Net
  // Info      : Fault
  // Base Types: Exception, SystemException, InvalidOperationException, WebException
  // ************************************************************************ //
  WebException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : WebException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System.Net
  // ************************************************************************ //
  WebException2 = class(InvalidOperationException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SocketException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System.Net.Sockets
  // ************************************************************************ //
  SocketException2 = class(Win32Exception2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : IPAddress, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System.Net
  // ************************************************************************ //
  IPAddress2 = class(TRemotable)
  private
    Fm_Address: Int64;
    Fm_Family: AddressFamily;
    Fm_HashCode: Integer;
    Fm_Numbers: ArrayOfunsignedShort;
    Fm_ScopeId: Int64;
  published
    property m_Address:  Int64                 read Fm_Address write Fm_Address;
    property m_Family:   AddressFamily         read Fm_Family write Fm_Family;
    property m_HashCode: Integer               read Fm_HashCode write Fm_HashCode;
    property m_Numbers:  ArrayOfunsignedShort  Index (IS_NLBL) read Fm_Numbers write Fm_Numbers;
    property m_ScopeId:  Int64                 read Fm_ScopeId write Fm_ScopeId;
  end;



  // ************************************************************************ //
  // XML       : SocketException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System.Net.Sockets
  // Info      : Fault
  // Base Types: Exception, SystemException, ExternalException, Win32Exception, SocketException
  // ************************************************************************ //
  SocketException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;

  ArrayOfTupleOfguidNullableOfdateTimeGOBf0pnW = array of TupleOfguidNullableOfdateTimeGOBf0pnW2;   { "http://schemas.datacontract.org/2004/07/System"[GblCplx] }


  // ************************************************************************ //
  // XML       : TupleOfguidNullableOfdateTimeGOBf0pnW, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  TupleOfguidNullableOfdateTimeGOBf0pnW2 = class(TRemotable)
  private
    Fm_Item1: guid;
    Fm_Item2: TXSDateTime;
  public
    destructor Destroy; override;
  published
    property m_Item1: guid         read Fm_Item1 write Fm_Item1;
    property m_Item2: TXSDateTime  Index (IS_NLBL) read Fm_Item2 write Fm_Item2;
  end;



  // ************************************************************************ //
  // XML       : TupleOfguidNullableOfdateTimeGOBf0pnW, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  TupleOfguidNullableOfdateTimeGOBf0pnW = class(TupleOfguidNullableOfdateTimeGOBf0pnW2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ApplicationException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // Info      : Fault
  // Base Types: Exception, ApplicationException
  // ************************************************************************ //
  ApplicationException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH2 = class(TRemotable)
  private
    Fm_Item1: ArrayOfAcsBoxAccessLevelElementSlimInfo;
    Fm_Item2: ArrayOfAcsBoxAccessLevelElementSlimInfo;
    Fm_Item3: ArrayOfAcsBoxAccessLevelElementSlimInfo;
  public
    destructor Destroy; override;
  published
    property m_Item1: ArrayOfAcsBoxAccessLevelElementSlimInfo  Index (IS_NLBL) read Fm_Item1 write Fm_Item1;
    property m_Item2: ArrayOfAcsBoxAccessLevelElementSlimInfo  Index (IS_NLBL) read Fm_Item2 write Fm_Item2;
    property m_Item3: ArrayOfAcsBoxAccessLevelElementSlimInfo  Index (IS_NLBL) read Fm_Item3 write Fm_Item3;
  end;



  // ************************************************************************ //
  // XML       : TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH = class(TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : TimeoutException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  TimeoutException2 = class(SystemException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : TupleOfArrayOfguidArrayOfguid0dMmj3_Sh, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  TupleOfArrayOfguidArrayOfguid0dMmj3_Sh2 = class(TRemotable)
  private
    Fm_Item1: ArrayOfguid;
    Fm_Item2: ArrayOfguid;
  published
    property m_Item1: ArrayOfguid  Index (IS_NLBL) read Fm_Item1 write Fm_Item1;
    property m_Item2: ArrayOfguid  Index (IS_NLBL) read Fm_Item2 write Fm_Item2;
  end;



  // ************************************************************************ //
  // XML       : TupleOfArrayOfguidArrayOfguid0dMmj3_Sh, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  TupleOfArrayOfguidArrayOfguid0dMmj3_Sh = class(TupleOfArrayOfguidArrayOfguid0dMmj3_Sh2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OperationCanceledException, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  OperationCanceledException2 = class(SystemException2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ArgumentNullException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // Info      : Fault
  // Base Types: Exception, SystemException, ArgumentException, ArgumentNullException
  // ************************************************************************ //
  ArgumentNullException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : ArgumentOutOfRangeException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // Info      : Fault
  // Base Types: Exception, SystemException, ArgumentException, ArgumentOutOfRangeException
  // ************************************************************************ //
  ArgumentOutOfRangeException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : TimeoutException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // Info      : Fault
  // Base Types: Exception, SystemException, TimeoutException
  // ************************************************************************ //
  TimeoutException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : ArgumentException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // Info      : Fault
  // Base Types: Exception, SystemException, ArgumentException
  // ************************************************************************ //
  ArgumentException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : Exception, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  Exception = class(Exception2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : InvalidOperationException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // Info      : Fault
  // Base Types: Exception, SystemException, InvalidOperationException
  // ************************************************************************ //
  InvalidOperationException = class(ERemotableException)
  private
    FFactoryType: FactoryType;
    FFactoryType_Specified: boolean;
    procedure SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
    function  FactoryType_Specified(Index: Integer): boolean;
  published
    property FactoryType: FactoryType  Index (IS_ATTR or IS_OPTN) read FFactoryType write SetFactoryType stored FactoryType_Specified;
  end;



  // ************************************************************************ //
  // XML       : SystemException, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System
  // ************************************************************************ //
  SystemException = class(SystemException2)
  private
  published
  end;

  ArrayOfLDriverAdded = array of LDriverAdded2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }


  // ************************************************************************ //
  // XML       : LDriverAdded, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LDriverAdded2 = class(TRemotable)
  private
    FDriverInfo: LDriverFullInfo2;
    FDriverInfo_Specified: boolean;
    procedure SetDriverInfo(Index: Integer; const ALDriverFullInfo2: LDriverFullInfo2);
    function  DriverInfo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DriverInfo: LDriverFullInfo2  Index (IS_OPTN or IS_NLBL) read FDriverInfo write SetDriverInfo stored DriverInfo_Specified;
  end;



  // ************************************************************************ //
  // XML       : LDriverAdded, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LDriverAdded = class(LDriverAdded2)
  private
  published
  end;

  ArrayOfLNetworkAdded = array of LNetworkAdded2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }


  // ************************************************************************ //
  // XML       : LProperty, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LProperty2 = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FValue: string;
    FValue_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const Astring: string);
    function  Value_Specified(Index: Integer): boolean;
  published
    property Name_: string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property Value: string  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : LProperty, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LProperty = class(LProperty2)
  private
  published
  end;

  ArrayOfLResourcePropertyValue = array of LResourcePropertyValue2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }


  // ************************************************************************ //
  // XML       : LResourcePropertyValue, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LResourcePropertyValue2 = class(TRemotable)
  private
    FLastUpdated: TXSDateTime;
    FLastUpdated_Specified: boolean;
    FPropertyName: string;
    FPropertyName_Specified: boolean;
    FValue: string;
    FValue_Specified: boolean;
    procedure SetLastUpdated(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastUpdated_Specified(Index: Integer): boolean;
    procedure SetPropertyName(Index: Integer; const Astring: string);
    function  PropertyName_Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const Astring: string);
    function  Value_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property LastUpdated:  TXSDateTime  Index (IS_OPTN) read FLastUpdated write SetLastUpdated stored LastUpdated_Specified;
    property PropertyName: string       Index (IS_OPTN or IS_NLBL) read FPropertyName write SetPropertyName stored PropertyName_Specified;
    property Value:        string       Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : LResourcePropertyValue, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LResourcePropertyValue = class(LResourcePropertyValue2)
  private
  published
  end;

  ArrayOfLResourceProperty = array of LResourceProperty2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  ArrayOfLResourceInfo = array of LResourceInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }


  // ************************************************************************ //
  // XML       : LResourceProperty, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LResourceProperty2 = class(TRemotable)
  private
    FLastUpdated: TXSDateTime;
    FLastUpdated_Specified: boolean;
    FPropertyName: string;
    FPropertyName_Specified: boolean;
    FResourceId: guid;
    FResourceId_Specified: boolean;
    FResourceType: ResourceType;
    FResourceType_Specified: boolean;
    FValue: string;
    FValue_Specified: boolean;
    procedure SetLastUpdated(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastUpdated_Specified(Index: Integer): boolean;
    procedure SetPropertyName(Index: Integer; const Astring: string);
    function  PropertyName_Specified(Index: Integer): boolean;
    procedure SetResourceId(Index: Integer; const Aguid: guid);
    function  ResourceId_Specified(Index: Integer): boolean;
    procedure SetResourceType(Index: Integer; const AResourceType: ResourceType);
    function  ResourceType_Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const Astring: string);
    function  Value_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property LastUpdated:  TXSDateTime   Index (IS_OPTN) read FLastUpdated write SetLastUpdated stored LastUpdated_Specified;
    property PropertyName: string        Index (IS_OPTN or IS_NLBL) read FPropertyName write SetPropertyName stored PropertyName_Specified;
    property ResourceId:   guid          Index (IS_OPTN) read FResourceId write SetResourceId stored ResourceId_Specified;
    property ResourceType: ResourceType  Index (IS_OPTN) read FResourceType write SetResourceType stored ResourceType_Specified;
    property Value:        string        Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : LResourceProperty, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LResourceProperty = class(LResourceProperty2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LResourceInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LResourceInfo2 = class(TRemotable)
  private
    FId: guid;
    FId_Specified: boolean;
    FResourceType: ResourceType;
    FResourceType_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetResourceType(Index: Integer; const AResourceType: ResourceType);
    function  ResourceType_Specified(Index: Integer): boolean;
  published
    property Id:           guid          Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property ResourceType: ResourceType  Index (IS_OPTN) read FResourceType write SetResourceType stored ResourceType_Specified;
  end;



  // ************************************************************************ //
  // XML       : LResourceInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LResourceInfo = class(LResourceInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LNetworkAdded, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LNetworkAdded2 = class(TRemotable)
  private
    FNetInfo: LNetInfo2;
    FNetInfo_Specified: boolean;
    procedure SetNetInfo(Index: Integer; const ALNetInfo2: LNetInfo2);
    function  NetInfo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property NetInfo: LNetInfo2  Index (IS_OPTN or IS_NLBL) read FNetInfo write SetNetInfo stored NetInfo_Specified;
  end;



  // ************************************************************************ //
  // XML       : LNetworkAdded, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LNetworkAdded = class(LNetworkAdded2)
  private
  published
  end;

  ArrayOfLOperationResult = array of LOperationResult2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  ArrayOfLDriverFullInfo = array of LDriverFullInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }


  // ************************************************************************ //
  // XML       : LOperationResult, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LOperationResult2 = class(TRemotable)
  private
    FConnectionId: guid;
    FConnectionId_Specified: boolean;
    FContext: string;
    FContext_Specified: boolean;
    FDetails: string;
    FDetails_Specified: boolean;
    FMemberSignature: string;
    FMemberSignature_Specified: boolean;
    FOperationType: OperationType;
    FOperationType_Specified: boolean;
    FResourceId: guid;
    FResourceId_Specified: boolean;
    FResourceType: ResourceType;
    FResourceType_Specified: boolean;
    FResultType: OperationResultType;
    FResultType_Specified: boolean;
    procedure SetConnectionId(Index: Integer; const Aguid: guid);
    function  ConnectionId_Specified(Index: Integer): boolean;
    procedure SetContext(Index: Integer; const Astring: string);
    function  Context_Specified(Index: Integer): boolean;
    procedure SetDetails(Index: Integer; const Astring: string);
    function  Details_Specified(Index: Integer): boolean;
    procedure SetMemberSignature(Index: Integer; const Astring: string);
    function  MemberSignature_Specified(Index: Integer): boolean;
    procedure SetOperationType(Index: Integer; const AOperationType: OperationType);
    function  OperationType_Specified(Index: Integer): boolean;
    procedure SetResourceId(Index: Integer; const Aguid: guid);
    function  ResourceId_Specified(Index: Integer): boolean;
    procedure SetResourceType(Index: Integer; const AResourceType: ResourceType);
    function  ResourceType_Specified(Index: Integer): boolean;
    procedure SetResultType(Index: Integer; const AOperationResultType: OperationResultType);
    function  ResultType_Specified(Index: Integer): boolean;
  published
    property ConnectionId:    guid                 Index (IS_OPTN) read FConnectionId write SetConnectionId stored ConnectionId_Specified;
    property Context:         string               Index (IS_OPTN or IS_NLBL) read FContext write SetContext stored Context_Specified;
    property Details:         string               Index (IS_OPTN or IS_NLBL) read FDetails write SetDetails stored Details_Specified;
    property MemberSignature: string               Index (IS_OPTN or IS_NLBL) read FMemberSignature write SetMemberSignature stored MemberSignature_Specified;
    property OperationType:   OperationType        Index (IS_OPTN) read FOperationType write SetOperationType stored OperationType_Specified;
    property ResourceId:      guid                 Index (IS_OPTN) read FResourceId write SetResourceId stored ResourceId_Specified;
    property ResourceType:    ResourceType         Index (IS_OPTN) read FResourceType write SetResourceType stored ResourceType_Specified;
    property ResultType:      OperationResultType  Index (IS_OPTN) read FResultType write SetResultType stored ResultType_Specified;
  end;



  // ************************************************************************ //
  // XML       : LOperationResult, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LOperationResult = class(LOperationResult2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LDriverFullInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LDriverFullInfo2 = class(TRemotable)
  private
    FDeviceServerId: guid;
    FDeviceServerId_Specified: boolean;
    FDriverType: string;
    FDriverType_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FIsActive: Boolean;
    FIsActive_Specified: boolean;
    FIsUnknownID: Boolean;
    FIsUnknownID_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FParentId: guid;
    FParentId_Specified: boolean;
    FParentPropertyName: string;
    FParentPropertyName_Specified: boolean;
    FProperties: ArrayOfLResourcePropertyValue;
    FProperties_Specified: boolean;
    FState: DeviceStateEnum;
    FState_Specified: boolean;
    FStates: ArrayOfLResourcePropertyValue;
    FStates_Specified: boolean;
    procedure SetDeviceServerId(Index: Integer; const Aguid: guid);
    function  DeviceServerId_Specified(Index: Integer): boolean;
    procedure SetDriverType(Index: Integer; const Astring: string);
    function  DriverType_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetIsActive(Index: Integer; const ABoolean: Boolean);
    function  IsActive_Specified(Index: Integer): boolean;
    procedure SetIsUnknownID(Index: Integer; const ABoolean: Boolean);
    function  IsUnknownID_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetParentId(Index: Integer; const Aguid: guid);
    function  ParentId_Specified(Index: Integer): boolean;
    procedure SetParentPropertyName(Index: Integer; const Astring: string);
    function  ParentPropertyName_Specified(Index: Integer): boolean;
    procedure SetProperties(Index: Integer; const AArrayOfLResourcePropertyValue: ArrayOfLResourcePropertyValue);
    function  Properties_Specified(Index: Integer): boolean;
    procedure SetState(Index: Integer; const ADeviceStateEnum: DeviceStateEnum);
    function  State_Specified(Index: Integer): boolean;
    procedure SetStates(Index: Integer; const AArrayOfLResourcePropertyValue: ArrayOfLResourcePropertyValue);
    function  States_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DeviceServerId:     guid                           Index (IS_OPTN) read FDeviceServerId write SetDeviceServerId stored DeviceServerId_Specified;
    property DriverType:         string                         Index (IS_OPTN or IS_NLBL) read FDriverType write SetDriverType stored DriverType_Specified;
    property Id:                 guid                           Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property IsActive:           Boolean                        Index (IS_OPTN) read FIsActive write SetIsActive stored IsActive_Specified;
    property IsUnknownID:        Boolean                        Index (IS_OPTN) read FIsUnknownID write SetIsUnknownID stored IsUnknownID_Specified;
    property Name_:              string                         Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property ParentId:           guid                           Index (IS_OPTN or IS_NLBL) read FParentId write SetParentId stored ParentId_Specified;
    property ParentPropertyName: string                         Index (IS_OPTN or IS_NLBL) read FParentPropertyName write SetParentPropertyName stored ParentPropertyName_Specified;
    property Properties:         ArrayOfLResourcePropertyValue  Index (IS_OPTN or IS_NLBL) read FProperties write SetProperties stored Properties_Specified;
    property State:              DeviceStateEnum                Index (IS_OPTN) read FState write SetState stored State_Specified;
    property States:             ArrayOfLResourcePropertyValue  Index (IS_OPTN or IS_NLBL) read FStates write SetStates stored States_Specified;
  end;



  // ************************************************************************ //
  // XML       : LDriverFullInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LDriverFullInfo = class(LDriverFullInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : IPAddress, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/System.Net
  // ************************************************************************ //
  IPAddress = class(IPAddress2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : NetConfiguration, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver
  // ************************************************************************ //
  NetConfiguration2 = class(TRemotable)
  private
    FGateway: IPAddress2;
    FGateway_Specified: boolean;
    FIPAddress: IPAddress2;
    FIPAddress_Specified: boolean;
    FMask: IPAddress2;
    FMask_Specified: boolean;
    procedure SetGateway(Index: Integer; const AIPAddress2: IPAddress2);
    function  Gateway_Specified(Index: Integer): boolean;
    procedure SetIPAddress(Index: Integer; const AIPAddress2: IPAddress2);
    function  IPAddress_Specified(Index: Integer): boolean;
    procedure SetMask(Index: Integer; const AIPAddress2: IPAddress2);
    function  Mask_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Gateway:   IPAddress2  Index (IS_OPTN or IS_NLBL) read FGateway write SetGateway stored Gateway_Specified;
    property IPAddress: IPAddress2  Index (IS_OPTN or IS_NLBL) read FIPAddress write SetIPAddress stored IPAddress_Specified;
    property Mask:      IPAddress2  Index (IS_OPTN or IS_NLBL) read FMask write SetMask stored Mask_Specified;
  end;



  // ************************************************************************ //
  // XML       : NetConfiguration, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver
  // ************************************************************************ //
  NetConfiguration = class(NetConfiguration2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsAccessPointDriverInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints
  // ************************************************************************ //
  AcsAccessPointDriverInfo2 = class(TRemotable)
  private
    FAccessPointType: AcsAccessPointType;
    FAccessPointType_Specified: boolean;
    FDriverId: guid;
    FDriverId_Specified: boolean;
    FDriverType: string;
    FDriverType_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FServerID: guid;
    FServerID_Specified: boolean;
    procedure SetAccessPointType(Index: Integer; const AAcsAccessPointType: AcsAccessPointType);
    function  AccessPointType_Specified(Index: Integer): boolean;
    procedure SetDriverId(Index: Integer; const Aguid: guid);
    function  DriverId_Specified(Index: Integer): boolean;
    procedure SetDriverType(Index: Integer; const Astring: string);
    function  DriverType_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetServerID(Index: Integer; const Aguid: guid);
    function  ServerID_Specified(Index: Integer): boolean;
  published
    property AccessPointType: AcsAccessPointType  Index (IS_OPTN) read FAccessPointType write SetAccessPointType stored AccessPointType_Specified;
    property DriverId:        guid                Index (IS_OPTN) read FDriverId write SetDriverId stored DriverId_Specified;
    property DriverType:      string              Index (IS_OPTN or IS_NLBL) read FDriverType write SetDriverType stored DriverType_Specified;
    property Name_:           string              Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property ServerID:        guid                Index (IS_OPTN) read FServerID write SetServerID stored ServerID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsAccessPointDriverInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints
  // ************************************************************************ //
  AcsAccessPointDriverInfo = class(AcsAccessPointDriverInfo2)
  private
  published
  end;

  ArrayOfLServerInfo = array of LServerInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }


  // ************************************************************************ //
  // XML       : LServerInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LServerInfo2 = class(TRemotable)
  private
    FId: guid;
    FId_Specified: boolean;
    FIdNet: guid;
    FIdNet_Specified: boolean;
    FIsAttached: Boolean;
    FIsAttached_Specified: boolean;
    FServerType: ServerType;
    FServerType_Specified: boolean;
    FUrl: string;
    FUrl_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetIdNet(Index: Integer; const Aguid: guid);
    function  IdNet_Specified(Index: Integer): boolean;
    procedure SetIsAttached(Index: Integer; const ABoolean: Boolean);
    function  IsAttached_Specified(Index: Integer): boolean;
    procedure SetServerType(Index: Integer; const AServerType: ServerType);
    function  ServerType_Specified(Index: Integer): boolean;
    procedure SetUrl(Index: Integer; const Astring: string);
    function  Url_Specified(Index: Integer): boolean;
  published
    property Id:         guid        Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property IdNet:      guid        Index (IS_OPTN) read FIdNet write SetIdNet stored IdNet_Specified;
    property IsAttached: Boolean     Index (IS_OPTN) read FIsAttached write SetIsAttached stored IsAttached_Specified;
    property ServerType: ServerType  Index (IS_OPTN) read FServerType write SetServerType stored ServerType_Specified;
    property Url:        string      Index (IS_OPTN or IS_NLBL) read FUrl write SetUrl stored Url_Specified;
  end;



  // ************************************************************************ //
  // XML       : LServerInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LServerInfo = class(LServerInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LNetInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LNetInfo2 = class(TRemotable)
  private
    FGatewayUrl: string;
    FGatewayUrl_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FIsAttached: Boolean;
    FIsAttached_Specified: boolean;
    procedure SetGatewayUrl(Index: Integer; const Astring: string);
    function  GatewayUrl_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetIsAttached(Index: Integer; const ABoolean: Boolean);
    function  IsAttached_Specified(Index: Integer): boolean;
  published
    property GatewayUrl: string   Index (IS_OPTN or IS_NLBL) read FGatewayUrl write SetGatewayUrl stored GatewayUrl_Specified;
    property Id:         guid     Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property IsAttached: Boolean  Index (IS_OPTN) read FIsAttached write SetIsAttached stored IsAttached_Specified;
  end;



  // ************************************************************************ //
  // XML       : LNetInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  LNetInfo = class(LNetInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : License, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  License2 = class(TRemotable)
  private
    FElementID: string;
    FElementID_Specified: boolean;
    FElementName: string;
    FElementName_Specified: boolean;
    FModuleID: string;
    FModuleID_Specified: boolean;
    FModuleName: string;
    FModuleName_Specified: boolean;
    FValue: string;
    FValue_Specified: boolean;
    procedure SetElementID(Index: Integer; const Astring: string);
    function  ElementID_Specified(Index: Integer): boolean;
    procedure SetElementName(Index: Integer; const Astring: string);
    function  ElementName_Specified(Index: Integer): boolean;
    procedure SetModuleID(Index: Integer; const Astring: string);
    function  ModuleID_Specified(Index: Integer): boolean;
    procedure SetModuleName(Index: Integer; const Astring: string);
    function  ModuleName_Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const Astring: string);
    function  Value_Specified(Index: Integer): boolean;
  published
    property ElementID:   string  Index (IS_OPTN or IS_NLBL) read FElementID write SetElementID stored ElementID_Specified;
    property ElementName: string  Index (IS_OPTN or IS_NLBL) read FElementName write SetElementName stored ElementName_Specified;
    property ModuleID:    string  Index (IS_OPTN or IS_NLBL) read FModuleID write SetModuleID stored ModuleID_Specified;
    property ModuleName:  string  Index (IS_OPTN or IS_NLBL) read FModuleName write SetModuleName stored ModuleName_Specified;
    property Value:       string  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : License, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  License = class(License2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VariableInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  VariableInfo2 = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FValue: string;
    FValue_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const Astring: string);
    function  Value_Specified(Index: Integer): boolean;
  published
    property Name_: string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property Value: string  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : VariableInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity
  // ************************************************************************ //
  VariableInfo = class(VariableInfo2)
  private
  published
  end;

  ArrayOfLNetInfo = array of LNetInfo2;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"[GblCplx] }
  ArrayOfEmailAddressInfo = array of EmailAddressInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblCplx] }


  // ************************************************************************ //
  // XML       : EmailAddressSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation
  // ************************************************************************ //
  EmailAddressSaveData2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FEmail: string;
    FEmail_Specified: boolean;
    FEmailOrder: Integer;
    FEmailOrder_Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetEmail(Index: Integer; const Astring: string);
    function  Email_Specified(Index: Integer): boolean;
    procedure SetEmailOrder(Index: Integer; const AInteger: Integer);
    function  EmailOrder_Specified(Index: Integer): boolean;
  published
    property Description: string   Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property Email:       string   Index (IS_OPTN or IS_NLBL) read FEmail write SetEmail stored Email_Specified;
    property EmailOrder:  Integer  Index (IS_OPTN) read FEmailOrder write SetEmailOrder stored EmailOrder_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmailAddressInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation
  // ************************************************************************ //
  EmailAddressInfo2 = class(EmailAddressSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;

  ArrayOfIvideonCameraDriverInfo = array of IvideonCameraDriverInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IvidionCamera"[GblCplx] }


  // ************************************************************************ //
  // XML       : IvideonCameraDriverInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IvidionCamera
  // ************************************************************************ //
  IvideonCameraDriverInfo2 = class(TRemotable)
  private
    FCameraType: CameraProductType;
    FCameraType_Specified: boolean;
    FDriverId: guid;
    FDriverId_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FPath: string;
    FPath_Specified: boolean;
    FServerID: guid;
    FServerID_Specified: boolean;
    FServerType: string;
    FServerType_Specified: boolean;
    procedure SetCameraType(Index: Integer; const ACameraProductType: CameraProductType);
    function  CameraType_Specified(Index: Integer): boolean;
    procedure SetDriverId(Index: Integer; const Aguid: guid);
    function  DriverId_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetPath(Index: Integer; const Astring: string);
    function  Path_Specified(Index: Integer): boolean;
    procedure SetServerID(Index: Integer; const Aguid: guid);
    function  ServerID_Specified(Index: Integer): boolean;
    procedure SetServerType(Index: Integer; const Astring: string);
    function  ServerType_Specified(Index: Integer): boolean;
  published
    property CameraType: CameraProductType  Index (IS_OPTN) read FCameraType write SetCameraType stored CameraType_Specified;
    property DriverId:   guid               Index (IS_OPTN) read FDriverId write SetDriverId stored DriverId_Specified;
    property Name_:      string             Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property Path:       string             Index (IS_OPTN or IS_NLBL) read FPath write SetPath stored Path_Specified;
    property ServerID:   guid               Index (IS_OPTN) read FServerID write SetServerID stored ServerID_Specified;
    property ServerType: string             Index (IS_OPTN or IS_NLBL) read FServerType write SetServerType stored ServerType_Specified;
  end;



  // ************************************************************************ //
  // XML       : IvideonCameraDriverInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IvidionCamera
  // ************************************************************************ //
  IvideonCameraDriverInfo = class(IvideonCameraDriverInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmailDistributionAddressSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation
  // ************************************************************************ //
  EmailDistributionAddressSaveData2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FIsAuthenticationRequired: Boolean;
    FIsAuthenticationRequired_Specified: boolean;
    FIsSPARequired: Boolean;
    FIsSPARequired_Specified: boolean;
    FLogin: string;
    FLogin_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FPassword: string;
    FPassword_Specified: boolean;
    FSenderEmailAddress: string;
    FSenderEmailAddress_Specified: boolean;
    FSenderName: string;
    FSenderName_Specified: boolean;
    FSmtpEncryptionType: SmtpEncryptionType;
    FSmtpEncryptionType_Specified: boolean;
    FSmtpServerAddress: string;
    FSmtpServerAddress_Specified: boolean;
    FSmtpServerPort: Integer;
    FSmtpServerPort_Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetIsAuthenticationRequired(Index: Integer; const ABoolean: Boolean);
    function  IsAuthenticationRequired_Specified(Index: Integer): boolean;
    procedure SetIsSPARequired(Index: Integer; const ABoolean: Boolean);
    function  IsSPARequired_Specified(Index: Integer): boolean;
    procedure SetLogin(Index: Integer; const Astring: string);
    function  Login_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetPassword(Index: Integer; const Astring: string);
    function  Password_Specified(Index: Integer): boolean;
    procedure SetSenderEmailAddress(Index: Integer; const Astring: string);
    function  SenderEmailAddress_Specified(Index: Integer): boolean;
    procedure SetSenderName(Index: Integer; const Astring: string);
    function  SenderName_Specified(Index: Integer): boolean;
    procedure SetSmtpEncryptionType(Index: Integer; const ASmtpEncryptionType: SmtpEncryptionType);
    function  SmtpEncryptionType_Specified(Index: Integer): boolean;
    procedure SetSmtpServerAddress(Index: Integer; const Astring: string);
    function  SmtpServerAddress_Specified(Index: Integer): boolean;
    procedure SetSmtpServerPort(Index: Integer; const AInteger: Integer);
    function  SmtpServerPort_Specified(Index: Integer): boolean;
  published
    property Description:              string              Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property IsAuthenticationRequired: Boolean             Index (IS_OPTN) read FIsAuthenticationRequired write SetIsAuthenticationRequired stored IsAuthenticationRequired_Specified;
    property IsSPARequired:            Boolean             Index (IS_OPTN) read FIsSPARequired write SetIsSPARequired stored IsSPARequired_Specified;
    property Login:                    string              Index (IS_OPTN or IS_NLBL) read FLogin write SetLogin stored Login_Specified;
    property Name_:                    string              Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property Password:                 string              Index (IS_OPTN or IS_NLBL) read FPassword write SetPassword stored Password_Specified;
    property SenderEmailAddress:       string              Index (IS_OPTN or IS_NLBL) read FSenderEmailAddress write SetSenderEmailAddress stored SenderEmailAddress_Specified;
    property SenderName:               string              Index (IS_OPTN or IS_NLBL) read FSenderName write SetSenderName stored SenderName_Specified;
    property SmtpEncryptionType:       SmtpEncryptionType  Index (IS_OPTN) read FSmtpEncryptionType write SetSmtpEncryptionType stored SmtpEncryptionType_Specified;
    property SmtpServerAddress:        string              Index (IS_OPTN or IS_NLBL) read FSmtpServerAddress write SetSmtpServerAddress stored SmtpServerAddress_Specified;
    property SmtpServerPort:           Integer             Index (IS_OPTN) read FSmtpServerPort write SetSmtpServerPort stored SmtpServerPort_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmailDistributionAddressInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation
  // ************************************************************************ //
  EmailDistributionAddressInfo2 = class(EmailDistributionAddressSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;

  ArrayOfEmailDistributionAddressInfo = array of EmailDistributionAddressInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblCplx] }
  ArrayOfPhoneNumberInfo = array of PhoneNumberInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"[GblCplx] }


  // ************************************************************************ //
  // XML       : PhoneNumberSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation
  // ************************************************************************ //
  PhoneNumberSaveData2 = class(TRemotable)
  private
    FCityCode: string;
    FCityCode_Specified: boolean;
    FCountryCode: string;
    FCountryCode_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FPhoneNumber: string;
    FPhoneNumber_Specified: boolean;
    FPhoneOrder: Integer;
    FPhoneOrder_Specified: boolean;
    procedure SetCityCode(Index: Integer; const Astring: string);
    function  CityCode_Specified(Index: Integer): boolean;
    procedure SetCountryCode(Index: Integer; const Astring: string);
    function  CountryCode_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetPhoneNumber(Index: Integer; const Astring: string);
    function  PhoneNumber_Specified(Index: Integer): boolean;
    procedure SetPhoneOrder(Index: Integer; const AInteger: Integer);
    function  PhoneOrder_Specified(Index: Integer): boolean;
  published
    property CityCode:    string   Index (IS_OPTN or IS_NLBL) read FCityCode write SetCityCode stored CityCode_Specified;
    property CountryCode: string   Index (IS_OPTN or IS_NLBL) read FCountryCode write SetCountryCode stored CountryCode_Specified;
    property Description: string   Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property PhoneNumber: string   Index (IS_OPTN or IS_NLBL) read FPhoneNumber write SetPhoneNumber stored PhoneNumber_Specified;
    property PhoneOrder:  Integer  Index (IS_OPTN) read FPhoneOrder write SetPhoneOrder stored PhoneOrder_Specified;
  end;



  // ************************************************************************ //
  // XML       : PhoneNumberInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation
  // ************************************************************************ //
  PhoneNumberInfo2 = class(PhoneNumberSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;

  ProfileTypeFilter =  type string;      { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblSmpl] }


  // ************************************************************************ //
  // XML       : AccessBits, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare
  // ************************************************************************ //
  AccessBits2 = class(TRemotable)
  private
    FC1: Boolean;
    FC1_Specified: boolean;
    FC2: Boolean;
    FC2_Specified: boolean;
    FC3: Boolean;
    FC3_Specified: boolean;
    procedure SetC1(Index: Integer; const ABoolean: Boolean);
    function  C1_Specified(Index: Integer): boolean;
    procedure SetC2(Index: Integer; const ABoolean: Boolean);
    function  C2_Specified(Index: Integer): boolean;
    procedure SetC3(Index: Integer; const ABoolean: Boolean);
    function  C3_Specified(Index: Integer): boolean;
  published
    property C1: Boolean  Index (IS_OPTN) read FC1 write SetC1 stored C1_Specified;
    property C2: Boolean  Index (IS_OPTN) read FC2 write SetC2 stored C2_Specified;
    property C3: Boolean  Index (IS_OPTN) read FC3 write SetC3 stored C3_Specified;
  end;



  // ************************************************************************ //
  // XML       : CellContentCameraSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera
  // ************************************************************************ //
  CellContentCameraSaveData2 = class(TRemotable)
  private
    FCameraDriverId: guid;
    FCameraDriverId_Specified: boolean;
    procedure SetCameraDriverId(Index: Integer; const Aguid: guid);
    function  CameraDriverId_Specified(Index: Integer): boolean;
  published
    property CameraDriverId: guid  Index (IS_OPTN or IS_NLBL) read FCameraDriverId write SetCameraDriverId stored CameraDriverId_Specified;
  end;



  // ************************************************************************ //
  // XML       : CellContentCameraInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera
  // ************************************************************************ //
  CellContentCameraInfo2 = class(CellContentCameraSaveData2)
  private
    FCameraDriverName: string;
    FCameraDriverName_Specified: boolean;
    FCellId: guid;
    FCellId_Specified: boolean;
    procedure SetCameraDriverName(Index: Integer; const Astring: string);
    function  CameraDriverName_Specified(Index: Integer): boolean;
    procedure SetCellId(Index: Integer; const Aguid: guid);
    function  CellId_Specified(Index: Integer): boolean;
  published
    property CameraDriverName: string  Index (IS_OPTN or IS_NLBL) read FCameraDriverName write SetCameraDriverName stored CameraDriverName_Specified;
    property CellId:           guid    Index (IS_OPTN) read FCellId write SetCellId stored CellId_Specified;
  end;



  // ************************************************************************ //
  // XML       : CellContentCameraSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera
  // ************************************************************************ //
  CellContentCameraSaveData = class(CellContentCameraSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CellContentCameraInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera
  // ************************************************************************ //
  CellContentCameraInfo = class(CellContentCameraInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AccessBits, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare
  // ************************************************************************ //
  AccessBits = class(AccessBits2)
  private
  published
  end;

  ArrayOfPropertyValue = array of PropertyValue2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }
  ArrayOfDeviceDriverInfo = array of DeviceDriverInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }


  // ************************************************************************ //
  // XML       : DeviceDriverInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  DeviceDriverInfo2 = class(TRemotable)
  private
    FArrayChilds: ArrayOfDeviceDriverInfo;
    FArrayChilds_Specified: boolean;
    FArrayProperties: ArrayOfPropertyValue;
    FArrayProperties_Specified: boolean;
    FCameras: ArrayOfAccessPoint2CameraChain;
    FCameras_Specified: boolean;
    FChangeVersion: Int64;
    FChangeVersion_Specified: boolean;
    FDeviceServerId: guid;
    FDeviceServerId_Specified: boolean;
    FDirtyArrayProperties: ArrayOfPropertyValue;
    FDirtyArrayProperties_Specified: boolean;
    FDriverType: string;
    FDriverType_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FParentPropertyName: string;
    FParentPropertyName_Specified: boolean;
    FState: StateType;
    FState_Specified: boolean;
    FTagIds: ArrayOfguid;
    FTagIds_Specified: boolean;
    procedure SetArrayChilds(Index: Integer; const AArrayOfDeviceDriverInfo: ArrayOfDeviceDriverInfo);
    function  ArrayChilds_Specified(Index: Integer): boolean;
    procedure SetArrayProperties(Index: Integer; const AArrayOfPropertyValue: ArrayOfPropertyValue);
    function  ArrayProperties_Specified(Index: Integer): boolean;
    procedure SetCameras(Index: Integer; const AArrayOfAccessPoint2CameraChain: ArrayOfAccessPoint2CameraChain);
    function  Cameras_Specified(Index: Integer): boolean;
    procedure SetChangeVersion(Index: Integer; const AInt64: Int64);
    function  ChangeVersion_Specified(Index: Integer): boolean;
    procedure SetDeviceServerId(Index: Integer; const Aguid: guid);
    function  DeviceServerId_Specified(Index: Integer): boolean;
    procedure SetDirtyArrayProperties(Index: Integer; const AArrayOfPropertyValue: ArrayOfPropertyValue);
    function  DirtyArrayProperties_Specified(Index: Integer): boolean;
    procedure SetDriverType(Index: Integer; const Astring: string);
    function  DriverType_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetParentPropertyName(Index: Integer; const Astring: string);
    function  ParentPropertyName_Specified(Index: Integer): boolean;
    procedure SetState(Index: Integer; const AStateType: StateType);
    function  State_Specified(Index: Integer): boolean;
    procedure SetTagIds(Index: Integer; const AArrayOfguid: ArrayOfguid);
    function  TagIds_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ArrayChilds:          ArrayOfDeviceDriverInfo         Index (IS_OPTN or IS_NLBL) read FArrayChilds write SetArrayChilds stored ArrayChilds_Specified;
    property ArrayProperties:      ArrayOfPropertyValue            Index (IS_OPTN or IS_NLBL) read FArrayProperties write SetArrayProperties stored ArrayProperties_Specified;
    property Cameras:              ArrayOfAccessPoint2CameraChain  Index (IS_OPTN or IS_NLBL) read FCameras write SetCameras stored Cameras_Specified;
    property ChangeVersion:        Int64                           Index (IS_OPTN or IS_NLBL) read FChangeVersion write SetChangeVersion stored ChangeVersion_Specified;
    property DeviceServerId:       guid                            Index (IS_OPTN or IS_NLBL) read FDeviceServerId write SetDeviceServerId stored DeviceServerId_Specified;
    property DirtyArrayProperties: ArrayOfPropertyValue            Index (IS_OPTN or IS_NLBL) read FDirtyArrayProperties write SetDirtyArrayProperties stored DirtyArrayProperties_Specified;
    property DriverType:           string                          Index (IS_OPTN or IS_NLBL) read FDriverType write SetDriverType stored DriverType_Specified;
    property ID:                   guid                            Index (IS_OPTN or IS_NLBL) read FID write SetID stored ID_Specified;
    property Name_:                string                          Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property ParentPropertyName:   string                          Index (IS_OPTN or IS_NLBL) read FParentPropertyName write SetParentPropertyName stored ParentPropertyName_Specified;
    property State:                StateType                       Index (IS_OPTN) read FState write SetState stored State_Specified;
    property TagIds:               ArrayOfguid                     Index (IS_OPTN or IS_NLBL) read FTagIds write SetTagIds stored TagIds_Specified;
  end;

  ArrayOfLPropertyValue = array of LPropertyValue2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }


  // ************************************************************************ //
  // XML       : LResourcePropertyValues, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  LResourcePropertyValues2 = class(TRemotable)
  private
    FId: guid;
    FId_Specified: boolean;
    FProperties: ArrayOfLPropertyValue;
    FProperties_Specified: boolean;
    FType_: ResourceType;
    FType__Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetProperties(Index: Integer; const AArrayOfLPropertyValue: ArrayOfLPropertyValue);
    function  Properties_Specified(Index: Integer): boolean;
    procedure SetType_(Index: Integer; const AResourceType: ResourceType);
    function  Type__Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Id:         guid                   Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property Properties: ArrayOfLPropertyValue  Index (IS_OPTN or IS_NLBL) read FProperties write SetProperties stored Properties_Specified;
    property Type_:      ResourceType           Index (IS_OPTN) read FType_ write SetType_ stored Type__Specified;
  end;



  // ************************************************************************ //
  // XML       : LPropertyValue, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  LPropertyValue2 = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FValue: string;
    FValue_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const Astring: string);
    function  Value_Specified(Index: Integer): boolean;
  published
    property Name_: string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property Value: string  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : LResourcePropertyValues, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  LResourcePropertyValues = class(LResourcePropertyValues2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PropertyValue, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  PropertyValue2 = class(TRemotable)
  private
    FIsDirty: Boolean;
    FIsDirty_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FValue: string;
    FValue_Specified: boolean;
    procedure SetIsDirty(Index: Integer; const ABoolean: Boolean);
    function  IsDirty_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const Astring: string);
    function  Value_Specified(Index: Integer): boolean;
  published
    property IsDirty: Boolean  Index (IS_OPTN or IS_NLBL) read FIsDirty write SetIsDirty stored IsDirty_Specified;
    property Name_:   string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property Value:   string   Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;

  ArrayOfLResourcePropertyValues = array of LResourcePropertyValues2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }


  // ************************************************************************ //
  // XML       : PhoneNumberInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation
  // ************************************************************************ //
  PhoneNumberInfo = class(PhoneNumberInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PhoneNumberSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation
  // ************************************************************************ //
  PhoneNumberSaveData = class(PhoneNumberSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmailDistributionAddressInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation
  // ************************************************************************ //
  EmailDistributionAddressInfo = class(EmailDistributionAddressInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmailAddressSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation
  // ************************************************************************ //
  EmailAddressSaveData = class(EmailAddressSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmailAddressInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation
  // ************************************************************************ //
  EmailAddressInfo = class(EmailAddressInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : Operation, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  Operation2 = class(TRemotable)
  private
    FPath: ArrayOfguid;
    FPath_Specified: boolean;
    FUserID: guid;
    FUserID_Specified: boolean;
    procedure SetPath(Index: Integer; const AArrayOfguid: ArrayOfguid);
    function  Path_Specified(Index: Integer): boolean;
    procedure SetUserID(Index: Integer; const Aguid: guid);
    function  UserID_Specified(Index: Integer): boolean;
  published
    property Path:   ArrayOfguid  Index (IS_OPTN or IS_NLBL) read FPath write SetPath stored Path_Specified;
    property UserID: guid         Index (IS_OPTN or IS_NLBL) read FUserID write SetUserID stored UserID_Specified;
  end;



  // ************************************************************************ //
  // XML       : Operation, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  Operation = class(Operation2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeviceOperation, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  DeviceOperation2 = class(Operation2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeviceOperation, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  DeviceOperation = class(DeviceOperation2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeviceCallMethodOperation, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  DeviceCallMethodOperation2 = class(DeviceOperation2)
  private
    FLogMessageId: Int64;
    FLogMessageId_Specified: boolean;
    FMethodArgs: ArrayOfstring;
    FMethodArgs_Specified: boolean;
    FMethodName: string;
    FMethodName_Specified: boolean;
    procedure SetLogMessageId(Index: Integer; const AInt64: Int64);
    function  LogMessageId_Specified(Index: Integer): boolean;
    procedure SetMethodArgs(Index: Integer; const AArrayOfstring: ArrayOfstring);
    function  MethodArgs_Specified(Index: Integer): boolean;
    procedure SetMethodName(Index: Integer; const Astring: string);
    function  MethodName_Specified(Index: Integer): boolean;
  published
    property LogMessageId: Int64          Index (IS_OPTN or IS_NLBL) read FLogMessageId write SetLogMessageId stored LogMessageId_Specified;
    property MethodArgs:   ArrayOfstring  Index (IS_OPTN or IS_NLBL) read FMethodArgs write SetMethodArgs stored MethodArgs_Specified;
    property MethodName:   string         Index (IS_OPTN or IS_NLBL) read FMethodName write SetMethodName stored MethodName_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeviceCallMethodOperation, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  DeviceCallMethodOperation = class(DeviceCallMethodOperation2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LLinkChanged, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  LLinkChanged2 = class(TRemotable)
  private
    FCUDType: CUDType;
    FCUDType_Specified: boolean;
    FChildId: guid;
    FChildId_Specified: boolean;
    FLinkType: LinkType;
    FLinkType_Specified: boolean;
    FParentId: guid;
    FParentId_Specified: boolean;
    procedure SetCUDType(Index: Integer; const ACUDType: CUDType);
    function  CUDType_Specified(Index: Integer): boolean;
    procedure SetChildId(Index: Integer; const Aguid: guid);
    function  ChildId_Specified(Index: Integer): boolean;
    procedure SetLinkType(Index: Integer; const ALinkType: LinkType);
    function  LinkType_Specified(Index: Integer): boolean;
    procedure SetParentId(Index: Integer; const Aguid: guid);
    function  ParentId_Specified(Index: Integer): boolean;
  published
    property CUDType:  CUDType   Index (IS_OPTN) read FCUDType write SetCUDType stored CUDType_Specified;
    property ChildId:  guid      Index (IS_OPTN) read FChildId write SetChildId stored ChildId_Specified;
    property LinkType: LinkType  Index (IS_OPTN) read FLinkType write SetLinkType stored LinkType_Specified;
    property ParentId: guid      Index (IS_OPTN) read FParentId write SetParentId stored ParentId_Specified;
  end;



  // ************************************************************************ //
  // XML       : LLinkChanged, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  LLinkChanged = class(LLinkChanged2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmailDistributionAddressSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation
  // ************************************************************************ //
  EmailDistributionAddressSaveData = class(EmailDistributionAddressSaveData2)
  private
  published
  end;

  ArrayOfLLinkChanged = array of LLinkChanged2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"[GblCplx] }


  // ************************************************************************ //
  // XML       : LNetworkChanges, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  LNetworkChanges2 = class(TRemotable)
  private
    FDriversAdded: ArrayOfLDriverAdded;
    FDriversAdded_Specified: boolean;
    FLinkChanges: ArrayOfLLinkChanged;
    FLinkChanges_Specified: boolean;
    FNetworksAdded: ArrayOfLNetworkAdded;
    FNetworksAdded_Specified: boolean;
    FOperationResults: ArrayOfLOperationResult;
    FOperationResults_Specified: boolean;
    FProperties: ArrayOfLResourceProperty;
    FProperties_Specified: boolean;
    FResourcesRemoved: ArrayOfLResourceInfo;
    FResourcesRemoved_Specified: boolean;
    FServersAdded: ArrayOfLServerAdded;
    FServersAdded_Specified: boolean;
    FStates: ArrayOfLResourceProperty;
    FStates_Specified: boolean;
    procedure SetDriversAdded(Index: Integer; const AArrayOfLDriverAdded: ArrayOfLDriverAdded);
    function  DriversAdded_Specified(Index: Integer): boolean;
    procedure SetLinkChanges(Index: Integer; const AArrayOfLLinkChanged: ArrayOfLLinkChanged);
    function  LinkChanges_Specified(Index: Integer): boolean;
    procedure SetNetworksAdded(Index: Integer; const AArrayOfLNetworkAdded: ArrayOfLNetworkAdded);
    function  NetworksAdded_Specified(Index: Integer): boolean;
    procedure SetOperationResults(Index: Integer; const AArrayOfLOperationResult: ArrayOfLOperationResult);
    function  OperationResults_Specified(Index: Integer): boolean;
    procedure SetProperties(Index: Integer; const AArrayOfLResourceProperty: ArrayOfLResourceProperty);
    function  Properties_Specified(Index: Integer): boolean;
    procedure SetResourcesRemoved(Index: Integer; const AArrayOfLResourceInfo: ArrayOfLResourceInfo);
    function  ResourcesRemoved_Specified(Index: Integer): boolean;
    procedure SetServersAdded(Index: Integer; const AArrayOfLServerAdded: ArrayOfLServerAdded);
    function  ServersAdded_Specified(Index: Integer): boolean;
    procedure SetStates(Index: Integer; const AArrayOfLResourceProperty: ArrayOfLResourceProperty);
    function  States_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DriversAdded:     ArrayOfLDriverAdded       Index (IS_OPTN or IS_NLBL) read FDriversAdded write SetDriversAdded stored DriversAdded_Specified;
    property LinkChanges:      ArrayOfLLinkChanged       Index (IS_OPTN or IS_NLBL) read FLinkChanges write SetLinkChanges stored LinkChanges_Specified;
    property NetworksAdded:    ArrayOfLNetworkAdded      Index (IS_OPTN or IS_NLBL) read FNetworksAdded write SetNetworksAdded stored NetworksAdded_Specified;
    property OperationResults: ArrayOfLOperationResult   Index (IS_OPTN or IS_NLBL) read FOperationResults write SetOperationResults stored OperationResults_Specified;
    property Properties:       ArrayOfLResourceProperty  Index (IS_OPTN or IS_NLBL) read FProperties write SetProperties stored Properties_Specified;
    property ResourcesRemoved: ArrayOfLResourceInfo      Index (IS_OPTN or IS_NLBL) read FResourcesRemoved write SetResourcesRemoved stored ResourcesRemoved_Specified;
    property ServersAdded:     ArrayOfLServerAdded       Index (IS_OPTN or IS_NLBL) read FServersAdded write SetServersAdded stored ServersAdded_Specified;
    property States:           ArrayOfLResourceProperty  Index (IS_OPTN or IS_NLBL) read FStates write SetStates stored States_Specified;
  end;



  // ************************************************************************ //
  // XML       : LNetworkChanges, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  LNetworkChanges = class(LNetworkChanges2)
  private
  published
  end;

  ArrayOfISS_DriverEventPlaybackSlimInfo = array of ISS_DriverEventPlaybackSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }


  // ************************************************************************ //
  // XML       : ISS_DriverEventPlaybackSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_DriverEventPlaybackSaveData2 = class(TRemotable)
  private
    FISS_Cam_ID: guid;
    FISS_Cam_ID_Specified: boolean;
    FISS_DRIVER_ID: Integer;
    FISS_DRIVER_ID_Specified: boolean;
    FISS_EVENT_VIEWER_ID: guid;
    FISS_EVENT_VIEWER_ID_Specified: boolean;
    procedure SetISS_Cam_ID(Index: Integer; const Aguid: guid);
    function  ISS_Cam_ID_Specified(Index: Integer): boolean;
    procedure SetISS_DRIVER_ID(Index: Integer; const AInteger: Integer);
    function  ISS_DRIVER_ID_Specified(Index: Integer): boolean;
    procedure SetISS_EVENT_VIEWER_ID(Index: Integer; const Aguid: guid);
    function  ISS_EVENT_VIEWER_ID_Specified(Index: Integer): boolean;
  published
    property ISS_Cam_ID:          guid     Index (IS_OPTN) read FISS_Cam_ID write SetISS_Cam_ID stored ISS_Cam_ID_Specified;
    property ISS_DRIVER_ID:       Integer  Index (IS_OPTN) read FISS_DRIVER_ID write SetISS_DRIVER_ID stored ISS_DRIVER_ID_Specified;
    property ISS_EVENT_VIEWER_ID: guid     Index (IS_OPTN) read FISS_EVENT_VIEWER_ID write SetISS_EVENT_VIEWER_ID stored ISS_EVENT_VIEWER_ID_Specified;
  end;



  // ************************************************************************ //
  // XML       : ISS_DriverEventPlaybackSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_DriverEventPlaybackSlimInfo2 = class(ISS_DriverEventPlaybackSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_Driver_SaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Driver_SaveData2 = class(TRemotable)
  private
    FDriverID: guid;
    FDriverID_Specified: boolean;
    FISS_RusGuardIntegrationPoint_ID: guid;
    FISS_RusGuardIntegrationPoint_ID_Specified: boolean;
    procedure SetDriverID(Index: Integer; const Aguid: guid);
    function  DriverID_Specified(Index: Integer): boolean;
    procedure SetISS_RusGuardIntegrationPoint_ID(Index: Integer; const Aguid: guid);
    function  ISS_RusGuardIntegrationPoint_ID_Specified(Index: Integer): boolean;
  published
    property DriverID:                        guid  Index (IS_OPTN) read FDriverID write SetDriverID stored DriverID_Specified;
    property ISS_RusGuardIntegrationPoint_ID: guid  Index (IS_OPTN) read FISS_RusGuardIntegrationPoint_ID write SetISS_RusGuardIntegrationPoint_ID stored ISS_RusGuardIntegrationPoint_ID_Specified;
  end;

  ArrayOfISS_Cam_SlimInfo = array of ISS_Cam_SlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ArrayOfISS_EventViewer_SlimInfo = array of ISS_EventViewer_SlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ArrayOfISS_Monitor_SlimInfo = array of ISS_Monitor_SlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }


  // ************************************************************************ //
  // XML       : ISS_Recognition_SaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Recognition_SaveData2 = class(TRemotable)
  private
    FAddress: string;
    FAddress_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FPort: Integer;
    FPort_Specified: boolean;
    FResolvedUnrecognizedSymbols: Integer;
    FResolvedUnrecognizedSymbols_Specified: boolean;
    FSimilarity: Integer;
    FSimilarity_Specified: boolean;
    procedure SetAddress(Index: Integer; const Astring: string);
    function  Address_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetPort(Index: Integer; const AInteger: Integer);
    function  Port_Specified(Index: Integer): boolean;
    procedure SetResolvedUnrecognizedSymbols(Index: Integer; const AInteger: Integer);
    function  ResolvedUnrecognizedSymbols_Specified(Index: Integer): boolean;
    procedure SetSimilarity(Index: Integer; const AInteger: Integer);
    function  Similarity_Specified(Index: Integer): boolean;
  published
    property Address:                     string   Index (IS_OPTN or IS_NLBL) read FAddress write SetAddress stored Address_Specified;
    property Name_:                       string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property Port:                        Integer  Index (IS_OPTN) read FPort write SetPort stored Port_Specified;
    property ResolvedUnrecognizedSymbols: Integer  Index (IS_OPTN) read FResolvedUnrecognizedSymbols write SetResolvedUnrecognizedSymbols stored ResolvedUnrecognizedSymbols_Specified;
    property Similarity:                  Integer  Index (IS_OPTN) read FSimilarity write SetSimilarity stored Similarity_Specified;
  end;

  ArrayOfISS_Driver_SlimInfo = array of ISS_Driver_SlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }


  // ************************************************************************ //
  // XML       : ISS_Driver_SlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Driver_SlimInfo2 = class(ISS_Driver_SaveData2)
  private
    FAccessPointType: AcsAccessPointType;
    FAccessPointType_Specified: boolean;
    FISS_DriverID: Integer;
    FISS_DriverID_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetAccessPointType(Index: Integer; const AAcsAccessPointType: AcsAccessPointType);
    function  AccessPointType_Specified(Index: Integer): boolean;
    procedure SetISS_DriverID(Index: Integer; const AInteger: Integer);
    function  ISS_DriverID_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property AccessPointType: AcsAccessPointType  Index (IS_OPTN) read FAccessPointType write SetAccessPointType stored AccessPointType_Specified;
    property ISS_DriverID:    Integer             Index (IS_OPTN) read FISS_DriverID write SetISS_DriverID stored ISS_DriverID_Specified;
    property Name_:           string              Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : ISS_Recognition_SlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Recognition_SlimInfo2 = class(ISS_Recognition_SaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : ISS_Recognition_SlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Recognition_SlimInfo = class(ISS_Recognition_SlimInfo2)
  private
  published
  end;

  ArrayOfISS_RusGuard_SlimInfo = array of ISS_RusGuard_SlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ArrayOfISS_Recognition_SlimInfo = array of ISS_Recognition_SlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ArrayOfUidKeyInfo = array of UidKeyInfo2;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblCplx] }


  // ************************************************************************ //
  // XML       : VisitorsScoreboardWorkplaceModuleSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars
  // ************************************************************************ //
  VisitorsScoreboardWorkplaceModuleSaveData2 = class(TRemotable)
  private
    FBackgroundColor: TArray<System.Byte>;
    FBackgroundColor_Specified: boolean;
    FCaption: string;
    FCaption_Specified: boolean;
    FCaptionColor: TArray<System.Byte>;
    FCaptionColor_Specified: boolean;
    FEmployeesCountColor: TArray<System.Byte>;
    FEmployeesCountColor_Specified: boolean;
    FEmployeesCountLabelColor: TArray<System.Byte>;
    FEmployeesCountLabelColor_Specified: boolean;
    FGuestsCountColor: TArray<System.Byte>;
    FGuestsCountColor_Specified: boolean;
    FGuestsCountLabelColor: TArray<System.Byte>;
    FGuestsCountLabelColor_Specified: boolean;
    FTotalVisitorsColor: TArray<System.Byte>;
    FTotalVisitorsColor_Specified: boolean;
    FTotalVisitorsLabelColor: TArray<System.Byte>;
    FTotalVisitorsLabelColor_Specified: boolean;
    FWorkZoneID: guid;
    FWorkZoneID_Specified: boolean;
    procedure SetBackgroundColor(Index: Integer; const ATArray: TArray<System.Byte>);
    function  BackgroundColor_Specified(Index: Integer): boolean;
    procedure SetCaption(Index: Integer; const Astring: string);
    function  Caption_Specified(Index: Integer): boolean;
    procedure SetCaptionColor(Index: Integer; const ATArray: TArray<System.Byte>);
    function  CaptionColor_Specified(Index: Integer): boolean;
    procedure SetEmployeesCountColor(Index: Integer; const ATArray: TArray<System.Byte>);
    function  EmployeesCountColor_Specified(Index: Integer): boolean;
    procedure SetEmployeesCountLabelColor(Index: Integer; const ATArray: TArray<System.Byte>);
    function  EmployeesCountLabelColor_Specified(Index: Integer): boolean;
    procedure SetGuestsCountColor(Index: Integer; const ATArray: TArray<System.Byte>);
    function  GuestsCountColor_Specified(Index: Integer): boolean;
    procedure SetGuestsCountLabelColor(Index: Integer; const ATArray: TArray<System.Byte>);
    function  GuestsCountLabelColor_Specified(Index: Integer): boolean;
    procedure SetTotalVisitorsColor(Index: Integer; const ATArray: TArray<System.Byte>);
    function  TotalVisitorsColor_Specified(Index: Integer): boolean;
    procedure SetTotalVisitorsLabelColor(Index: Integer; const ATArray: TArray<System.Byte>);
    function  TotalVisitorsLabelColor_Specified(Index: Integer): boolean;
    procedure SetWorkZoneID(Index: Integer; const Aguid: guid);
    function  WorkZoneID_Specified(Index: Integer): boolean;
  published
    property BackgroundColor:          TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FBackgroundColor write SetBackgroundColor stored BackgroundColor_Specified;
    property Caption:                  string               Index (IS_OPTN or IS_NLBL) read FCaption write SetCaption stored Caption_Specified;
    property CaptionColor:             TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FCaptionColor write SetCaptionColor stored CaptionColor_Specified;
    property EmployeesCountColor:      TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FEmployeesCountColor write SetEmployeesCountColor stored EmployeesCountColor_Specified;
    property EmployeesCountLabelColor: TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FEmployeesCountLabelColor write SetEmployeesCountLabelColor stored EmployeesCountLabelColor_Specified;
    property GuestsCountColor:         TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FGuestsCountColor write SetGuestsCountColor stored GuestsCountColor_Specified;
    property GuestsCountLabelColor:    TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FGuestsCountLabelColor write SetGuestsCountLabelColor stored GuestsCountLabelColor_Specified;
    property TotalVisitorsColor:       TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FTotalVisitorsColor write SetTotalVisitorsColor stored TotalVisitorsColor_Specified;
    property TotalVisitorsLabelColor:  TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FTotalVisitorsLabelColor write SetTotalVisitorsLabelColor stored TotalVisitorsLabelColor_Specified;
    property WorkZoneID:               guid                 Index (IS_OPTN or IS_NLBL) read FWorkZoneID write SetWorkZoneID stored WorkZoneID_Specified;
  end;



  // ************************************************************************ //
  // XML       : VisitorsScoreboardWorkplaceModuleInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars
  // ************************************************************************ //
  VisitorsScoreboardWorkplaceModuleInfo2 = class(VisitorsScoreboardWorkplaceModuleSaveData2)
  private
    FWorkZoneName: string;
    FWorkZoneName_Specified: boolean;
    procedure SetWorkZoneName(Index: Integer; const Astring: string);
    function  WorkZoneName_Specified(Index: Integer): boolean;
  published
    property WorkZoneName: string  Index (IS_OPTN or IS_NLBL) read FWorkZoneName write SetWorkZoneName stored WorkZoneName_Specified;
  end;



  // ************************************************************************ //
  // XML       : VisitorsScoreboardWorkplaceModuleInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars
  // ************************************************************************ //
  VisitorsScoreboardWorkplaceModuleInfo = class(VisitorsScoreboardWorkplaceModuleInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VisitorsScoreboardWorkplaceModuleSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars
  // ************************************************************************ //
  VisitorsScoreboardWorkplaceModuleSaveData = class(VisitorsScoreboardWorkplaceModuleSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkZoneVisitorsCountDTO, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars
  // ************************************************************************ //
  WorkZoneVisitorsCountDTO2 = class(TRemotable)
  private
    FEmployeesCount: Integer;
    FEmployeesCount_Specified: boolean;
    FGuestsCount: Integer;
    FGuestsCount_Specified: boolean;
    FTotal: Integer;
    FTotal_Specified: boolean;
    procedure SetEmployeesCount(Index: Integer; const AInteger: Integer);
    function  EmployeesCount_Specified(Index: Integer): boolean;
    procedure SetGuestsCount(Index: Integer; const AInteger: Integer);
    function  GuestsCount_Specified(Index: Integer): boolean;
    procedure SetTotal(Index: Integer; const AInteger: Integer);
    function  Total_Specified(Index: Integer): boolean;
  published
    property EmployeesCount: Integer  Index (IS_OPTN) read FEmployeesCount write SetEmployeesCount stored EmployeesCount_Specified;
    property GuestsCount:    Integer  Index (IS_OPTN) read FGuestsCount write SetGuestsCount stored GuestsCount_Specified;
    property Total:          Integer  Index (IS_OPTN) read FTotal write SetTotal stored Total_Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkZoneVisitorsCountDTO, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars
  // ************************************************************************ //
  WorkZoneVisitorsCountDTO = class(WorkZoneVisitorsCountDTO2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MifareProfileSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare
  // ************************************************************************ //
  MifareProfileSaveData2 = class(TRemotable)
  private
    FAuthenticationMode: SectorAuthentication;
    FAuthenticationMode_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FProfileType: ProfileType;
    FProfileType_Specified: boolean;
    FSectorNumber: Integer;
    FSectorNumber_Specified: boolean;
    procedure SetAuthenticationMode(Index: Integer; const ASectorAuthentication: SectorAuthentication);
    function  AuthenticationMode_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetProfileType(Index: Integer; const AProfileType: ProfileType);
    function  ProfileType_Specified(Index: Integer): boolean;
    procedure SetSectorNumber(Index: Integer; const AInteger: Integer);
    function  SectorNumber_Specified(Index: Integer): boolean;
  published
    property AuthenticationMode: SectorAuthentication  Index (IS_OPTN) read FAuthenticationMode write SetAuthenticationMode stored AuthenticationMode_Specified;
    property Description:        string                Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property Name_:              string                Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property ProfileType:        ProfileType           Index (IS_OPTN) read FProfileType write SetProfileType stored ProfileType_Specified;
    property SectorNumber:       Integer               Index (IS_OPTN) read FSectorNumber write SetSectorNumber stored SectorNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : MifareProfileSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare
  // ************************************************************************ //
  MifareProfileSaveData = class(MifareProfileSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MifareProfileFullSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare
  // ************************************************************************ //
  MifareProfileFullSaveData2 = class(MifareProfileSaveData2)
  private
    FBlock1: AccessBits2;
    FBlock1_Specified: boolean;
    FBlock1DataType: BlockData;
    FBlock1DataType_Specified: boolean;
    FBlock2: AccessBits2;
    FBlock2_Specified: boolean;
    FBlock2DataType: BlockData;
    FBlock2DataType_Specified: boolean;
    FBlock3: AccessBits2;
    FBlock3_Specified: boolean;
    FBlock3DataType: BlockData;
    FBlock3DataType_Specified: boolean;
    FCardConfigurationKey: string;
    FCardConfigurationKey_Specified: boolean;
    FCardMasterKey: string;
    FCardMasterKey_Specified: boolean;
    FClassicEmissionMode: Boolean;
    FClassicEmissionMode_Specified: boolean;
    FClassicEmissionTypeKey: Boolean;
    FClassicEmissionTypeKey_Specified: boolean;
    FClassicKeyA: string;
    FClassicKeyA_Specified: boolean;
    FClassicKeyB: string;
    FClassicKeyB_Specified: boolean;
    FClassikControllerTypeKey: Boolean;
    FClassikControllerTypeKey_Specified: boolean;
    FIsUsePlusKeyA: Boolean;
    FIsUsePlusKeyA_Specified: boolean;
    FKeyBlock: AccessBits2;
    FKeyBlock_Specified: boolean;
    FLevel2SwitchKey: string;
    FLevel2SwitchKey_Specified: boolean;
    FLevel3SwitchKey: string;
    FLevel3SwitchKey_Specified: boolean;
    FPlusControllerTypeKey: Boolean;
    FPlusControllerTypeKey_Specified: boolean;
    FPlusEmissionMode: Boolean;
    FPlusEmissionMode_Specified: boolean;
    FPlusEmissionProtectionLevel: EmissionProtectionLevel;
    FPlusEmissionProtectionLevel_Specified: boolean;
    FPlusEmissionTypeKey: Boolean;
    FPlusEmissionTypeKey_Specified: boolean;
    FPlusKeyA: string;
    FPlusKeyA_Specified: boolean;
    FPlusKeyB: string;
    FPlusKeyB_Specified: boolean;
    FSl1CardAuthenticationKey: string;
    FSl1CardAuthenticationKey_Specified: boolean;
    procedure SetBlock1(Index: Integer; const AAccessBits2: AccessBits2);
    function  Block1_Specified(Index: Integer): boolean;
    procedure SetBlock1DataType(Index: Integer; const ABlockData: BlockData);
    function  Block1DataType_Specified(Index: Integer): boolean;
    procedure SetBlock2(Index: Integer; const AAccessBits2: AccessBits2);
    function  Block2_Specified(Index: Integer): boolean;
    procedure SetBlock2DataType(Index: Integer; const ABlockData: BlockData);
    function  Block2DataType_Specified(Index: Integer): boolean;
    procedure SetBlock3(Index: Integer; const AAccessBits2: AccessBits2);
    function  Block3_Specified(Index: Integer): boolean;
    procedure SetBlock3DataType(Index: Integer; const ABlockData: BlockData);
    function  Block3DataType_Specified(Index: Integer): boolean;
    procedure SetCardConfigurationKey(Index: Integer; const Astring: string);
    function  CardConfigurationKey_Specified(Index: Integer): boolean;
    procedure SetCardMasterKey(Index: Integer; const Astring: string);
    function  CardMasterKey_Specified(Index: Integer): boolean;
    procedure SetClassicEmissionMode(Index: Integer; const ABoolean: Boolean);
    function  ClassicEmissionMode_Specified(Index: Integer): boolean;
    procedure SetClassicEmissionTypeKey(Index: Integer; const ABoolean: Boolean);
    function  ClassicEmissionTypeKey_Specified(Index: Integer): boolean;
    procedure SetClassicKeyA(Index: Integer; const Astring: string);
    function  ClassicKeyA_Specified(Index: Integer): boolean;
    procedure SetClassicKeyB(Index: Integer; const Astring: string);
    function  ClassicKeyB_Specified(Index: Integer): boolean;
    procedure SetClassikControllerTypeKey(Index: Integer; const ABoolean: Boolean);
    function  ClassikControllerTypeKey_Specified(Index: Integer): boolean;
    procedure SetIsUsePlusKeyA(Index: Integer; const ABoolean: Boolean);
    function  IsUsePlusKeyA_Specified(Index: Integer): boolean;
    procedure SetKeyBlock(Index: Integer; const AAccessBits2: AccessBits2);
    function  KeyBlock_Specified(Index: Integer): boolean;
    procedure SetLevel2SwitchKey(Index: Integer; const Astring: string);
    function  Level2SwitchKey_Specified(Index: Integer): boolean;
    procedure SetLevel3SwitchKey(Index: Integer; const Astring: string);
    function  Level3SwitchKey_Specified(Index: Integer): boolean;
    procedure SetPlusControllerTypeKey(Index: Integer; const ABoolean: Boolean);
    function  PlusControllerTypeKey_Specified(Index: Integer): boolean;
    procedure SetPlusEmissionMode(Index: Integer; const ABoolean: Boolean);
    function  PlusEmissionMode_Specified(Index: Integer): boolean;
    procedure SetPlusEmissionProtectionLevel(Index: Integer; const AEmissionProtectionLevel: EmissionProtectionLevel);
    function  PlusEmissionProtectionLevel_Specified(Index: Integer): boolean;
    procedure SetPlusEmissionTypeKey(Index: Integer; const ABoolean: Boolean);
    function  PlusEmissionTypeKey_Specified(Index: Integer): boolean;
    procedure SetPlusKeyA(Index: Integer; const Astring: string);
    function  PlusKeyA_Specified(Index: Integer): boolean;
    procedure SetPlusKeyB(Index: Integer; const Astring: string);
    function  PlusKeyB_Specified(Index: Integer): boolean;
    procedure SetSl1CardAuthenticationKey(Index: Integer; const Astring: string);
    function  Sl1CardAuthenticationKey_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Block1:                      AccessBits2              Index (IS_OPTN or IS_NLBL) read FBlock1 write SetBlock1 stored Block1_Specified;
    property Block1DataType:              BlockData                Index (IS_OPTN) read FBlock1DataType write SetBlock1DataType stored Block1DataType_Specified;
    property Block2:                      AccessBits2              Index (IS_OPTN or IS_NLBL) read FBlock2 write SetBlock2 stored Block2_Specified;
    property Block2DataType:              BlockData                Index (IS_OPTN) read FBlock2DataType write SetBlock2DataType stored Block2DataType_Specified;
    property Block3:                      AccessBits2              Index (IS_OPTN or IS_NLBL) read FBlock3 write SetBlock3 stored Block3_Specified;
    property Block3DataType:              BlockData                Index (IS_OPTN) read FBlock3DataType write SetBlock3DataType stored Block3DataType_Specified;
    property CardConfigurationKey:        string                   Index (IS_OPTN or IS_NLBL) read FCardConfigurationKey write SetCardConfigurationKey stored CardConfigurationKey_Specified;
    property CardMasterKey:               string                   Index (IS_OPTN or IS_NLBL) read FCardMasterKey write SetCardMasterKey stored CardMasterKey_Specified;
    property ClassicEmissionMode:         Boolean                  Index (IS_OPTN) read FClassicEmissionMode write SetClassicEmissionMode stored ClassicEmissionMode_Specified;
    property ClassicEmissionTypeKey:      Boolean                  Index (IS_OPTN) read FClassicEmissionTypeKey write SetClassicEmissionTypeKey stored ClassicEmissionTypeKey_Specified;
    property ClassicKeyA:                 string                   Index (IS_OPTN or IS_NLBL) read FClassicKeyA write SetClassicKeyA stored ClassicKeyA_Specified;
    property ClassicKeyB:                 string                   Index (IS_OPTN or IS_NLBL) read FClassicKeyB write SetClassicKeyB stored ClassicKeyB_Specified;
    property ClassikControllerTypeKey:    Boolean                  Index (IS_OPTN) read FClassikControllerTypeKey write SetClassikControllerTypeKey stored ClassikControllerTypeKey_Specified;
    property IsUsePlusKeyA:               Boolean                  Index (IS_OPTN) read FIsUsePlusKeyA write SetIsUsePlusKeyA stored IsUsePlusKeyA_Specified;
    property KeyBlock:                    AccessBits2              Index (IS_OPTN or IS_NLBL) read FKeyBlock write SetKeyBlock stored KeyBlock_Specified;
    property Level2SwitchKey:             string                   Index (IS_OPTN or IS_NLBL) read FLevel2SwitchKey write SetLevel2SwitchKey stored Level2SwitchKey_Specified;
    property Level3SwitchKey:             string                   Index (IS_OPTN or IS_NLBL) read FLevel3SwitchKey write SetLevel3SwitchKey stored Level3SwitchKey_Specified;
    property PlusControllerTypeKey:       Boolean                  Index (IS_OPTN) read FPlusControllerTypeKey write SetPlusControllerTypeKey stored PlusControllerTypeKey_Specified;
    property PlusEmissionMode:            Boolean                  Index (IS_OPTN) read FPlusEmissionMode write SetPlusEmissionMode stored PlusEmissionMode_Specified;
    property PlusEmissionProtectionLevel: EmissionProtectionLevel  Index (IS_OPTN) read FPlusEmissionProtectionLevel write SetPlusEmissionProtectionLevel stored PlusEmissionProtectionLevel_Specified;
    property PlusEmissionTypeKey:         Boolean                  Index (IS_OPTN) read FPlusEmissionTypeKey write SetPlusEmissionTypeKey stored PlusEmissionTypeKey_Specified;
    property PlusKeyA:                    string                   Index (IS_OPTN or IS_NLBL) read FPlusKeyA write SetPlusKeyA stored PlusKeyA_Specified;
    property PlusKeyB:                    string                   Index (IS_OPTN or IS_NLBL) read FPlusKeyB write SetPlusKeyB stored PlusKeyB_Specified;
    property Sl1CardAuthenticationKey:    string                   Index (IS_OPTN or IS_NLBL) read FSl1CardAuthenticationKey write SetSl1CardAuthenticationKey stored Sl1CardAuthenticationKey_Specified;
  end;



  // ************************************************************************ //
  // XML       : MifareProfileFullInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare
  // ************************************************************************ //
  MifareProfileFullInfo2 = class(MifareProfileFullSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : MifareProfileFullInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare
  // ************************************************************************ //
  MifareProfileFullInfo = class(MifareProfileFullInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MifareProfileFullSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare
  // ************************************************************************ //
  MifareProfileFullSaveData = class(MifareProfileFullSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : UidKeyInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare
  // ************************************************************************ //
  UidKeyInfo2 = class(TRemotable)
  private
    FICCID: string;
    FICCID_Specified: boolean;
    FKey: string;
    FKey_Specified: boolean;
    FUid: string;
    FUid_Specified: boolean;
    procedure SetICCID(Index: Integer; const Astring: string);
    function  ICCID_Specified(Index: Integer): boolean;
    procedure SetKey(Index: Integer; const Astring: string);
    function  Key_Specified(Index: Integer): boolean;
    procedure SetUid(Index: Integer; const Astring: string);
    function  Uid_Specified(Index: Integer): boolean;
  published
    property ICCID: string  Index (IS_OPTN or IS_NLBL) read FICCID write SetICCID stored ICCID_Specified;
    property Key:   string  Index (IS_OPTN or IS_NLBL) read FKey write SetKey stored Key_Specified;
    property Uid:   string  Index (IS_OPTN or IS_NLBL) read FUid write SetUid stored Uid_Specified;
  end;



  // ************************************************************************ //
  // XML       : UidKeyInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare
  // ************************************************************************ //
  UidKeyInfo = class(UidKeyInfo2)
  private
  published
  end;

  ArrayOfMifareProfileInfo = array of MifareProfileInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"[GblCplx] }


  // ************************************************************************ //
  // XML       : MifareProfileInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare
  // ************************************************************************ //
  MifareProfileInfo2 = class(MifareProfileSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : MifareProfileInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare
  // ************************************************************************ //
  MifareProfileInfo = class(MifareProfileInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_DriverEventPlaybackSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_DriverEventPlaybackSaveData = class(ISS_DriverEventPlaybackSaveData2)
  private
  published
  end;

  ArrayOfMapInfo = array of MapInfo2;           { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"[GblCplx] }


  // ************************************************************************ //
  // XML       : ISS_DriverEventPlaybackSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_DriverEventPlaybackSlimInfo = class(ISS_DriverEventPlaybackSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_Recognition_SaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Recognition_SaveData = class(ISS_Recognition_SaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_Driver_SlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Driver_SlimInfo = class(ISS_Driver_SlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_Driver_SaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Driver_SaveData = class(ISS_Driver_SaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DriverFigureSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace
  // ************************************************************************ //
  DriverFigureSaveData2 = class(TRemotable)
  private
    FDriverId: guid;
    FDriverId_Specified: boolean;
    FShowDriverName: Boolean;
    FShowDriverName_Specified: boolean;
    FX: Double;
    FX_Specified: boolean;
    FY: Double;
    FY_Specified: boolean;
    FZ: Integer;
    FZ_Specified: boolean;
    procedure SetDriverId(Index: Integer; const Aguid: guid);
    function  DriverId_Specified(Index: Integer): boolean;
    procedure SetShowDriverName(Index: Integer; const ABoolean: Boolean);
    function  ShowDriverName_Specified(Index: Integer): boolean;
    procedure SetX(Index: Integer; const ADouble: Double);
    function  X_Specified(Index: Integer): boolean;
    procedure SetY(Index: Integer; const ADouble: Double);
    function  Y_Specified(Index: Integer): boolean;
    procedure SetZ(Index: Integer; const AInteger: Integer);
    function  Z_Specified(Index: Integer): boolean;
  published
    property DriverId:       guid     Index (IS_OPTN) read FDriverId write SetDriverId stored DriverId_Specified;
    property ShowDriverName: Boolean  Index (IS_OPTN) read FShowDriverName write SetShowDriverName stored ShowDriverName_Specified;
    property X:              Double   Index (IS_OPTN) read FX write SetX stored X_Specified;
    property Y:              Double   Index (IS_OPTN) read FY write SetY stored Y_Specified;
    property Z:              Integer  Index (IS_OPTN) read FZ write SetZ stored Z_Specified;
  end;



  // ************************************************************************ //
  // XML       : DriverFigureSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace
  // ************************************************************************ //
  DriverFigureSaveData = class(DriverFigureSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MapSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace
  // ************************************************************************ //
  MapSaveData2 = class(TRemotable)
  private
    FComment: string;
    FComment_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FTextWrappingLength: Integer;
    FTextWrappingLength_Specified: boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetTextWrappingLength(Index: Integer; const AInteger: Integer);
    function  TextWrappingLength_Specified(Index: Integer): boolean;
  published
    property Comment:            string   Index (IS_OPTN or IS_NLBL) read FComment write SetComment stored Comment_Specified;
    property Name_:              string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property TextWrappingLength: Integer  Index (IS_OPTN or IS_NLBL) read FTextWrappingLength write SetTextWrappingLength stored TextWrappingLength_Specified;
  end;



  // ************************************************************************ //
  // XML       : MapSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace
  // ************************************************************************ //
  MapSaveData = class(MapSaveData2)
  private
  published
  end;

  ArrayOfDriverFigureInfo = array of DriverFigureInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"[GblCplx] }


  // ************************************************************************ //
  // XML       : MapInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace
  // ************************************************************************ //
  MapInfo2 = class(MapSaveData2)
  private
    FDriverFigures: ArrayOfDriverFigureInfo;
    FDriverFigures_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FMaps: ArrayOfMapInfo;
    FMaps_Specified: boolean;
    FParentId: guid;
    FParentId_Specified: boolean;
    procedure SetDriverFigures(Index: Integer; const AArrayOfDriverFigureInfo: ArrayOfDriverFigureInfo);
    function  DriverFigures_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetMaps(Index: Integer; const AArrayOfMapInfo: ArrayOfMapInfo);
    function  Maps_Specified(Index: Integer): boolean;
    procedure SetParentId(Index: Integer; const Aguid: guid);
    function  ParentId_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DriverFigures: ArrayOfDriverFigureInfo  Index (IS_OPTN or IS_NLBL) read FDriverFigures write SetDriverFigures stored DriverFigures_Specified;
    property Id:            guid                     Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property Maps:          ArrayOfMapInfo           Index (IS_OPTN or IS_NLBL) read FMaps write SetMaps stored Maps_Specified;
    property ParentId:      guid                     Index (IS_OPTN or IS_NLBL) read FParentId write SetParentId stored ParentId_Specified;
  end;



  // ************************************************************************ //
  // XML       : MapInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace
  // ************************************************************************ //
  MapInfo = class(MapInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DriverFigureInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace
  // ************************************************************************ //
  DriverFigureInfo2 = class(DriverFigureSaveData2)
  private
    FDriverAssemblyQualifiedName: string;
    FDriverAssemblyQualifiedName_Specified: boolean;
    FDriverName: string;
    FDriverName_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    procedure SetDriverAssemblyQualifiedName(Index: Integer; const Astring: string);
    function  DriverAssemblyQualifiedName_Specified(Index: Integer): boolean;
    procedure SetDriverName(Index: Integer; const Astring: string);
    function  DriverName_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property DriverAssemblyQualifiedName: string  Index (IS_OPTN or IS_NLBL) read FDriverAssemblyQualifiedName write SetDriverAssemblyQualifiedName stored DriverAssemblyQualifiedName_Specified;
    property DriverName:                  string  Index (IS_OPTN or IS_NLBL) read FDriverName write SetDriverName stored DriverName_Specified;
    property Id:                          guid    Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : DriverFigureInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace
  // ************************************************************************ //
  DriverFigureInfo = class(DriverFigureInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LPropertyValue, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  LPropertyValue = class(LPropertyValue2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetControllerConfigurationsResult.Config, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  GetControllerConfigurationsResult_Config2 = class(TRemotable)
  private
    FConfiguration: ArrayOfLDriverFullInfo;
    FConfiguration_Specified: boolean;
    FNetConfig: CanDeviceNetConfig2;
    FNetConfig_Specified: boolean;
    procedure SetConfiguration(Index: Integer; const AArrayOfLDriverFullInfo: ArrayOfLDriverFullInfo);
    function  Configuration_Specified(Index: Integer): boolean;
    procedure SetNetConfig(Index: Integer; const ACanDeviceNetConfig2: CanDeviceNetConfig2);
    function  NetConfig_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Configuration: ArrayOfLDriverFullInfo  Index (IS_OPTN or IS_NLBL) read FConfiguration write SetConfiguration stored Configuration_Specified;
    property NetConfig:     CanDeviceNetConfig2     Index (IS_OPTN or IS_NLBL) read FNetConfig write SetNetConfig stored NetConfig_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetControllerConfigurationsResult.FailedConfig, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  GetControllerConfigurationsResult_FailedConfig2 = class(TRemotable)
  private
    FError: string;
    FError_Specified: boolean;
    FNetConfig: CanDeviceNetConfig2;
    FNetConfig_Specified: boolean;
    procedure SetError(Index: Integer; const Astring: string);
    function  Error_Specified(Index: Integer): boolean;
    procedure SetNetConfig(Index: Integer; const ACanDeviceNetConfig2: CanDeviceNetConfig2);
    function  NetConfig_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Error:     string               Index (IS_OPTN or IS_NLBL) read FError write SetError stored Error_Specified;
    property NetConfig: CanDeviceNetConfig2  Index (IS_OPTN or IS_NLBL) read FNetConfig write SetNetConfig stored NetConfig_Specified;
  end;

  ArrayOfGetControllerConfigurationsResult_FailedConfig = array of GetControllerConfigurationsResult_FailedConfig2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  ArrayOfFindControllersResult_FailedConverterInfo = array of FindControllersResult_FailedConverterInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }


  // ************************************************************************ //
  // XML       : CanDeviceInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  CanDeviceInfo2 = class(TRemotable)
  private
    FError: string;
    FError_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FNetConfig: CanDeviceNetConfig2;
    FNetConfig_Specified: boolean;
    procedure SetError(Index: Integer; const Astring: string);
    function  Error_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetNetConfig(Index: Integer; const ACanDeviceNetConfig2: CanDeviceNetConfig2);
    function  NetConfig_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Error:     string               Index (IS_OPTN or IS_NLBL) read FError write SetError stored Error_Specified;
    property Name_:     string               Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property NetConfig: CanDeviceNetConfig2  Index (IS_OPTN or IS_NLBL) read FNetConfig write SetNetConfig stored NetConfig_Specified;
  end;



  // ************************************************************************ //
  // XML       : CanDeviceInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  CanDeviceInfo = class(CanDeviceInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CanDeviceNetConfig, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  CanDeviceNetConfig2 = class(TRemotable)
  private
    FBusAddress: Byte;
    FBusAddress_Specified: boolean;
    FConverterAddress: CanConverterAddress2;
    FConverterAddress_Specified: boolean;
    FDriverFullInfo: LDriverFullInfo2;
    FDriverFullInfo_Specified: boolean;
    FHardwareType: string;
    FHardwareType_Specified: boolean;
    FIsEncrypted: Boolean;
    FIsEncrypted_Specified: boolean;
    FMajorVersion: Byte;
    FMajorVersion_Specified: boolean;
    FMinorVersion: Byte;
    FMinorVersion_Specified: boolean;
    FRawHardwareType: Byte;
    FRawHardwareType_Specified: boolean;
    FSID: Cardinal;
    FSID_Specified: boolean;
    procedure SetBusAddress(Index: Integer; const AByte: Byte);
    function  BusAddress_Specified(Index: Integer): boolean;
    procedure SetConverterAddress(Index: Integer; const ACanConverterAddress2: CanConverterAddress2);
    function  ConverterAddress_Specified(Index: Integer): boolean;
    procedure SetDriverFullInfo(Index: Integer; const ALDriverFullInfo2: LDriverFullInfo2);
    function  DriverFullInfo_Specified(Index: Integer): boolean;
    procedure SetHardwareType(Index: Integer; const Astring: string);
    function  HardwareType_Specified(Index: Integer): boolean;
    procedure SetIsEncrypted(Index: Integer; const ABoolean: Boolean);
    function  IsEncrypted_Specified(Index: Integer): boolean;
    procedure SetMajorVersion(Index: Integer; const AByte: Byte);
    function  MajorVersion_Specified(Index: Integer): boolean;
    procedure SetMinorVersion(Index: Integer; const AByte: Byte);
    function  MinorVersion_Specified(Index: Integer): boolean;
    procedure SetRawHardwareType(Index: Integer; const AByte: Byte);
    function  RawHardwareType_Specified(Index: Integer): boolean;
    procedure SetSID(Index: Integer; const ACardinal: Cardinal);
    function  SID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property BusAddress:       Byte                  Index (IS_OPTN) read FBusAddress write SetBusAddress stored BusAddress_Specified;
    property ConverterAddress: CanConverterAddress2  Index (IS_OPTN or IS_NLBL) read FConverterAddress write SetConverterAddress stored ConverterAddress_Specified;
    property DriverFullInfo:   LDriverFullInfo2      Index (IS_OPTN or IS_NLBL) read FDriverFullInfo write SetDriverFullInfo stored DriverFullInfo_Specified;
    property HardwareType:     string                Index (IS_OPTN or IS_NLBL) read FHardwareType write SetHardwareType stored HardwareType_Specified;
    property IsEncrypted:      Boolean               Index (IS_OPTN) read FIsEncrypted write SetIsEncrypted stored IsEncrypted_Specified;
    property MajorVersion:     Byte                  Index (IS_OPTN) read FMajorVersion write SetMajorVersion stored MajorVersion_Specified;
    property MinorVersion:     Byte                  Index (IS_OPTN) read FMinorVersion write SetMinorVersion stored MinorVersion_Specified;
    property RawHardwareType:  Byte                  Index (IS_OPTN) read FRawHardwareType write SetRawHardwareType stored RawHardwareType_Specified;
    property SID:              Cardinal              Index (IS_OPTN) read FSID write SetSID stored SID_Specified;
  end;



  // ************************************************************************ //
  // XML       : CanDeviceNetConfig, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  CanDeviceNetConfig = class(CanDeviceNetConfig2)
  private
  published
  end;

  ArrayOfCanDeviceInfo = array of CanDeviceInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }
  ArrayOfLanCanConverter = array of LanCanConverter2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }


  // ************************************************************************ //
  // XML       : LanCanConverter, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  LanCanConverter2 = class(TRemotable)
  private
    FAddress: CanConverterAddress2;
    FAddress_Specified: boolean;
    FControllerMac: Int64;
    FControllerMac_Specified: boolean;
    FControllerPort: Word;
    FControllerPort_Specified: boolean;
    FEncryption: Boolean;
    FEncryption_Specified: boolean;
    FFirmwareMajorVersion: Byte;
    FFirmwareMajorVersion_Specified: boolean;
    FFirmwareMinorVersion: Byte;
    FFirmwareMinorVersion_Specified: boolean;
    FGateway: IPAddress2;
    FGateway_Specified: boolean;
    FHardwareType: string;
    FHardwareType_Specified: boolean;
    FMask: IPAddress2;
    FMask_Specified: boolean;
    procedure SetAddress(Index: Integer; const ACanConverterAddress2: CanConverterAddress2);
    function  Address_Specified(Index: Integer): boolean;
    procedure SetControllerMac(Index: Integer; const AInt64: Int64);
    function  ControllerMac_Specified(Index: Integer): boolean;
    procedure SetControllerPort(Index: Integer; const AWord: Word);
    function  ControllerPort_Specified(Index: Integer): boolean;
    procedure SetEncryption(Index: Integer; const ABoolean: Boolean);
    function  Encryption_Specified(Index: Integer): boolean;
    procedure SetFirmwareMajorVersion(Index: Integer; const AByte: Byte);
    function  FirmwareMajorVersion_Specified(Index: Integer): boolean;
    procedure SetFirmwareMinorVersion(Index: Integer; const AByte: Byte);
    function  FirmwareMinorVersion_Specified(Index: Integer): boolean;
    procedure SetGateway(Index: Integer; const AIPAddress2: IPAddress2);
    function  Gateway_Specified(Index: Integer): boolean;
    procedure SetHardwareType(Index: Integer; const Astring: string);
    function  HardwareType_Specified(Index: Integer): boolean;
    procedure SetMask(Index: Integer; const AIPAddress2: IPAddress2);
    function  Mask_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Address:              CanConverterAddress2  Index (IS_OPTN or IS_NLBL) read FAddress write SetAddress stored Address_Specified;
    property ControllerMac:        Int64                 Index (IS_OPTN) read FControllerMac write SetControllerMac stored ControllerMac_Specified;
    property ControllerPort:       Word                  Index (IS_OPTN) read FControllerPort write SetControllerPort stored ControllerPort_Specified;
    property Encryption:           Boolean               Index (IS_OPTN) read FEncryption write SetEncryption stored Encryption_Specified;
    property FirmwareMajorVersion: Byte                  Index (IS_OPTN) read FFirmwareMajorVersion write SetFirmwareMajorVersion stored FirmwareMajorVersion_Specified;
    property FirmwareMinorVersion: Byte                  Index (IS_OPTN) read FFirmwareMinorVersion write SetFirmwareMinorVersion stored FirmwareMinorVersion_Specified;
    property Gateway:              IPAddress2            Index (IS_OPTN or IS_NLBL) read FGateway write SetGateway stored Gateway_Specified;
    property HardwareType:         string                Index (IS_OPTN or IS_NLBL) read FHardwareType write SetHardwareType stored HardwareType_Specified;
    property Mask:                 IPAddress2            Index (IS_OPTN or IS_NLBL) read FMask write SetMask stored Mask_Specified;
  end;



  // ************************************************************************ //
  // XML       : LanCanConverter, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  LanCanConverter = class(LanCanConverter2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : FindControllersResult, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  FindControllersResult2 = class(TRemotable)
  private
    FControllers: ArrayOfCanDeviceInfo;
    FControllers_Specified: boolean;
    FFailedControllers: ArrayOfCanDeviceInfo;
    FFailedControllers_Specified: boolean;
    FFailedConverters: ArrayOfFindControllersResult_FailedConverterInfo;
    FFailedConverters_Specified: boolean;
    procedure SetControllers(Index: Integer; const AArrayOfCanDeviceInfo: ArrayOfCanDeviceInfo);
    function  Controllers_Specified(Index: Integer): boolean;
    procedure SetFailedControllers(Index: Integer; const AArrayOfCanDeviceInfo: ArrayOfCanDeviceInfo);
    function  FailedControllers_Specified(Index: Integer): boolean;
    procedure SetFailedConverters(Index: Integer; const AArrayOfFindControllersResult_FailedConverterInfo: ArrayOfFindControllersResult_FailedConverterInfo);
    function  FailedConverters_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Controllers:       ArrayOfCanDeviceInfo                              Index (IS_OPTN or IS_NLBL) read FControllers write SetControllers stored Controllers_Specified;
    property FailedControllers: ArrayOfCanDeviceInfo                              Index (IS_OPTN or IS_NLBL) read FFailedControllers write SetFailedControllers stored FailedControllers_Specified;
    property FailedConverters:  ArrayOfFindControllersResult_FailedConverterInfo  Index (IS_OPTN or IS_NLBL) read FFailedConverters write SetFailedConverters stored FailedConverters_Specified;
  end;



  // ************************************************************************ //
  // XML       : FindControllersResult, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  FindControllersResult = class(FindControllersResult2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetDevicesAddressBySidResult.FailedAddress, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  SetDevicesAddressBySidResult_FailedAddress2 = class(TRemotable)
  private
    FError: string;
    FError_Specified: boolean;
    FNetConfig: CanDeviceNetConfig2;
    FNetConfig_Specified: boolean;
    procedure SetError(Index: Integer; const Astring: string);
    function  Error_Specified(Index: Integer): boolean;
    procedure SetNetConfig(Index: Integer; const ACanDeviceNetConfig2: CanDeviceNetConfig2);
    function  NetConfig_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Error:     string               Index (IS_OPTN or IS_NLBL) read FError write SetError stored Error_Specified;
    property NetConfig: CanDeviceNetConfig2  Index (IS_OPTN or IS_NLBL) read FNetConfig write SetNetConfig stored NetConfig_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetDevicesAddressBySidResult.FailedAddress, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  SetDevicesAddressBySidResult_FailedAddress = class(SetDevicesAddressBySidResult_FailedAddress2)
  private
  published
  end;

  ArrayOfGetControllerConfigurationsResult_Config = array of GetControllerConfigurationsResult_Config2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }


  // ************************************************************************ //
  // XML       : GetControllerConfigurationsResult, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  GetControllerConfigurationsResult2 = class(TRemotable)
  private
    FConfigurations: ArrayOfGetControllerConfigurationsResult_Config;
    FConfigurations_Specified: boolean;
    FFailedDevices: ArrayOfGetControllerConfigurationsResult_FailedConfig;
    FFailedDevices_Specified: boolean;
    procedure SetConfigurations(Index: Integer; const AArrayOfGetControllerConfigurationsResult_Config: ArrayOfGetControllerConfigurationsResult_Config);
    function  Configurations_Specified(Index: Integer): boolean;
    procedure SetFailedDevices(Index: Integer; const AArrayOfGetControllerConfigurationsResult_FailedConfig: ArrayOfGetControllerConfigurationsResult_FailedConfig);
    function  FailedDevices_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Configurations: ArrayOfGetControllerConfigurationsResult_Config        Index (IS_OPTN or IS_NLBL) read FConfigurations write SetConfigurations stored Configurations_Specified;
    property FailedDevices:  ArrayOfGetControllerConfigurationsResult_FailedConfig  Index (IS_OPTN or IS_NLBL) read FFailedDevices write SetFailedDevices stored FailedDevices_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetControllerConfigurationsResult, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  GetControllerConfigurationsResult = class(GetControllerConfigurationsResult2)
  private
  published
  end;

  ArrayOfSetDevicesAddressBySidResult_FailedAddress = array of SetDevicesAddressBySidResult_FailedAddress2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }


  // ************************************************************************ //
  // XML       : FindControllersResult.FailedConverterInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  FindControllersResult_FailedConverterInfo2 = class(TRemotable)
  private
    FConverterAddress: CanConverterAddress2;
    FConverterAddress_Specified: boolean;
    FError: string;
    FError_Specified: boolean;
    procedure SetConverterAddress(Index: Integer; const ACanConverterAddress2: CanConverterAddress2);
    function  ConverterAddress_Specified(Index: Integer): boolean;
    procedure SetError(Index: Integer; const Astring: string);
    function  Error_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ConverterAddress: CanConverterAddress2  Index (IS_OPTN or IS_NLBL) read FConverterAddress write SetConverterAddress stored ConverterAddress_Specified;
    property Error:            string                Index (IS_OPTN or IS_NLBL) read FError write SetError stored Error_Specified;
  end;



  // ************************************************************************ //
  // XML       : FindControllersResult.FailedConverterInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  FindControllersResult_FailedConverterInfo = class(FindControllersResult_FailedConverterInfo2)
  private
  published
  end;

  ArrayOfCanDeviceNetConfig = array of CanDeviceNetConfig2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }


  // ************************************************************************ //
  // XML       : SetDevicesAddressBySidResult, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  SetDevicesAddressBySidResult2 = class(TRemotable)
  private
    FFailedDevices: ArrayOfSetDevicesAddressBySidResult_FailedAddress;
    FFailedDevices_Specified: boolean;
    procedure SetFailedDevices(Index: Integer; const AArrayOfSetDevicesAddressBySidResult_FailedAddress: ArrayOfSetDevicesAddressBySidResult_FailedAddress);
    function  FailedDevices_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property FailedDevices: ArrayOfSetDevicesAddressBySidResult_FailedAddress  Index (IS_OPTN or IS_NLBL) read FFailedDevices write SetFailedDevices stored FailedDevices_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetDevicesAddressBySidResult, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  SetDevicesAddressBySidResult = class(SetDevicesAddressBySidResult2)
  private
  published
  end;

  ArrayOfLCustomizableDayInfo = array of LCustomizableDayInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }


  // ************************************************************************ //
  // XML       : LDriversCustomizableDays, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  LDriversCustomizableDays2 = class(TRemotable)
  private
    FDays: ArrayOfLCustomizableDayInfo;
    FDays_Specified: boolean;
    FDriverID: guid;
    FDriverID_Specified: boolean;
    FId: Integer;
    FId_Specified: boolean;
    procedure SetDays(Index: Integer; const AArrayOfLCustomizableDayInfo: ArrayOfLCustomizableDayInfo);
    function  Days_Specified(Index: Integer): boolean;
    procedure SetDriverID(Index: Integer; const Aguid: guid);
    function  DriverID_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const AInteger: Integer);
    function  Id_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Days:     ArrayOfLCustomizableDayInfo  Index (IS_OPTN or IS_NLBL) read FDays write SetDays stored Days_Specified;
    property DriverID: guid                         Index (IS_OPTN) read FDriverID write SetDriverID stored DriverID_Specified;
    property Id:       Integer                      Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : LCustomizableDayInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  LCustomizableDayInfo2 = class(TRemotable)
  private
    FDate: TXSDateTime;
    FDate_Specified: boolean;
    FDayType: CustomizableDayType;
    FDayType_Specified: boolean;
    FId: guid;
    FId_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FTransferedDate: TXSDateTime;
    FTransferedDate_Specified: boolean;
    procedure SetDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  Date_Specified(Index: Integer): boolean;
    procedure SetDayType(Index: Integer; const ACustomizableDayType: CustomizableDayType);
    function  DayType_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetTransferedDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  TransferedDate_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Date:           TXSDateTime          Index (IS_OPTN) read FDate write SetDate stored Date_Specified;
    property DayType:        CustomizableDayType  Index (IS_OPTN) read FDayType write SetDayType stored DayType_Specified;
    property Id:             guid                 Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property Name_:          string               Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property TransferedDate: TXSDateTime          Index (IS_OPTN or IS_NLBL) read FTransferedDate write SetTransferedDate stored TransferedDate_Specified;
  end;



  // ************************************************************************ //
  // XML       : LDriversCustomizableDays, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  LDriversCustomizableDays = class(LDriversCustomizableDays2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LCustomizableDayInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  LCustomizableDayInfo = class(LCustomizableDayInfo2)
  private
  published
  end;

  ArrayOfLDriversCustomizableDays = array of LDriversCustomizableDays2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }
  ArrayOfLKeyInfo = array of LKeyInfo2;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }


  // ************************************************************************ //
  // XML       : LChangedKeys, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  LChangedKeys2 = class(TRemotable)
  private
    FKeys: ArrayOfLKeyInfo;
    FKeys_Specified: boolean;
    procedure SetKeys(Index: Integer; const AArrayOfLKeyInfo: ArrayOfLKeyInfo);
    function  Keys_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Keys: ArrayOfLKeyInfo  Index (IS_OPTN or IS_NLBL) read FKeys write SetKeys stored Keys_Specified;
  end;



  // ************************************************************************ //
  // XML       : LChangedKeys, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  LChangedKeys = class(LChangedKeys2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CardTypeBiometricPermission, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  CardTypeBiometricPermission2 = class(TRemotable)
  private
    FCardTypeID: guid;
    FCardTypeID_Specified: boolean;
    FCardTypeName: string;
    FCardTypeName_Specified: boolean;
    procedure SetCardTypeID(Index: Integer; const Aguid: guid);
    function  CardTypeID_Specified(Index: Integer): boolean;
    procedure SetCardTypeName(Index: Integer; const Astring: string);
    function  CardTypeName_Specified(Index: Integer): boolean;
  published
    property CardTypeID:   guid    Index (IS_OPTN or IS_NLBL) read FCardTypeID write SetCardTypeID stored CardTypeID_Specified;
    property CardTypeName: string  Index (IS_OPTN or IS_NLBL) read FCardTypeName write SetCardTypeName stored CardTypeName_Specified;
  end;



  // ************************************************************************ //
  // XML       : CardTypeBiometricPermission, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  CardTypeBiometricPermission = class(CardTypeBiometricPermission2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetControllerConfigurationsResult.Config, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  GetControllerConfigurationsResult_Config = class(GetControllerConfigurationsResult_Config2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetControllerConfigurationsResult.FailedConfig, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  GetControllerConfigurationsResult_FailedConfig = class(GetControllerConfigurationsResult_FailedConfig2)
  private
  published
  end;

  ArrayOfCardTypeBiometricPermission = array of CardTypeBiometricPermission2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }
  ArrayOfDoorRelay = array of DoorRelay2;       { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"[GblCplx] }


  // ************************************************************************ //
  // XML       : DoorRelay, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  DoorRelay2 = class(TRemotable)
  private
    FAccess: Boolean;
    FAccess_Specified: boolean;
    FPosition: Integer;
    FPosition_Specified: boolean;
    procedure SetAccess(Index: Integer; const ABoolean: Boolean);
    function  Access_Specified(Index: Integer): boolean;
    procedure SetPosition(Index: Integer; const AInteger: Integer);
    function  Position_Specified(Index: Integer): boolean;
  published
    property Access:   Boolean  Index (IS_OPTN) read FAccess write SetAccess stored Access_Specified;
    property Position: Integer  Index (IS_OPTN) read FPosition write SetPosition stored Position_Specified;
  end;



  // ************************************************************************ //
  // XML       : DoorRelay, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  DoorRelay = class(DoorRelay2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LChangedCustomizableDays, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  LChangedCustomizableDays2 = class(TRemotable)
  private
    FRows: ArrayOfLDriversCustomizableDays;
    FRows_Specified: boolean;
    procedure SetRows(Index: Integer; const AArrayOfLDriversCustomizableDays: ArrayOfLDriversCustomizableDays);
    function  Rows_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Rows: ArrayOfLDriversCustomizableDays  Index (IS_OPTN or IS_NLBL) read FRows write SetRows stored Rows_Specified;
  end;



  // ************************************************************************ //
  // XML       : LChangedCustomizableDays, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  LChangedCustomizableDays = class(LChangedCustomizableDays2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DoorRelays, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  DoorRelays2 = class(TRemotable)
  private
    FRelays: ArrayOfDoorRelay;
    FRelays_Specified: boolean;
    FType_: BoxAccessLevelMode;
    FType__Specified: boolean;
    procedure SetRelays(Index: Integer; const AArrayOfDoorRelay: ArrayOfDoorRelay);
    function  Relays_Specified(Index: Integer): boolean;
    procedure SetType_(Index: Integer; const ABoxAccessLevelMode: BoxAccessLevelMode);
    function  Type__Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Relays: ArrayOfDoorRelay    Index (IS_OPTN or IS_NLBL) read FRelays write SetRelays stored Relays_Specified;
    property Type_:  BoxAccessLevelMode  Index (IS_OPTN) read FType_ write SetType_ stored Type__Specified;
  end;



  // ************************************************************************ //
  // XML       : DoorRelays, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  DoorRelays = class(DoorRelays2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DriverSettings, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  DriverSettings2 = class(TRemotable)
  private
    FAntipassback: Boolean;
    FAntipassback_Specified: boolean;
    FCardPlusAlcoFrame: Boolean;
    FCardPlusAlcoFrame_Specified: boolean;
    FCardPlusFace: Boolean;
    FCardPlusFace_Specified: boolean;
    FCardPlusVehicle: Boolean;
    FCardPlusVehicle_Specified: boolean;
    FControllerIdentification: ControllerIdentificationType;
    FControllerIdentification_Specified: boolean;
    FDaySchedule: AcsDaySchedule2;
    FDaySchedule_Specified: boolean;
    FDontCheckExternalResolution: Boolean;
    FDontCheckExternalResolution_Specified: boolean;
    FDontRequireOpConfirmation: Boolean;
    FDontRequireOpConfirmation_Specified: boolean;
    FDoorRelays: DoorRelays2;
    FDoorRelays_Specified: boolean;
    FIsGuardOffModeOn: Boolean;
    FIsGuardOffModeOn_Specified: boolean;
    FIsGuardOnModeOn: Boolean;
    FIsGuardOnModeOn_Specified: boolean;
    FIsLockModeOn: Boolean;
    FIsLockModeOn_Specified: boolean;
    FIsMultiIdentification: Boolean;
    FIsMultiIdentification_Specified: boolean;
    FIsOpenForALongTimeModeOn: Boolean;
    FIsOpenForALongTimeModeOn_Specified: boolean;
    FMainIdentification: MainIdentificationType;
    FMainIdentification_Specified: boolean;
    FMultiDaySchedule: AcsMultiDaySchedule2;
    FMultiDaySchedule_Specified: boolean;
    FOrderedServerIdentification: ArrayOfServerIdentificationType;
    FOrderedServerIdentification_Specified: boolean;
    FPassageByRuleOfTwoPersonsMode: PassageByRuleOfTwoPersonsMode;
    FPassageByRuleOfTwoPersonsMode_Specified: boolean;
    FScheduleType: AcsScheduleType;
    FScheduleType_Specified: boolean;
    FUseHolidaysAndTransfers: Boolean;
    FUseHolidaysAndTransfers_Specified: boolean;
    FWeekSchedule: AcsWeekScheduleFull2;
    FWeekSchedule_Specified: boolean;
    procedure SetAntipassback(Index: Integer; const ABoolean: Boolean);
    function  Antipassback_Specified(Index: Integer): boolean;
    procedure SetCardPlusAlcoFrame(Index: Integer; const ABoolean: Boolean);
    function  CardPlusAlcoFrame_Specified(Index: Integer): boolean;
    procedure SetCardPlusFace(Index: Integer; const ABoolean: Boolean);
    function  CardPlusFace_Specified(Index: Integer): boolean;
    procedure SetCardPlusVehicle(Index: Integer; const ABoolean: Boolean);
    function  CardPlusVehicle_Specified(Index: Integer): boolean;
    procedure SetControllerIdentification(Index: Integer; const AControllerIdentificationType: ControllerIdentificationType);
    function  ControllerIdentification_Specified(Index: Integer): boolean;
    procedure SetDaySchedule(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
    function  DaySchedule_Specified(Index: Integer): boolean;
    procedure SetDontCheckExternalResolution(Index: Integer; const ABoolean: Boolean);
    function  DontCheckExternalResolution_Specified(Index: Integer): boolean;
    procedure SetDontRequireOpConfirmation(Index: Integer; const ABoolean: Boolean);
    function  DontRequireOpConfirmation_Specified(Index: Integer): boolean;
    procedure SetDoorRelays(Index: Integer; const ADoorRelays2: DoorRelays2);
    function  DoorRelays_Specified(Index: Integer): boolean;
    procedure SetIsGuardOffModeOn(Index: Integer; const ABoolean: Boolean);
    function  IsGuardOffModeOn_Specified(Index: Integer): boolean;
    procedure SetIsGuardOnModeOn(Index: Integer; const ABoolean: Boolean);
    function  IsGuardOnModeOn_Specified(Index: Integer): boolean;
    procedure SetIsLockModeOn(Index: Integer; const ABoolean: Boolean);
    function  IsLockModeOn_Specified(Index: Integer): boolean;
    procedure SetIsMultiIdentification(Index: Integer; const ABoolean: Boolean);
    function  IsMultiIdentification_Specified(Index: Integer): boolean;
    procedure SetIsOpenForALongTimeModeOn(Index: Integer; const ABoolean: Boolean);
    function  IsOpenForALongTimeModeOn_Specified(Index: Integer): boolean;
    procedure SetMainIdentification(Index: Integer; const AMainIdentificationType: MainIdentificationType);
    function  MainIdentification_Specified(Index: Integer): boolean;
    procedure SetMultiDaySchedule(Index: Integer; const AAcsMultiDaySchedule2: AcsMultiDaySchedule2);
    function  MultiDaySchedule_Specified(Index: Integer): boolean;
    procedure SetOrderedServerIdentification(Index: Integer; const AArrayOfServerIdentificationType: ArrayOfServerIdentificationType);
    function  OrderedServerIdentification_Specified(Index: Integer): boolean;
    procedure SetPassageByRuleOfTwoPersonsMode(Index: Integer; const APassageByRuleOfTwoPersonsMode: PassageByRuleOfTwoPersonsMode);
    function  PassageByRuleOfTwoPersonsMode_Specified(Index: Integer): boolean;
    procedure SetScheduleType(Index: Integer; const AAcsScheduleType: AcsScheduleType);
    function  ScheduleType_Specified(Index: Integer): boolean;
    procedure SetUseHolidaysAndTransfers(Index: Integer; const ABoolean: Boolean);
    function  UseHolidaysAndTransfers_Specified(Index: Integer): boolean;
    procedure SetWeekSchedule(Index: Integer; const AAcsWeekScheduleFull2: AcsWeekScheduleFull2);
    function  WeekSchedule_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Antipassback:                  Boolean                          Index (IS_OPTN or IS_NLBL) read FAntipassback write SetAntipassback stored Antipassback_Specified;
    property CardPlusAlcoFrame:             Boolean                          Index (IS_OPTN or IS_NLBL) read FCardPlusAlcoFrame write SetCardPlusAlcoFrame stored CardPlusAlcoFrame_Specified;
    property CardPlusFace:                  Boolean                          Index (IS_OPTN or IS_NLBL) read FCardPlusFace write SetCardPlusFace stored CardPlusFace_Specified;
    property CardPlusVehicle:               Boolean                          Index (IS_OPTN or IS_NLBL) read FCardPlusVehicle write SetCardPlusVehicle stored CardPlusVehicle_Specified;
    property ControllerIdentification:      ControllerIdentificationType     Index (IS_OPTN) read FControllerIdentification write SetControllerIdentification stored ControllerIdentification_Specified;
    property DaySchedule:                   AcsDaySchedule2                  Index (IS_OPTN or IS_NLBL) read FDaySchedule write SetDaySchedule stored DaySchedule_Specified;
    property DontCheckExternalResolution:   Boolean                          Index (IS_OPTN or IS_NLBL) read FDontCheckExternalResolution write SetDontCheckExternalResolution stored DontCheckExternalResolution_Specified;
    property DontRequireOpConfirmation:     Boolean                          Index (IS_OPTN or IS_NLBL) read FDontRequireOpConfirmation write SetDontRequireOpConfirmation stored DontRequireOpConfirmation_Specified;
    property DoorRelays:                    DoorRelays2                      Index (IS_OPTN or IS_NLBL) read FDoorRelays write SetDoorRelays stored DoorRelays_Specified;
    property IsGuardOffModeOn:              Boolean                          Index (IS_OPTN or IS_NLBL) read FIsGuardOffModeOn write SetIsGuardOffModeOn stored IsGuardOffModeOn_Specified;
    property IsGuardOnModeOn:               Boolean                          Index (IS_OPTN or IS_NLBL) read FIsGuardOnModeOn write SetIsGuardOnModeOn stored IsGuardOnModeOn_Specified;
    property IsLockModeOn:                  Boolean                          Index (IS_OPTN or IS_NLBL) read FIsLockModeOn write SetIsLockModeOn stored IsLockModeOn_Specified;
    property IsMultiIdentification:         Boolean                          Index (IS_OPTN or IS_NLBL) read FIsMultiIdentification write SetIsMultiIdentification stored IsMultiIdentification_Specified;
    property IsOpenForALongTimeModeOn:      Boolean                          Index (IS_OPTN or IS_NLBL) read FIsOpenForALongTimeModeOn write SetIsOpenForALongTimeModeOn stored IsOpenForALongTimeModeOn_Specified;
    property MainIdentification:            MainIdentificationType           Index (IS_OPTN) read FMainIdentification write SetMainIdentification stored MainIdentification_Specified;
    property MultiDaySchedule:              AcsMultiDaySchedule2             Index (IS_OPTN or IS_NLBL) read FMultiDaySchedule write SetMultiDaySchedule stored MultiDaySchedule_Specified;
    property OrderedServerIdentification:   ArrayOfServerIdentificationType  Index (IS_OPTN or IS_NLBL) read FOrderedServerIdentification write SetOrderedServerIdentification stored OrderedServerIdentification_Specified;
    property PassageByRuleOfTwoPersonsMode: PassageByRuleOfTwoPersonsMode    Index (IS_OPTN) read FPassageByRuleOfTwoPersonsMode write SetPassageByRuleOfTwoPersonsMode stored PassageByRuleOfTwoPersonsMode_Specified;
    property ScheduleType:                  AcsScheduleType                  Index (IS_OPTN) read FScheduleType write SetScheduleType stored ScheduleType_Specified;
    property UseHolidaysAndTransfers:       Boolean                          Index (IS_OPTN or IS_NLBL) read FUseHolidaysAndTransfers write SetUseHolidaysAndTransfers stored UseHolidaysAndTransfers_Specified;
    property WeekSchedule:                  AcsWeekScheduleFull2             Index (IS_OPTN or IS_NLBL) read FWeekSchedule write SetWeekSchedule stored WeekSchedule_Specified;
  end;



  // ************************************************************************ //
  // XML       : DriverSettings, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  DriverSettings = class(DriverSettings2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LStateBase, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  LStateBase2 = class(TRemotable)
  private
    FState: StorageStateEnum;
    FState_Specified: boolean;
    procedure SetState(Index: Integer; const AStorageStateEnum: StorageStateEnum);
    function  State_Specified(Index: Integer): boolean;
  published
    property State: StorageStateEnum  Index (IS_OPTN) read FState write SetState stored State_Specified;
  end;



  // ************************************************************************ //
  // XML       : LStateBase, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  LStateBase = class(LStateBase2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LKeyInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  LKeyInfo2 = class(LStateBase2)
  private
    FAccessPointID: guid;
    FAccessPointID_Specified: boolean;
    FDriverSettings: DriverSettings2;
    FDriverSettings_Specified: boolean;
    FEmployeeFirstName: string;
    FEmployeeFirstName_Specified: boolean;
    FEmployeeID: guid;
    FEmployeeID_Specified: boolean;
    FEmployeeLastName: string;
    FEmployeeLastName_Specified: boolean;
    FEmployeeSecondName: string;
    FEmployeeSecondName_Specified: boolean;
    FEndDate: TXSDateTime;
    FEndDate_Specified: boolean;
    FFinger1_Template: TArray<System.Byte>;
    FFinger1_Template_Specified: boolean;
    FFinger2_Template: TArray<System.Byte>;
    FFinger2_Template_Specified: boolean;
    FFinger3_Template: TArray<System.Byte>;
    FFinger3_Template_Specified: boolean;
    FFinger4_Template: TArray<System.Byte>;
    FFinger4_Template_Specified: boolean;
    FFinger5_Template: TArray<System.Byte>;
    FFinger5_Template_Specified: boolean;
    FID: Integer;
    FID_Specified: boolean;
    FIsForBiometrics: Boolean;
    FIsForBiometrics_Specified: boolean;
    FKeyNumber: Int64;
    FKeyNumber_Specified: boolean;
    FPINCode: Int64;
    FPINCode_Specified: boolean;
    FPINCodeUnderPressure: Int64;
    FPINCodeUnderPressure_Specified: boolean;
    FStartDate: TXSDateTime;
    FStartDate_Specified: boolean;
    procedure SetAccessPointID(Index: Integer; const Aguid: guid);
    function  AccessPointID_Specified(Index: Integer): boolean;
    procedure SetDriverSettings(Index: Integer; const ADriverSettings2: DriverSettings2);
    function  DriverSettings_Specified(Index: Integer): boolean;
    procedure SetEmployeeFirstName(Index: Integer; const Astring: string);
    function  EmployeeFirstName_Specified(Index: Integer): boolean;
    procedure SetEmployeeID(Index: Integer; const Aguid: guid);
    function  EmployeeID_Specified(Index: Integer): boolean;
    procedure SetEmployeeLastName(Index: Integer; const Astring: string);
    function  EmployeeLastName_Specified(Index: Integer): boolean;
    procedure SetEmployeeSecondName(Index: Integer; const Astring: string);
    function  EmployeeSecondName_Specified(Index: Integer): boolean;
    procedure SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndDate_Specified(Index: Integer): boolean;
    procedure SetFinger1_Template(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger1_Template_Specified(Index: Integer): boolean;
    procedure SetFinger2_Template(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger2_Template_Specified(Index: Integer): boolean;
    procedure SetFinger3_Template(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger3_Template_Specified(Index: Integer): boolean;
    procedure SetFinger4_Template(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger4_Template_Specified(Index: Integer): boolean;
    procedure SetFinger5_Template(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Finger5_Template_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const AInteger: Integer);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetIsForBiometrics(Index: Integer; const ABoolean: Boolean);
    function  IsForBiometrics_Specified(Index: Integer): boolean;
    procedure SetKeyNumber(Index: Integer; const AInt64: Int64);
    function  KeyNumber_Specified(Index: Integer): boolean;
    procedure SetPINCode(Index: Integer; const AInt64: Int64);
    function  PINCode_Specified(Index: Integer): boolean;
    procedure SetPINCodeUnderPressure(Index: Integer; const AInt64: Int64);
    function  PINCodeUnderPressure_Specified(Index: Integer): boolean;
    procedure SetStartDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartDate_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AccessPointID:        guid                 Index (IS_OPTN) read FAccessPointID write SetAccessPointID stored AccessPointID_Specified;
    property DriverSettings:       DriverSettings2      Index (IS_OPTN or IS_NLBL) read FDriverSettings write SetDriverSettings stored DriverSettings_Specified;
    property EmployeeFirstName:    string               Index (IS_OPTN or IS_NLBL) read FEmployeeFirstName write SetEmployeeFirstName stored EmployeeFirstName_Specified;
    property EmployeeID:           guid                 Index (IS_OPTN) read FEmployeeID write SetEmployeeID stored EmployeeID_Specified;
    property EmployeeLastName:     string               Index (IS_OPTN or IS_NLBL) read FEmployeeLastName write SetEmployeeLastName stored EmployeeLastName_Specified;
    property EmployeeSecondName:   string               Index (IS_OPTN or IS_NLBL) read FEmployeeSecondName write SetEmployeeSecondName stored EmployeeSecondName_Specified;
    property EndDate:              TXSDateTime          Index (IS_OPTN or IS_NLBL) read FEndDate write SetEndDate stored EndDate_Specified;
    property Finger1_Template:     TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger1_Template write SetFinger1_Template stored Finger1_Template_Specified;
    property Finger2_Template:     TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger2_Template write SetFinger2_Template stored Finger2_Template_Specified;
    property Finger3_Template:     TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger3_Template write SetFinger3_Template stored Finger3_Template_Specified;
    property Finger4_Template:     TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger4_Template write SetFinger4_Template stored Finger4_Template_Specified;
    property Finger5_Template:     TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FFinger5_Template write SetFinger5_Template stored Finger5_Template_Specified;
    property ID:                   Integer              Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property IsForBiometrics:      Boolean              Index (IS_OPTN) read FIsForBiometrics write SetIsForBiometrics stored IsForBiometrics_Specified;
    property KeyNumber:            Int64                Index (IS_OPTN) read FKeyNumber write SetKeyNumber stored KeyNumber_Specified;
    property PINCode:              Int64                Index (IS_OPTN or IS_NLBL) read FPINCode write SetPINCode stored PINCode_Specified;
    property PINCodeUnderPressure: Int64                Index (IS_OPTN or IS_NLBL) read FPINCodeUnderPressure write SetPINCodeUnderPressure stored PINCodeUnderPressure_Specified;
    property StartDate:            TXSDateTime          Index (IS_OPTN or IS_NLBL) read FStartDate write SetStartDate stored StartDate_Specified;
  end;



  // ************************************************************************ //
  // XML       : LKeyInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState
  // ************************************************************************ //
  LKeyInfo = class(LKeyInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CardTypeSaveInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType
  // ************************************************************************ //
  CardTypeSaveInfo2 = class(TRemotable)
  private
    FComment: string;
    FComment_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Comment: string  Index (IS_OPTN or IS_NLBL) read FComment write SetComment stored Comment_Specified;
    property Name_:   string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : CardTypeInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType
  // ************************************************************************ //
  CardTypeInfo2 = class(CardTypeSaveInfo2)
  private
    FID: guid;
    FID_Specified: boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
  published
    property ID: guid  Index (IS_OPTN) read FID write SetID stored ID_Specified;
  end;



  // ************************************************************************ //
  // XML       : CardTypeSaveInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType
  // ************************************************************************ //
  CardTypeSaveInfo = class(CardTypeSaveInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CardTypeInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType
  // ************************************************************************ //
  CardTypeInfo = class(CardTypeInfo2)
  private
  published
  end;

  ArrayOfCardTypeInfo = array of CardTypeInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType"[GblCplx] }


  // ************************************************************************ //
  // XML       : CardTypesInfoData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType
  // ************************************************************************ //
  CardTypesInfoData2 = class(TRemotable)
  private
    FCardTypes: ArrayOfCardTypeInfo;
    FCardTypes_Specified: boolean;
    FCount: Int64;
    FCount_Specified: boolean;
    procedure SetCardTypes(Index: Integer; const AArrayOfCardTypeInfo: ArrayOfCardTypeInfo);
    function  CardTypes_Specified(Index: Integer): boolean;
    procedure SetCount(Index: Integer; const AInt64: Int64);
    function  Count_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CardTypes: ArrayOfCardTypeInfo  Index (IS_OPTN or IS_NLBL) read FCardTypes write SetCardTypes stored CardTypes_Specified;
    property Count:     Int64                Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
  end;



  // ************************************************************************ //
  // XML       : CardTypesInfoData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType
  // ************************************************************************ //
  CardTypesInfoData = class(CardTypesInfoData2)
  private
  published
  end;

  ArrayOfLUser = array of LUser2;               { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblCplx] }


  // ************************************************************************ //
  // XML       : LUserGroup, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security
  // ************************************************************************ //
  LUserGroup2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FUserGroupType: UserGroupType;
    FUserGroupType_Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetUserGroupType(Index: Integer; const AUserGroupType: UserGroupType);
    function  UserGroupType_Specified(Index: Integer): boolean;
  published
    property Description:   string         Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property ID:            guid           Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property IsRemoved:     Boolean        Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
    property Name_:         string         Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property UserGroupType: UserGroupType  Index (IS_OPTN) read FUserGroupType write SetUserGroupType stored UserGroupType_Specified;
  end;



  // ************************************************************************ //
  // XML       : LUserGroup, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security
  // ************************************************************************ //
  LUserGroup = class(LUserGroup2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LUsersData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security
  // ************************************************************************ //
  LUsersData2 = class(TRemotable)
  private
    FCount: Int64;
    FCount_Specified: boolean;
    FUsers: ArrayOfLUser;
    FUsers_Specified: boolean;
    procedure SetCount(Index: Integer; const AInt64: Int64);
    function  Count_Specified(Index: Integer): boolean;
    procedure SetUsers(Index: Integer; const AArrayOfLUser: ArrayOfLUser);
    function  Users_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Count: Int64         Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
    property Users: ArrayOfLUser  Index (IS_OPTN or IS_NLBL) read FUsers write SetUsers stored Users_Specified;
  end;



  // ************************************************************************ //
  // XML       : LUsersData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security
  // ************************************************************************ //
  LUsersData = class(LUsersData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeviceDriverInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  DeviceDriverInfo = class(DeviceDriverInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PropertyValue, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities
  // ************************************************************************ //
  PropertyValue = class(PropertyValue2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LUser, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security
  // ************************************************************************ //
  LUser2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FFullName: string;
    FFullName_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FIsBuiltIn: Boolean;
    FIsBuiltIn_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    FLogin: string;
    FLogin_Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetFullName(Index: Integer; const Astring: string);
    function  FullName_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetIsBuiltIn(Index: Integer; const ABoolean: Boolean);
    function  IsBuiltIn_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
    procedure SetLogin(Index: Integer; const Astring: string);
    function  Login_Specified(Index: Integer): boolean;
  published
    property Description: string   Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property FullName:    string   Index (IS_OPTN or IS_NLBL) read FFullName write SetFullName stored FullName_Specified;
    property ID:          guid     Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property IsBuiltIn:   Boolean  Index (IS_OPTN) read FIsBuiltIn write SetIsBuiltIn stored IsBuiltIn_Specified;
    property IsRemoved:   Boolean  Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
    property Login:       string   Index (IS_OPTN or IS_NLBL) read FLogin write SetLogin stored Login_Specified;
  end;



  // ************************************************************************ //
  // XML       : LUser, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security
  // ************************************************************************ //
  LUser = class(LUser2)
  private
  published
  end;

  ArrayOfClaimInfo = array of ClaimInfo2;       { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblCplx] }


  // ************************************************************************ //
  // XML       : ClaimSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security
  // ************************************************************************ //
  ClaimSaveData2 = class(TRemotable)
  private
    FResource: string;
    FResource_Specified: boolean;
    FType_: string;
    FType__Specified: boolean;
    procedure SetResource(Index: Integer; const Astring: string);
    function  Resource_Specified(Index: Integer): boolean;
    procedure SetType_(Index: Integer; const Astring: string);
    function  Type__Specified(Index: Integer): boolean;
  published
    property Resource: string  Index (IS_OPTN or IS_NLBL) read FResource write SetResource stored Resource_Specified;
    property Type_:    string  Index (IS_OPTN or IS_NLBL) read FType_ write SetType_ stored Type__Specified;
  end;



  // ************************************************************************ //
  // XML       : ClaimSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security
  // ************************************************************************ //
  ClaimSaveData = class(ClaimSaveData2)
  private
  published
  end;

  ArrayOfLUserGroup = array of LUserGroup2;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"[GblCplx] }


  // ************************************************************************ //
  // XML       : LUserGroupsData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security
  // ************************************************************************ //
  LUserGroupsData2 = class(TRemotable)
  private
    FCount: Int64;
    FCount_Specified: boolean;
    FUserGroups: ArrayOfLUserGroup;
    FUserGroups_Specified: boolean;
    procedure SetCount(Index: Integer; const AInt64: Int64);
    function  Count_Specified(Index: Integer): boolean;
    procedure SetUserGroups(Index: Integer; const AArrayOfLUserGroup: ArrayOfLUserGroup);
    function  UserGroups_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Count:      Int64              Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
    property UserGroups: ArrayOfLUserGroup  Index (IS_OPTN or IS_NLBL) read FUserGroups write SetUserGroups stored UserGroups_Specified;
  end;



  // ************************************************************************ //
  // XML       : LUserGroupsData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security
  // ************************************************************************ //
  LUserGroupsData = class(LUserGroupsData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ClaimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security
  // ************************************************************************ //
  ClaimInfo2 = class(ClaimSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    FOwnerId: guid;
    FOwnerId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetOwnerId(Index: Integer; const Aguid: guid);
    function  OwnerId_Specified(Index: Integer): boolean;
  published
    property Id:      guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property OwnerId: guid  Index (IS_OPTN) read FOwnerId write SetOwnerId stored OwnerId_Specified;
  end;



  // ************************************************************************ //
  // XML       : ClaimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security
  // ************************************************************************ //
  ClaimInfo = class(ClaimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : IvideonCameraCollectionResult, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon
  // ************************************************************************ //
  IvideonCameraCollectionResult2 = class(TRemotable)
  private
    FDriverFullInfo: ArrayOfLDriverFullInfo;
    FDriverFullInfo_Specified: boolean;
    procedure SetDriverFullInfo(Index: Integer; const AArrayOfLDriverFullInfo: ArrayOfLDriverFullInfo);
    function  DriverFullInfo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DriverFullInfo: ArrayOfLDriverFullInfo  Index (IS_OPTN or IS_NLBL) read FDriverFullInfo write SetDriverFullInfo stored DriverFullInfo_Specified;
  end;



  // ************************************************************************ //
  // XML       : IvideonRemoteServerCollectionResult, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon
  // ************************************************************************ //
  IvideonRemoteServerCollectionResult2 = class(TRemotable)
  private
    FDriverFullInfo: ArrayOfLDriverFullInfo;
    FDriverFullInfo_Specified: boolean;
    procedure SetDriverFullInfo(Index: Integer; const AArrayOfLDriverFullInfo: ArrayOfLDriverFullInfo);
    function  DriverFullInfo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DriverFullInfo: ArrayOfLDriverFullInfo  Index (IS_OPTN or IS_NLBL) read FDriverFullInfo write SetDriverFullInfo stored DriverFullInfo_Specified;
  end;



  // ************************************************************************ //
  // XML       : IvideonCameraCollectionResult, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon
  // ************************************************************************ //
  IvideonCameraCollectionResult = class(IvideonCameraCollectionResult2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LanCanConverterAddress, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  LanCanConverterAddress2 = class(TRemotable)
  private
    FIpAddress: IPAddress2;
    FIpAddress_Specified: boolean;
    procedure SetIpAddress(Index: Integer; const AIPAddress2: IPAddress2);
    function  IpAddress_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property IpAddress: IPAddress2  Index (IS_OPTN or IS_NLBL) read FIpAddress write SetIpAddress stored IpAddress_Specified;
  end;



  // ************************************************************************ //
  // XML       : LanCanConverterAddress, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  LanCanConverterAddress = class(LanCanConverterAddress2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : UsbCanConverterAddress, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  UsbCanConverterAddress2 = class(TRemotable)
  private
    FChannel: Integer;
    FChannel_Specified: boolean;
    FSerialNumber: string;
    FSerialNumber_Specified: boolean;
    FVendor: string;
    FVendor_Specified: boolean;
    procedure SetChannel(Index: Integer; const AInteger: Integer);
    function  Channel_Specified(Index: Integer): boolean;
    procedure SetSerialNumber(Index: Integer; const Astring: string);
    function  SerialNumber_Specified(Index: Integer): boolean;
    procedure SetVendor(Index: Integer; const Astring: string);
    function  Vendor_Specified(Index: Integer): boolean;
  published
    property Channel:      Integer  Index (IS_OPTN) read FChannel write SetChannel stored Channel_Specified;
    property SerialNumber: string   Index (IS_OPTN or IS_NLBL) read FSerialNumber write SetSerialNumber stored SerialNumber_Specified;
    property Vendor:       string   Index (IS_OPTN or IS_NLBL) read FVendor write SetVendor stored Vendor_Specified;
  end;



  // ************************************************************************ //
  // XML       : UsbCanConverterAddress, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  UsbCanConverterAddress = class(UsbCanConverterAddress2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CanConverterAddress, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  CanConverterAddress2 = class(TRemotable)
  private
    FLanCanConverterAddress: LanCanConverterAddress2;
    FLanCanConverterAddress_Specified: boolean;
    FTag: CanConverterAddress_TagEnum;
    FTag_Specified: boolean;
    FUsbCanConverterAddress: UsbCanConverterAddress2;
    FUsbCanConverterAddress_Specified: boolean;
    procedure SetLanCanConverterAddress(Index: Integer; const ALanCanConverterAddress2: LanCanConverterAddress2);
    function  LanCanConverterAddress_Specified(Index: Integer): boolean;
    procedure SetTag(Index: Integer; const ACanConverterAddress_TagEnum: CanConverterAddress_TagEnum);
    function  Tag_Specified(Index: Integer): boolean;
    procedure SetUsbCanConverterAddress(Index: Integer; const AUsbCanConverterAddress2: UsbCanConverterAddress2);
    function  UsbCanConverterAddress_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property LanCanConverterAddress: LanCanConverterAddress2      Index (IS_OPTN or IS_NLBL) read FLanCanConverterAddress write SetLanCanConverterAddress stored LanCanConverterAddress_Specified;
    property Tag:                    CanConverterAddress_TagEnum  Index (IS_OPTN) read FTag write SetTag stored Tag_Specified;
    property UsbCanConverterAddress: UsbCanConverterAddress2      Index (IS_OPTN or IS_NLBL) read FUsbCanConverterAddress write SetUsbCanConverterAddress stored UsbCanConverterAddress_Specified;
  end;



  // ************************************************************************ //
  // XML       : CanConverterAddress, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  CanConverterAddress = class(CanConverterAddress2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : IvideonRemoteServerCollectionResult, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon
  // ************************************************************************ //
  IvideonRemoteServerCollectionResult = class(IvideonRemoteServerCollectionResult2)
  private
  published
  end;

  ArrayOfCanConverterAddress = array of CanConverterAddress2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"[GblCplx] }


  // ************************************************************************ //
  // XML       : FindConvertersResult, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  FindConvertersResult2 = class(TRemotable)
  private
    FConverters: ArrayOfCanConverterAddress;
    FConverters_Specified: boolean;
    FMissingDrivers: ArrayOfstring;
    FMissingDrivers_Specified: boolean;
    procedure SetConverters(Index: Integer; const AArrayOfCanConverterAddress: ArrayOfCanConverterAddress);
    function  Converters_Specified(Index: Integer): boolean;
    procedure SetMissingDrivers(Index: Integer; const AArrayOfstring: ArrayOfstring);
    function  MissingDrivers_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Converters:     ArrayOfCanConverterAddress  Index (IS_OPTN or IS_NLBL) read FConverters write SetConverters stored Converters_Specified;
    property MissingDrivers: ArrayOfstring               Index (IS_OPTN or IS_NLBL) read FMissingDrivers write SetMissingDrivers stored MissingDrivers_Specified;
  end;



  // ************************************************************************ //
  // XML       : FindConvertersResult, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter
  // ************************************************************************ //
  FindConvertersResult = class(FindConvertersResult2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : NUUOCamera, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO
  // ************************************************************************ //
  NUUOCamera2 = class(TRemotable)
  private
    FCentralID: Int64;
    FCentralID_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FLocalID: Int64;
    FLocalID_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetCentralID(Index: Integer; const AInt64: Int64);
    function  CentralID_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetLocalID(Index: Integer; const AInt64: Int64);
    function  LocalID_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property CentralID:   Int64   Index (IS_OPTN) read FCentralID write SetCentralID stored CentralID_Specified;
    property Description: string  Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property LocalID:     Int64   Index (IS_OPTN) read FLocalID write SetLocalID stored LocalID_Specified;
    property Name_:       string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : NUUOCamera, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO
  // ************************************************************************ //
  NUUOCamera = class(NUUOCamera2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PanasonicCameraCollectionResult, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Panasonic
  // ************************************************************************ //
  PanasonicCameraCollectionResult2 = class(TRemotable)
  private
    FDriverFullInfo: ArrayOfLDriverFullInfo;
    FDriverFullInfo_Specified: boolean;
    procedure SetDriverFullInfo(Index: Integer; const AArrayOfLDriverFullInfo: ArrayOfLDriverFullInfo);
    function  DriverFullInfo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DriverFullInfo: ArrayOfLDriverFullInfo  Index (IS_OPTN or IS_NLBL) read FDriverFullInfo write SetDriverFullInfo stored DriverFullInfo_Specified;
  end;

  ArrayOfEmployeePassageNotification = array of EmployeePassageNotification2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications"[GblCplx] }


  // ************************************************************************ //
  // XML       : NotificationInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications
  // ************************************************************************ //
  NotificationInfo2 = class(TRemotable)
  private
    FEmployeePassageNotifications: ArrayOfEmployeePassageNotification;
    FEmployeePassageNotifications_Specified: boolean;
    procedure SetEmployeePassageNotifications(Index: Integer; const AArrayOfEmployeePassageNotification: ArrayOfEmployeePassageNotification);
    function  EmployeePassageNotifications_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property EmployeePassageNotifications: ArrayOfEmployeePassageNotification  Index (IS_OPTN or IS_NLBL) read FEmployeePassageNotifications write SetEmployeePassageNotifications stored EmployeePassageNotifications_Specified;
  end;



  // ************************************************************************ //
  // XML       : NotificationInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications
  // ************************************************************************ //
  NotificationInfo = class(NotificationInfo2)
  private
  published
  end;

  ArrayOfNUUOVideoRecorder = array of NUUOVideoRecorder2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO"[GblCplx] }
  ArrayOfNUUOCamera = array of NUUOCamera2;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO"[GblCplx] }


  // ************************************************************************ //
  // XML       : NUUOVideoRecorder, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO
  // ************************************************************************ //
  NUUOVideoRecorder2 = class(TRemotable)
  private
    FCameras: ArrayOfNUUOCamera;
    FCameras_Specified: boolean;
    FCentralID: Int64;
    FCentralID_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FLocalID: Int64;
    FLocalID_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetCameras(Index: Integer; const AArrayOfNUUOCamera: ArrayOfNUUOCamera);
    function  Cameras_Specified(Index: Integer): boolean;
    procedure SetCentralID(Index: Integer; const AInt64: Int64);
    function  CentralID_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetLocalID(Index: Integer; const AInt64: Int64);
    function  LocalID_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Cameras:     ArrayOfNUUOCamera  Index (IS_OPTN or IS_NLBL) read FCameras write SetCameras stored Cameras_Specified;
    property CentralID:   Int64              Index (IS_OPTN) read FCentralID write SetCentralID stored CentralID_Specified;
    property Description: string             Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property LocalID:     Int64              Index (IS_OPTN) read FLocalID write SetLocalID stored LocalID_Specified;
    property Name_:       string             Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : NUUOVideoRecorder, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO
  // ************************************************************************ //
  NUUOVideoRecorder = class(NUUOVideoRecorder2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : NUUOArchiveServer, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO
  // ************************************************************************ //
  NUUOArchiveServer2 = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FVideoRecorders: ArrayOfNUUOVideoRecorder;
    FVideoRecorders_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetVideoRecorders(Index: Integer; const AArrayOfNUUOVideoRecorder: ArrayOfNUUOVideoRecorder);
    function  VideoRecorders_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Name_:          string                    Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property VideoRecorders: ArrayOfNUUOVideoRecorder  Index (IS_OPTN or IS_NLBL) read FVideoRecorders write SetVideoRecorders stored VideoRecorders_Specified;
  end;



  // ************************************************************************ //
  // XML       : NUUOArchiveServer, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO
  // ************************************************************************ //
  NUUOArchiveServer = class(NUUOArchiveServer2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PanasonicCameraCollectionResult, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Panasonic
  // ************************************************************************ //
  PanasonicCameraCollectionResult = class(PanasonicCameraCollectionResult2)
  private
  published
  end;

  ArrayOfNUUOArchiveServer = array of NUUOArchiveServer2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO"[GblCplx] }


  // ************************************************************************ //
  // XML       : NUUOArchiveServerCollectionResult, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO
  // ************************************************************************ //
  NUUOArchiveServerCollectionResult2 = class(TRemotable)
  private
    FArchiveServers: ArrayOfNUUOArchiveServer;
    FArchiveServers_Specified: boolean;
    procedure SetArchiveServers(Index: Integer; const AArrayOfNUUOArchiveServer: ArrayOfNUUOArchiveServer);
    function  ArchiveServers_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ArchiveServers: ArrayOfNUUOArchiveServer  Index (IS_OPTN or IS_NLBL) read FArchiveServers write SetArchiveServers stored ArchiveServers_Specified;
  end;



  // ************************************************************************ //
  // XML       : NUUOArchiveServerCollectionResult, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO
  // ************************************************************************ //
  NUUOArchiveServerCollectionResult = class(NUUOArchiveServerCollectionResult2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : Employee2OrganizationAssignment, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  Employee2OrganizationAssignment2 = class(TRemotable)
  private
    FComment: string;
    FComment_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FOrganizationID: guid;
    FOrganizationID_Specified: boolean;
    FSubdivisionID: guid;
    FSubdivisionID_Specified: boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetOrganizationID(Index: Integer; const Aguid: guid);
    function  OrganizationID_Specified(Index: Integer): boolean;
    procedure SetSubdivisionID(Index: Integer; const Aguid: guid);
    function  SubdivisionID_Specified(Index: Integer): boolean;
  published
    property Comment:        string  Index (IS_OPTN or IS_NLBL) read FComment write SetComment stored Comment_Specified;
    property ID:             guid    Index (IS_OPTN or IS_NLBL) read FID write SetID stored ID_Specified;
    property OrganizationID: guid    Index (IS_OPTN) read FOrganizationID write SetOrganizationID stored OrganizationID_Specified;
    property SubdivisionID:  guid    Index (IS_OPTN or IS_NLBL) read FSubdivisionID write SetSubdivisionID stored SubdivisionID_Specified;
  end;

  ArrayOfEmployee2OrganizationAssignment = array of Employee2OrganizationAssignment2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  ArrayOfFirebirdIncidentEventsResult = array of FirebirdIncidentEventsResult2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }


  // ************************************************************************ //
  // XML       : FirebirdIncidentEventsResult, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  FirebirdIncidentEventsResult2 = class(TRemotable)
  private
    FDateEvent: TXSDateTime;
    FDateEvent_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FNameDoc: string;
    FNameDoc_Specified: boolean;
    FNumDoc: string;
    FNumDoc_Specified: boolean;
    FPatronomic: string;
    FPatronomic_Specified: boolean;
    FSignificance: string;
    FSignificance_Specified: boolean;
    FSurname: string;
    FSurname_Specified: boolean;
    FViolation: string;
    FViolation_Specified: boolean;
    FWayOfPlunder: string;
    FWayOfPlunder_Specified: boolean;
    FWayOfPlunderInfo: string;
    FWayOfPlunderInfo_Specified: boolean;
    procedure SetDateEvent(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DateEvent_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetNameDoc(Index: Integer; const Astring: string);
    function  NameDoc_Specified(Index: Integer): boolean;
    procedure SetNumDoc(Index: Integer; const Astring: string);
    function  NumDoc_Specified(Index: Integer): boolean;
    procedure SetPatronomic(Index: Integer; const Astring: string);
    function  Patronomic_Specified(Index: Integer): boolean;
    procedure SetSignificance(Index: Integer; const Astring: string);
    function  Significance_Specified(Index: Integer): boolean;
    procedure SetSurname(Index: Integer; const Astring: string);
    function  Surname_Specified(Index: Integer): boolean;
    procedure SetViolation(Index: Integer; const Astring: string);
    function  Violation_Specified(Index: Integer): boolean;
    procedure SetWayOfPlunder(Index: Integer; const Astring: string);
    function  WayOfPlunder_Specified(Index: Integer): boolean;
    procedure SetWayOfPlunderInfo(Index: Integer; const Astring: string);
    function  WayOfPlunderInfo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DateEvent:        TXSDateTime  Index (IS_OPTN or IS_NLBL) read FDateEvent write SetDateEvent stored DateEvent_Specified;
    property Name_:            string       Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property NameDoc:          string       Index (IS_OPTN or IS_NLBL) read FNameDoc write SetNameDoc stored NameDoc_Specified;
    property NumDoc:           string       Index (IS_OPTN or IS_NLBL) read FNumDoc write SetNumDoc stored NumDoc_Specified;
    property Patronomic:       string       Index (IS_OPTN or IS_NLBL) read FPatronomic write SetPatronomic stored Patronomic_Specified;
    property Significance:     string       Index (IS_OPTN or IS_NLBL) read FSignificance write SetSignificance stored Significance_Specified;
    property Surname:          string       Index (IS_OPTN or IS_NLBL) read FSurname write SetSurname stored Surname_Specified;
    property Violation:        string       Index (IS_OPTN or IS_NLBL) read FViolation write SetViolation stored Violation_Specified;
    property WayOfPlunder:     string       Index (IS_OPTN or IS_NLBL) read FWayOfPlunder write SetWayOfPlunder stored WayOfPlunder_Specified;
    property WayOfPlunderInfo: string       Index (IS_OPTN or IS_NLBL) read FWayOfPlunderInfo write SetWayOfPlunderInfo stored WayOfPlunderInfo_Specified;
  end;

  ArrayOfViolation = array of Violation2;       { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }


  // ************************************************************************ //
  // XML       : ViolatorFilter, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  ViolatorFilter2 = class(TRemotable)
  private
    FDateOfBirth: TXSDateTime;
    FDateOfBirth_Specified: boolean;
    FFirstName: string;
    FFirstName_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FLastName: string;
    FLastName_Specified: boolean;
    FSecondName: string;
    FSecondName_Specified: boolean;
    FTableNumber: Integer;
    FTableNumber_Specified: boolean;
    procedure SetDateOfBirth(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DateOfBirth_Specified(Index: Integer): boolean;
    procedure SetFirstName(Index: Integer; const Astring: string);
    function  FirstName_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetLastName(Index: Integer; const Astring: string);
    function  LastName_Specified(Index: Integer): boolean;
    procedure SetSecondName(Index: Integer; const Astring: string);
    function  SecondName_Specified(Index: Integer): boolean;
    procedure SetTableNumber(Index: Integer; const AInteger: Integer);
    function  TableNumber_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DateOfBirth: TXSDateTime  Index (IS_OPTN or IS_NLBL) read FDateOfBirth write SetDateOfBirth stored DateOfBirth_Specified;
    property FirstName:   string       Index (IS_OPTN or IS_NLBL) read FFirstName write SetFirstName stored FirstName_Specified;
    property ID:          guid         Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property LastName:    string       Index (IS_OPTN or IS_NLBL) read FLastName write SetLastName stored LastName_Specified;
    property SecondName:  string       Index (IS_OPTN or IS_NLBL) read FSecondName write SetSecondName stored SecondName_Specified;
    property TableNumber: Integer      Index (IS_OPTN or IS_NLBL) read FTableNumber write SetTableNumber stored TableNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : Template, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  Template = class(TRemotable)
  private
  published
  end;

  ArrayOfEmployee2OrganizationAssignmentFull = array of Employee2OrganizationAssignmentFull2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }


  // ************************************************************************ //
  // XML       : Employee2OrganizationAssignmentFull, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  Employee2OrganizationAssignmentFull2 = class(TRemotable)
  private
    FComment: string;
    FComment_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FOrganization: DictionaryElementInfo2;
    FOrganization_Specified: boolean;
    FSubdivision: DictionaryElementInfo2;
    FSubdivision_Specified: boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetOrganization(Index: Integer; const ADictionaryElementInfo2: DictionaryElementInfo2);
    function  Organization_Specified(Index: Integer): boolean;
    procedure SetSubdivision(Index: Integer; const ADictionaryElementInfo2: DictionaryElementInfo2);
    function  Subdivision_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Comment:      string                  Index (IS_OPTN or IS_NLBL) read FComment write SetComment stored Comment_Specified;
    property ID:           guid                    Index (IS_OPTN or IS_NLBL) read FID write SetID stored ID_Specified;
    property Organization: DictionaryElementInfo2  Index (IS_OPTN or IS_NLBL) read FOrganization write SetOrganization stored Organization_Specified;
    property Subdivision:  DictionaryElementInfo2  Index (IS_OPTN or IS_NLBL) read FSubdivision write SetSubdivision stored Subdivision_Specified;
  end;



  // ************************************************************************ //
  // XML       : IncidentTemplateSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentTemplateSaveData2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FTemplate: Template;
    FTemplate_Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetTemplate(Index: Integer; const ATemplate: Template);
    function  Template_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Description: string    Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property Name_:       string    Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property Template:    Template  Index (IS_OPTN or IS_NLBL) read FTemplate write SetTemplate stored Template_Specified;
  end;



  // ************************************************************************ //
  // XML       : Violation, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  Violation2 = class(TRemotable)
  private
    FDocumentNumber: string;
    FDocumentNumber_Specified: boolean;
    FDocumentType: string;
    FDocumentType_Specified: boolean;
    FEmployeeID: guid;
    FEmployeeID_Specified: boolean;
    FFirstName: string;
    FFirstName_Specified: boolean;
    FGroupID: guid;
    FGroupID_Specified: boolean;
    FGroupName: string;
    FGroupName_Specified: boolean;
    FGroupPath: string;
    FGroupPath_Specified: boolean;
    FIncidentDate: TXSDateTime;
    FIncidentDate_Specified: boolean;
    FIncidentID: guid;
    FIncidentID_Specified: boolean;
    FLastName: string;
    FLastName_Specified: boolean;
    FNatureOfViolation: string;
    FNatureOfViolation_Specified: boolean;
    FSecondName: string;
    FSecondName_Specified: boolean;
    FSignificance: string;
    FSignificance_Specified: boolean;
    FTypeOfViolation: string;
    FTypeOfViolation_Specified: boolean;
    procedure SetDocumentNumber(Index: Integer; const Astring: string);
    function  DocumentNumber_Specified(Index: Integer): boolean;
    procedure SetDocumentType(Index: Integer; const Astring: string);
    function  DocumentType_Specified(Index: Integer): boolean;
    procedure SetEmployeeID(Index: Integer; const Aguid: guid);
    function  EmployeeID_Specified(Index: Integer): boolean;
    procedure SetFirstName(Index: Integer; const Astring: string);
    function  FirstName_Specified(Index: Integer): boolean;
    procedure SetGroupID(Index: Integer; const Aguid: guid);
    function  GroupID_Specified(Index: Integer): boolean;
    procedure SetGroupName(Index: Integer; const Astring: string);
    function  GroupName_Specified(Index: Integer): boolean;
    procedure SetGroupPath(Index: Integer; const Astring: string);
    function  GroupPath_Specified(Index: Integer): boolean;
    procedure SetIncidentDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  IncidentDate_Specified(Index: Integer): boolean;
    procedure SetIncidentID(Index: Integer; const Aguid: guid);
    function  IncidentID_Specified(Index: Integer): boolean;
    procedure SetLastName(Index: Integer; const Astring: string);
    function  LastName_Specified(Index: Integer): boolean;
    procedure SetNatureOfViolation(Index: Integer; const Astring: string);
    function  NatureOfViolation_Specified(Index: Integer): boolean;
    procedure SetSecondName(Index: Integer; const Astring: string);
    function  SecondName_Specified(Index: Integer): boolean;
    procedure SetSignificance(Index: Integer; const Astring: string);
    function  Significance_Specified(Index: Integer): boolean;
    procedure SetTypeOfViolation(Index: Integer; const Astring: string);
    function  TypeOfViolation_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DocumentNumber:    string       Index (IS_OPTN or IS_NLBL) read FDocumentNumber write SetDocumentNumber stored DocumentNumber_Specified;
    property DocumentType:      string       Index (IS_OPTN or IS_NLBL) read FDocumentType write SetDocumentType stored DocumentType_Specified;
    property EmployeeID:        guid         Index (IS_OPTN) read FEmployeeID write SetEmployeeID stored EmployeeID_Specified;
    property FirstName:         string       Index (IS_OPTN or IS_NLBL) read FFirstName write SetFirstName stored FirstName_Specified;
    property GroupID:           guid         Index (IS_OPTN) read FGroupID write SetGroupID stored GroupID_Specified;
    property GroupName:         string       Index (IS_OPTN or IS_NLBL) read FGroupName write SetGroupName stored GroupName_Specified;
    property GroupPath:         string       Index (IS_OPTN or IS_NLBL) read FGroupPath write SetGroupPath stored GroupPath_Specified;
    property IncidentDate:      TXSDateTime  Index (IS_OPTN or IS_NLBL) read FIncidentDate write SetIncidentDate stored IncidentDate_Specified;
    property IncidentID:        guid         Index (IS_OPTN) read FIncidentID write SetIncidentID stored IncidentID_Specified;
    property LastName:          string       Index (IS_OPTN or IS_NLBL) read FLastName write SetLastName stored LastName_Specified;
    property NatureOfViolation: string       Index (IS_OPTN or IS_NLBL) read FNatureOfViolation write SetNatureOfViolation stored NatureOfViolation_Specified;
    property SecondName:        string       Index (IS_OPTN or IS_NLBL) read FSecondName write SetSecondName stored SecondName_Specified;
    property Significance:      string       Index (IS_OPTN or IS_NLBL) read FSignificance write SetSignificance stored Significance_Specified;
    property TypeOfViolation:   string       Index (IS_OPTN or IS_NLBL) read FTypeOfViolation write SetTypeOfViolation stored TypeOfViolation_Specified;
  end;

  ArrayOfIncidentTemplateInfo = array of IncidentTemplateInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }


  // ************************************************************************ //
  // XML       : IncidentTemplateInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentTemplateInfo2 = class(IncidentTemplateSaveData2)
  private
    FID: guid;
    FID_Specified: boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
  published
    property ID: guid  Index (IS_OPTN) read FID write SetID stored ID_Specified;
  end;

  ArrayOfIncidentTypeInfo = array of IncidentTypeInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents"[GblCplx] }


  // ************************************************************************ //
  // XML       : IncidentStatisticData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents
  // ************************************************************************ //
  IncidentStatisticData2 = class(TRemotable)
  private
    FDateBegin: TXSDateTime;
    FDateBegin_Specified: boolean;
    FDateEnd: TXSDateTime;
    FDateEnd_Specified: boolean;
    FImportantIncidentTypeIds: ArrayOfguid;
    FImportantIncidentTypeIds_Specified: boolean;
    FIncidentReportName: string;
    FIncidentReportName_Specified: boolean;
    FIncidentsDescription: string;
    FIncidentsDescription_Specified: boolean;
    FOrganizaion: string;
    FOrganizaion_Specified: boolean;
    FOtherIncidentTypeIds: ArrayOfguid;
    FOtherIncidentTypeIds_Specified: boolean;
    FOtherIncidents: string;
    FOtherIncidents_Specified: boolean;
    FPlace: string;
    FPlace_Specified: boolean;
    procedure SetDateBegin(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DateBegin_Specified(Index: Integer): boolean;
    procedure SetDateEnd(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DateEnd_Specified(Index: Integer): boolean;
    procedure SetImportantIncidentTypeIds(Index: Integer; const AArrayOfguid: ArrayOfguid);
    function  ImportantIncidentTypeIds_Specified(Index: Integer): boolean;
    procedure SetIncidentReportName(Index: Integer; const Astring: string);
    function  IncidentReportName_Specified(Index: Integer): boolean;
    procedure SetIncidentsDescription(Index: Integer; const Astring: string);
    function  IncidentsDescription_Specified(Index: Integer): boolean;
    procedure SetOrganizaion(Index: Integer; const Astring: string);
    function  Organizaion_Specified(Index: Integer): boolean;
    procedure SetOtherIncidentTypeIds(Index: Integer; const AArrayOfguid: ArrayOfguid);
    function  OtherIncidentTypeIds_Specified(Index: Integer): boolean;
    procedure SetOtherIncidents(Index: Integer; const Astring: string);
    function  OtherIncidents_Specified(Index: Integer): boolean;
    procedure SetPlace(Index: Integer; const Astring: string);
    function  Place_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DateBegin:                TXSDateTime  Index (IS_OPTN) read FDateBegin write SetDateBegin stored DateBegin_Specified;
    property DateEnd:                  TXSDateTime  Index (IS_OPTN) read FDateEnd write SetDateEnd stored DateEnd_Specified;
    property ImportantIncidentTypeIds: ArrayOfguid  Index (IS_OPTN or IS_NLBL) read FImportantIncidentTypeIds write SetImportantIncidentTypeIds stored ImportantIncidentTypeIds_Specified;
    property IncidentReportName:       string       Index (IS_OPTN or IS_NLBL) read FIncidentReportName write SetIncidentReportName stored IncidentReportName_Specified;
    property IncidentsDescription:     string       Index (IS_OPTN or IS_NLBL) read FIncidentsDescription write SetIncidentsDescription stored IncidentsDescription_Specified;
    property Organizaion:              string       Index (IS_OPTN or IS_NLBL) read FOrganizaion write SetOrganizaion stored Organizaion_Specified;
    property OtherIncidentTypeIds:     ArrayOfguid  Index (IS_OPTN or IS_NLBL) read FOtherIncidentTypeIds write SetOtherIncidentTypeIds stored OtherIncidentTypeIds_Specified;
    property OtherIncidents:           string       Index (IS_OPTN or IS_NLBL) read FOtherIncidents write SetOtherIncidents stored OtherIncidents_Specified;
    property Place:                    string       Index (IS_OPTN or IS_NLBL) read FPlace write SetPlace stored Place_Specified;
  end;



  // ************************************************************************ //
  // XML       : Employee2OrganizationAssignment, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  Employee2OrganizationAssignment = class(Employee2OrganizationAssignment2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : IncidentTemplateInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentTemplateInfo = class(IncidentTemplateInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : IncidentTemplateSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentTemplateSaveData = class(IncidentTemplateSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : Employee2OrganizationAssignmentFull, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  Employee2OrganizationAssignmentFull = class(Employee2OrganizationAssignmentFull2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PhotoidentificationPersonalDataSaveInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification
  // ************************************************************************ //
  PhotoidentificationPersonalDataSaveInfo2 = class(TRemotable)
  private
    FAdditionalFieldId: guid;
    FAdditionalFieldId_Specified: boolean;
    FAdditionalFieldName: string;
    FAdditionalFieldName_Specified: boolean;
    FFieldName: string;
    FFieldName_Specified: boolean;
    FOrder: Integer;
    FOrder_Specified: boolean;
    procedure SetAdditionalFieldId(Index: Integer; const Aguid: guid);
    function  AdditionalFieldId_Specified(Index: Integer): boolean;
    procedure SetAdditionalFieldName(Index: Integer; const Astring: string);
    function  AdditionalFieldName_Specified(Index: Integer): boolean;
    procedure SetFieldName(Index: Integer; const Astring: string);
    function  FieldName_Specified(Index: Integer): boolean;
    procedure SetOrder(Index: Integer; const AInteger: Integer);
    function  Order_Specified(Index: Integer): boolean;
  published
    property AdditionalFieldId:   guid     Index (IS_OPTN or IS_NLBL) read FAdditionalFieldId write SetAdditionalFieldId stored AdditionalFieldId_Specified;
    property AdditionalFieldName: string   Index (IS_OPTN or IS_NLBL) read FAdditionalFieldName write SetAdditionalFieldName stored AdditionalFieldName_Specified;
    property FieldName:           string   Index (IS_OPTN or IS_NLBL) read FFieldName write SetFieldName stored FieldName_Specified;
    property Order:               Integer  Index (IS_OPTN) read FOrder write SetOrder stored Order_Specified;
  end;



  // ************************************************************************ //
  // XML       : PhotoidentificationPersonalData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification
  // ************************************************************************ //
  PhotoidentificationPersonalData2 = class(PhotoidentificationPersonalDataSaveInfo2)
  private
    FID: guid;
    FID_Specified: boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
  published
    property ID: guid  Index (IS_OPTN) read FID write SetID stored ID_Specified;
  end;

  ArrayOfPhotoidentificationPersonalData = array of PhotoidentificationPersonalData2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification"[GblCplx] }


  // ************************************************************************ //
  // XML       : IncidentStatisticData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents
  // ************************************************************************ //
  IncidentStatisticData = class(IncidentStatisticData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : Violation, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  Violation = class(Violation2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ViolatorFilter, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  ViolatorFilter = class(ViolatorFilter2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : FirebirdIncidentEventsResult, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  FirebirdIncidentEventsResult = class(FirebirdIncidentEventsResult2)
  private
  published
  end;

  ArrayOfAcsVehicle = array of AcsVehicle2;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle"[GblCplx] }


  // ************************************************************************ //
  // XML       : AcsVehicleSavedData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle
  // ************************************************************************ //
  AcsVehicleSavedData2 = class(TRemotable)
  private
    FBrand: string;
    FBrand_Specified: boolean;
    FColor: string;
    FColor_Specified: boolean;
    FComment: string;
    FComment_Specified: boolean;
    FCreationDateTime: TXSDateTime;
    FCreationDateTime_Specified: boolean;
    FEndDateTime: TXSDateTime;
    FEndDateTime_Specified: boolean;
    FGroupId: guid;
    FGroupId_Specified: boolean;
    FIsLock: Boolean;
    FIsLock_Specified: boolean;
    FModificationDateTime: TXSDateTime;
    FModificationDateTime_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FRegistrationNumber: string;
    FRegistrationNumber_Specified: boolean;
    FStartDateTime: TXSDateTime;
    FStartDateTime_Specified: boolean;
    FVehicleType: DictionaryElementInfo2;
    FVehicleType_Specified: boolean;
    FVehicleTypeID: guid;
    FVehicleTypeID_Specified: boolean;
    procedure SetBrand(Index: Integer; const Astring: string);
    function  Brand_Specified(Index: Integer): boolean;
    procedure SetColor(Index: Integer; const Astring: string);
    function  Color_Specified(Index: Integer): boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
    procedure SetCreationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreationDateTime_Specified(Index: Integer): boolean;
    procedure SetEndDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndDateTime_Specified(Index: Integer): boolean;
    procedure SetGroupId(Index: Integer; const Aguid: guid);
    function  GroupId_Specified(Index: Integer): boolean;
    procedure SetIsLock(Index: Integer; const ABoolean: Boolean);
    function  IsLock_Specified(Index: Integer): boolean;
    procedure SetModificationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModificationDateTime_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetRegistrationNumber(Index: Integer; const Astring: string);
    function  RegistrationNumber_Specified(Index: Integer): boolean;
    procedure SetStartDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartDateTime_Specified(Index: Integer): boolean;
    procedure SetVehicleType(Index: Integer; const ADictionaryElementInfo2: DictionaryElementInfo2);
    function  VehicleType_Specified(Index: Integer): boolean;
    procedure SetVehicleTypeID(Index: Integer; const Aguid: guid);
    function  VehicleTypeID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Brand:                string                  Index (IS_OPTN or IS_NLBL) read FBrand write SetBrand stored Brand_Specified;
    property Color:                string                  Index (IS_OPTN or IS_NLBL) read FColor write SetColor stored Color_Specified;
    property Comment:              string                  Index (IS_OPTN or IS_NLBL) read FComment write SetComment stored Comment_Specified;
    property CreationDateTime:     TXSDateTime             Index (IS_OPTN) read FCreationDateTime write SetCreationDateTime stored CreationDateTime_Specified;
    property EndDateTime:          TXSDateTime             Index (IS_OPTN or IS_NLBL) read FEndDateTime write SetEndDateTime stored EndDateTime_Specified;
    property GroupId:              guid                    Index (IS_OPTN) read FGroupId write SetGroupId stored GroupId_Specified;
    property IsLock:               Boolean                 Index (IS_OPTN) read FIsLock write SetIsLock stored IsLock_Specified;
    property ModificationDateTime: TXSDateTime             Index (IS_OPTN) read FModificationDateTime write SetModificationDateTime stored ModificationDateTime_Specified;
    property Name_:                string                  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property RegistrationNumber:   string                  Index (IS_OPTN or IS_NLBL) read FRegistrationNumber write SetRegistrationNumber stored RegistrationNumber_Specified;
    property StartDateTime:        TXSDateTime             Index (IS_OPTN or IS_NLBL) read FStartDateTime write SetStartDateTime stored StartDateTime_Specified;
    property VehicleType:          DictionaryElementInfo2  Index (IS_OPTN or IS_NLBL) read FVehicleType write SetVehicleType stored VehicleType_Specified;
    property VehicleTypeID:        guid                    Index (IS_OPTN or IS_NLBL) read FVehicleTypeID write SetVehicleTypeID stored VehicleTypeID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsVehicle, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle
  // ************************************************************************ //
  AcsVehicle2 = class(AcsVehicleSavedData2)
  private
    FGroupPath: string;
    FGroupPath_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FIsRemoved: Boolean;
    FIsRemoved_Specified: boolean;
    procedure SetGroupPath(Index: Integer; const Astring: string);
    function  GroupPath_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetIsRemoved(Index: Integer; const ABoolean: Boolean);
    function  IsRemoved_Specified(Index: Integer): boolean;
  published
    property GroupPath: string   Index (IS_OPTN or IS_NLBL) read FGroupPath write SetGroupPath stored GroupPath_Specified;
    property ID:        guid     Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property IsRemoved: Boolean  Index (IS_OPTN) read FIsRemoved write SetIsRemoved stored IsRemoved_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsVehicleSavedData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle
  // ************************************************************************ //
  AcsVehicleSavedData = class(AcsVehicleSavedData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DictionaryElementSaveInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DictionaryElementSaveInfo2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FIsIgnoreIncidentRigths: Boolean;
    FIsIgnoreIncidentRigths_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetIsIgnoreIncidentRigths(Index: Integer; const ABoolean: Boolean);
    function  IsIgnoreIncidentRigths_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Description:            string   Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property IsIgnoreIncidentRigths: Boolean  Index (IS_OPTN) read FIsIgnoreIncidentRigths write SetIsIgnoreIncidentRigths stored IsIgnoreIncidentRigths_Specified;
    property Name_:                  string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : DictionaryElementSaveInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DictionaryElementSaveInfo = class(DictionaryElementSaveInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsVehicle, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle
  // ************************************************************************ //
  AcsVehicle = class(AcsVehicle2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DictionaryElementInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DictionaryElementInfo2 = class(DictionaryElementSaveInfo2)
  private
    FID: guid;
    FID_Specified: boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
  published
    property ID: guid  Index (IS_OPTN) read FID write SetID stored ID_Specified;
  end;



  // ************************************************************************ //
  // XML       : IncidentTypeInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents
  // ************************************************************************ //
  IncidentTypeInfo2 = class(DictionaryElementInfo2)
  private
    FIsImportant: Boolean;
    FIsImportant_Specified: boolean;
    procedure SetIsImportant(Index: Integer; const ABoolean: Boolean);
    function  IsImportant_Specified(Index: Integer): boolean;
  published
    property IsImportant: Boolean  Index (IS_OPTN) read FIsImportant write SetIsImportant stored IsImportant_Specified;
  end;



  // ************************************************************************ //
  // XML       : IncidentTypeInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents
  // ************************************************************************ //
  IncidentTypeInfo = class(IncidentTypeInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DictionaryElementInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DictionaryElementInfo = class(DictionaryElementInfo2)
  private
  published
  end;

  ArrayOfEmployeesVehicle = array of EmployeesVehicle2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle"[GblCplx] }


  // ************************************************************************ //
  // XML       : EmployeesVehicle, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle
  // ************************************************************************ //
  EmployeesVehicle2 = class(TRemotable)
  private
    FEndDateTime: TXSDateTime;
    FEndDateTime_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FStartDateTime: TXSDateTime;
    FStartDateTime_Specified: boolean;
    procedure SetEndDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndDateTime_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetStartDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartDateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property EndDateTime:   TXSDateTime  Index (IS_OPTN or IS_NLBL) read FEndDateTime write SetEndDateTime stored EndDateTime_Specified;
    property ID:            guid         Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property StartDateTime: TXSDateTime  Index (IS_OPTN or IS_NLBL) read FStartDateTime write SetStartDateTime stored StartDateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmployeesVehicle, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle
  // ************************************************************************ //
  EmployeesVehicle = class(EmployeesVehicle2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LogMessageTypeSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log
  // ************************************************************************ //
  LogMessageTypeSlimInfo2 = class(TRemotable)
  private
    FLogMesssageType: LogMsgType;
    FLogMesssageType_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FOrderNumber: Integer;
    FOrderNumber_Specified: boolean;
    FPublish: Boolean;
    FPublish_Specified: boolean;
    procedure SetLogMesssageType(Index: Integer; const ALogMsgType: LogMsgType);
    function  LogMesssageType_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetOrderNumber(Index: Integer; const AInteger: Integer);
    function  OrderNumber_Specified(Index: Integer): boolean;
    procedure SetPublish(Index: Integer; const ABoolean: Boolean);
    function  Publish_Specified(Index: Integer): boolean;
  published
    property LogMesssageType: LogMsgType  Index (IS_OPTN) read FLogMesssageType write SetLogMesssageType stored LogMesssageType_Specified;
    property Name_:           string      Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property OrderNumber:     Integer     Index (IS_OPTN) read FOrderNumber write SetOrderNumber stored OrderNumber_Specified;
    property Publish:         Boolean     Index (IS_OPTN) read FPublish write SetPublish stored Publish_Specified;
  end;



  // ************************************************************************ //
  // XML       : LogMessageTypeSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log
  // ************************************************************************ //
  LogMessageTypeSlimInfo = class(LogMessageTypeSlimInfo2)
  private
  published
  end;

  ArrayOfLogMessageSubtypeSlimInfo = array of LogMessageSubtypeSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblCplx] }
  ArrayOfLogMessageTypeSlimInfo = array of LogMessageTypeSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblCplx] }


  // ************************************************************************ //
  // XML       : ReportSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report
  // ************************************************************************ //
  ReportSaveData = class(ReportSaveData2)
  private
  published
  end;

  ArrayOfLogMsgSubType = array of LogMsgSubType;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblCplx] }


  // ************************************************************************ //
  // XML       : DriverEventNotification, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications
  // ************************************************************************ //
  DriverEventNotification2 = class(TRemotable)
  private
    FData: Integer;
    FData_Specified: boolean;
    FDateTime: TXSDateTime;
    FDateTime_Specified: boolean;
    FDetails: string;
    FDetails_Specified: boolean;
    FDriverId: guid;
    FDriverId_Specified: boolean;
    FEmployeeId: guid;
    FEmployeeId_Specified: boolean;
    FIsKeyEvent: Boolean;
    FIsKeyEvent_Specified: boolean;
    FLogMessageId: Int64;
    FLogMessageId_Specified: boolean;
    FMessage_: string;
    FMessage__Specified: boolean;
    FMessageSubType: LogMsgSubType;
    FMessageSubType_Specified: boolean;
    FMessageType: LogMsgType;
    FMessageType_Specified: boolean;
    FOperatorId: guid;
    FOperatorId_Specified: boolean;
    procedure SetData(Index: Integer; const AInteger: Integer);
    function  Data_Specified(Index: Integer): boolean;
    procedure SetDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DateTime_Specified(Index: Integer): boolean;
    procedure SetDetails(Index: Integer; const Astring: string);
    function  Details_Specified(Index: Integer): boolean;
    procedure SetDriverId(Index: Integer; const Aguid: guid);
    function  DriverId_Specified(Index: Integer): boolean;
    procedure SetEmployeeId(Index: Integer; const Aguid: guid);
    function  EmployeeId_Specified(Index: Integer): boolean;
    procedure SetIsKeyEvent(Index: Integer; const ABoolean: Boolean);
    function  IsKeyEvent_Specified(Index: Integer): boolean;
    procedure SetLogMessageId(Index: Integer; const AInt64: Int64);
    function  LogMessageId_Specified(Index: Integer): boolean;
    procedure SetMessage_(Index: Integer; const Astring: string);
    function  Message__Specified(Index: Integer): boolean;
    procedure SetMessageSubType(Index: Integer; const ALogMsgSubType: LogMsgSubType);
    function  MessageSubType_Specified(Index: Integer): boolean;
    procedure SetMessageType(Index: Integer; const ALogMsgType: LogMsgType);
    function  MessageType_Specified(Index: Integer): boolean;
    procedure SetOperatorId(Index: Integer; const Aguid: guid);
    function  OperatorId_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Data:           Integer        Index (IS_OPTN) read FData write SetData stored Data_Specified;
    property DateTime:       TXSDateTime    Index (IS_OPTN) read FDateTime write SetDateTime stored DateTime_Specified;
    property Details:        string         Index (IS_OPTN or IS_NLBL) read FDetails write SetDetails stored Details_Specified;
    property DriverId:       guid           Index (IS_OPTN) read FDriverId write SetDriverId stored DriverId_Specified;
    property EmployeeId:     guid           Index (IS_OPTN or IS_NLBL) read FEmployeeId write SetEmployeeId stored EmployeeId_Specified;
    property IsKeyEvent:     Boolean        Index (IS_OPTN) read FIsKeyEvent write SetIsKeyEvent stored IsKeyEvent_Specified;
    property LogMessageId:   Int64          Index (IS_OPTN or IS_NLBL) read FLogMessageId write SetLogMessageId stored LogMessageId_Specified;
    property Message_:       string         Index (IS_OPTN or IS_NLBL) read FMessage_ write SetMessage_ stored Message__Specified;
    property MessageSubType: LogMsgSubType  Index (IS_OPTN) read FMessageSubType write SetMessageSubType stored MessageSubType_Specified;
    property MessageType:    LogMsgType     Index (IS_OPTN) read FMessageType write SetMessageType stored MessageType_Specified;
    property OperatorId:     guid           Index (IS_OPTN or IS_NLBL) read FOperatorId write SetOperatorId stored OperatorId_Specified;
  end;



  // ************************************************************************ //
  // XML       : DriverEventNotification, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications
  // ************************************************************************ //
  DriverEventNotification = class(DriverEventNotification2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmployeePassageNotification, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications
  // ************************************************************************ //
  EmployeePassageNotification2 = class(DriverEventNotification2)
  private
    FAddFields: OwnerAdditionalFieldsValue2;
    FAddFields_Specified: boolean;
    FEmployeeComment: string;
    FEmployeeComment_Specified: boolean;
    FEmployeeFirstName: string;
    FEmployeeFirstName_Specified: boolean;
    FEmployeeGroupFullPath: string;
    FEmployeeGroupFullPath_Specified: boolean;
    FEmployeeLastName: string;
    FEmployeeLastName_Specified: boolean;
    FEmployeePosition: string;
    FEmployeePosition_Specified: boolean;
    FEmployeeSecondName: string;
    FEmployeeSecondName_Specified: boolean;
    procedure SetAddFields(Index: Integer; const AOwnerAdditionalFieldsValue2: OwnerAdditionalFieldsValue2);
    function  AddFields_Specified(Index: Integer): boolean;
    procedure SetEmployeeComment(Index: Integer; const Astring: string);
    function  EmployeeComment_Specified(Index: Integer): boolean;
    procedure SetEmployeeFirstName(Index: Integer; const Astring: string);
    function  EmployeeFirstName_Specified(Index: Integer): boolean;
    procedure SetEmployeeGroupFullPath(Index: Integer; const Astring: string);
    function  EmployeeGroupFullPath_Specified(Index: Integer): boolean;
    procedure SetEmployeeLastName(Index: Integer; const Astring: string);
    function  EmployeeLastName_Specified(Index: Integer): boolean;
    procedure SetEmployeePosition(Index: Integer; const Astring: string);
    function  EmployeePosition_Specified(Index: Integer): boolean;
    procedure SetEmployeeSecondName(Index: Integer; const Astring: string);
    function  EmployeeSecondName_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AddFields:             OwnerAdditionalFieldsValue2  Index (IS_OPTN or IS_NLBL) read FAddFields write SetAddFields stored AddFields_Specified;
    property EmployeeComment:       string                       Index (IS_OPTN or IS_NLBL) read FEmployeeComment write SetEmployeeComment stored EmployeeComment_Specified;
    property EmployeeFirstName:     string                       Index (IS_OPTN or IS_NLBL) read FEmployeeFirstName write SetEmployeeFirstName stored EmployeeFirstName_Specified;
    property EmployeeGroupFullPath: string                       Index (IS_OPTN or IS_NLBL) read FEmployeeGroupFullPath write SetEmployeeGroupFullPath stored EmployeeGroupFullPath_Specified;
    property EmployeeLastName:      string                       Index (IS_OPTN or IS_NLBL) read FEmployeeLastName write SetEmployeeLastName stored EmployeeLastName_Specified;
    property EmployeePosition:      string                       Index (IS_OPTN or IS_NLBL) read FEmployeePosition write SetEmployeePosition stored EmployeePosition_Specified;
    property EmployeeSecondName:    string                       Index (IS_OPTN or IS_NLBL) read FEmployeeSecondName write SetEmployeeSecondName stored EmployeeSecondName_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmployeePassageNotification, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications
  // ************************************************************************ //
  EmployeePassageNotification = class(EmployeePassageNotification2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LogMessage, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log
  // ************************************************************************ //
  LogMessage2 = class(TRemotable)
  private
    FContentData: string;
    FContentData_Specified: boolean;
    FContentType: LogMessageContentDataType;
    FContentType_Specified: boolean;
    FDateTime: TXSDateTime;
    FDateTime_Specified: boolean;
    FDetails: string;
    FDetails_Specified: boolean;
    FDriverID: guid;
    FDriverID_Specified: boolean;
    FDriverName: string;
    FDriverName_Specified: boolean;
    FEmployeeFirstName: string;
    FEmployeeFirstName_Specified: boolean;
    FEmployeeGroupFullName: string;
    FEmployeeGroupFullName_Specified: boolean;
    FEmployeeGroupId: guid;
    FEmployeeGroupId_Specified: boolean;
    FEmployeeGroupName: string;
    FEmployeeGroupName_Specified: boolean;
    FEmployeeID: guid;
    FEmployeeID_Specified: boolean;
    FEmployeeLastName: string;
    FEmployeeLastName_Specified: boolean;
    FEmployeeSecondName: string;
    FEmployeeSecondName_Specified: boolean;
    FId: Int64;
    FId_Specified: boolean;
    FLogMessageSubType: LogMsgSubType;
    FLogMessageSubType_Specified: boolean;
    FLogMessageType: LogMsgType;
    FLogMessageType_Specified: boolean;
    FMessage_: string;
    FMessage__Specified: boolean;
    FOperatorFullName: string;
    FOperatorFullName_Specified: boolean;
    FOperatorID: guid;
    FOperatorID_Specified: boolean;
    FOperatorLogin: string;
    FOperatorLogin_Specified: boolean;
    FServerId: guid;
    FServerId_Specified: boolean;
    FServerName: string;
    FServerName_Specified: boolean;
    procedure SetContentData(Index: Integer; const Astring: string);
    function  ContentData_Specified(Index: Integer): boolean;
    procedure SetContentType(Index: Integer; const ALogMessageContentDataType: LogMessageContentDataType);
    function  ContentType_Specified(Index: Integer): boolean;
    procedure SetDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DateTime_Specified(Index: Integer): boolean;
    procedure SetDetails(Index: Integer; const Astring: string);
    function  Details_Specified(Index: Integer): boolean;
    procedure SetDriverID(Index: Integer; const Aguid: guid);
    function  DriverID_Specified(Index: Integer): boolean;
    procedure SetDriverName(Index: Integer; const Astring: string);
    function  DriverName_Specified(Index: Integer): boolean;
    procedure SetEmployeeFirstName(Index: Integer; const Astring: string);
    function  EmployeeFirstName_Specified(Index: Integer): boolean;
    procedure SetEmployeeGroupFullName(Index: Integer; const Astring: string);
    function  EmployeeGroupFullName_Specified(Index: Integer): boolean;
    procedure SetEmployeeGroupId(Index: Integer; const Aguid: guid);
    function  EmployeeGroupId_Specified(Index: Integer): boolean;
    procedure SetEmployeeGroupName(Index: Integer; const Astring: string);
    function  EmployeeGroupName_Specified(Index: Integer): boolean;
    procedure SetEmployeeID(Index: Integer; const Aguid: guid);
    function  EmployeeID_Specified(Index: Integer): boolean;
    procedure SetEmployeeLastName(Index: Integer; const Astring: string);
    function  EmployeeLastName_Specified(Index: Integer): boolean;
    procedure SetEmployeeSecondName(Index: Integer; const Astring: string);
    function  EmployeeSecondName_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const AInt64: Int64);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetLogMessageSubType(Index: Integer; const ALogMsgSubType: LogMsgSubType);
    function  LogMessageSubType_Specified(Index: Integer): boolean;
    procedure SetLogMessageType(Index: Integer; const ALogMsgType: LogMsgType);
    function  LogMessageType_Specified(Index: Integer): boolean;
    procedure SetMessage_(Index: Integer; const Astring: string);
    function  Message__Specified(Index: Integer): boolean;
    procedure SetOperatorFullName(Index: Integer; const Astring: string);
    function  OperatorFullName_Specified(Index: Integer): boolean;
    procedure SetOperatorID(Index: Integer; const Aguid: guid);
    function  OperatorID_Specified(Index: Integer): boolean;
    procedure SetOperatorLogin(Index: Integer; const Astring: string);
    function  OperatorLogin_Specified(Index: Integer): boolean;
    procedure SetServerId(Index: Integer; const Aguid: guid);
    function  ServerId_Specified(Index: Integer): boolean;
    procedure SetServerName(Index: Integer; const Astring: string);
    function  ServerName_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ContentData:           string                     Index (IS_OPTN or IS_NLBL) read FContentData write SetContentData stored ContentData_Specified;
    property ContentType:           LogMessageContentDataType  Index (IS_OPTN or IS_NLBL) read FContentType write SetContentType stored ContentType_Specified;
    property DateTime:              TXSDateTime                Index (IS_OPTN) read FDateTime write SetDateTime stored DateTime_Specified;
    property Details:               string                     Index (IS_OPTN or IS_NLBL) read FDetails write SetDetails stored Details_Specified;
    property DriverID:              guid                       Index (IS_OPTN or IS_NLBL) read FDriverID write SetDriverID stored DriverID_Specified;
    property DriverName:            string                     Index (IS_OPTN or IS_NLBL) read FDriverName write SetDriverName stored DriverName_Specified;
    property EmployeeFirstName:     string                     Index (IS_OPTN or IS_NLBL) read FEmployeeFirstName write SetEmployeeFirstName stored EmployeeFirstName_Specified;
    property EmployeeGroupFullName: string                     Index (IS_OPTN or IS_NLBL) read FEmployeeGroupFullName write SetEmployeeGroupFullName stored EmployeeGroupFullName_Specified;
    property EmployeeGroupId:       guid                       Index (IS_OPTN or IS_NLBL) read FEmployeeGroupId write SetEmployeeGroupId stored EmployeeGroupId_Specified;
    property EmployeeGroupName:     string                     Index (IS_OPTN or IS_NLBL) read FEmployeeGroupName write SetEmployeeGroupName stored EmployeeGroupName_Specified;
    property EmployeeID:            guid                       Index (IS_OPTN or IS_NLBL) read FEmployeeID write SetEmployeeID stored EmployeeID_Specified;
    property EmployeeLastName:      string                     Index (IS_OPTN or IS_NLBL) read FEmployeeLastName write SetEmployeeLastName stored EmployeeLastName_Specified;
    property EmployeeSecondName:    string                     Index (IS_OPTN or IS_NLBL) read FEmployeeSecondName write SetEmployeeSecondName stored EmployeeSecondName_Specified;
    property Id:                    Int64                      Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property LogMessageSubType:     LogMsgSubType              Index (IS_OPTN) read FLogMessageSubType write SetLogMessageSubType stored LogMessageSubType_Specified;
    property LogMessageType:        LogMsgType                 Index (IS_OPTN) read FLogMessageType write SetLogMessageType stored LogMessageType_Specified;
    property Message_:              string                     Index (IS_OPTN or IS_NLBL) read FMessage_ write SetMessage_ stored Message__Specified;
    property OperatorFullName:      string                     Index (IS_OPTN or IS_NLBL) read FOperatorFullName write SetOperatorFullName stored OperatorFullName_Specified;
    property OperatorID:            guid                       Index (IS_OPTN or IS_NLBL) read FOperatorID write SetOperatorID stored OperatorID_Specified;
    property OperatorLogin:         string                     Index (IS_OPTN or IS_NLBL) read FOperatorLogin write SetOperatorLogin stored OperatorLogin_Specified;
    property ServerId:              guid                       Index (IS_OPTN or IS_NLBL) read FServerId write SetServerId stored ServerId_Specified;
    property ServerName:            string                     Index (IS_OPTN or IS_NLBL) read FServerName write SetServerName stored ServerName_Specified;
  end;



  // ************************************************************************ //
  // XML       : LogMessage, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log
  // ************************************************************************ //
  LogMessage = class(LogMessage2)
  private
  published
  end;

  ArrayOfLogMessage = array of LogMessage2;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblCplx] }


  // ************************************************************************ //
  // XML       : LogMessageSubtypeSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log
  // ************************************************************************ //
  LogMessageSubtypeSlimInfo2 = class(TRemotable)
  private
    FLogMessageSubtype: LogMsgSubType;
    FLogMessageSubtype_Specified: boolean;
    FLogMesssageType: LogMsgType;
    FLogMesssageType_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FOrderNumber: Integer;
    FOrderNumber_Specified: boolean;
    FPublish: Boolean;
    FPublish_Specified: boolean;
    procedure SetLogMessageSubtype(Index: Integer; const ALogMsgSubType: LogMsgSubType);
    function  LogMessageSubtype_Specified(Index: Integer): boolean;
    procedure SetLogMesssageType(Index: Integer; const ALogMsgType: LogMsgType);
    function  LogMesssageType_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetOrderNumber(Index: Integer; const AInteger: Integer);
    function  OrderNumber_Specified(Index: Integer): boolean;
    procedure SetPublish(Index: Integer; const ABoolean: Boolean);
    function  Publish_Specified(Index: Integer): boolean;
  published
    property LogMessageSubtype: LogMsgSubType  Index (IS_OPTN) read FLogMessageSubtype write SetLogMessageSubtype stored LogMessageSubtype_Specified;
    property LogMesssageType:   LogMsgType     Index (IS_OPTN) read FLogMesssageType write SetLogMesssageType stored LogMesssageType_Specified;
    property Name_:             string         Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property OrderNumber:       Integer        Index (IS_OPTN) read FOrderNumber write SetOrderNumber stored OrderNumber_Specified;
    property Publish:           Boolean        Index (IS_OPTN) read FPublish write SetPublish stored Publish_Specified;
  end;



  // ************************************************************************ //
  // XML       : LogMessageSubtypeSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log
  // ************************************************************************ //
  LogMessageSubtypeSlimInfo = class(LogMessageSubtypeSlimInfo2)
  private
  published
  end;

  ArrayOfLogMsgType = array of LogMsgType;      { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"[GblCplx] }


  // ************************************************************************ //
  // XML       : LogData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log
  // ************************************************************************ //
  LogData2 = class(TRemotable)
  private
    FCount: Int64;
    FCount_Specified: boolean;
    FMessages: ArrayOfLogMessage;
    FMessages_Specified: boolean;
    procedure SetCount(Index: Integer; const AInt64: Int64);
    function  Count_Specified(Index: Integer): boolean;
    procedure SetMessages(Index: Integer; const AArrayOfLogMessage: ArrayOfLogMessage);
    function  Messages_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Count:    Int64              Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
    property Messages: ArrayOfLogMessage  Index (IS_OPTN or IS_NLBL) read FMessages write SetMessages stored Messages_Specified;
  end;



  // ************************************************************************ //
  // XML       : LogData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log
  // ************************************************************************ //
  LogData = class(LogData2)
  private
  published
  end;

  ArrayOfViolationSaveInfo = array of ViolationSaveInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }


  // ************************************************************************ //
  // XML       : DocumentForActionSaveInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DocumentForActionSaveInfo2 = class(TRemotable)
  private
    FAnswerDate: TXSDateTime;
    FAnswerDate_Specified: boolean;
    FAnswerNumber: string;
    FAnswerNumber_Specified: boolean;
    FCreateDate: TXSDateTime;
    FCreateDate_Specified: boolean;
    FDecisionDocumentTypeID: guid;
    FDecisionDocumentTypeID_Specified: boolean;
    FDocumentNumber: string;
    FDocumentNumber_Specified: boolean;
    FExtraFinalPunishmentID: guid;
    FExtraFinalPunishmentID_Specified: boolean;
    FFinalPunishmentID: guid;
    FFinalPunishmentID_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FSentDate: TXSDateTime;
    FSentDate_Specified: boolean;
    FWhoTransferredDecisionDocumentID: guid;
    FWhoTransferredDecisionDocumentID_Specified: boolean;
    procedure SetAnswerDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  AnswerDate_Specified(Index: Integer): boolean;
    procedure SetAnswerNumber(Index: Integer; const Astring: string);
    function  AnswerNumber_Specified(Index: Integer): boolean;
    procedure SetCreateDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreateDate_Specified(Index: Integer): boolean;
    procedure SetDecisionDocumentTypeID(Index: Integer; const Aguid: guid);
    function  DecisionDocumentTypeID_Specified(Index: Integer): boolean;
    procedure SetDocumentNumber(Index: Integer; const Astring: string);
    function  DocumentNumber_Specified(Index: Integer): boolean;
    procedure SetExtraFinalPunishmentID(Index: Integer; const Aguid: guid);
    function  ExtraFinalPunishmentID_Specified(Index: Integer): boolean;
    procedure SetFinalPunishmentID(Index: Integer; const Aguid: guid);
    function  FinalPunishmentID_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetSentDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  SentDate_Specified(Index: Integer): boolean;
    procedure SetWhoTransferredDecisionDocumentID(Index: Integer; const Aguid: guid);
    function  WhoTransferredDecisionDocumentID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AnswerDate:                       TXSDateTime  Index (IS_OPTN or IS_NLBL) read FAnswerDate write SetAnswerDate stored AnswerDate_Specified;
    property AnswerNumber:                     string       Index (IS_OPTN or IS_NLBL) read FAnswerNumber write SetAnswerNumber stored AnswerNumber_Specified;
    property CreateDate:                       TXSDateTime  Index (IS_OPTN or IS_NLBL) read FCreateDate write SetCreateDate stored CreateDate_Specified;
    property DecisionDocumentTypeID:           guid         Index (IS_OPTN or IS_NLBL) read FDecisionDocumentTypeID write SetDecisionDocumentTypeID stored DecisionDocumentTypeID_Specified;
    property DocumentNumber:                   string       Index (IS_OPTN or IS_NLBL) read FDocumentNumber write SetDocumentNumber stored DocumentNumber_Specified;
    property ExtraFinalPunishmentID:           guid         Index (IS_OPTN or IS_NLBL) read FExtraFinalPunishmentID write SetExtraFinalPunishmentID stored ExtraFinalPunishmentID_Specified;
    property FinalPunishmentID:                guid         Index (IS_OPTN or IS_NLBL) read FFinalPunishmentID write SetFinalPunishmentID stored FinalPunishmentID_Specified;
    property ID:                               guid         Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property SentDate:                         TXSDateTime  Index (IS_OPTN or IS_NLBL) read FSentDate write SetSentDate stored SentDate_Specified;
    property WhoTransferredDecisionDocumentID: guid         Index (IS_OPTN or IS_NLBL) read FWhoTransferredDecisionDocumentID write SetWhoTransferredDecisionDocumentID stored WhoTransferredDecisionDocumentID_Specified;
  end;



  // ************************************************************************ //
  // XML       : DocumentForActionSaveInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DocumentForActionSaveInfo = class(DocumentForActionSaveInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DocumentFullForActionInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DocumentFullForActionInfo2 = class(DocumentForActionSaveInfo2)
  private
    FDocumentSentName: string;
    FDocumentSentName_Specified: boolean;
    FDocumentTypeName: string;
    FDocumentTypeName_Specified: boolean;
    FEmployeeID: guid;
    FEmployeeID_Specified: boolean;
    FExtraFinalPunishmentName: string;
    FExtraFinalPunishmentName_Specified: boolean;
    FFinalPunishmentName: string;
    FFinalPunishmentName_Specified: boolean;
    procedure SetDocumentSentName(Index: Integer; const Astring: string);
    function  DocumentSentName_Specified(Index: Integer): boolean;
    procedure SetDocumentTypeName(Index: Integer; const Astring: string);
    function  DocumentTypeName_Specified(Index: Integer): boolean;
    procedure SetEmployeeID(Index: Integer; const Aguid: guid);
    function  EmployeeID_Specified(Index: Integer): boolean;
    procedure SetExtraFinalPunishmentName(Index: Integer; const Astring: string);
    function  ExtraFinalPunishmentName_Specified(Index: Integer): boolean;
    procedure SetFinalPunishmentName(Index: Integer; const Astring: string);
    function  FinalPunishmentName_Specified(Index: Integer): boolean;
  published
    property DocumentSentName:         string  Index (IS_OPTN or IS_NLBL) read FDocumentSentName write SetDocumentSentName stored DocumentSentName_Specified;
    property DocumentTypeName:         string  Index (IS_OPTN or IS_NLBL) read FDocumentTypeName write SetDocumentTypeName stored DocumentTypeName_Specified;
    property EmployeeID:               guid    Index (IS_OPTN) read FEmployeeID write SetEmployeeID stored EmployeeID_Specified;
    property ExtraFinalPunishmentName: string  Index (IS_OPTN or IS_NLBL) read FExtraFinalPunishmentName write SetExtraFinalPunishmentName stored ExtraFinalPunishmentName_Specified;
    property FinalPunishmentName:      string  Index (IS_OPTN or IS_NLBL) read FFinalPunishmentName write SetFinalPunishmentName stored FinalPunishmentName_Specified;
  end;



  // ************************************************************************ //
  // XML       : DocumentFullForActionInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DocumentFullForActionInfo = class(DocumentFullForActionInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DocumentSaveInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DocumentSaveInfo2 = class(TRemotable)
  private
    FDocumentNumber: string;
    FDocumentNumber_Specified: boolean;
    FDocumentTypeID: guid;
    FDocumentTypeID_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FNumberAndDateOfReturn: string;
    FNumberAndDateOfReturn_Specified: boolean;
    FWhoTransferedDocumentID: guid;
    FWhoTransferedDocumentID_Specified: boolean;
    procedure SetDocumentNumber(Index: Integer; const Astring: string);
    function  DocumentNumber_Specified(Index: Integer): boolean;
    procedure SetDocumentTypeID(Index: Integer; const Aguid: guid);
    function  DocumentTypeID_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetNumberAndDateOfReturn(Index: Integer; const Astring: string);
    function  NumberAndDateOfReturn_Specified(Index: Integer): boolean;
    procedure SetWhoTransferedDocumentID(Index: Integer; const Aguid: guid);
    function  WhoTransferedDocumentID_Specified(Index: Integer): boolean;
  published
    property DocumentNumber:          string  Index (IS_OPTN or IS_NLBL) read FDocumentNumber write SetDocumentNumber stored DocumentNumber_Specified;
    property DocumentTypeID:          guid    Index (IS_OPTN or IS_NLBL) read FDocumentTypeID write SetDocumentTypeID stored DocumentTypeID_Specified;
    property ID:                      guid    Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property NumberAndDateOfReturn:   string  Index (IS_OPTN or IS_NLBL) read FNumberAndDateOfReturn write SetNumberAndDateOfReturn stored NumberAndDateOfReturn_Specified;
    property WhoTransferedDocumentID: guid    Index (IS_OPTN or IS_NLBL) read FWhoTransferedDocumentID write SetWhoTransferedDocumentID stored WhoTransferedDocumentID_Specified;
  end;



  // ************************************************************************ //
  // XML       : DocumentSaveInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DocumentSaveInfo = class(DocumentSaveInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DocumentFullInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DocumentFullInfo2 = class(DocumentSaveInfo2)
  private
    FDecisionDocumentTypeName: string;
    FDecisionDocumentTypeName_Specified: boolean;
    FEmployeeID: guid;
    FEmployeeID_Specified: boolean;
    FWhoTransferredDecisionDocumentName: string;
    FWhoTransferredDecisionDocumentName_Specified: boolean;
    procedure SetDecisionDocumentTypeName(Index: Integer; const Astring: string);
    function  DecisionDocumentTypeName_Specified(Index: Integer): boolean;
    procedure SetEmployeeID(Index: Integer; const Aguid: guid);
    function  EmployeeID_Specified(Index: Integer): boolean;
    procedure SetWhoTransferredDecisionDocumentName(Index: Integer; const Astring: string);
    function  WhoTransferredDecisionDocumentName_Specified(Index: Integer): boolean;
  published
    property DecisionDocumentTypeName:           string  Index (IS_OPTN or IS_NLBL) read FDecisionDocumentTypeName write SetDecisionDocumentTypeName stored DecisionDocumentTypeName_Specified;
    property EmployeeID:                         guid    Index (IS_OPTN) read FEmployeeID write SetEmployeeID stored EmployeeID_Specified;
    property WhoTransferredDecisionDocumentName: string  Index (IS_OPTN or IS_NLBL) read FWhoTransferredDecisionDocumentName write SetWhoTransferredDecisionDocumentName stored WhoTransferredDecisionDocumentName_Specified;
  end;



  // ************************************************************************ //
  // XML       : DocumentFullInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DocumentFullInfo = class(DocumentFullInfo2)
  private
  published
  end;

  ArrayOfDocumentSaveInfo = array of DocumentSaveInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  ArrayOfTangiblesSaveInfo = array of TangiblesSaveInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  ArrayOfDocumentForActionSaveInfo = array of DocumentForActionSaveInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }


  // ************************************************************************ //
  // XML       : ViolatorSaveInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  ViolatorSaveInfo2 = class(TRemotable)
  private
    FActNumber: string;
    FActNumber_Specified: boolean;
    FComment: string;
    FComment_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FDetentionID: guid;
    FDetentionID_Specified: boolean;
    FDocumentForActionSaveInfo: ArrayOfDocumentForActionSaveInfo;
    FDocumentForActionSaveInfo_Specified: boolean;
    FDocumentSaveInfo: ArrayOfDocumentSaveInfo;
    FDocumentSaveInfo_Specified: boolean;
    FEmployeeID: guid;
    FEmployeeID_Specified: boolean;
    FOrganizationID: guid;
    FOrganizationID_Specified: boolean;
    FPositionID: guid;
    FPositionID_Specified: boolean;
    FPunishmentID: guid;
    FPunishmentID_Specified: boolean;
    FStatusID: guid;
    FStatusID_Specified: boolean;
    FSubdivisionID: guid;
    FSubdivisionID_Specified: boolean;
    FTabNumber: Integer;
    FTabNumber_Specified: boolean;
    FViolationsSaveInfo: ArrayOfViolationSaveInfo;
    FViolationsSaveInfo_Specified: boolean;
    procedure SetActNumber(Index: Integer; const Astring: string);
    function  ActNumber_Specified(Index: Integer): boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetDetentionID(Index: Integer; const Aguid: guid);
    function  DetentionID_Specified(Index: Integer): boolean;
    procedure SetDocumentForActionSaveInfo(Index: Integer; const AArrayOfDocumentForActionSaveInfo: ArrayOfDocumentForActionSaveInfo);
    function  DocumentForActionSaveInfo_Specified(Index: Integer): boolean;
    procedure SetDocumentSaveInfo(Index: Integer; const AArrayOfDocumentSaveInfo: ArrayOfDocumentSaveInfo);
    function  DocumentSaveInfo_Specified(Index: Integer): boolean;
    procedure SetEmployeeID(Index: Integer; const Aguid: guid);
    function  EmployeeID_Specified(Index: Integer): boolean;
    procedure SetOrganizationID(Index: Integer; const Aguid: guid);
    function  OrganizationID_Specified(Index: Integer): boolean;
    procedure SetPositionID(Index: Integer; const Aguid: guid);
    function  PositionID_Specified(Index: Integer): boolean;
    procedure SetPunishmentID(Index: Integer; const Aguid: guid);
    function  PunishmentID_Specified(Index: Integer): boolean;
    procedure SetStatusID(Index: Integer; const Aguid: guid);
    function  StatusID_Specified(Index: Integer): boolean;
    procedure SetSubdivisionID(Index: Integer; const Aguid: guid);
    function  SubdivisionID_Specified(Index: Integer): boolean;
    procedure SetTabNumber(Index: Integer; const AInteger: Integer);
    function  TabNumber_Specified(Index: Integer): boolean;
    procedure SetViolationsSaveInfo(Index: Integer; const AArrayOfViolationSaveInfo: ArrayOfViolationSaveInfo);
    function  ViolationsSaveInfo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ActNumber:                 string                            Index (IS_OPTN or IS_NLBL) read FActNumber write SetActNumber stored ActNumber_Specified;
    property Comment:                   string                            Index (IS_OPTN or IS_NLBL) read FComment write SetComment stored Comment_Specified;
    property Description:               string                            Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property DetentionID:               guid                              Index (IS_OPTN or IS_NLBL) read FDetentionID write SetDetentionID stored DetentionID_Specified;
    property DocumentForActionSaveInfo: ArrayOfDocumentForActionSaveInfo  Index (IS_OPTN or IS_NLBL) read FDocumentForActionSaveInfo write SetDocumentForActionSaveInfo stored DocumentForActionSaveInfo_Specified;
    property DocumentSaveInfo:          ArrayOfDocumentSaveInfo           Index (IS_OPTN or IS_NLBL) read FDocumentSaveInfo write SetDocumentSaveInfo stored DocumentSaveInfo_Specified;
    property EmployeeID:                guid                              Index (IS_OPTN) read FEmployeeID write SetEmployeeID stored EmployeeID_Specified;
    property OrganizationID:            guid                              Index (IS_OPTN or IS_NLBL) read FOrganizationID write SetOrganizationID stored OrganizationID_Specified;
    property PositionID:                guid                              Index (IS_OPTN or IS_NLBL) read FPositionID write SetPositionID stored PositionID_Specified;
    property PunishmentID:              guid                              Index (IS_OPTN or IS_NLBL) read FPunishmentID write SetPunishmentID stored PunishmentID_Specified;
    property StatusID:                  guid                              Index (IS_OPTN or IS_NLBL) read FStatusID write SetStatusID stored StatusID_Specified;
    property SubdivisionID:             guid                              Index (IS_OPTN or IS_NLBL) read FSubdivisionID write SetSubdivisionID stored SubdivisionID_Specified;
    property TabNumber:                 Integer                           Index (IS_OPTN or IS_NLBL) read FTabNumber write SetTabNumber stored TabNumber_Specified;
    property ViolationsSaveInfo:        ArrayOfViolationSaveInfo          Index (IS_OPTN or IS_NLBL) read FViolationsSaveInfo write SetViolationsSaveInfo stored ViolationsSaveInfo_Specified;
  end;



  // ************************************************************************ //
  // XML       : ViolatorSaveInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  ViolatorSaveInfo = class(ViolatorSaveInfo2)
  private
  published
  end;

  ArrayOfDocumentFullInfo = array of DocumentFullInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  ArrayOfDocumentFullForActionInfo = array of DocumentFullForActionInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  ArrayOfViolationFullInfo = array of ViolationFullInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }


  // ************************************************************************ //
  // XML       : ViolatorFullInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  ViolatorFullInfo2 = class(ViolatorSaveInfo2)
  private
    FAcsEmployeeDocumentsData: AcsEmployeeDocumentsData2;
    FAcsEmployeeDocumentsData_Specified: boolean;
    FAcsEmployeeFull: AcsEmployeeFull2;
    FAcsEmployeeFull_Specified: boolean;
    FDetentionName: string;
    FDetentionName_Specified: boolean;
    FDocumentsData: ArrayOfDocumentFullInfo;
    FDocumentsData_Specified: boolean;
    FDocumentsForActionData: ArrayOfDocumentFullForActionInfo;
    FDocumentsForActionData_Specified: boolean;
    FOrganizationName: string;
    FOrganizationName_Specified: boolean;
    FPositionName: string;
    FPositionName_Specified: boolean;
    FPunishmentName: string;
    FPunishmentName_Specified: boolean;
    FStatusName: string;
    FStatusName_Specified: boolean;
    FSubdivisionName: string;
    FSubdivisionName_Specified: boolean;
    FViolationsData: ArrayOfViolationFullInfo;
    FViolationsData_Specified: boolean;
    procedure SetAcsEmployeeDocumentsData(Index: Integer; const AAcsEmployeeDocumentsData2: AcsEmployeeDocumentsData2);
    function  AcsEmployeeDocumentsData_Specified(Index: Integer): boolean;
    procedure SetAcsEmployeeFull(Index: Integer; const AAcsEmployeeFull2: AcsEmployeeFull2);
    function  AcsEmployeeFull_Specified(Index: Integer): boolean;
    procedure SetDetentionName(Index: Integer; const Astring: string);
    function  DetentionName_Specified(Index: Integer): boolean;
    procedure SetDocumentsData(Index: Integer; const AArrayOfDocumentFullInfo: ArrayOfDocumentFullInfo);
    function  DocumentsData_Specified(Index: Integer): boolean;
    procedure SetDocumentsForActionData(Index: Integer; const AArrayOfDocumentFullForActionInfo: ArrayOfDocumentFullForActionInfo);
    function  DocumentsForActionData_Specified(Index: Integer): boolean;
    procedure SetOrganizationName(Index: Integer; const Astring: string);
    function  OrganizationName_Specified(Index: Integer): boolean;
    procedure SetPositionName(Index: Integer; const Astring: string);
    function  PositionName_Specified(Index: Integer): boolean;
    procedure SetPunishmentName(Index: Integer; const Astring: string);
    function  PunishmentName_Specified(Index: Integer): boolean;
    procedure SetStatusName(Index: Integer; const Astring: string);
    function  StatusName_Specified(Index: Integer): boolean;
    procedure SetSubdivisionName(Index: Integer; const Astring: string);
    function  SubdivisionName_Specified(Index: Integer): boolean;
    procedure SetViolationsData(Index: Integer; const AArrayOfViolationFullInfo: ArrayOfViolationFullInfo);
    function  ViolationsData_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AcsEmployeeDocumentsData: AcsEmployeeDocumentsData2         Index (IS_OPTN or IS_NLBL) read FAcsEmployeeDocumentsData write SetAcsEmployeeDocumentsData stored AcsEmployeeDocumentsData_Specified;
    property AcsEmployeeFull:          AcsEmployeeFull2                  Index (IS_OPTN or IS_NLBL) read FAcsEmployeeFull write SetAcsEmployeeFull stored AcsEmployeeFull_Specified;
    property DetentionName:            string                            Index (IS_OPTN or IS_NLBL) read FDetentionName write SetDetentionName stored DetentionName_Specified;
    property DocumentsData:            ArrayOfDocumentFullInfo           Index (IS_OPTN or IS_NLBL) read FDocumentsData write SetDocumentsData stored DocumentsData_Specified;
    property DocumentsForActionData:   ArrayOfDocumentFullForActionInfo  Index (IS_OPTN or IS_NLBL) read FDocumentsForActionData write SetDocumentsForActionData stored DocumentsForActionData_Specified;
    property OrganizationName:         string                            Index (IS_OPTN or IS_NLBL) read FOrganizationName write SetOrganizationName stored OrganizationName_Specified;
    property PositionName:             string                            Index (IS_OPTN or IS_NLBL) read FPositionName write SetPositionName stored PositionName_Specified;
    property PunishmentName:           string                            Index (IS_OPTN or IS_NLBL) read FPunishmentName write SetPunishmentName stored PunishmentName_Specified;
    property StatusName:               string                            Index (IS_OPTN or IS_NLBL) read FStatusName write SetStatusName stored StatusName_Specified;
    property SubdivisionName:          string                            Index (IS_OPTN or IS_NLBL) read FSubdivisionName write SetSubdivisionName stored SubdivisionName_Specified;
    property ViolationsData:           ArrayOfViolationFullInfo          Index (IS_OPTN or IS_NLBL) read FViolationsData write SetViolationsData stored ViolationsData_Specified;
  end;



  // ************************************************************************ //
  // XML       : ViolatorFullInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  ViolatorFullInfo = class(ViolatorFullInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ViolationSaveInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  ViolationSaveInfo2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FNatureID: guid;
    FNatureID_Specified: boolean;
    FTheftMethodID: guid;
    FTheftMethodID_Specified: boolean;
    FTypeID: guid;
    FTypeID_Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetNatureID(Index: Integer; const Aguid: guid);
    function  NatureID_Specified(Index: Integer): boolean;
    procedure SetTheftMethodID(Index: Integer; const Aguid: guid);
    function  TheftMethodID_Specified(Index: Integer): boolean;
    procedure SetTypeID(Index: Integer; const Aguid: guid);
    function  TypeID_Specified(Index: Integer): boolean;
  published
    property Description:   string  Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property ID:            guid    Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property NatureID:      guid    Index (IS_OPTN or IS_NLBL) read FNatureID write SetNatureID stored NatureID_Specified;
    property TheftMethodID: guid    Index (IS_OPTN or IS_NLBL) read FTheftMethodID write SetTheftMethodID stored TheftMethodID_Specified;
    property TypeID:        guid    Index (IS_OPTN or IS_NLBL) read FTypeID write SetTypeID stored TypeID_Specified;
  end;



  // ************************************************************************ //
  // XML       : ViolationSaveInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  ViolationSaveInfo = class(ViolationSaveInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ViolationFullInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  ViolationFullInfo2 = class(ViolationSaveInfo2)
  private
    FEmployeeID: guid;
    FEmployeeID_Specified: boolean;
    FNatureName: string;
    FNatureName_Specified: boolean;
    FTheftMethodName: string;
    FTheftMethodName_Specified: boolean;
    FTypeName: string;
    FTypeName_Specified: boolean;
    procedure SetEmployeeID(Index: Integer; const Aguid: guid);
    function  EmployeeID_Specified(Index: Integer): boolean;
    procedure SetNatureName(Index: Integer; const Astring: string);
    function  NatureName_Specified(Index: Integer): boolean;
    procedure SetTheftMethodName(Index: Integer; const Astring: string);
    function  TheftMethodName_Specified(Index: Integer): boolean;
    procedure SetTypeName(Index: Integer; const Astring: string);
    function  TypeName_Specified(Index: Integer): boolean;
  published
    property EmployeeID:      guid    Index (IS_OPTN) read FEmployeeID write SetEmployeeID stored EmployeeID_Specified;
    property NatureName:      string  Index (IS_OPTN or IS_NLBL) read FNatureName write SetNatureName stored NatureName_Specified;
    property TheftMethodName: string  Index (IS_OPTN or IS_NLBL) read FTheftMethodName write SetTheftMethodName stored TheftMethodName_Specified;
    property TypeName:        string  Index (IS_OPTN or IS_NLBL) read FTypeName write SetTypeName stored TypeName_Specified;
  end;



  // ************************************************************************ //
  // XML       : ViolationFullInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  ViolationFullInfo = class(ViolationFullInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : TangiblesSaveInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  TangiblesSaveInfo2 = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FMeasureID: guid;
    FMeasureID_Specified: boolean;
    FNumber: Integer;
    FNumber_Specified: boolean;
    FNumberAndDateOfReturn: string;
    FNumberAndDateOfReturn_Specified: boolean;
    FPrice: TXSDecimal;
    FPrice_Specified: boolean;
    FTangiblesID: guid;
    FTangiblesID_Specified: boolean;
    FWhoTransferedID: guid;
    FWhoTransferedID_Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetMeasureID(Index: Integer; const Aguid: guid);
    function  MeasureID_Specified(Index: Integer): boolean;
    procedure SetNumber(Index: Integer; const AInteger: Integer);
    function  Number_Specified(Index: Integer): boolean;
    procedure SetNumberAndDateOfReturn(Index: Integer; const Astring: string);
    function  NumberAndDateOfReturn_Specified(Index: Integer): boolean;
    procedure SetPrice(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Price_Specified(Index: Integer): boolean;
    procedure SetTangiblesID(Index: Integer; const Aguid: guid);
    function  TangiblesID_Specified(Index: Integer): boolean;
    procedure SetWhoTransferedID(Index: Integer; const Aguid: guid);
    function  WhoTransferedID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Description:           string      Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property MeasureID:             guid        Index (IS_OPTN or IS_NLBL) read FMeasureID write SetMeasureID stored MeasureID_Specified;
    property Number:                Integer     Index (IS_OPTN) read FNumber write SetNumber stored Number_Specified;
    property NumberAndDateOfReturn: string      Index (IS_OPTN or IS_NLBL) read FNumberAndDateOfReturn write SetNumberAndDateOfReturn stored NumberAndDateOfReturn_Specified;
    property Price:                 TXSDecimal  Index (IS_OPTN) read FPrice write SetPrice stored Price_Specified;
    property TangiblesID:           guid        Index (IS_OPTN) read FTangiblesID write SetTangiblesID stored TangiblesID_Specified;
    property WhoTransferedID:       guid        Index (IS_OPTN or IS_NLBL) read FWhoTransferedID write SetWhoTransferedID stored WhoTransferedID_Specified;
  end;



  // ************************************************************************ //
  // XML       : TangiblesSaveInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  TangiblesSaveInfo = class(TangiblesSaveInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : TangiblesFullInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  TangiblesFullInfo2 = class(TangiblesSaveInfo2)
  private
    FID: guid;
    FID_Specified: boolean;
    FMeasureName: string;
    FMeasureName_Specified: boolean;
    FTangiblesName: string;
    FTangiblesName_Specified: boolean;
    FWhoTransferedName: string;
    FWhoTransferedName_Specified: boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetMeasureName(Index: Integer; const Astring: string);
    function  MeasureName_Specified(Index: Integer): boolean;
    procedure SetTangiblesName(Index: Integer; const Astring: string);
    function  TangiblesName_Specified(Index: Integer): boolean;
    procedure SetWhoTransferedName(Index: Integer; const Astring: string);
    function  WhoTransferedName_Specified(Index: Integer): boolean;
  published
    property ID:                guid    Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property MeasureName:       string  Index (IS_OPTN or IS_NLBL) read FMeasureName write SetMeasureName stored MeasureName_Specified;
    property TangiblesName:     string  Index (IS_OPTN or IS_NLBL) read FTangiblesName write SetTangiblesName stored TangiblesName_Specified;
    property WhoTransferedName: string  Index (IS_OPTN or IS_NLBL) read FWhoTransferedName write SetWhoTransferedName stored WhoTransferedName_Specified;
  end;



  // ************************************************************************ //
  // XML       : TangiblesFullInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  TangiblesFullInfo = class(TangiblesFullInfo2)
  private
  published
  end;

  ArrayOfViolatorSaveInfo = array of ViolatorSaveInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  ArrayOfDictionaryElementInfo = array of DictionaryElementInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }


  // ************************************************************************ //
  // XML       : DictionaryElementsInfoData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DictionaryElementsInfoData2 = class(TRemotable)
  private
    FCount: Int64;
    FCount_Specified: boolean;
    FElements: ArrayOfDictionaryElementInfo;
    FElements_Specified: boolean;
    procedure SetCount(Index: Integer; const AInt64: Int64);
    function  Count_Specified(Index: Integer): boolean;
    procedure SetElements(Index: Integer; const AArrayOfDictionaryElementInfo: ArrayOfDictionaryElementInfo);
    function  Elements_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Count:    Int64                         Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
    property Elements: ArrayOfDictionaryElementInfo  Index (IS_OPTN or IS_NLBL) read FElements write SetElements stored Elements_Specified;
  end;



  // ************************************************************************ //
  // XML       : DictionaryElementsInfoData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  DictionaryElementsInfoData = class(DictionaryElementsInfoData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : IncidentsFilter, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentsFilter2 = class(TRemotable)
  private
    FBeginDate: TXSDateTime;
    FBeginDate_Specified: boolean;
    FEndDate: TXSDateTime;
    FEndDate_Specified: boolean;
    FIncidentsMegaFilter: IncidentsMegaFilter2;
    FIncidentsMegaFilter_Specified: boolean;
    FIsCurrentDate: Boolean;
    FIsCurrentDate_Specified: boolean;
    FIsCurrentEmployee: Boolean;
    FIsCurrentEmployee_Specified: boolean;
    FIsEnableFilter: Boolean;
    FIsEnableFilter_Specified: boolean;
    FUser: guid;
    FUser_Specified: boolean;
    procedure SetBeginDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  BeginDate_Specified(Index: Integer): boolean;
    procedure SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndDate_Specified(Index: Integer): boolean;
    procedure SetIncidentsMegaFilter(Index: Integer; const AIncidentsMegaFilter2: IncidentsMegaFilter2);
    function  IncidentsMegaFilter_Specified(Index: Integer): boolean;
    procedure SetIsCurrentDate(Index: Integer; const ABoolean: Boolean);
    function  IsCurrentDate_Specified(Index: Integer): boolean;
    procedure SetIsCurrentEmployee(Index: Integer; const ABoolean: Boolean);
    function  IsCurrentEmployee_Specified(Index: Integer): boolean;
    procedure SetIsEnableFilter(Index: Integer; const ABoolean: Boolean);
    function  IsEnableFilter_Specified(Index: Integer): boolean;
    procedure SetUser(Index: Integer; const Aguid: guid);
    function  User_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property BeginDate:           TXSDateTime           Index (IS_OPTN or IS_NLBL) read FBeginDate write SetBeginDate stored BeginDate_Specified;
    property EndDate:             TXSDateTime           Index (IS_OPTN or IS_NLBL) read FEndDate write SetEndDate stored EndDate_Specified;
    property IncidentsMegaFilter: IncidentsMegaFilter2  Index (IS_OPTN or IS_NLBL) read FIncidentsMegaFilter write SetIncidentsMegaFilter stored IncidentsMegaFilter_Specified;
    property IsCurrentDate:       Boolean               Index (IS_OPTN) read FIsCurrentDate write SetIsCurrentDate stored IsCurrentDate_Specified;
    property IsCurrentEmployee:   Boolean               Index (IS_OPTN) read FIsCurrentEmployee write SetIsCurrentEmployee stored IsCurrentEmployee_Specified;
    property IsEnableFilter:      Boolean               Index (IS_OPTN) read FIsEnableFilter write SetIsEnableFilter stored IsEnableFilter_Specified;
    property User:                guid                  Index (IS_OPTN or IS_NLBL) read FUser write SetUser stored User_Specified;
  end;



  // ************************************************************************ //
  // XML       : IncidentsFilter, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentsFilter = class(IncidentsFilter2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OrganizationDictionaryElementInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  OrganizationDictionaryElementInfo2 = class(DictionaryElementInfo2)
  private
    FOrganizationTypeID: guid;
    FOrganizationTypeID_Specified: boolean;
    FOrganizationTypeName: string;
    FOrganizationTypeName_Specified: boolean;
    procedure SetOrganizationTypeID(Index: Integer; const Aguid: guid);
    function  OrganizationTypeID_Specified(Index: Integer): boolean;
    procedure SetOrganizationTypeName(Index: Integer; const Astring: string);
    function  OrganizationTypeName_Specified(Index: Integer): boolean;
  published
    property OrganizationTypeID:   guid    Index (IS_OPTN or IS_NLBL) read FOrganizationTypeID write SetOrganizationTypeID stored OrganizationTypeID_Specified;
    property OrganizationTypeName: string  Index (IS_OPTN or IS_NLBL) read FOrganizationTypeName write SetOrganizationTypeName stored OrganizationTypeName_Specified;
  end;



  // ************************************************************************ //
  // XML       : OrganizationDictionaryElementInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  OrganizationDictionaryElementInfo = class(OrganizationDictionaryElementInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SecurityGroupDictionaryElementSaveInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  SecurityGroupDictionaryElementSaveInfo2 = class(DictionaryElementSaveInfo2)
  private
    FParentID: guid;
    FParentID_Specified: boolean;
    procedure SetParentID(Index: Integer; const Aguid: guid);
    function  ParentID_Specified(Index: Integer): boolean;
  published
    property ParentID: guid  Index (IS_OPTN or IS_NLBL) read FParentID write SetParentID stored ParentID_Specified;
  end;



  // ************************************************************************ //
  // XML       : SecurityGroupDictionaryElementSaveInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  SecurityGroupDictionaryElementSaveInfo = class(SecurityGroupDictionaryElementSaveInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OrganizationElementSaveInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  OrganizationElementSaveInfo2 = class(DictionaryElementSaveInfo2)
  private
    FOrganizationTypeID: guid;
    FOrganizationTypeID_Specified: boolean;
    procedure SetOrganizationTypeID(Index: Integer; const Aguid: guid);
    function  OrganizationTypeID_Specified(Index: Integer): boolean;
  published
    property OrganizationTypeID: guid  Index (IS_OPTN or IS_NLBL) read FOrganizationTypeID write SetOrganizationTypeID stored OrganizationTypeID_Specified;
  end;



  // ************************************************************************ //
  // XML       : OrganizationElementSaveInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  OrganizationElementSaveInfo = class(OrganizationElementSaveInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SecurityGroupDictionaryElementInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  SecurityGroupDictionaryElementInfo2 = class(DictionaryElementInfo2)
  private
    FParentID: guid;
    FParentID_Specified: boolean;
    procedure SetParentID(Index: Integer; const Aguid: guid);
    function  ParentID_Specified(Index: Integer): boolean;
  published
    property ParentID: guid  Index (IS_OPTN or IS_NLBL) read FParentID write SetParentID stored ParentID_Specified;
  end;



  // ************************************************************************ //
  // XML       : SecurityGroupDictionaryElementInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  SecurityGroupDictionaryElementInfo = class(SecurityGroupDictionaryElementInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : IncidentSaveInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentSaveInfo2 = class(TRemotable)
  private
    FDate: TXSDateTime;
    FDate_Specified: boolean;
    FDocumentNumber: string;
    FDocumentNumber_Specified: boolean;
    FDocumentTypeID: guid;
    FDocumentTypeID_Specified: boolean;
    FEmployeeID: guid;
    FEmployeeID_Specified: boolean;
    FIsIncludeToReport: Boolean;
    FIsIncludeToReport_Specified: boolean;
    FLocationClarificationID: guid;
    FLocationClarificationID_Specified: boolean;
    FLocationID: guid;
    FLocationID_Specified: boolean;
    FMembersSaveInfo: ArrayOfViolatorSaveInfo;
    FMembersSaveInfo_Specified: boolean;
    FSecurityGroupID: guid;
    FSecurityGroupID_Specified: boolean;
    FSignificanceID: guid;
    FSignificanceID_Specified: boolean;
    FTangiblesSaveInfo: ArrayOfTangiblesSaveInfo;
    FTangiblesSaveInfo_Specified: boolean;
    FTime: duration;
    FTime_Specified: boolean;
    FUserID: guid;
    FUserID_Specified: boolean;
    FVehicleComment: string;
    FVehicleComment_Specified: boolean;
    FVehicleID: guid;
    FVehicleID_Specified: boolean;
    FVehicleOrganizationID: guid;
    FVehicleOrganizationID_Specified: boolean;
    FViolationDescription: string;
    FViolationDescription_Specified: boolean;
    FViolationNatureID: guid;
    FViolationNatureID_Specified: boolean;
    FViolationTheftMethodID: guid;
    FViolationTheftMethodID_Specified: boolean;
    FViolationTypeID: guid;
    FViolationTypeID_Specified: boolean;
    FViolatorSaveInfo: ArrayOfViolatorSaveInfo;
    FViolatorSaveInfo_Specified: boolean;
    procedure SetDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  Date_Specified(Index: Integer): boolean;
    procedure SetDocumentNumber(Index: Integer; const Astring: string);
    function  DocumentNumber_Specified(Index: Integer): boolean;
    procedure SetDocumentTypeID(Index: Integer; const Aguid: guid);
    function  DocumentTypeID_Specified(Index: Integer): boolean;
    procedure SetEmployeeID(Index: Integer; const Aguid: guid);
    function  EmployeeID_Specified(Index: Integer): boolean;
    procedure SetIsIncludeToReport(Index: Integer; const ABoolean: Boolean);
    function  IsIncludeToReport_Specified(Index: Integer): boolean;
    procedure SetLocationClarificationID(Index: Integer; const Aguid: guid);
    function  LocationClarificationID_Specified(Index: Integer): boolean;
    procedure SetLocationID(Index: Integer; const Aguid: guid);
    function  LocationID_Specified(Index: Integer): boolean;
    procedure SetMembersSaveInfo(Index: Integer; const AArrayOfViolatorSaveInfo: ArrayOfViolatorSaveInfo);
    function  MembersSaveInfo_Specified(Index: Integer): boolean;
    procedure SetSecurityGroupID(Index: Integer; const Aguid: guid);
    function  SecurityGroupID_Specified(Index: Integer): boolean;
    procedure SetSignificanceID(Index: Integer; const Aguid: guid);
    function  SignificanceID_Specified(Index: Integer): boolean;
    procedure SetTangiblesSaveInfo(Index: Integer; const AArrayOfTangiblesSaveInfo: ArrayOfTangiblesSaveInfo);
    function  TangiblesSaveInfo_Specified(Index: Integer): boolean;
    procedure SetTime(Index: Integer; const Aduration: duration);
    function  Time_Specified(Index: Integer): boolean;
    procedure SetUserID(Index: Integer; const Aguid: guid);
    function  UserID_Specified(Index: Integer): boolean;
    procedure SetVehicleComment(Index: Integer; const Astring: string);
    function  VehicleComment_Specified(Index: Integer): boolean;
    procedure SetVehicleID(Index: Integer; const Aguid: guid);
    function  VehicleID_Specified(Index: Integer): boolean;
    procedure SetVehicleOrganizationID(Index: Integer; const Aguid: guid);
    function  VehicleOrganizationID_Specified(Index: Integer): boolean;
    procedure SetViolationDescription(Index: Integer; const Astring: string);
    function  ViolationDescription_Specified(Index: Integer): boolean;
    procedure SetViolationNatureID(Index: Integer; const Aguid: guid);
    function  ViolationNatureID_Specified(Index: Integer): boolean;
    procedure SetViolationTheftMethodID(Index: Integer; const Aguid: guid);
    function  ViolationTheftMethodID_Specified(Index: Integer): boolean;
    procedure SetViolationTypeID(Index: Integer; const Aguid: guid);
    function  ViolationTypeID_Specified(Index: Integer): boolean;
    procedure SetViolatorSaveInfo(Index: Integer; const AArrayOfViolatorSaveInfo: ArrayOfViolatorSaveInfo);
    function  ViolatorSaveInfo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Date:                    TXSDateTime               Index (IS_OPTN or IS_NLBL) read FDate write SetDate stored Date_Specified;
    property DocumentNumber:          string                    Index (IS_OPTN or IS_NLBL) read FDocumentNumber write SetDocumentNumber stored DocumentNumber_Specified;
    property DocumentTypeID:          guid                      Index (IS_OPTN or IS_NLBL) read FDocumentTypeID write SetDocumentTypeID stored DocumentTypeID_Specified;
    property EmployeeID:              guid                      Index (IS_OPTN or IS_NLBL) read FEmployeeID write SetEmployeeID stored EmployeeID_Specified;
    property IsIncludeToReport:       Boolean                   Index (IS_OPTN) read FIsIncludeToReport write SetIsIncludeToReport stored IsIncludeToReport_Specified;
    property LocationClarificationID: guid                      Index (IS_OPTN or IS_NLBL) read FLocationClarificationID write SetLocationClarificationID stored LocationClarificationID_Specified;
    property LocationID:              guid                      Index (IS_OPTN or IS_NLBL) read FLocationID write SetLocationID stored LocationID_Specified;
    property MembersSaveInfo:         ArrayOfViolatorSaveInfo   Index (IS_OPTN or IS_NLBL) read FMembersSaveInfo write SetMembersSaveInfo stored MembersSaveInfo_Specified;
    property SecurityGroupID:         guid                      Index (IS_OPTN or IS_NLBL) read FSecurityGroupID write SetSecurityGroupID stored SecurityGroupID_Specified;
    property SignificanceID:          guid                      Index (IS_OPTN or IS_NLBL) read FSignificanceID write SetSignificanceID stored SignificanceID_Specified;
    property TangiblesSaveInfo:       ArrayOfTangiblesSaveInfo  Index (IS_OPTN or IS_NLBL) read FTangiblesSaveInfo write SetTangiblesSaveInfo stored TangiblesSaveInfo_Specified;
    property Time:                    duration                  Index (IS_OPTN or IS_NLBL) read FTime write SetTime stored Time_Specified;
    property UserID:                  guid                      Index (IS_OPTN) read FUserID write SetUserID stored UserID_Specified;
    property VehicleComment:          string                    Index (IS_OPTN or IS_NLBL) read FVehicleComment write SetVehicleComment stored VehicleComment_Specified;
    property VehicleID:               guid                      Index (IS_OPTN or IS_NLBL) read FVehicleID write SetVehicleID stored VehicleID_Specified;
    property VehicleOrganizationID:   guid                      Index (IS_OPTN or IS_NLBL) read FVehicleOrganizationID write SetVehicleOrganizationID stored VehicleOrganizationID_Specified;
    property ViolationDescription:    string                    Index (IS_OPTN or IS_NLBL) read FViolationDescription write SetViolationDescription stored ViolationDescription_Specified;
    property ViolationNatureID:       guid                      Index (IS_OPTN or IS_NLBL) read FViolationNatureID write SetViolationNatureID stored ViolationNatureID_Specified;
    property ViolationTheftMethodID:  guid                      Index (IS_OPTN or IS_NLBL) read FViolationTheftMethodID write SetViolationTheftMethodID stored ViolationTheftMethodID_Specified;
    property ViolationTypeID:         guid                      Index (IS_OPTN or IS_NLBL) read FViolationTypeID write SetViolationTypeID stored ViolationTypeID_Specified;
    property ViolatorSaveInfo:        ArrayOfViolatorSaveInfo   Index (IS_OPTN or IS_NLBL) read FViolatorSaveInfo write SetViolatorSaveInfo stored ViolatorSaveInfo_Specified;
  end;



  // ************************************************************************ //
  // XML       : IncidentSaveInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentSaveInfo = class(IncidentSaveInfo2)
  private
  published
  end;

  ArrayOfViolatorFullInfo = array of ViolatorFullInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }
  ArrayOfTangiblesFullInfo = array of TangiblesFullInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }


  // ************************************************************************ //
  // XML       : IncidentElementFullInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentElementFullInfo2 = class(IncidentSaveInfo2)
  private
    FAcsEmployeeDocumentsData: AcsEmployeeDocumentsData2;
    FAcsEmployeeDocumentsData_Specified: boolean;
    FAcsEmployeeFull: AcsEmployeeFull2;
    FAcsEmployeeFull_Specified: boolean;
    FDocumentTypeName: string;
    FDocumentTypeName_Specified: boolean;
    FEmployeeFullName: string;
    FEmployeeFullName_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FLocationClarificationName: string;
    FLocationClarificationName_Specified: boolean;
    FLocationName: string;
    FLocationName_Specified: boolean;
    FMembers: ArrayOfViolatorFullInfo;
    FMembers_Specified: boolean;
    FSecurityGroupName: string;
    FSecurityGroupName_Specified: boolean;
    FSignificanceName: string;
    FSignificanceName_Specified: boolean;
    FTangibles: ArrayOfTangiblesFullInfo;
    FTangibles_Specified: boolean;
    FVehicle: AcsVehicle2;
    FVehicle_Specified: boolean;
    FVehicleOrganizationName: string;
    FVehicleOrganizationName_Specified: boolean;
    FViolationNatureName: string;
    FViolationNatureName_Specified: boolean;
    FViolationTheftMethodName: string;
    FViolationTheftMethodName_Specified: boolean;
    FViolationTypeName: string;
    FViolationTypeName_Specified: boolean;
    FViolators: ArrayOfViolatorFullInfo;
    FViolators_Specified: boolean;
    procedure SetAcsEmployeeDocumentsData(Index: Integer; const AAcsEmployeeDocumentsData2: AcsEmployeeDocumentsData2);
    function  AcsEmployeeDocumentsData_Specified(Index: Integer): boolean;
    procedure SetAcsEmployeeFull(Index: Integer; const AAcsEmployeeFull2: AcsEmployeeFull2);
    function  AcsEmployeeFull_Specified(Index: Integer): boolean;
    procedure SetDocumentTypeName(Index: Integer; const Astring: string);
    function  DocumentTypeName_Specified(Index: Integer): boolean;
    procedure SetEmployeeFullName(Index: Integer; const Astring: string);
    function  EmployeeFullName_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetLocationClarificationName(Index: Integer; const Astring: string);
    function  LocationClarificationName_Specified(Index: Integer): boolean;
    procedure SetLocationName(Index: Integer; const Astring: string);
    function  LocationName_Specified(Index: Integer): boolean;
    procedure SetMembers(Index: Integer; const AArrayOfViolatorFullInfo: ArrayOfViolatorFullInfo);
    function  Members_Specified(Index: Integer): boolean;
    procedure SetSecurityGroupName(Index: Integer; const Astring: string);
    function  SecurityGroupName_Specified(Index: Integer): boolean;
    procedure SetSignificanceName(Index: Integer; const Astring: string);
    function  SignificanceName_Specified(Index: Integer): boolean;
    procedure SetTangibles(Index: Integer; const AArrayOfTangiblesFullInfo: ArrayOfTangiblesFullInfo);
    function  Tangibles_Specified(Index: Integer): boolean;
    procedure SetVehicle(Index: Integer; const AAcsVehicle2: AcsVehicle2);
    function  Vehicle_Specified(Index: Integer): boolean;
    procedure SetVehicleOrganizationName(Index: Integer; const Astring: string);
    function  VehicleOrganizationName_Specified(Index: Integer): boolean;
    procedure SetViolationNatureName(Index: Integer; const Astring: string);
    function  ViolationNatureName_Specified(Index: Integer): boolean;
    procedure SetViolationTheftMethodName(Index: Integer; const Astring: string);
    function  ViolationTheftMethodName_Specified(Index: Integer): boolean;
    procedure SetViolationTypeName(Index: Integer; const Astring: string);
    function  ViolationTypeName_Specified(Index: Integer): boolean;
    procedure SetViolators(Index: Integer; const AArrayOfViolatorFullInfo: ArrayOfViolatorFullInfo);
    function  Violators_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AcsEmployeeDocumentsData:  AcsEmployeeDocumentsData2  Index (IS_OPTN or IS_NLBL) read FAcsEmployeeDocumentsData write SetAcsEmployeeDocumentsData stored AcsEmployeeDocumentsData_Specified;
    property AcsEmployeeFull:           AcsEmployeeFull2           Index (IS_OPTN or IS_NLBL) read FAcsEmployeeFull write SetAcsEmployeeFull stored AcsEmployeeFull_Specified;
    property DocumentTypeName:          string                     Index (IS_OPTN or IS_NLBL) read FDocumentTypeName write SetDocumentTypeName stored DocumentTypeName_Specified;
    property EmployeeFullName:          string                     Index (IS_OPTN or IS_NLBL) read FEmployeeFullName write SetEmployeeFullName stored EmployeeFullName_Specified;
    property ID:                        guid                       Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property LocationClarificationName: string                     Index (IS_OPTN or IS_NLBL) read FLocationClarificationName write SetLocationClarificationName stored LocationClarificationName_Specified;
    property LocationName:              string                     Index (IS_OPTN or IS_NLBL) read FLocationName write SetLocationName stored LocationName_Specified;
    property Members:                   ArrayOfViolatorFullInfo    Index (IS_OPTN or IS_NLBL) read FMembers write SetMembers stored Members_Specified;
    property SecurityGroupName:         string                     Index (IS_OPTN or IS_NLBL) read FSecurityGroupName write SetSecurityGroupName stored SecurityGroupName_Specified;
    property SignificanceName:          string                     Index (IS_OPTN or IS_NLBL) read FSignificanceName write SetSignificanceName stored SignificanceName_Specified;
    property Tangibles:                 ArrayOfTangiblesFullInfo   Index (IS_OPTN or IS_NLBL) read FTangibles write SetTangibles stored Tangibles_Specified;
    property Vehicle:                   AcsVehicle2                Index (IS_OPTN or IS_NLBL) read FVehicle write SetVehicle stored Vehicle_Specified;
    property VehicleOrganizationName:   string                     Index (IS_OPTN or IS_NLBL) read FVehicleOrganizationName write SetVehicleOrganizationName stored VehicleOrganizationName_Specified;
    property ViolationNatureName:       string                     Index (IS_OPTN or IS_NLBL) read FViolationNatureName write SetViolationNatureName stored ViolationNatureName_Specified;
    property ViolationTheftMethodName:  string                     Index (IS_OPTN or IS_NLBL) read FViolationTheftMethodName write SetViolationTheftMethodName stored ViolationTheftMethodName_Specified;
    property ViolationTypeName:         string                     Index (IS_OPTN or IS_NLBL) read FViolationTypeName write SetViolationTypeName stored ViolationTypeName_Specified;
    property Violators:                 ArrayOfViolatorFullInfo    Index (IS_OPTN or IS_NLBL) read FViolators write SetViolators stored Violators_Specified;
  end;



  // ************************************************************************ //
  // XML       : IncidentElementFullInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentElementFullInfo = class(IncidentElementFullInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : IncidentsMegaFilter, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentsMegaFilter2 = class(TRemotable)
  private
    FBeginDate: TXSDateTime;
    FBeginDate_Specified: boolean;
    FBeginTime: duration;
    FBeginTime_Specified: boolean;
    FDatOfBirth: TXSDateTime;
    FDatOfBirth_Specified: boolean;
    FDecisionCreateDate: TXSDateTime;
    FDecisionCreateDate_Specified: boolean;
    FDecisionDocumentNumber: string;
    FDecisionDocumentNumber_Specified: boolean;
    FDecisionFinalPunishmentID: guid;
    FDecisionFinalPunishmentID_Specified: boolean;
    FDocumentNumber: string;
    FDocumentNumber_Specified: boolean;
    FEmployeeConfirmatorID: guid;
    FEmployeeConfirmatorID_Specified: boolean;
    FEndDate: TXSDateTime;
    FEndDate_Specified: boolean;
    FEndTime: duration;
    FEndTime_Specified: boolean;
    FFirstName: string;
    FFirstName_Specified: boolean;
    FIncidentDetentionID: guid;
    FIncidentDetentionID_Specified: boolean;
    FIncidentNatureID: guid;
    FIncidentNatureID_Specified: boolean;
    FIncidentTheftMethodID: guid;
    FIncidentTheftMethodID_Specified: boolean;
    FIncidentTypeID: guid;
    FIncidentTypeID_Specified: boolean;
    FLastName: string;
    FLastName_Specified: boolean;
    FLocationClarificationID: guid;
    FLocationClarificationID_Specified: boolean;
    FLocationID: guid;
    FLocationID_Specified: boolean;
    FOrganizationID: guid;
    FOrganizationID_Specified: boolean;
    FRegistrationAddress: string;
    FRegistrationAddress_Specified: boolean;
    FResidentialAddress: string;
    FResidentialAddress_Specified: boolean;
    FSecondName: string;
    FSecondName_Specified: boolean;
    FSignificanceID: guid;
    FSignificanceID_Specified: boolean;
    FSubdivisionID: guid;
    FSubdivisionID_Specified: boolean;
    FTabNumber: Integer;
    FTabNumber_Specified: boolean;
    FTangiblesMeasureID: guid;
    FTangiblesMeasureID_Specified: boolean;
    FTangiblesNameID: guid;
    FTangiblesNameID_Specified: boolean;
    FVehicleMark: string;
    FVehicleMark_Specified: boolean;
    FVehicleRegistrationNumber: string;
    FVehicleRegistrationNumber_Specified: boolean;
    procedure SetBeginDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  BeginDate_Specified(Index: Integer): boolean;
    procedure SetBeginTime(Index: Integer; const Aduration: duration);
    function  BeginTime_Specified(Index: Integer): boolean;
    procedure SetDatOfBirth(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DatOfBirth_Specified(Index: Integer): boolean;
    procedure SetDecisionCreateDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DecisionCreateDate_Specified(Index: Integer): boolean;
    procedure SetDecisionDocumentNumber(Index: Integer; const Astring: string);
    function  DecisionDocumentNumber_Specified(Index: Integer): boolean;
    procedure SetDecisionFinalPunishmentID(Index: Integer; const Aguid: guid);
    function  DecisionFinalPunishmentID_Specified(Index: Integer): boolean;
    procedure SetDocumentNumber(Index: Integer; const Astring: string);
    function  DocumentNumber_Specified(Index: Integer): boolean;
    procedure SetEmployeeConfirmatorID(Index: Integer; const Aguid: guid);
    function  EmployeeConfirmatorID_Specified(Index: Integer): boolean;
    procedure SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndDate_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const Aduration: duration);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetFirstName(Index: Integer; const Astring: string);
    function  FirstName_Specified(Index: Integer): boolean;
    procedure SetIncidentDetentionID(Index: Integer; const Aguid: guid);
    function  IncidentDetentionID_Specified(Index: Integer): boolean;
    procedure SetIncidentNatureID(Index: Integer; const Aguid: guid);
    function  IncidentNatureID_Specified(Index: Integer): boolean;
    procedure SetIncidentTheftMethodID(Index: Integer; const Aguid: guid);
    function  IncidentTheftMethodID_Specified(Index: Integer): boolean;
    procedure SetIncidentTypeID(Index: Integer; const Aguid: guid);
    function  IncidentTypeID_Specified(Index: Integer): boolean;
    procedure SetLastName(Index: Integer; const Astring: string);
    function  LastName_Specified(Index: Integer): boolean;
    procedure SetLocationClarificationID(Index: Integer; const Aguid: guid);
    function  LocationClarificationID_Specified(Index: Integer): boolean;
    procedure SetLocationID(Index: Integer; const Aguid: guid);
    function  LocationID_Specified(Index: Integer): boolean;
    procedure SetOrganizationID(Index: Integer; const Aguid: guid);
    function  OrganizationID_Specified(Index: Integer): boolean;
    procedure SetRegistrationAddress(Index: Integer; const Astring: string);
    function  RegistrationAddress_Specified(Index: Integer): boolean;
    procedure SetResidentialAddress(Index: Integer; const Astring: string);
    function  ResidentialAddress_Specified(Index: Integer): boolean;
    procedure SetSecondName(Index: Integer; const Astring: string);
    function  SecondName_Specified(Index: Integer): boolean;
    procedure SetSignificanceID(Index: Integer; const Aguid: guid);
    function  SignificanceID_Specified(Index: Integer): boolean;
    procedure SetSubdivisionID(Index: Integer; const Aguid: guid);
    function  SubdivisionID_Specified(Index: Integer): boolean;
    procedure SetTabNumber(Index: Integer; const AInteger: Integer);
    function  TabNumber_Specified(Index: Integer): boolean;
    procedure SetTangiblesMeasureID(Index: Integer; const Aguid: guid);
    function  TangiblesMeasureID_Specified(Index: Integer): boolean;
    procedure SetTangiblesNameID(Index: Integer; const Aguid: guid);
    function  TangiblesNameID_Specified(Index: Integer): boolean;
    procedure SetVehicleMark(Index: Integer; const Astring: string);
    function  VehicleMark_Specified(Index: Integer): boolean;
    procedure SetVehicleRegistrationNumber(Index: Integer; const Astring: string);
    function  VehicleRegistrationNumber_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property BeginDate:                 TXSDateTime  Index (IS_OPTN or IS_NLBL) read FBeginDate write SetBeginDate stored BeginDate_Specified;
    property BeginTime:                 duration     Index (IS_OPTN or IS_NLBL) read FBeginTime write SetBeginTime stored BeginTime_Specified;
    property DatOfBirth:                TXSDateTime  Index (IS_OPTN or IS_NLBL) read FDatOfBirth write SetDatOfBirth stored DatOfBirth_Specified;
    property DecisionCreateDate:        TXSDateTime  Index (IS_OPTN or IS_NLBL) read FDecisionCreateDate write SetDecisionCreateDate stored DecisionCreateDate_Specified;
    property DecisionDocumentNumber:    string       Index (IS_OPTN or IS_NLBL) read FDecisionDocumentNumber write SetDecisionDocumentNumber stored DecisionDocumentNumber_Specified;
    property DecisionFinalPunishmentID: guid         Index (IS_OPTN or IS_NLBL) read FDecisionFinalPunishmentID write SetDecisionFinalPunishmentID stored DecisionFinalPunishmentID_Specified;
    property DocumentNumber:            string       Index (IS_OPTN or IS_NLBL) read FDocumentNumber write SetDocumentNumber stored DocumentNumber_Specified;
    property EmployeeConfirmatorID:     guid         Index (IS_OPTN or IS_NLBL) read FEmployeeConfirmatorID write SetEmployeeConfirmatorID stored EmployeeConfirmatorID_Specified;
    property EndDate:                   TXSDateTime  Index (IS_OPTN or IS_NLBL) read FEndDate write SetEndDate stored EndDate_Specified;
    property EndTime:                   duration     Index (IS_OPTN or IS_NLBL) read FEndTime write SetEndTime stored EndTime_Specified;
    property FirstName:                 string       Index (IS_OPTN or IS_NLBL) read FFirstName write SetFirstName stored FirstName_Specified;
    property IncidentDetentionID:       guid         Index (IS_OPTN or IS_NLBL) read FIncidentDetentionID write SetIncidentDetentionID stored IncidentDetentionID_Specified;
    property IncidentNatureID:          guid         Index (IS_OPTN or IS_NLBL) read FIncidentNatureID write SetIncidentNatureID stored IncidentNatureID_Specified;
    property IncidentTheftMethodID:     guid         Index (IS_OPTN or IS_NLBL) read FIncidentTheftMethodID write SetIncidentTheftMethodID stored IncidentTheftMethodID_Specified;
    property IncidentTypeID:            guid         Index (IS_OPTN or IS_NLBL) read FIncidentTypeID write SetIncidentTypeID stored IncidentTypeID_Specified;
    property LastName:                  string       Index (IS_OPTN or IS_NLBL) read FLastName write SetLastName stored LastName_Specified;
    property LocationClarificationID:   guid         Index (IS_OPTN or IS_NLBL) read FLocationClarificationID write SetLocationClarificationID stored LocationClarificationID_Specified;
    property LocationID:                guid         Index (IS_OPTN or IS_NLBL) read FLocationID write SetLocationID stored LocationID_Specified;
    property OrganizationID:            guid         Index (IS_OPTN or IS_NLBL) read FOrganizationID write SetOrganizationID stored OrganizationID_Specified;
    property RegistrationAddress:       string       Index (IS_OPTN or IS_NLBL) read FRegistrationAddress write SetRegistrationAddress stored RegistrationAddress_Specified;
    property ResidentialAddress:        string       Index (IS_OPTN or IS_NLBL) read FResidentialAddress write SetResidentialAddress stored ResidentialAddress_Specified;
    property SecondName:                string       Index (IS_OPTN or IS_NLBL) read FSecondName write SetSecondName stored SecondName_Specified;
    property SignificanceID:            guid         Index (IS_OPTN or IS_NLBL) read FSignificanceID write SetSignificanceID stored SignificanceID_Specified;
    property SubdivisionID:             guid         Index (IS_OPTN or IS_NLBL) read FSubdivisionID write SetSubdivisionID stored SubdivisionID_Specified;
    property TabNumber:                 Integer      Index (IS_OPTN or IS_NLBL) read FTabNumber write SetTabNumber stored TabNumber_Specified;
    property TangiblesMeasureID:        guid         Index (IS_OPTN or IS_NLBL) read FTangiblesMeasureID write SetTangiblesMeasureID stored TangiblesMeasureID_Specified;
    property TangiblesNameID:           guid         Index (IS_OPTN or IS_NLBL) read FTangiblesNameID write SetTangiblesNameID stored TangiblesNameID_Specified;
    property VehicleMark:               string       Index (IS_OPTN or IS_NLBL) read FVehicleMark write SetVehicleMark stored VehicleMark_Specified;
    property VehicleRegistrationNumber: string       Index (IS_OPTN or IS_NLBL) read FVehicleRegistrationNumber write SetVehicleRegistrationNumber stored VehicleRegistrationNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : IncidentsMegaFilter, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentsMegaFilter = class(IncidentsMegaFilter2)
  private
  published
  end;

  ArrayOfIncidentElementFullInfo = array of IncidentElementFullInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"[GblCplx] }


  // ************************************************************************ //
  // XML       : IncidentsInfoData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentsInfoData2 = class(TRemotable)
  private
    FCount: Int64;
    FCount_Specified: boolean;
    FIncidents: ArrayOfIncidentElementFullInfo;
    FIncidents_Specified: boolean;
    procedure SetCount(Index: Integer; const AInt64: Int64);
    function  Count_Specified(Index: Integer): boolean;
    procedure SetIncidents(Index: Integer; const AArrayOfIncidentElementFullInfo: ArrayOfIncidentElementFullInfo);
    function  Incidents_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Count:     Int64                           Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
    property Incidents: ArrayOfIncidentElementFullInfo  Index (IS_OPTN or IS_NLBL) read FIncidents write SetIncidents stored Incidents_Specified;
  end;



  // ************************************************************************ //
  // XML       : IncidentsInfoData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries
  // ************************************************************************ //
  IncidentsInfoData = class(IncidentsInfoData2)
  private
  published
  end;

  ArrayOfAcsAlcoGroupSlimInfo = array of AcsAlcoGroupSlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"[GblCplx] }
  ArrayOfPhotoBankShort = array of PhotoBankShort2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank"[GblCplx] }


  // ************************************************************************ //
  // XML       : PhotoBankShort, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank
  // ************************************************************************ //
  PhotoBankShort2 = class(TRemotable)
  private
    FDateOfBirth: TXSDateTime;
    FDateOfBirth_Specified: boolean;
    FFullName: string;
    FFullName_Specified: boolean;
    FId: Int64;
    FId_Specified: boolean;
    FPersonNumber: Int64;
    FPersonNumber_Specified: boolean;
    procedure SetDateOfBirth(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DateOfBirth_Specified(Index: Integer): boolean;
    procedure SetFullName(Index: Integer; const Astring: string);
    function  FullName_Specified(Index: Integer): boolean;
    procedure SetId(Index: Integer; const AInt64: Int64);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetPersonNumber(Index: Integer; const AInt64: Int64);
    function  PersonNumber_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DateOfBirth:  TXSDateTime  Index (IS_OPTN or IS_NLBL) read FDateOfBirth write SetDateOfBirth stored DateOfBirth_Specified;
    property FullName:     string       Index (IS_OPTN or IS_NLBL) read FFullName write SetFullName stored FullName_Specified;
    property Id:           Int64        Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property PersonNumber: Int64        Index (IS_OPTN or IS_NLBL) read FPersonNumber write SetPersonNumber stored PersonNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : PhotoBank, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank
  // ************************************************************************ //
  PhotoBank2 = class(PhotoBankShort2)
  private
    FPhoto: TArray<System.Byte>;
    FPhoto_Specified: boolean;
    procedure SetPhoto(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Photo_Specified(Index: Integer): boolean;
  published
    property Photo: TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FPhoto write SetPhoto stored Photo_Specified;
  end;



  // ************************************************************************ //
  // XML       : PhotoBank, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank
  // ************************************************************************ //
  PhotoBank = class(PhotoBank2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PhotoBankShort, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank
  // ************************************************************************ //
  PhotoBankShort = class(PhotoBankShort2)
  private
  published
  end;

  ArrayOfEmployeeGroupForAlcoGroupFull = array of EmployeeGroupForAlcoGroupFull2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"[GblCplx] }


  // ************************************************************************ //
  // XML       : EmployeeGroupForAlcoGroup, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup
  // ************************************************************************ //
  EmployeeGroupForAlcoGroup2 = class(TRemotable)
  private
    FGroupID: guid;
    FGroupID_Specified: boolean;
    FIncludeChilds: Boolean;
    FIncludeChilds_Specified: boolean;
    procedure SetGroupID(Index: Integer; const Aguid: guid);
    function  GroupID_Specified(Index: Integer): boolean;
    procedure SetIncludeChilds(Index: Integer; const ABoolean: Boolean);
    function  IncludeChilds_Specified(Index: Integer): boolean;
  published
    property GroupID:       guid     Index (IS_OPTN) read FGroupID write SetGroupID stored GroupID_Specified;
    property IncludeChilds: Boolean  Index (IS_OPTN) read FIncludeChilds write SetIncludeChilds stored IncludeChilds_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmployeeGroupForAlcoGroupFull, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup
  // ************************************************************************ //
  EmployeeGroupForAlcoGroupFull2 = class(EmployeeGroupForAlcoGroup2)
  private
    FName_: string;
    FName__Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Name_: string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsAlcoGroupSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup
  // ************************************************************************ //
  AcsAlcoGroupSaveData2 = class(TRemotable)
  private
    FAssignmentFilter: AssignmentFilter;
    FAssignmentFilter_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FEmployeeAssignmentType: EmployeeAssignmentType;
    FEmployeeAssignmentType_Specified: boolean;
    FMaxCheckPerDay: Integer;
    FMaxCheckPerDay_Specified: boolean;
    FMaxCheckPerPeriod: Integer;
    FMaxCheckPerPeriod_Specified: boolean;
    FMinCheckPerDay: Integer;
    FMinCheckPerDay_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FPeriodAlcoTesting: Integer;
    FPeriodAlcoTesting_Specified: boolean;
    FStartAlcoTesting: TXSDateTime;
    FStartAlcoTesting_Specified: boolean;
    procedure SetAssignmentFilter(Index: Integer; const AAssignmentFilter: AssignmentFilter);
    function  AssignmentFilter_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetEmployeeAssignmentType(Index: Integer; const AEmployeeAssignmentType: EmployeeAssignmentType);
    function  EmployeeAssignmentType_Specified(Index: Integer): boolean;
    procedure SetMaxCheckPerDay(Index: Integer; const AInteger: Integer);
    function  MaxCheckPerDay_Specified(Index: Integer): boolean;
    procedure SetMaxCheckPerPeriod(Index: Integer; const AInteger: Integer);
    function  MaxCheckPerPeriod_Specified(Index: Integer): boolean;
    procedure SetMinCheckPerDay(Index: Integer; const AInteger: Integer);
    function  MinCheckPerDay_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetPeriodAlcoTesting(Index: Integer; const AInteger: Integer);
    function  PeriodAlcoTesting_Specified(Index: Integer): boolean;
    procedure SetStartAlcoTesting(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartAlcoTesting_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AssignmentFilter:       AssignmentFilter        Index (IS_OPTN) read FAssignmentFilter write SetAssignmentFilter stored AssignmentFilter_Specified;
    property Description:            string                  Index (IS_OPTN or IS_NLBL) read FDescription write SetDescription stored Description_Specified;
    property EmployeeAssignmentType: EmployeeAssignmentType  Index (IS_OPTN) read FEmployeeAssignmentType write SetEmployeeAssignmentType stored EmployeeAssignmentType_Specified;
    property MaxCheckPerDay:         Integer                 Index (IS_OPTN or IS_NLBL) read FMaxCheckPerDay write SetMaxCheckPerDay stored MaxCheckPerDay_Specified;
    property MaxCheckPerPeriod:      Integer                 Index (IS_OPTN) read FMaxCheckPerPeriod write SetMaxCheckPerPeriod stored MaxCheckPerPeriod_Specified;
    property MinCheckPerDay:         Integer                 Index (IS_OPTN) read FMinCheckPerDay write SetMinCheckPerDay stored MinCheckPerDay_Specified;
    property Name_:                  string                  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property PeriodAlcoTesting:      Integer                 Index (IS_OPTN) read FPeriodAlcoTesting write SetPeriodAlcoTesting stored PeriodAlcoTesting_Specified;
    property StartAlcoTesting:       TXSDateTime             Index (IS_OPTN) read FStartAlcoTesting write SetStartAlcoTesting stored StartAlcoTesting_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsAlcoGroupSlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup
  // ************************************************************************ //
  AcsAlcoGroupSlimInfo2 = class(AcsAlcoGroupSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    FPriority: Integer;
    FPriority_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetPriority(Index: Integer; const AInteger: Integer);
    function  Priority_Specified(Index: Integer): boolean;
  published
    property Id:       guid     Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property Priority: Integer  Index (IS_OPTN) read FPriority write SetPriority stored Priority_Specified;
  end;



  // ************************************************************************ //
  // XML       : RemoteTerminalInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal
  // ************************************************************************ //
  RemoteTerminalInfo2 = class(TRemotable)
  private
    FPersonalData: ArrayOfPhotoidentificationPersonalData;
    FPersonalData_Specified: boolean;
    FPhotoContent: PhotoOrder2;
    FPhotoContent_Specified: boolean;
    FWorkZones: ArrayOfWorkZoneSlimInfo;
    FWorkZones_Specified: boolean;
    procedure SetPersonalData(Index: Integer; const AArrayOfPhotoidentificationPersonalData: ArrayOfPhotoidentificationPersonalData);
    function  PersonalData_Specified(Index: Integer): boolean;
    procedure SetPhotoContent(Index: Integer; const APhotoOrder2: PhotoOrder2);
    function  PhotoContent_Specified(Index: Integer): boolean;
    procedure SetWorkZones(Index: Integer; const AArrayOfWorkZoneSlimInfo: ArrayOfWorkZoneSlimInfo);
    function  WorkZones_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property PersonalData: ArrayOfPhotoidentificationPersonalData  Index (IS_OPTN or IS_NLBL) read FPersonalData write SetPersonalData stored PersonalData_Specified;
    property PhotoContent: PhotoOrder2                             Index (IS_OPTN or IS_NLBL) read FPhotoContent write SetPhotoContent stored PhotoContent_Specified;
    property WorkZones:    ArrayOfWorkZoneSlimInfo                 Index (IS_OPTN or IS_NLBL) read FWorkZones write SetWorkZones stored WorkZones_Specified;
  end;



  // ************************************************************************ //
  // XML       : RemoteTerminalInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal
  // ************************************************************************ //
  RemoteTerminalInfo = class(RemoteTerminalInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RemoteTerminalSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal
  // ************************************************************************ //
  RemoteTerminalSaveData2 = class(TRemotable)
  private
    FPersonalData: ArrayOfPhotoidentificationPersonalData;
    FPersonalData_Specified: boolean;
    FPhotoContentId: guid;
    FPhotoContentId_Specified: boolean;
    FWorkZonesIDS: ArrayOfguid;
    FWorkZonesIDS_Specified: boolean;
    procedure SetPersonalData(Index: Integer; const AArrayOfPhotoidentificationPersonalData: ArrayOfPhotoidentificationPersonalData);
    function  PersonalData_Specified(Index: Integer): boolean;
    procedure SetPhotoContentId(Index: Integer; const Aguid: guid);
    function  PhotoContentId_Specified(Index: Integer): boolean;
    procedure SetWorkZonesIDS(Index: Integer; const AArrayOfguid: ArrayOfguid);
    function  WorkZonesIDS_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property PersonalData:   ArrayOfPhotoidentificationPersonalData  Index (IS_OPTN or IS_NLBL) read FPersonalData write SetPersonalData stored PersonalData_Specified;
    property PhotoContentId: guid                                    Index (IS_OPTN or IS_NLBL) read FPhotoContentId write SetPhotoContentId stored PhotoContentId_Specified;
    property WorkZonesIDS:   ArrayOfguid                             Index (IS_OPTN or IS_NLBL) read FWorkZonesIDS write SetWorkZonesIDS stored WorkZonesIDS_Specified;
  end;



  // ************************************************************************ //
  // XML       : RemoteTerminalSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal
  // ************************************************************************ //
  RemoteTerminalSaveData = class(RemoteTerminalSaveData2)
  private
  published
  end;

  ArrayOfPhotoOrder = array of PhotoOrder2;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Photo"[GblCplx] }
  ArrayOfISS_IIDK_SlimInfo = array of ISS_IIDK_SlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }


  // ************************************************************************ //
  // XML       : ISS_Entity_Base, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Entity_Base2 = class(TRemotable)
  private
    FID: guid;
    FID_Specified: boolean;
    FISS_OBJ_ID: string;
    FISS_OBJ_ID_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetISS_OBJ_ID(Index: Integer; const Astring: string);
    function  ISS_OBJ_ID_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property ID:         guid    Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property ISS_OBJ_ID: string  Index (IS_OPTN or IS_NLBL) read FISS_OBJ_ID write SetISS_OBJ_ID stored ISS_OBJ_ID_Specified;
    property Name_:      string  Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : ISS_Display_SlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Display_SlimInfo2 = class(ISS_Entity_Base2)
  private
    FEventViewers: ArrayOfISS_EventViewer_SlimInfo;
    FEventViewers_Specified: boolean;
    FMonitors: ArrayOfISS_Monitor_SlimInfo;
    FMonitors_Specified: boolean;
    procedure SetEventViewers(Index: Integer; const AArrayOfISS_EventViewer_SlimInfo: ArrayOfISS_EventViewer_SlimInfo);
    function  EventViewers_Specified(Index: Integer): boolean;
    procedure SetMonitors(Index: Integer; const AArrayOfISS_Monitor_SlimInfo: ArrayOfISS_Monitor_SlimInfo);
    function  Monitors_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property EventViewers: ArrayOfISS_EventViewer_SlimInfo  Index (IS_OPTN or IS_NLBL) read FEventViewers write SetEventViewers stored EventViewers_Specified;
    property Monitors:     ArrayOfISS_Monitor_SlimInfo      Index (IS_OPTN or IS_NLBL) read FMonitors write SetMonitors stored Monitors_Specified;
  end;



  // ************************************************************************ //
  // XML       : ISS_Display_SlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Display_SlimInfo = class(ISS_Display_SlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_RusGuard_SlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_RusGuard_SlimInfo2 = class(ISS_Entity_Base2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_RusGuard_SlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_RusGuard_SlimInfo = class(ISS_RusGuard_SlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_EventViewer_SlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_EventViewer_SlimInfo2 = class(ISS_Entity_Base2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_EventViewer_SlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_EventViewer_SlimInfo = class(ISS_EventViewer_SlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_Monitor_SlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Monitor_SlimInfo2 = class(ISS_Entity_Base2)
  private
    FCameras: ArrayOfISS_Cam_SlimInfo;
    FCameras_Specified: boolean;
    procedure SetCameras(Index: Integer; const AArrayOfISS_Cam_SlimInfo: ArrayOfISS_Cam_SlimInfo);
    function  Cameras_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Cameras: ArrayOfISS_Cam_SlimInfo  Index (IS_OPTN or IS_NLBL) read FCameras write SetCameras stored Cameras_Specified;
  end;



  // ************************************************************************ //
  // XML       : ISS_Monitor_SlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Monitor_SlimInfo = class(ISS_Monitor_SlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_IntegrationPoint_SlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_IntegrationPoint_SlimInfo2 = class(ISS_Entity_Base2)
  private
    FRusGuardIntegrationPoints: ArrayOfISS_RusGuard_SlimInfo;
    FRusGuardIntegrationPoints_Specified: boolean;
    procedure SetRusGuardIntegrationPoints(Index: Integer; const AArrayOfISS_RusGuard_SlimInfo: ArrayOfISS_RusGuard_SlimInfo);
    function  RusGuardIntegrationPoints_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property RusGuardIntegrationPoints: ArrayOfISS_RusGuard_SlimInfo  Index (IS_OPTN or IS_NLBL) read FRusGuardIntegrationPoints write SetRusGuardIntegrationPoints stored RusGuardIntegrationPoints_Specified;
  end;



  // ************************************************************************ //
  // XML       : ISS_IntegrationPoint_SlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_IntegrationPoint_SlimInfo = class(ISS_IntegrationPoint_SlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_Cam_SlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Cam_SlimInfo2 = class(ISS_Entity_Base2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_Cam_SlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Cam_SlimInfo = class(ISS_Cam_SlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_Entity_Base, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Entity_Base = class(ISS_Entity_Base2)
  private
  published
  end;

  ArrayOfISS_Display_SlimInfo = array of ISS_Display_SlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }
  ArrayOfISS_IntegrationPoint_SlimInfo = array of ISS_IntegrationPoint_SlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }


  // ************************************************************************ //
  // XML       : ISS_Slave_SlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Slave_SlimInfo2 = class(ISS_Entity_Base2)
  private
    FDisplays: ArrayOfISS_Display_SlimInfo;
    FDisplays_Specified: boolean;
    FDns: string;
    FDns_Specified: boolean;
    FIPAddress: string;
    FIPAddress_Specified: boolean;
    FIntegrationPoints: ArrayOfISS_IntegrationPoint_SlimInfo;
    FIntegrationPoints_Specified: boolean;
    procedure SetDisplays(Index: Integer; const AArrayOfISS_Display_SlimInfo: ArrayOfISS_Display_SlimInfo);
    function  Displays_Specified(Index: Integer): boolean;
    procedure SetDns(Index: Integer; const Astring: string);
    function  Dns_Specified(Index: Integer): boolean;
    procedure SetIPAddress(Index: Integer; const Astring: string);
    function  IPAddress_Specified(Index: Integer): boolean;
    procedure SetIntegrationPoints(Index: Integer; const AArrayOfISS_IntegrationPoint_SlimInfo: ArrayOfISS_IntegrationPoint_SlimInfo);
    function  IntegrationPoints_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Displays:          ArrayOfISS_Display_SlimInfo           Index (IS_OPTN or IS_NLBL) read FDisplays write SetDisplays stored Displays_Specified;
    property Dns:               string                                Index (IS_OPTN or IS_NLBL) read FDns write SetDns stored Dns_Specified;
    property IPAddress:         string                                Index (IS_OPTN or IS_NLBL) read FIPAddress write SetIPAddress stored IPAddress_Specified;
    property IntegrationPoints: ArrayOfISS_IntegrationPoint_SlimInfo  Index (IS_OPTN or IS_NLBL) read FIntegrationPoints write SetIntegrationPoints stored IntegrationPoints_Specified;
  end;



  // ************************************************************************ //
  // XML       : ISS_Slave_SlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_Slave_SlimInfo = class(ISS_Slave_SlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISS_IIDK_SaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_IIDK_SaveData2 = class(TRemotable)
  private
    FAddress: string;
    FAddress_Specified: boolean;
    FISS_ID: Integer;
    FISS_ID_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FPort: Integer;
    FPort_Specified: boolean;
    procedure SetAddress(Index: Integer; const Astring: string);
    function  Address_Specified(Index: Integer): boolean;
    procedure SetISS_ID(Index: Integer; const AInteger: Integer);
    function  ISS_ID_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetPort(Index: Integer; const AInteger: Integer);
    function  Port_Specified(Index: Integer): boolean;
  published
    property Address: string   Index (IS_OPTN or IS_NLBL) read FAddress write SetAddress stored Address_Specified;
    property ISS_ID:  Integer  Index (IS_OPTN) read FISS_ID write SetISS_ID stored ISS_ID_Specified;
    property Name_:   string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property Port:    Integer  Index (IS_OPTN) read FPort write SetPort stored Port_Specified;
  end;



  // ************************************************************************ //
  // XML       : ISS_IIDK_SaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_IIDK_SaveData = class(ISS_IIDK_SaveData2)
  private
  published
  end;

  ArrayOfISS_Slave_SlimInfo = array of ISS_Slave_SlimInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"[GblCplx] }


  // ************************************************************************ //
  // XML       : ISS_IIDK_SlimInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_IIDK_SlimInfo2 = class(ISS_IIDK_SaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    FSlaves: ArrayOfISS_Slave_SlimInfo;
    FSlaves_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetSlaves(Index: Integer; const AArrayOfISS_Slave_SlimInfo: ArrayOfISS_Slave_SlimInfo);
    function  Slaves_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Id:     guid                       Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property Slaves: ArrayOfISS_Slave_SlimInfo  Index (IS_OPTN or IS_NLBL) read FSlaves write SetSlaves stored Slaves_Specified;
  end;



  // ************************************************************************ //
  // XML       : ISS_IIDK_SlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS
  // ************************************************************************ //
  ISS_IIDK_SlimInfo = class(ISS_IIDK_SlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsConfiguratorSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace
  // ************************************************************************ //
  AcsConfiguratorSaveData2 = class(TRemotable)
  private
    FDriverLicensePhoto: PhotoOrder2;
    FDriverLicensePhoto_Specified: boolean;
    FForeignPassportPhoto: PhotoOrder2;
    FForeignPassportPhoto_Specified: boolean;
    FIsShowPinCode: Boolean;
    FIsShowPinCode_Specified: boolean;
    FPassportPhoto: PhotoOrder2;
    FPassportPhoto_Specified: boolean;
    FUseDefaultFIODocumentType: DocumentType;
    FUseDefaultFIODocumentType_Specified: boolean;
    procedure SetDriverLicensePhoto(Index: Integer; const APhotoOrder2: PhotoOrder2);
    function  DriverLicensePhoto_Specified(Index: Integer): boolean;
    procedure SetForeignPassportPhoto(Index: Integer; const APhotoOrder2: PhotoOrder2);
    function  ForeignPassportPhoto_Specified(Index: Integer): boolean;
    procedure SetIsShowPinCode(Index: Integer; const ABoolean: Boolean);
    function  IsShowPinCode_Specified(Index: Integer): boolean;
    procedure SetPassportPhoto(Index: Integer; const APhotoOrder2: PhotoOrder2);
    function  PassportPhoto_Specified(Index: Integer): boolean;
    procedure SetUseDefaultFIODocumentType(Index: Integer; const ADocumentType: DocumentType);
    function  UseDefaultFIODocumentType_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DriverLicensePhoto:        PhotoOrder2   Index (IS_OPTN or IS_NLBL) read FDriverLicensePhoto write SetDriverLicensePhoto stored DriverLicensePhoto_Specified;
    property ForeignPassportPhoto:      PhotoOrder2   Index (IS_OPTN or IS_NLBL) read FForeignPassportPhoto write SetForeignPassportPhoto stored ForeignPassportPhoto_Specified;
    property IsShowPinCode:             Boolean       Index (IS_OPTN) read FIsShowPinCode write SetIsShowPinCode stored IsShowPinCode_Specified;
    property PassportPhoto:             PhotoOrder2   Index (IS_OPTN or IS_NLBL) read FPassportPhoto write SetPassportPhoto stored PassportPhoto_Specified;
    property UseDefaultFIODocumentType: DocumentType  Index (IS_OPTN or IS_NLBL) read FUseDefaultFIODocumentType write SetUseDefaultFIODocumentType stored UseDefaultFIODocumentType_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsConfiguratorSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace
  // ************************************************************************ //
  AcsConfiguratorSaveData = class(AcsConfiguratorSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmployeeGroupForAlcoGroup, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup
  // ************************************************************************ //
  EmployeeGroupForAlcoGroup = class(EmployeeGroupForAlcoGroup2)
  private
  published
  end;

  ArrayOfWorkplaceInfo = array of WorkplaceInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblCplx] }


  // ************************************************************************ //
  // XML       : EmployeeGroupForAlcoGroupFull, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup
  // ************************************************************************ //
  EmployeeGroupForAlcoGroupFull = class(EmployeeGroupForAlcoGroupFull2)
  private
  published
  end;

  ArrayOfEmployeeGroupForAlcoGroup = array of EmployeeGroupForAlcoGroup2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"[GblCplx] }


  // ************************************************************************ //
  // XML       : AcsAlcoGroupSlimInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup
  // ************************************************************************ //
  AcsAlcoGroupSlimInfo = class(AcsAlcoGroupSlimInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsAlcoGroupSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup
  // ************************************************************************ //
  AcsAlcoGroupSaveData = class(AcsAlcoGroupSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkplaceModuleSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace
  // ************************************************************************ //
  WorkplaceModuleSaveData2 = class(TRemotable)
  private
    FComment: string;
    FComment_Specified: boolean;
    FIsMobile: Boolean;
    FIsMobile_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
    procedure SetIsMobile(Index: Integer; const ABoolean: Boolean);
    function  IsMobile_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Comment:  string   Index (IS_OPTN or IS_NLBL) read FComment write SetComment stored Comment_Specified;
    property IsMobile: Boolean  Index (IS_OPTN) read FIsMobile write SetIsMobile stored IsMobile_Specified;
    property Name_:    string   Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkplaceModuleSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace
  // ************************************************************************ //
  WorkplaceModuleSaveData = class(WorkplaceModuleSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AcsConfiguratorInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace
  // ************************************************************************ //
  AcsConfiguratorInfo2 = class(AcsConfiguratorSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
  published
    property Id: guid  Index (IS_OPTN) read FId write SetId stored Id_Specified;
  end;



  // ************************************************************************ //
  // XML       : AcsConfiguratorInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace
  // ************************************************************************ //
  AcsConfiguratorInfo = class(AcsConfiguratorInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkplaceModuleInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace
  // ************************************************************************ //
  WorkplaceModuleInfo2 = class(WorkplaceModuleSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    FWorkplaceModuleType: WorkplaceModuleType;
    FWorkplaceModuleType_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetWorkplaceModuleType(Index: Integer; const AWorkplaceModuleType: WorkplaceModuleType);
    function  WorkplaceModuleType_Specified(Index: Integer): boolean;
  published
    property Id:                  guid                 Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property WorkplaceModuleType: WorkplaceModuleType  Index (IS_OPTN) read FWorkplaceModuleType write SetWorkplaceModuleType stored WorkplaceModuleType_Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkplaceModuleInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace
  // ************************************************************************ //
  WorkplaceModuleInfo = class(WorkplaceModuleInfo2)
  private
  published
  end;

  ArrayOfWorkplaceModuleInfo = array of WorkplaceModuleInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"[GblCplx] }


  // ************************************************************************ //
  // XML       : WorkplaceSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace
  // ************************************************************************ //
  WorkplaceSaveData2 = class(TRemotable)
  private
    FComment: string;
    FComment_Specified: boolean;
    FFavoriteType: FavoriteType;
    FFavoriteType_Specified: boolean;
    FIsCollapsed: Boolean;
    FIsCollapsed_Specified: boolean;
    FIsEditFilterOn: Boolean;
    FIsEditFilterOn_Specified: boolean;
    FIsMobile: Boolean;
    FIsMobile_Specified: boolean;
    FIsRibbonCollapsed: Boolean;
    FIsRibbonCollapsed_Specified: boolean;
    FIsSaveFilterOn: Boolean;
    FIsSaveFilterOn_Specified: boolean;
    FIsShowGroupCode: Boolean;
    FIsShowGroupCode_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
    procedure SetFavoriteType(Index: Integer; const AFavoriteType: FavoriteType);
    function  FavoriteType_Specified(Index: Integer): boolean;
    procedure SetIsCollapsed(Index: Integer; const ABoolean: Boolean);
    function  IsCollapsed_Specified(Index: Integer): boolean;
    procedure SetIsEditFilterOn(Index: Integer; const ABoolean: Boolean);
    function  IsEditFilterOn_Specified(Index: Integer): boolean;
    procedure SetIsMobile(Index: Integer; const ABoolean: Boolean);
    function  IsMobile_Specified(Index: Integer): boolean;
    procedure SetIsRibbonCollapsed(Index: Integer; const ABoolean: Boolean);
    function  IsRibbonCollapsed_Specified(Index: Integer): boolean;
    procedure SetIsSaveFilterOn(Index: Integer; const ABoolean: Boolean);
    function  IsSaveFilterOn_Specified(Index: Integer): boolean;
    procedure SetIsShowGroupCode(Index: Integer; const ABoolean: Boolean);
    function  IsShowGroupCode_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property Comment:           string        Index (IS_OPTN or IS_NLBL) read FComment write SetComment stored Comment_Specified;
    property FavoriteType:      FavoriteType  Index (IS_OPTN) read FFavoriteType write SetFavoriteType stored FavoriteType_Specified;
    property IsCollapsed:       Boolean       Index (IS_OPTN) read FIsCollapsed write SetIsCollapsed stored IsCollapsed_Specified;
    property IsEditFilterOn:    Boolean       Index (IS_OPTN) read FIsEditFilterOn write SetIsEditFilterOn stored IsEditFilterOn_Specified;
    property IsMobile:          Boolean       Index (IS_OPTN) read FIsMobile write SetIsMobile stored IsMobile_Specified;
    property IsRibbonCollapsed: Boolean       Index (IS_OPTN) read FIsRibbonCollapsed write SetIsRibbonCollapsed stored IsRibbonCollapsed_Specified;
    property IsSaveFilterOn:    Boolean       Index (IS_OPTN) read FIsSaveFilterOn write SetIsSaveFilterOn stored IsSaveFilterOn_Specified;
    property IsShowGroupCode:   Boolean       Index (IS_OPTN) read FIsShowGroupCode write SetIsShowGroupCode stored IsShowGroupCode_Specified;
    property Name_:             string        Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkplaceInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace
  // ************************************************************************ //
  WorkplaceInfo2 = class(WorkplaceSaveData2)
  private
    FId: guid;
    FId_Specified: boolean;
    FIsBuiltIn: Boolean;
    FIsBuiltIn_Specified: boolean;
    FModules: ArrayOfWorkplaceModuleInfo;
    FModules_Specified: boolean;
    procedure SetId(Index: Integer; const Aguid: guid);
    function  Id_Specified(Index: Integer): boolean;
    procedure SetIsBuiltIn(Index: Integer; const ABoolean: Boolean);
    function  IsBuiltIn_Specified(Index: Integer): boolean;
    procedure SetModules(Index: Integer; const AArrayOfWorkplaceModuleInfo: ArrayOfWorkplaceModuleInfo);
    function  Modules_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Id:        guid                        Index (IS_OPTN) read FId write SetId stored Id_Specified;
    property IsBuiltIn: Boolean                     Index (IS_OPTN) read FIsBuiltIn write SetIsBuiltIn stored IsBuiltIn_Specified;
    property Modules:   ArrayOfWorkplaceModuleInfo  Index (IS_OPTN or IS_NLBL) read FModules write SetModules stored Modules_Specified;
  end;



  // ************************************************************************ //
  // XML       : WorkplaceInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace
  // ************************************************************************ //
  WorkplaceInfo = class(WorkplaceInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : WorkplaceSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace
  // ************************************************************************ //
  WorkplaceSaveData = class(WorkplaceSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OwnerValueBase, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerValueBase2 = class(TRemotable)
  private
    FOwnerId: guid;
    FOwnerId_Specified: boolean;
    procedure SetOwnerId(Index: Integer; const Aguid: guid);
    function  OwnerId_Specified(Index: Integer): boolean;
  published
    property OwnerId: guid  Index (IS_OPTN) read FOwnerId write SetOwnerId stored OwnerId_Specified;
  end;



  // ************************************************************************ //
  // XML       : OwnerDateTimeValue, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerDateTimeValue2 = class(OwnerValueBase2)
  private
    FValue: TXSDateTime;
    FValue_Specified: boolean;
    procedure SetValue(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  Value_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Value: TXSDateTime  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : OwnerDoubleValue, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerDoubleValue2 = class(OwnerValueBase2)
  private
    FValue: Double;
    FValue_Specified: boolean;
    procedure SetValue(Index: Integer; const ADouble: Double);
    function  Value_Specified(Index: Integer): boolean;
  published
    property Value: Double  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : AdditionalFieldValue, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AdditionalFieldValue2 = class(TRemotable)
  private
    FAdditionalFieldInfo: AdditionalFieldBase2;
    FAdditionalFieldInfo_Specified: boolean;
    FOwnerValue: OwnerValueBase2;
    FOwnerValue_Specified: boolean;
    procedure SetAdditionalFieldInfo(Index: Integer; const AAdditionalFieldBase2: AdditionalFieldBase2);
    function  AdditionalFieldInfo_Specified(Index: Integer): boolean;
    procedure SetOwnerValue(Index: Integer; const AOwnerValueBase2: OwnerValueBase2);
    function  OwnerValue_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AdditionalFieldInfo: AdditionalFieldBase2  Index (IS_OPTN or IS_NLBL) read FAdditionalFieldInfo write SetAdditionalFieldInfo stored AdditionalFieldInfo_Specified;
    property OwnerValue:          OwnerValueBase2       Index (IS_OPTN or IS_NLBL) read FOwnerValue write SetOwnerValue stored OwnerValue_Specified;
  end;



  // ************************************************************************ //
  // XML       : ListItem, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  ListItem2 = class(TRemotable)
  private
    FID: guid;
    FID_Specified: boolean;
    FItemValue: string;
    FItemValue_Specified: boolean;
    FOrder: Integer;
    FOrder_Specified: boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetItemValue(Index: Integer; const Astring: string);
    function  ItemValue_Specified(Index: Integer): boolean;
    procedure SetOrder(Index: Integer; const AInteger: Integer);
    function  Order_Specified(Index: Integer): boolean;
  published
    property ID:        guid     Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property ItemValue: string   Index (IS_OPTN or IS_NLBL) read FItemValue write SetItemValue stored ItemValue_Specified;
    property Order:     Integer  Index (IS_OPTN) read FOrder write SetOrder stored Order_Specified;
  end;

  ArrayOfListItem = array of ListItem2;         { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  ArrayOfAdditionalFieldValue = array of AdditionalFieldValue2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  ArrayOfOwnerAdditionalFieldsValue = array of OwnerAdditionalFieldsValue2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }


  // ************************************************************************ //
  // XML       : OwnerAdditionalFieldsValue, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerAdditionalFieldsValue2 = class(TRemotable)
  private
    FFields: ArrayOfAdditionalFieldValue;
    FFields_Specified: boolean;
    FOwnerID: guid;
    FOwnerID_Specified: boolean;
    procedure SetFields(Index: Integer; const AArrayOfAdditionalFieldValue: ArrayOfAdditionalFieldValue);
    function  Fields_Specified(Index: Integer): boolean;
    procedure SetOwnerID(Index: Integer; const Aguid: guid);
    function  OwnerID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Fields:  ArrayOfAdditionalFieldValue  Index (IS_OPTN or IS_NLBL) read FFields write SetFields stored Fields_Specified;
    property OwnerID: guid                         Index (IS_OPTN) read FOwnerID write SetOwnerID stored OwnerID_Specified;
  end;



  // ************************************************************************ //
  // XML       : OwnerAdditionalFieldsValue, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerAdditionalFieldsValue = class(OwnerAdditionalFieldsValue2)
  private
  published
  end;

  ArrayOfAddDateTimeInfo = array of AddDateTimeInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }


  // ************************************************************************ //
  // XML       : OwnerListValue, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerListValue2 = class(OwnerValueBase2)
  private
    FValue: ListItem2;
    FValue_Specified: boolean;
    procedure SetValue(Index: Integer; const AListItem2: ListItem2);
    function  Value_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Value: ListItem2  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : OwnerListValue, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerListValue = class(OwnerListValue2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OwnerIntValue, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerIntValue2 = class(OwnerValueBase2)
  private
    FValue: Integer;
    FValue_Specified: boolean;
    procedure SetValue(Index: Integer; const AInteger: Integer);
    function  Value_Specified(Index: Integer): boolean;
  published
    property Value: Integer  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : OwnerStringValue, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerStringValue2 = class(OwnerValueBase2)
  private
    FValue: string;
    FValue_Specified: boolean;
    procedure SetValue(Index: Integer; const Astring: string);
    function  Value_Specified(Index: Integer): boolean;
  published
    property Value: string  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : OwnerColorValue, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerColorValue2 = class(OwnerValueBase2)
  private
    FValue: TArray<System.Byte>;
    FValue_Specified: boolean;
    procedure SetValue(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Value_Specified(Index: Integer): boolean;
  published
    property Value: TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;

  ArrayOfAdditionalFieldBase = array of AdditionalFieldBase2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }


  // ************************************************************************ //
  // XML       : CellContentFotoIdentificationSaveData, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification
  // ************************************************************************ //
  CellContentFotoIdentificationSaveData2 = class(TRemotable)
  private
    FAccessPointDriverId: guid;
    FAccessPointDriverId_Specified: boolean;
    FAutoAllowEntryTime: Integer;
    FAutoAllowEntryTime_Specified: boolean;
    FAutoAllowExitTime: Integer;
    FAutoAllowExitTime_Specified: boolean;
    FColorFieldID: guid;
    FColorFieldID_Specified: boolean;
    FDecisionHotKey: Integer;
    FDecisionHotKey_Specified: boolean;
    FDecisionHotKeyCancel: Integer;
    FDecisionHotKeyCancel_Specified: boolean;
    FDecisionHotKeyModifier: Integer;
    FDecisionHotKeyModifier_Specified: boolean;
    FDecisionHotKeyModifierCancel: Integer;
    FDecisionHotKeyModifierCancel_Specified: boolean;
    FEnableOperatorDecisionEntryState: Boolean;
    FEnableOperatorDecisionEntryState_Specified: boolean;
    FEnableOperatorDecisionExitState: Boolean;
    FEnableOperatorDecisionExitState_Specified: boolean;
    FEnableOperatorReactionTimeEntry: Boolean;
    FEnableOperatorReactionTimeEntry_Specified: boolean;
    FEnableOperatorReactionTimeExit: Boolean;
    FEnableOperatorReactionTimeExit_Specified: boolean;
    FHidePhotoAfterTime: Integer;
    FHidePhotoAfterTime_Specified: boolean;
    FIsAutoAllowEntry: Boolean;
    FIsAutoAllowEntry_Specified: boolean;
    FIsAutoAllowExit: Boolean;
    FIsAutoAllowExit_Specified: boolean;
    FIsHidePhotoAfterTime: Boolean;
    FIsHidePhotoAfterTime_Specified: boolean;
    FPersonalData: ArrayOfPhotoidentificationPersonalData;
    FPersonalData_Specified: boolean;
    FPhotoContentId: guid;
    FPhotoContentId_Specified: boolean;
    FShowOnOffButtonEnterPermitMode: Boolean;
    FShowOnOffButtonEnterPermitMode_Specified: boolean;
    FShowOnOffButtonExitPermitMode: Boolean;
    FShowOnOffButtonExitPermitMode_Specified: boolean;
    FShowPersonalData: Boolean;
    FShowPersonalData_Specified: boolean;
    FShowPreviousVisitorMode: ShowPreviousVisitorMode;
    FShowPreviousVisitorMode_Specified: boolean;
    procedure SetAccessPointDriverId(Index: Integer; const Aguid: guid);
    function  AccessPointDriverId_Specified(Index: Integer): boolean;
    procedure SetAutoAllowEntryTime(Index: Integer; const AInteger: Integer);
    function  AutoAllowEntryTime_Specified(Index: Integer): boolean;
    procedure SetAutoAllowExitTime(Index: Integer; const AInteger: Integer);
    function  AutoAllowExitTime_Specified(Index: Integer): boolean;
    procedure SetColorFieldID(Index: Integer; const Aguid: guid);
    function  ColorFieldID_Specified(Index: Integer): boolean;
    procedure SetDecisionHotKey(Index: Integer; const AInteger: Integer);
    function  DecisionHotKey_Specified(Index: Integer): boolean;
    procedure SetDecisionHotKeyCancel(Index: Integer; const AInteger: Integer);
    function  DecisionHotKeyCancel_Specified(Index: Integer): boolean;
    procedure SetDecisionHotKeyModifier(Index: Integer; const AInteger: Integer);
    function  DecisionHotKeyModifier_Specified(Index: Integer): boolean;
    procedure SetDecisionHotKeyModifierCancel(Index: Integer; const AInteger: Integer);
    function  DecisionHotKeyModifierCancel_Specified(Index: Integer): boolean;
    procedure SetEnableOperatorDecisionEntryState(Index: Integer; const ABoolean: Boolean);
    function  EnableOperatorDecisionEntryState_Specified(Index: Integer): boolean;
    procedure SetEnableOperatorDecisionExitState(Index: Integer; const ABoolean: Boolean);
    function  EnableOperatorDecisionExitState_Specified(Index: Integer): boolean;
    procedure SetEnableOperatorReactionTimeEntry(Index: Integer; const ABoolean: Boolean);
    function  EnableOperatorReactionTimeEntry_Specified(Index: Integer): boolean;
    procedure SetEnableOperatorReactionTimeExit(Index: Integer; const ABoolean: Boolean);
    function  EnableOperatorReactionTimeExit_Specified(Index: Integer): boolean;
    procedure SetHidePhotoAfterTime(Index: Integer; const AInteger: Integer);
    function  HidePhotoAfterTime_Specified(Index: Integer): boolean;
    procedure SetIsAutoAllowEntry(Index: Integer; const ABoolean: Boolean);
    function  IsAutoAllowEntry_Specified(Index: Integer): boolean;
    procedure SetIsAutoAllowExit(Index: Integer; const ABoolean: Boolean);
    function  IsAutoAllowExit_Specified(Index: Integer): boolean;
    procedure SetIsHidePhotoAfterTime(Index: Integer; const ABoolean: Boolean);
    function  IsHidePhotoAfterTime_Specified(Index: Integer): boolean;
    procedure SetPersonalData(Index: Integer; const AArrayOfPhotoidentificationPersonalData: ArrayOfPhotoidentificationPersonalData);
    function  PersonalData_Specified(Index: Integer): boolean;
    procedure SetPhotoContentId(Index: Integer; const Aguid: guid);
    function  PhotoContentId_Specified(Index: Integer): boolean;
    procedure SetShowOnOffButtonEnterPermitMode(Index: Integer; const ABoolean: Boolean);
    function  ShowOnOffButtonEnterPermitMode_Specified(Index: Integer): boolean;
    procedure SetShowOnOffButtonExitPermitMode(Index: Integer; const ABoolean: Boolean);
    function  ShowOnOffButtonExitPermitMode_Specified(Index: Integer): boolean;
    procedure SetShowPersonalData(Index: Integer; const ABoolean: Boolean);
    function  ShowPersonalData_Specified(Index: Integer): boolean;
    procedure SetShowPreviousVisitorMode(Index: Integer; const AShowPreviousVisitorMode: ShowPreviousVisitorMode);
    function  ShowPreviousVisitorMode_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AccessPointDriverId:              guid                                    Index (IS_OPTN or IS_NLBL) read FAccessPointDriverId write SetAccessPointDriverId stored AccessPointDriverId_Specified;
    property AutoAllowEntryTime:               Integer                                 Index (IS_OPTN) read FAutoAllowEntryTime write SetAutoAllowEntryTime stored AutoAllowEntryTime_Specified;
    property AutoAllowExitTime:                Integer                                 Index (IS_OPTN) read FAutoAllowExitTime write SetAutoAllowExitTime stored AutoAllowExitTime_Specified;
    property ColorFieldID:                     guid                                    Index (IS_OPTN or IS_NLBL) read FColorFieldID write SetColorFieldID stored ColorFieldID_Specified;
    property DecisionHotKey:                   Integer                                 Index (IS_OPTN or IS_NLBL) read FDecisionHotKey write SetDecisionHotKey stored DecisionHotKey_Specified;
    property DecisionHotKeyCancel:             Integer                                 Index (IS_OPTN or IS_NLBL) read FDecisionHotKeyCancel write SetDecisionHotKeyCancel stored DecisionHotKeyCancel_Specified;
    property DecisionHotKeyModifier:           Integer                                 Index (IS_OPTN or IS_NLBL) read FDecisionHotKeyModifier write SetDecisionHotKeyModifier stored DecisionHotKeyModifier_Specified;
    property DecisionHotKeyModifierCancel:     Integer                                 Index (IS_OPTN or IS_NLBL) read FDecisionHotKeyModifierCancel write SetDecisionHotKeyModifierCancel stored DecisionHotKeyModifierCancel_Specified;
    property EnableOperatorDecisionEntryState: Boolean                                 Index (IS_OPTN) read FEnableOperatorDecisionEntryState write SetEnableOperatorDecisionEntryState stored EnableOperatorDecisionEntryState_Specified;
    property EnableOperatorDecisionExitState:  Boolean                                 Index (IS_OPTN) read FEnableOperatorDecisionExitState write SetEnableOperatorDecisionExitState stored EnableOperatorDecisionExitState_Specified;
    property EnableOperatorReactionTimeEntry:  Boolean                                 Index (IS_OPTN) read FEnableOperatorReactionTimeEntry write SetEnableOperatorReactionTimeEntry stored EnableOperatorReactionTimeEntry_Specified;
    property EnableOperatorReactionTimeExit:   Boolean                                 Index (IS_OPTN) read FEnableOperatorReactionTimeExit write SetEnableOperatorReactionTimeExit stored EnableOperatorReactionTimeExit_Specified;
    property HidePhotoAfterTime:               Integer                                 Index (IS_OPTN) read FHidePhotoAfterTime write SetHidePhotoAfterTime stored HidePhotoAfterTime_Specified;
    property IsAutoAllowEntry:                 Boolean                                 Index (IS_OPTN) read FIsAutoAllowEntry write SetIsAutoAllowEntry stored IsAutoAllowEntry_Specified;
    property IsAutoAllowExit:                  Boolean                                 Index (IS_OPTN) read FIsAutoAllowExit write SetIsAutoAllowExit stored IsAutoAllowExit_Specified;
    property IsHidePhotoAfterTime:             Boolean                                 Index (IS_OPTN) read FIsHidePhotoAfterTime write SetIsHidePhotoAfterTime stored IsHidePhotoAfterTime_Specified;
    property PersonalData:                     ArrayOfPhotoidentificationPersonalData  Index (IS_OPTN or IS_NLBL) read FPersonalData write SetPersonalData stored PersonalData_Specified;
    property PhotoContentId:                   guid                                    Index (IS_OPTN or IS_NLBL) read FPhotoContentId write SetPhotoContentId stored PhotoContentId_Specified;
    property ShowOnOffButtonEnterPermitMode:   Boolean                                 Index (IS_OPTN) read FShowOnOffButtonEnterPermitMode write SetShowOnOffButtonEnterPermitMode stored ShowOnOffButtonEnterPermitMode_Specified;
    property ShowOnOffButtonExitPermitMode:    Boolean                                 Index (IS_OPTN) read FShowOnOffButtonExitPermitMode write SetShowOnOffButtonExitPermitMode stored ShowOnOffButtonExitPermitMode_Specified;
    property ShowPersonalData:                 Boolean                                 Index (IS_OPTN) read FShowPersonalData write SetShowPersonalData stored ShowPersonalData_Specified;
    property ShowPreviousVisitorMode:          ShowPreviousVisitorMode                 Index (IS_OPTN) read FShowPreviousVisitorMode write SetShowPreviousVisitorMode stored ShowPreviousVisitorMode_Specified;
  end;



  // ************************************************************************ //
  // XML       : CellContentFotoIdentificationSaveData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification
  // ************************************************************************ //
  CellContentFotoIdentificationSaveData = class(CellContentFotoIdentificationSaveData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CellContentFotoIdentificationInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification
  // ************************************************************************ //
  CellContentFotoIdentificationInfo2 = class(CellContentFotoIdentificationSaveData2)
  private
    FAccessPointDriverName: string;
    FAccessPointDriverName_Specified: boolean;
    FAcsAccessPointType: AcsAccessPointType;
    FAcsAccessPointType_Specified: boolean;
    FCellId: guid;
    FCellId_Specified: boolean;
    FColorField: TArray<System.Byte>;
    FColorField_Specified: boolean;
    FColorFieldName: string;
    FColorFieldName_Specified: boolean;
    FPhotoNumber: Integer;
    FPhotoNumber_Specified: boolean;
    procedure SetAccessPointDriverName(Index: Integer; const Astring: string);
    function  AccessPointDriverName_Specified(Index: Integer): boolean;
    procedure SetAcsAccessPointType(Index: Integer; const AAcsAccessPointType: AcsAccessPointType);
    function  AcsAccessPointType_Specified(Index: Integer): boolean;
    procedure SetCellId(Index: Integer; const Aguid: guid);
    function  CellId_Specified(Index: Integer): boolean;
    procedure SetColorField(Index: Integer; const ATArray: TArray<System.Byte>);
    function  ColorField_Specified(Index: Integer): boolean;
    procedure SetColorFieldName(Index: Integer; const Astring: string);
    function  ColorFieldName_Specified(Index: Integer): boolean;
    procedure SetPhotoNumber(Index: Integer; const AInteger: Integer);
    function  PhotoNumber_Specified(Index: Integer): boolean;
  published
    property AccessPointDriverName: string               Index (IS_OPTN or IS_NLBL) read FAccessPointDriverName write SetAccessPointDriverName stored AccessPointDriverName_Specified;
    property AcsAccessPointType:    AcsAccessPointType   Index (IS_OPTN or IS_NLBL) read FAcsAccessPointType write SetAcsAccessPointType stored AcsAccessPointType_Specified;
    property CellId:                guid                 Index (IS_OPTN) read FCellId write SetCellId stored CellId_Specified;
    property ColorField:            TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FColorField write SetColorField stored ColorField_Specified;
    property ColorFieldName:        string               Index (IS_OPTN or IS_NLBL) read FColorFieldName write SetColorFieldName stored ColorFieldName_Specified;
    property PhotoNumber:           Integer              Index (IS_OPTN or IS_NLBL) read FPhotoNumber write SetPhotoNumber stored PhotoNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : CellContentFotoIdentificationInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification
  // ************************************************************************ //
  CellContentFotoIdentificationInfo = class(CellContentFotoIdentificationInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PhotoidentificationPersonalData, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification
  // ************************************************************************ //
  PhotoidentificationPersonalData = class(PhotoidentificationPersonalData2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PhotoidentificationPersonalDataSaveInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification
  // ************************************************************************ //
  PhotoidentificationPersonalDataSaveInfo = class(PhotoidentificationPersonalDataSaveInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AdditionalFieldBase, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AdditionalFieldBase2 = class(TRemotable)
  private
    FFieldType: FieldType;
    FFieldType_Specified: boolean;
    FID: guid;
    FID_Specified: boolean;
    FIsForEmployee: Boolean;
    FIsForEmployee_Specified: boolean;
    FIsForEmployeeGroup: Boolean;
    FIsForEmployeeGroup_Specified: boolean;
    FIsNotForShow: Boolean;
    FIsNotForShow_Specified: boolean;
    FIsRequired: Boolean;
    FIsRequired_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FOrder: Integer;
    FOrder_Specified: boolean;
    FOwnerType: OwnerFieldType;
    FOwnerType_Specified: boolean;
    procedure SetFieldType(Index: Integer; const AFieldType: FieldType);
    function  FieldType_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetIsForEmployee(Index: Integer; const ABoolean: Boolean);
    function  IsForEmployee_Specified(Index: Integer): boolean;
    procedure SetIsForEmployeeGroup(Index: Integer; const ABoolean: Boolean);
    function  IsForEmployeeGroup_Specified(Index: Integer): boolean;
    procedure SetIsNotForShow(Index: Integer; const ABoolean: Boolean);
    function  IsNotForShow_Specified(Index: Integer): boolean;
    procedure SetIsRequired(Index: Integer; const ABoolean: Boolean);
    function  IsRequired_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetOrder(Index: Integer; const AInteger: Integer);
    function  Order_Specified(Index: Integer): boolean;
    procedure SetOwnerType(Index: Integer; const AOwnerFieldType: OwnerFieldType);
    function  OwnerType_Specified(Index: Integer): boolean;
  published
    property FieldType:          FieldType       Index (IS_OPTN) read FFieldType write SetFieldType stored FieldType_Specified;
    property ID:                 guid            Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property IsForEmployee:      Boolean         Index (IS_OPTN) read FIsForEmployee write SetIsForEmployee stored IsForEmployee_Specified;
    property IsForEmployeeGroup: Boolean         Index (IS_OPTN) read FIsForEmployeeGroup write SetIsForEmployeeGroup stored IsForEmployeeGroup_Specified;
    property IsNotForShow:       Boolean         Index (IS_OPTN) read FIsNotForShow write SetIsNotForShow stored IsNotForShow_Specified;
    property IsRequired:         Boolean         Index (IS_OPTN) read FIsRequired write SetIsRequired stored IsRequired_Specified;
    property Name_:              string          Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property Order:              Integer         Index (IS_OPTN) read FOrder write SetOrder stored Order_Specified;
    property OwnerType:          OwnerFieldType  Index (IS_OPTN) read FOwnerType write SetOwnerType stored OwnerType_Specified;
  end;



  // ************************************************************************ //
  // XML       : IntegerField, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  IntegerField2 = class(AdditionalFieldBase2)
  private
    FDefaultValue: Integer;
    FDefaultValue_Specified: boolean;
    procedure SetDefaultValue(Index: Integer; const AInteger: Integer);
    function  DefaultValue_Specified(Index: Integer): boolean;
  published
    property DefaultValue: Integer  Index (IS_OPTN or IS_NLBL) read FDefaultValue write SetDefaultValue stored DefaultValue_Specified;
  end;



  // ************************************************************************ //
  // XML       : ColorField, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  ColorField2 = class(AdditionalFieldBase2)
  private
    FDefaultValue: TArray<System.Byte>;
    FDefaultValue_Specified: boolean;
    procedure SetDefaultValue(Index: Integer; const ATArray: TArray<System.Byte>);
    function  DefaultValue_Specified(Index: Integer): boolean;
  published
    property DefaultValue: TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FDefaultValue write SetDefaultValue stored DefaultValue_Specified;
  end;



  // ************************************************************************ //
  // XML       : StringField, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  StringField2 = class(AdditionalFieldBase2)
  private
    FDefaultValue: string;
    FDefaultValue_Specified: boolean;
    procedure SetDefaultValue(Index: Integer; const Astring: string);
    function  DefaultValue_Specified(Index: Integer): boolean;
  published
    property DefaultValue: string  Index (IS_OPTN or IS_NLBL) read FDefaultValue write SetDefaultValue stored DefaultValue_Specified;
  end;



  // ************************************************************************ //
  // XML       : DoubleField, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  DoubleField2 = class(AdditionalFieldBase2)
  private
    FDefaultValue: Double;
    FDefaultValue_Specified: boolean;
    procedure SetDefaultValue(Index: Integer; const ADouble: Double);
    function  DefaultValue_Specified(Index: Integer): boolean;
  published
    property DefaultValue: Double  Index (IS_OPTN or IS_NLBL) read FDefaultValue write SetDefaultValue stored DefaultValue_Specified;
  end;



  // ************************************************************************ //
  // XML       : ListField, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  ListField2 = class(AdditionalFieldBase2)
  private
    FDefaultValue: ListItem2;
    FDefaultValue_Specified: boolean;
    FItems: ArrayOfListItem;
    FItems_Specified: boolean;
    procedure SetDefaultValue(Index: Integer; const AListItem2: ListItem2);
    function  DefaultValue_Specified(Index: Integer): boolean;
    procedure SetItems(Index: Integer; const AArrayOfListItem: ArrayOfListItem);
    function  Items_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DefaultValue: ListItem2        Index (IS_OPTN or IS_NLBL) read FDefaultValue write SetDefaultValue stored DefaultValue_Specified;
    property Items:        ArrayOfListItem  Index (IS_OPTN or IS_NLBL) read FItems write SetItems stored Items_Specified;
  end;



  // ************************************************************************ //
  // XML       : DateTimeField, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  DateTimeField2 = class(AdditionalFieldBase2)
  private
    FDefaultValue: TXSDateTime;
    FDefaultValue_Specified: boolean;
    FFormat: string;
    FFormat_Specified: boolean;
    FIsCurrent: Boolean;
    FIsCurrent_Specified: boolean;
    procedure SetDefaultValue(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DefaultValue_Specified(Index: Integer): boolean;
    procedure SetFormat(Index: Integer; const Astring: string);
    function  Format_Specified(Index: Integer): boolean;
    procedure SetIsCurrent(Index: Integer; const ABoolean: Boolean);
    function  IsCurrent_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DefaultValue: TXSDateTime  Index (IS_OPTN or IS_NLBL) read FDefaultValue write SetDefaultValue stored DefaultValue_Specified;
    property Format:       string       Index (IS_OPTN or IS_NLBL) read FFormat write SetFormat stored Format_Specified;
    property IsCurrent:    Boolean      Index (IS_OPTN or IS_NLBL) read FIsCurrent write SetIsCurrent stored IsCurrent_Specified;
  end;



  // ************************************************************************ //
  // XML       : ColorField, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  ColorField = class(ColorField2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ListField, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  ListField = class(ListField2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ListItem, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  ListItem = class(ListItem2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : StringField, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  StringField = class(StringField2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DateTimeField, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  DateTimeField = class(DateTimeField2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : IntegerField, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  IntegerField = class(IntegerField2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DoubleField, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  DoubleField = class(DoubleField2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OwnerIntValue, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerIntValue = class(OwnerIntValue2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OwnerStringValue, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerStringValue = class(OwnerStringValue2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OwnerColorValue, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerColorValue = class(OwnerColorValue2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OwnerDoubleValue, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerDoubleValue = class(OwnerDoubleValue2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AdditionalFieldValue, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AdditionalFieldValue = class(AdditionalFieldValue2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OwnerValueBase, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerValueBase = class(OwnerValueBase2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OwnerDateTimeValue, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  OwnerDateTimeValue = class(OwnerDateTimeValue2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AdditionalFieldBase, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AdditionalFieldBase = class(AdditionalFieldBase2)
  private
  published
  end;

  ArrayOfAddIntInfo = array of AddIntInfo2;     { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }
  ArrayOfAddStringInfo = array of AddStringInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }


  // ************************************************************************ //
  // XML       : AddFieldInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddFieldInfo2 = class(TRemotable)
  private
    FID: guid;
    FID_Specified: boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
  published
    property ID: guid  Index (IS_OPTN) read FID write SetID stored ID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddDateTimeInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddDateTimeInfo2 = class(AddFieldInfo2)
  private
    FValue: TXSDateTime;
    FValue_Specified: boolean;
    procedure SetValue(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  Value_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Value: TXSDateTime  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddDateTimeInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddDateTimeInfo = class(AddDateTimeInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddDoubleInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddDoubleInfo2 = class(AddFieldInfo2)
  private
    FValue: Double;
    FValue_Specified: boolean;
    procedure SetValue(Index: Integer; const ADouble: Double);
    function  Value_Specified(Index: Integer): boolean;
  published
    property Value: Double  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddDoubleInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddDoubleInfo = class(AddDoubleInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddIntInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddIntInfo2 = class(AddFieldInfo2)
  private
    FValue: Integer;
    FValue_Specified: boolean;
    procedure SetValue(Index: Integer; const AInteger: Integer);
    function  Value_Specified(Index: Integer): boolean;
  published
    property Value: Integer  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddIntInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddIntInfo = class(AddIntInfo2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddFieldInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddFieldInfo = class(AddFieldInfo2)
  private
  published
  end;

  ArrayOfAddDoubleInfo = array of AddDoubleInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }


  // ************************************************************************ //
  // XML       : AddListInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddListInfo2 = class(AddFieldInfo2)
  private
    FValue: ListItem2;
    FValue_Specified: boolean;
    procedure SetValue(Index: Integer; const AListItem2: ListItem2);
    function  Value_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Value: ListItem2  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddListInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddListInfo = class(AddListInfo2)
  private
  published
  end;

  PhotoMarker     =  type string;      { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblSmpl] }


  // ************************************************************************ //
  // XML       : PhotoOrder, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Photo
  // ************************************************************************ //
  PhotoOrder2 = class(TRemotable)
  private
    FID: guid;
    FID_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FOrder: Integer;
    FOrder_Specified: boolean;
    FOwnerType: OwnerFieldType;
    FOwnerType_Specified: boolean;
    FPhotoMarker: PhotoMarker;
    FPhotoMarker_Specified: boolean;
    FPhotoNumber: Integer;
    FPhotoNumber_Specified: boolean;
    procedure SetID(Index: Integer; const Aguid: guid);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetOrder(Index: Integer; const AInteger: Integer);
    function  Order_Specified(Index: Integer): boolean;
    procedure SetOwnerType(Index: Integer; const AOwnerFieldType: OwnerFieldType);
    function  OwnerType_Specified(Index: Integer): boolean;
    procedure SetPhotoMarker(Index: Integer; const APhotoMarker: PhotoMarker);
    function  PhotoMarker_Specified(Index: Integer): boolean;
    procedure SetPhotoNumber(Index: Integer; const AInteger: Integer);
    function  PhotoNumber_Specified(Index: Integer): boolean;
  published
    property ID:          guid            Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property Name_:       string          Index (IS_OPTN or IS_NLBL) read FName_ write SetName_ stored Name__Specified;
    property Order:       Integer         Index (IS_OPTN) read FOrder write SetOrder stored Order_Specified;
    property OwnerType:   OwnerFieldType  Index (IS_OPTN) read FOwnerType write SetOwnerType stored OwnerType_Specified;
    property PhotoMarker: PhotoMarker     Index (IS_OPTN) read FPhotoMarker write SetPhotoMarker stored PhotoMarker_Specified;
    property PhotoNumber: Integer         Index (IS_OPTN) read FPhotoNumber write SetPhotoNumber stored PhotoNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : PhotoOrder, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Photo
  // ************************************************************************ //
  PhotoOrder = class(PhotoOrder2)
  private
  published
  end;

  SavedFieldContext =  type string;      { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblSmpl] }
  ArrayOfAddListInfo = array of AddListInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }


  // ************************************************************************ //
  // XML       : AddStringInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddStringInfo2 = class(AddFieldInfo2)
  private
    FValue: string;
    FValue_Specified: boolean;
    procedure SetValue(Index: Integer; const Astring: string);
    function  Value_Specified(Index: Integer): boolean;
  published
    property Value: string  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddStringInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddStringInfo = class(AddStringInfo2)
  private
  published
  end;

  ArrayOfAddColorInfo = array of AddColorInfo2;   { "http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"[GblCplx] }


  // ************************************************************************ //
  // XML       : AddColorInfo, global, <complexType>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddColorInfo2 = class(AddFieldInfo2)
  private
    FValue: TArray<System.Byte>;
    FValue_Specified: boolean;
    procedure SetValue(Index: Integer; const ATArray: TArray<System.Byte>);
    function  Value_Specified(Index: Integer): boolean;
  published
    property Value: TArray<System.Byte>  Index (IS_OPTN or IS_NLBL) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddColorInfo, global, <element>
  // Namespace : http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields
  // ************************************************************************ //
  AddColorInfo = class(AddColorInfo2)
  private
  published
  end;


  // ************************************************************************ //
  // Namespace : http://www.rusguardsecurity.ru
  // transport : http://schemas.xmlsoap.org/soap/http
  // style     : document
  // use       : literal
  // binding   : BasicHttpBinding_ILNetworkService
  // service   : LNetworkService
  // port      : BasicHttpBinding_ILNetworkService
  // URL       : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc
  // ************************************************************************ //
  ILNetworkService = interface(IInvokable)
  ['{218594C3-E056-6272-34F6-C42A6F7E575C}']
    function  GetTagsByResourceID(const resourceID: guid): ArrayOfResourceTagsData; stdcall;
    function  GetTags: ArrayOfTagFullInfo; stdcall;
    function  GetFavoriteFolders(const userId: guid; const folderId: guid; const left_key: Integer; const isIncludeChilds: Boolean): ArrayOfFavoriteFolderInfo; stdcall;
    function  GetFavoriteFoldersByWorkplace(const workpplaceId: guid; const folderId: guid; const left_key: Integer; const isIncludeChilds: Boolean): ArrayOfFavoriteFolderInfo; stdcall;
    function  GetFavoriteFoldersWithEmployeeGroups(const userId: guid; const folderId: guid): ArrayOfFavoriteFolderInfoWithEmployeeGroup; stdcall;
    function  GetFavoriteFoldersWithEmployeeGroupsByWorkplace(const workpplaceId: guid; const folderId: guid): ArrayOfFavoriteFolderInfoWithEmployeeGroup; stdcall;
    function  GetFavoriteFolderForEmployeeGroup(const userId: guid; const employeeGroupId: guid): FavoriteFolderInfo2; stdcall;
    function  GetFavoriteFolderForEmployeeGroupByWorkplace(const workpplaceId: guid; const employeeGroupId: guid): FavoriteFolderInfo2; stdcall;
    function  GetUserPasses: ArrayOfUserPassSlimData; stdcall;
    function  LoadUserPass(const id: guid): UserPassFullData2; stdcall;
    function  GetReactions: ArrayOfReactionSlimInfo; stdcall;
    function  GetReactionFullInfo(const id: guid): ReactionFullInfo2; stdcall;
    function  GetEmployeesOfReactionAction(const actionId: guid): ArrayOfguid; stdcall;
    function  GetEmployeeGroupsOfReactionAction(const actionId: guid): ArrayOfguid; stdcall;
    function  GetReactionSendSMSAction(const id: guid): ReactionSendSMSActionSlimInfo2; stdcall;
    function  GetReactionSendEmailAction(const id: guid): ReactionSendEmailActionSlimInfo2; stdcall;
    function  GetReactionExecuteProgramAction(const id: guid): ReactionExecuteProgramActionSlimInfo2; stdcall;
    function  GetReactionRecordVideoAction(const id: guid): ReactionRecordVideoActionSlimInfo2; stdcall;
    function  GetReports(const reportIdentity: string): ArrayOfReportSlimInfo; stdcall;
    function  GetDriversOfReportParameters(const reportId: guid): ArrayOfguid; stdcall;
    function  GetLogMessageSubtypesOfReportParameters(const id: guid): ArrayOfLogMsgSubType; stdcall;
    function  GetEmployeesOfReportParameters(const reportId: guid; const isShowRemoved: Boolean): ArrayOfguid; stdcall;
    function  GetEmployeeGroupsOfReportParameters(const reportId: guid; const isShowRemoved: Boolean): ArrayOfguid; stdcall;
    function  GetWorkZonesOfReportParameters(const reportId: guid): ArrayOfguid; stdcall;
    function  GetIncidentTypeOfReportParameters(const reportId: guid): ArrayOfIncidentTypeInfo; stdcall;
    function  GetIncidentStatisticReport(const incidentStatisticData: IncidentStatisticData2; const extension: Extension): TArray<System.Byte>; stdcall;
    function  GetIncidentStatisticReportByWeek(const incidentStatisticData: IncidentStatisticData2; const extension: Extension): TArray<System.Byte>; stdcall;
    function  GetEmployeesOfReactionEvent(const eventId: guid): ArrayOfguid; stdcall;
    function  GetEmployeeGroupsOfReactionEvent(const eventId: guid): ArrayOfguid; stdcall;
    function  GetDriversOfReactionEvent(const eventId: guid): ArrayOfguid; stdcall;
    function  GetLogMessageSubtypesOfReactionEvent(const id: guid): ArrayOfLogMsgSubType; stdcall;
    function  GetSwitchedOffLogMessageSubtypesOfWorkplace(const id: guid): ArrayOfLogMsgSubType; stdcall;
    function  GetSwitchedOffLogDriversOfWorkplace(const id: guid): ArrayOfguid; stdcall;
    function  GetRemoteTerminalInfoByWorkplaceModuleId(const moduleId: guid): RemoteTerminalInfo2; stdcall;
    function  GetReactionEventsFromDevices(const id: guid): ReactionEventsFromDevicesSlimInfo2; stdcall;
    function  GetLicense(const moduleID: string; const elementID: string): License2; stdcall;
    function  GetAcsEmployeeIDsByTableNumbers(const tableNumbers: ArrayOfint): ArrayOfguid; stdcall;
    function  GetAcsEmployeesDocuments(const id: guid): AcsEmployeeDocumentsData2; stdcall;
    function  GetAcsEmployeePhotoInfos(const includeRemovedEmployees: Boolean): ArrayOfAcsEmployeePhotosInfo; stdcall;
    function  GetAcsEmployeePhoto(const employeeId: guid; const photoNumber: Integer): TArray<System.Byte>; stdcall;
    function  GetAcsEmployeePhotoByType(const employeeId: guid; const photoNumber: Integer; const imageType: EmployeeImageType): TArray<System.Byte>; stdcall;
    function  GetEmployeesByAccessLevel(const accessLevelId: guid): ArrayOfEmployeeShortInfo; stdcall;
    function  GetAcsKeysForEmployee(const employeeId: guid): ArrayOfAcsKeyInfo; stdcall;
    function  GetAssignedAcsKeyByKeyNumber(const keyNumber: Int64): AcsKeyInfo2; stdcall;
    function  GetAcsKeysForEmployeeWithLost(const employeeId: guid; const withLost: Boolean): ArrayOfAcsKeyInfo; stdcall;
    function  GetAcsKeysForEmployeeWithLostIncludeRemovedEmployees(const employeeId: guid; const withLost: Boolean; const includeRemovedEmployees: Boolean): ArrayOfAcsKeyInfo; stdcall;
    function  FindEmployees(const searchCondition: SearchCondition2): ArrayOfAcsEmployee; stdcall;
    function  FindGroups(const name_: string; const typeSearch: GroupTypeSearch): ArrayOfguid; stdcall;
    function  FindVehicle(const name_: string; const typeSearch: VehicleTypeSearch): ArrayOfAcsVehicleSearched; stdcall;
    function  GetUnResolvedPhotoBankDetails: ArrayOfPhotoBankShort; stdcall;
    function  GetPhoto(const idPhotoBankEntity: Int64): PhotoBank2; stdcall;
    procedure ResolvePhotoBankEntity(const idPhotoBankEntity: Int64); stdcall;
    function  GetAcsVehiclesByGroup(const groupIds: ArrayOfguid; const isShowRemoved: Boolean): ArrayOfAcsVehicle; stdcall;
    function  GetAcsVehiclesGuidsByGroups(const groupIds: ArrayOfguid; const isShowRemoved: Boolean): ArrayOfguid; stdcall;
    function  GetAcsVehicle(const id: guid; const includeRemoved: Boolean): AcsVehicle2; stdcall;
    function  GetWorkTimeTable(const workScheduleId: guid; const filterDateTime: TXSDateTime): ArrayOfWorkTimetableSlimInfo; stdcall;
    function  GetEmployeeTimeTable(const employeeId: guid; const filterDateTime: TXSDateTime): ArrayOfWorkTimetableSlimInfo; stdcall;
    function  GetDayTypesSlimInfo: ArrayOfDayTypeSlimInfo; stdcall;
    function  GetWorkSchedulesSlimInfo: ArrayOfWorkScheduleSlimInfo; stdcall;
    function  GetWorkZonesSlimInfo: ArrayOfWorkZoneSlimInfo; stdcall;
    function  GetWorkZonesAccessPoints(const workZoneId: guid): ArrayOfWorkZonesAccessPointSlimInfo; stdcall;
    function  GetAcsBoxAccessElements(const boxAccessLevelId: guid): ArrayOfAcsBoxAccessLevelElementSlimInfo; stdcall;
    function  GetAcsBoxAccessLevelsSlimInfo: ArrayOfAcsBoxAccessLevelSlimInfo; stdcall;
    function  GetAcsAccessLevelsSlimInfo: ArrayOfAcsAccessLevelSlimInfo; stdcall;
    function  GetAlcoGroupsSlimInfo: ArrayOfAcsAlcoGroupSlimInfo; stdcall;
    function  GetEmployeePostionsForAlcoGroup(const groupID: guid): ArrayOfEmployeePositionSlimInfo; stdcall;
    function  GetPositionCodes(const alcoGroupId: guid): ArrayOfstring; stdcall;
    function  GetEmployeeGroupsForAlcoGroup(const groupID: guid): ArrayOfEmployeeGroupForAlcoGroupFull; stdcall;
    function  GetAcsAccessPointDrivers: ArrayOfAcsAccessPointDriverInfo; stdcall;
    function  GetAcsAccessPoints(const accessLevelId: guid): ArrayOfAcsAccessPointSlimInfo; stdcall;
    function  GeFilteredtDrivers(const searchString: string; const pageNumber: Integer; const pageSize: Integer; const sortType: AccessPointSortType; const sortOrder: SortOrder): AccessPointData2; stdcall;
    function  GetWorkZonesByDriverID(const driverID: guid): ArrayOfWorkZoneSlimInfo; stdcall;
    function  GetWorkZonesByEmployeeID(const employeeID: guid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: WorkZoneSortedColumn; const sortOrder: SortOrder; const workZonesOwner: WorkZonesOwner
                                       ): WorkZonesData2; stdcall;
    function  GetWorkZonesByEmployeeIDIncludeRemovedEmployees(const employeeID: guid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: WorkZoneSortedColumn; const sortOrder: SortOrder; const workZonesOwner: WorkZonesOwner;
                                                              const includeRemovedEmployees: Boolean): WorkZonesData2; stdcall;
    function  GetWorkZonesByEmployeeGroupID(const employeeGroupID: guid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: WorkZoneSortedColumn; const sortOrder: SortOrder; const workZonessOwner: WorkZonesOwner
                                            ): WorkZonesData2; stdcall;
    function  GetWorkSchedulesByEmployeeID(const employeeID: guid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: WorkScheduleSortedColumn; const sortOrder: SortOrder; const workSchedulesOwner: WorkSchedulesOwner
                                           ): WorkSchedulesData2; stdcall;
    function  GetWorkSchedulesByEmployeeIDIncludeRemovedEmployees(const employeeID: guid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: WorkScheduleSortedColumn; const sortOrder: SortOrder; const workSchedulesOwner: WorkSchedulesOwner;
                                                                  const includeRemovedEmployees: Boolean): WorkSchedulesData2; stdcall;
    function  GetWorkSchedulesByEmployeeGroupID(const employeeGroupID: guid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: WorkScheduleSortedColumn; const sortOrder: SortOrder; const workSchedulesOwner: WorkSchedulesOwner
                                                ): WorkSchedulesData2; stdcall;
    function  GetEmployeeForAlcoGroup(const alcoGroupId: guid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: EmployeeSortedColumn; const sortOrder: SortOrder; const isCountingEmployeesEveryTime: Boolean
                                      ): EmployeesInfoData3; stdcall;
    function  GetWorkplaces: ArrayOfWorkplaceInfo; stdcall;
    function  GetISS_IIDKs: ArrayOfISS_IIDK_SlimInfo; stdcall;
    function  GetISS_Recognition: ArrayOfISS_Recognition_SlimInfo; stdcall;
    function  GetISS_Drivers(const integrationPointId: guid): ArrayOfISS_Driver_SlimInfo; stdcall;
    function  GetISS_IIDK_Slaves(const iidkId: guid): ArrayOfISS_Slave_SlimInfo; stdcall;
    function  Get_ISS_DriverEventsPlayback(const driverId: Integer): ArrayOfISS_DriverEventPlaybackSlimInfo; stdcall;
    function  GetAllMaps(const mapsWorkplaceModuleId: guid): ArrayOfMapInfo; stdcall;
    function  GetMapById(const id: guid): MapInfo2; stdcall;
    function  GetMapImage(const id: guid): TArray<System.Byte>; stdcall;
    function  GetAcsConfiguratorSettingsByWorkplaceModule(const id: guid): AcsConfiguratorInfo2; stdcall;
    function  GetVisitorsScoreboardSettingsByWorkplaceModuleId(const moduleId: guid): VisitorsScoreboardWorkplaceModuleInfo2; stdcall;
    procedure SetVisitorsScoreboardSettingsByWorkplaceModuleId(const moduleId: guid; const saveData: VisitorsScoreboardWorkplaceModuleSaveData2); stdcall;
    function  GetWorkZoneVisitorsCount(const workZoneID: guid): WorkZoneVisitorsCountDTO2; stdcall;
    function  GetUidsKeys: ArrayOfUidKeyInfo; stdcall;
    function  GetKeyByUid(const uid: string): UidKeyInfo2; stdcall;
    function  GenerateKey: Int64; stdcall;
    function  GetMifareProfiles(const filter: ProfileTypeFilter): ArrayOfMifareProfileInfo; stdcall;
    function  GetMifareProfilesFullInfo(const id: guid): MifareProfileFullInfo2; stdcall;
    function  GetScreenLayoutForWorkplaceModule(const moduleId: guid): ScreenLayoutInfo2; stdcall;
    function  GetScreenCellPhotoIdentificationContent(const cellId: guid): CellContentFotoIdentificationInfo2; stdcall;
    function  GetScreenCellCameraContent(const cellId: guid): CellContentCameraInfo2; stdcall;
    function  GetIvideonCameraDrivers: ArrayOfIvideonCameraDriverInfo; stdcall;
    function  GetPhotoidentificationPersonalData(const cellId: guid): ArrayOfPhotoidentificationPersonalData; stdcall;
    function  GetEmailAddresses(const owner: EmailAddressOwner; const ownerId: guid): ArrayOfEmailAddressInfo; stdcall;
    function  GetEmailAddressesIncludeRemovedEmployees(const owner: EmailAddressOwner; const ownerId: guid; const includeRemovedEmployees: Boolean): ArrayOfEmailAddressInfo; stdcall;
    function  GetPhoneNumbers(const owner: PhoneNumberOwner; const ownerId: guid): ArrayOfPhoneNumberInfo; stdcall;
    function  GetPhoneNumbersIncludeRemovedEmployees(const owner: PhoneNumberOwner; const ownerId: guid; const includeRemovedEmployees: Boolean): ArrayOfPhoneNumberInfo; stdcall;
    function  GetEmployeeSchedules(const employeeId: guid): ArrayOfAcsEmployeeSchedule; stdcall;
    function  GetEmployeeSchedulesIncludeRemovedEmployees(const employeeId: guid; const includeRemovedEmployees: Boolean): ArrayOfAcsEmployeeSchedule; stdcall;
    function  GetEmailDistributionAddresses: ArrayOfEmailDistributionAddressInfo; stdcall;
    procedure SendEmail(const emailDistributionAddressId: guid; const subject: string; const message_: string; const toEmailAddress: string); stdcall;
    function  GetFields(const ownerType: OwnerFieldType): ArrayOfAdditionalFieldBase; stdcall;
    function  GetAdditionalFieldsValue(const ownerType: OwnerFieldType; const ownerId: guid): ArrayOfAdditionalFieldValue; stdcall;
    function  GetAdditionalFields(const ownerType: OwnerFieldType; const ownerId: guid; const savedFieldContext: SavedFieldContext): ArrayOfAdditionalFieldValue; stdcall;
    function  GetAdditionalFieldsValueForOwners(const ownerType: OwnerFieldType; const ownerIds: ArrayOfguid): ArrayOfOwnerAdditionalFieldsValue; stdcall;
    function  GetAdditionalFieldsForOwners(const ownerType: OwnerFieldType; const ownerIds: ArrayOfguid; const savedFieldContext: SavedFieldContext): ArrayOfOwnerAdditionalFieldsValue; stdcall;
    function  GetPhotoOrders(const ownerType: OwnerFieldType): ArrayOfPhotoOrder; stdcall;
    function  GetTagsByMifareProfileID(const mifareID: guid): ArrayOfMifareProfileTagsData; stdcall;
    function  GetTagsByReportID(const reportID: guid): ArrayOfReportTagsData; stdcall;
    function  GetTagsByEmployeeGroupID(const employeeGroupID: guid; const isShowRemoved: Boolean): ArrayOfEmployeeGroupTagsData; stdcall;
    function  GetTagsByAccessLevelID(const accessLevelID: guid): ArrayOfAccessLevelTagsData; stdcall;
    function  GetTagsByBoxAccessLevelID(const accessLevelID: guid): ArrayOfBoxAccessLevelTagsData; stdcall;
    function  GetVariable(const name_: string): VariableInfo2; stdcall;
    function  GetChildrenNets(const id: guid): ArrayOfLNetInfo; stdcall;
    function  GetAllNets: ArrayOfLNetInfo; stdcall;
    function  GetLocalNet: LNetInfo2; stdcall;
    function  GetNetServers(const id: guid): ArrayOfLServerInfo; stdcall;
    function  GetServer(const id: guid): LServerInfo2; stdcall;
    function  GetRootServerDrivers(const serverId: guid): ArrayOfLDriverFullInfo; stdcall;
    function  GetDriversByType(const serverId: guid; const driverType: string; const property_: LProperty2): ArrayOfLDriverFullInfo; stdcall;
    function  GetServerDriversFullInfo(const serverID: guid; const workplaceModuleId: guid): ArrayOfLDriverFullInfo; stdcall;
    function  GetNetworkChanges(const connectionId: guid): LNetworkChanges2; stdcall;
    function  GetDriver(const driverID: guid): LDriverFullInfo2; stdcall;
    function  GetLogMessageTypes: ArrayOfLogMessageTypeSlimInfo; stdcall;
    function  GetLogMessageSubtypes: ArrayOfLogMessageSubtypeSlimInfo; stdcall;
    function  GetEvents(const fromMessageId: Int64; const fromDateTime: TXSDateTime; const toDateTime: TXSDateTime; const msgTypes: ArrayOfLogMsgType; const msgSubTypes: ArrayOfLogMsgSubType; const subjectIDs: ArrayOfguid;
                        const subjectType: LogSubjectType; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: LogMessageSortedColumn; const sortOrder: SortOrder
                        ): LogData2; stdcall;
    function  GetLastEvent(const msgTypes: ArrayOfLogMsgType; const msgSubTypes: ArrayOfLogMsgSubType; const subjectIDs: ArrayOfguid; const subjectType: LogSubjectType): LogData2; stdcall;
    function  GetEventsByDeviceIDs(const fromMessageId: Int64; const fromDateTime: TXSDateTime; const toDateTime: TXSDateTime; const msgTypes: ArrayOfLogMsgType; const msgSubTypes: ArrayOfLogMsgSubType; const deviceIDs: ArrayOfguid;
                                   const subjectIDs: ArrayOfguid; const subjectType: LogSubjectType; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: LogMessageSortedColumn;
                                   const sortOrder: SortOrder): LogData2; stdcall;
    function  GetFilteredEvents(const fromMessageId: Int64; const fromDateTime: TXSDateTime; const toDateTime: TXSDateTime; const msgTypes: ArrayOfLogMsgType; const msgSubTypes: ArrayOfLogMsgSubType; const deviceIDs: ArrayOfguid;
                                const subjectIDs: ArrayOfguid; const subjectType: LogSubjectType; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: LogMessageSortedColumn;
                                const sortOrder: SortOrder; const isShowEventsWithRelatedData: Boolean; const subjectIDs2: ArrayOfguid; const subjectType2: LogSubjectType; const isShowRemovedEmployes: Boolean;
                                const isEmptyConsider: Boolean; const isReturnLogCount: Boolean): LogData2; stdcall;
    function  GetLastEventByDeviceIDs(const msgTypes: ArrayOfLogMsgType; const msgSubTypes: ArrayOfLogMsgSubType; const deviceIDs: ArrayOfguid; const subjectIDs: ArrayOfguid; const subjectType: LogSubjectType): LogData2; stdcall;
    function  GetEventsByDeviceTypes(const fromMessageId: Int64; const fromDateTime: TXSDateTime; const toDateTime: TXSDateTime; const msgTypes: ArrayOfLogMsgType; const msgSubTypes: ArrayOfLogMsgSubType; const deviceTypes: ArrayOfstring;
                                     const subjectIDs: ArrayOfguid; const subjectType: LogSubjectType; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: LogMessageSortedColumn;
                                     const sortOrder: SortOrder): LogData2; stdcall;
    function  GetLastEventByDeviceTypes(const msgTypes: ArrayOfLogMsgType; const msgSubTypes: ArrayOfLogMsgSubType; const deviceTypes: ArrayOfstring; const subjectIDs: ArrayOfguid; const subjectType: LogSubjectType): LogData2; stdcall;
    function  GetUser(const id: guid): LUser2; stdcall;
    function  GetOperator(const login: string): LUser2; stdcall;
    function  GetUsers(const pageNumber: Integer; const pageSize: Integer; const sortedColumn: UserSortedColumn; const sortOrder: SortOrder): LUsersData2; stdcall;
    function  GetUserGroup(const id: guid): LUserGroup2; stdcall;
    function  GetUserGroups(const pageNumber: Integer; const pageSize: Integer; const sortedColumn: UserGroupSortedColumn; const sortOrder: SortOrder): LUserGroupsData2; stdcall;
    function  GetUserGroupsByUserID(const userID: guid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: UserGroupSortedColumn; const sortOrder: SortOrder): LUserGroupsData2; stdcall;
    function  GetUsersByUserGroupID(const userGroupID: guid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: UserSortedColumn; const sortOrder: SortOrder): LUsersData2; stdcall;
    function  GetClaim(const claimId: guid): ClaimInfo2; stdcall;
    function  GetClaimsForUserGroup(const userGroupId: guid): ArrayOfClaimInfo; stdcall;
    function  GetClaimsForUserByUserId(const userId: guid): ArrayOfClaimInfo; stdcall;
    function  GetClaimsForUserByUserLogin(const login: string): ArrayOfClaimInfo; stdcall;
    function  GetAcsDaySchedules: ArrayOfAcsDaySchedule; stdcall;
    function  GetAcsDaySchedulesByOwner(const owner: AcsScheduleOwnerType): ArrayOfAcsDaySchedule; stdcall;
    function  GetAcsDaySchedule(const id: guid): AcsDaySchedule2; stdcall;
    function  GetAcsDayScheduleByOwner(const id: guid; const owner: AcsScheduleOwnerType): AcsDaySchedule2; stdcall;
    function  GetAcsMultiDaySchedules: ArrayOfAcsMultiDaySchedule; stdcall;
    function  GetAcsMultiDaySchedule(const id: guid): AcsMultiDaySchedule2; stdcall;
    function  GetAcsWeekSlimSchedules: ArrayOfAcsWeekScheduleSlim; stdcall;
    function  GetAcsWeekFullSchedules: ArrayOfAcsWeekScheduleFull; stdcall;
    function  GetAcsWeekSchedule(const id: guid): AcsWeekScheduleFull2; stdcall;
    function  GetAcsCustomDays: ArrayOfAcsCustomDay; stdcall;
    function  GetAcsCustomDay(const id: guid): AcsCustomDay2; stdcall;
    function  GetAcsWorkDaysWithTransfer: ArrayOfAcsWorkDayWithTransfer; stdcall;
    function  GetAcsWorkDayWithTransfer(const id: guid): AcsWorkDayWithTransfer2; stdcall;
    function  GetDictionaryElement(const id: guid; const type_: DictionaryType): DictionaryElementInfo2; stdcall;
    function  GetDictionaryElements(const pageNumber: Integer; const pageSize: Integer; const sortedColumn: DictionaryElementSortedColumn; const sortOrder: SortOrder; const type_: DictionaryType; const isIgnoreIncientRigths: Boolean
                                    ): DictionaryElementsInfoData2; stdcall;
    function  GetCardType(const id: guid): CardTypeInfo2; stdcall;
    function  GetIncidents(const pageNumber: Integer; const pageSize: Integer; const sortedColumn: IncidentSortedColumn; const sortOrder: SortOrder; const filter: IncidentsFilter2): IncidentsInfoData2; stdcall;
    function  GetIncident(const id: guid): IncidentElementFullInfo2; stdcall;
    function  SearchFirebirdIncidents(const filter: ViolatorFilter2): ArrayOfFirebirdIncidentEventsResult; stdcall;
    function  FindViolationByEmployee(const violatorFilter: ViolatorFilter2): ArrayOfViolation; stdcall;
    function  GetIncidentTemplates: ArrayOfIncidentTemplateInfo; stdcall;
    function  GetOrganizationForEmployee(const employeeId: guid): ArrayOfDictionaryElementInfo; stdcall;
    function  GetSubdivisionsForEmployee(const employeeId: guid; const organizationId: guid): ArrayOfDictionaryElementInfo; stdcall;
    function  GetOrganizationAssignmentsForEmployee(const vehicleId: guid): ArrayOfEmployee2OrganizationAssignmentFull; stdcall;
    function  GetOrganizationAssignmentsForEmployeeIncludeRemovedEmployees(const vehicleId: guid; const includeRemovedEmployees: Boolean): ArrayOfEmployee2OrganizationAssignmentFull; stdcall;
    function  GetOrganizationForVehicle(const vehicleId: guid): ArrayOfDictionaryElementInfo; stdcall;
    function  GetSubdivisionsForVehicle(const vehicleId: guid; const organizationId: guid): ArrayOfDictionaryElementInfo; stdcall;
    function  GetOrganizationAssignmentsForVehicle(const vehicleId: guid; const includeRemoved: Boolean): ArrayOfEmployee2OrganizationAssignmentFull; stdcall;
    function  GetCardTypes(const pageNumber: Integer; const pageSize: Integer; const sortedColumn: CardTypeSortedColumn; const sortOrder: SortOrder): CardTypesInfoData2; stdcall;
    function  GetEmployeePosition(const id: guid): LEmployeePositionInfo2; stdcall;
    function  GetEmployeePositions(const pageNumber: Integer; const pageSize: Integer; const sortedColumn: EmployeePositionSortedColumn; const sortOrder: SortOrder): LEmployeePositionsData2; stdcall;
    function  GetEmployeePositionsForIncident(const pageNumber: Integer; const pageSize: Integer; const sortedColumn: EmployeePositionSortedColumn; const sortOrder: SortOrder): LEmployeePositionsData2; stdcall;
    function  GetAcsEmployeeGroupsFull(const includeRemoved: Boolean): ArrayOfAcsEmployeeGroup; stdcall;
    function  GetAcsEmployeeGroups: ArrayOfAcsEmployeeGroup; stdcall;
    function  GetViolatorAcsEmployeeGroup: AcsEmployeeGroup2; stdcall;
    function  GetAcsEmployeeGroupsByTags(const tagsIds: ArrayOfguid; const withoutTags: Boolean): ArrayOfAcsEmployeeGroup; stdcall;
    function  GetAcsEmployeeGroup(const id: guid): AcsEmployeeGroup2; stdcall;
    function  GetAcsEmployeeGroupsForReportParameters(const reportId: guid; const isShowRemoved: Boolean): ArrayOfAcsEmployeeGroupReportInfo; stdcall;
    function  GetAcsEmployeeGroupsForReactionEvent(const reactionEventId: guid): ArrayOfAcsEmployeeGroupReactionInfo; stdcall;
    function  GetAcsEmployeeGroupsForReactionAction(const reactionActiond: guid): ArrayOfAcsEmployeeGroupReactionInfo; stdcall;
    function  GetAcsEmployeesByGroup(const groupId: guid; const isShowRemoved: Boolean): ArrayOfAcsEmployeeSlim; stdcall;
    function  GetAcsEmployees(const pageNumber: Integer; const pageSize: Integer; const sortedColumn: EmployeeSortedColumn; const sortOrder: SortOrder; const isShowRemoved: Boolean; const securityGroupIds: ArrayOfguid;
                              const isCountingEmployeesEveryTime: Boolean): EmployeesInfoData22; stdcall;
    function  GetEmployeeFaceById(const faceId: guid): AcsEmployeeFaceVectorFull2; stdcall;
    function  GetEmployeeFaces(const employeeId: guid): ArrayOfAcsEmployeeFaceVector; stdcall;
    function  GetEmployeeFacesIncludeRemovedEmployees(const employeeId: guid; const includeRemovedEmployees: Boolean): ArrayOfAcsEmployeeFaceVector; stdcall;
    function  GetEmployeeFacesFull(const employeeId: guid): ArrayOfAcsEmployeeFaceVectorFull; stdcall;
    function  GetAcsEmployeesByGroups(const groupIds: ArrayOfguid; const isShowRemoved: Boolean): ArrayOfAcsEmployeeSlim; stdcall;
    function  GetListAcsEmployeesByGroup(const groupIds: ArrayOfguid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: EmployeeSortedColumn; const sortOrder: SortOrder; const isCountingEmployeesEveryTime: Boolean;
                                         const foundEmployeeId: guid; const isShowRemoved: Boolean): EmployeesInfoData3; stdcall;
    function  GetAcsEmployeesGuidsByGroups(const groupIds: ArrayOfguid; const isShowRemoved: Boolean): ArrayOfguid; stdcall;
    function  GetAcsEmployee(const id: guid): AcsEmployeeFull2; stdcall;
    function  GetAcsEmployeeForRemoteTerminal(const keyNumber: Int64; const remoteTerminalModuleId: guid; const withPhoto: Boolean): EmployeeInfo2; stdcall;
    function  GeEmployeesView(const ids: ArrayOfguid): GeEmployeesViewResult; stdcall;
    function  GeEmployeesViewMetadata: ArrayOfEmployeeViewFieldMetadata; stdcall;
    function  GetAcsEmployeesByTableNumbers(const tableNumbers: ArrayOfint): ArrayOfAcsEmployeeFull; stdcall;
    function  Connect: guid; stdcall;
    procedure Disconnect(const connectionId: guid); stdcall;
    function  GetNotification(const connectionId: guid): NotificationInfo2; stdcall;
    procedure Process(const operation: Operation2; const connectionId: guid); stdcall;
    function  IsSessionExists(const guid: guid): Boolean; stdcall;
  end;


  // ************************************************************************ //
  // Namespace : http://www.rusguardsecurity.ru
  // soapAction: http://www.rusguardsecurity.ru/ILMonitoringService/Ping
  // transport : http://schemas.xmlsoap.org/soap/http
  // style     : document
  // use       : literal
  // binding   : BasicHttpBinding_ILMonitoringService
  // service   : LNetworkService
  // port      : BasicHttpBinding_ILMonitoringService
  // URL       : http://desktop-sq44e9v/LNetworkServer/LNetworkService.svc
  // ************************************************************************ //
  ILMonitoringService = interface(IInvokable)
  ['{0AEE0773-AAB5-5D10-6BD6-D61D43F46347}']
    procedure Ping; stdcall;
  end;


  // ************************************************************************ //
  // Namespace : http://www.rusguardsecurity.ru
  // soapAction: http://www.rusguardsecurity.ru/ILSubnetworkSubscribeService/ProcessSubnetworkStateChanged
  // transport : http://schemas.xmlsoap.org/soap/http
  // style     : document
  // use       : literal
  // binding   : BasicHttpBinding_ILSubnetworkSubscribeService
  // service   : LNetworkService
  // port      : BasicHttpBinding_ILSubnetworkSubscribeService
  // URL       : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc
  // ************************************************************************ //
  ILSubnetworkSubscribeService = interface(IInvokable)
  ['{C522A562-F3D1-946F-61FE-D6FF2C276CCD}']
    procedure ProcessSubnetworkStateChanged(const subnetworkId: guid); stdcall;
  end;


  // ************************************************************************ //
  // Namespace : http://www.rusguardsecurity.ru
  // soapAction: http://www.rusguardsecurity.ru/ILNetworkConfigurationService/%operationName%
  // transport : http://schemas.xmlsoap.org/soap/http
  // style     : document
  // use       : literal
  // binding   : BasicHttpBinding_ILNetworkConfigurationService
  // service   : LNetworkService
  // port      : BasicHttpBinding_ILNetworkConfigurationService
  // URL       : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc
  // ************************************************************************ //
  ILNetworkConfigurationService = interface(IInvokable)
  ['{25402483-14DC-6683-508C-7B004F95D724}']
    procedure RemoveFavoriteFolderByWorkplace(const workplaceId: guid; const id: guid); stdcall;
    procedure RemoveEmployeeGroupFromFavoriteFolder(const employeeGroupID: guid; const favoriteFolderID: guid); stdcall;
    procedure SetEmployeeGroupToFavoriteFolder(const userId: guid; const employeeGroupID: guid; const favoriteFolderID: guid; const name_: string; const path: string); stdcall;
    procedure SetEmployeeGroupToFavoriteFolderByWorkplace(const workplaceId: guid; const employeeGroupID: guid; const favoriteFolderID: guid; const name_: string; const path: string); stdcall;
    function  AddTag(const data: TagSaveData2): guid; stdcall;
    procedure SaveTag(const id: guid; const data: TagSaveData2); stdcall;
    procedure RemoveTag(const id: guid); stdcall;
    function  AddUserPass(const data: UserPassSlimSaveData2): guid; stdcall;
    procedure SaveUserPass(const id: guid; const data: UserPassSlimSaveData2); stdcall;
    procedure SaveUserPassFull(const id: guid; const data: UserPassFullSaveData2); stdcall;
    procedure RemoveUserPass(const id: guid); stdcall;
    function  SetUserPassEditor(const passID: guid; const data: UserPassEditorData2): guid; stdcall;
    procedure RemoveUserPassEditor(const id: guid); stdcall;
    function  AddReaction(const data: ReactionSaveData2): guid; stdcall;
    procedure SaveReaction(const id: guid; const data: ReactionSaveData2); stdcall;
    procedure RemoveReaction(const id: guid); stdcall;
    function  AddReactionAction(const reactionId: guid; const actionType: ReactionActionType; const data: ReactionActionSaveData2): guid; stdcall;
    procedure SaveReactionActionCommonData(const id: guid; const data: ReactionActionSaveData2); stdcall;
    procedure RemoveReactionActions(const actionIds: ArrayOfguid); stdcall;
    procedure AddEmployeesToReactionAction(const actionId: guid; const employeeIds: ArrayOfguid); stdcall;
    procedure RemoveEmployeesFromReactionAction(const actionId: guid; const employeeIds: ArrayOfguid); stdcall;
    procedure AddEmployeeGroupsToReactionAction(const actionId: guid; const employeeGroupIds: ArrayOfguid); stdcall;
    procedure RemoveEmployeeGroupsFromReactionAction(const actionId: guid; const employeeGroupIds: ArrayOfguid); stdcall;
    procedure SaveReactionSendSMSAction(const id: guid; const data: ReactionSendSMSActionSaveData2); stdcall;
    procedure SaveReactionSendEmailAction(const id: guid; const data: ReactionSendEmailActionSaveData2); stdcall;
    procedure SaveReactionExecuteProgramAction(const id: guid; const data: ReactionExecuteProgramActionSaveData2); stdcall;
    procedure SaveReactionRecordVideoAction(const id: guid; const data: ReactionRecordVideoActionSaveData2); stdcall;
    function  AddReport(const data: ReportSaveData2; const tagIDs: ArrayOfguid): guid; stdcall;
    procedure SaveReport(const id: guid; const data: ReportSaveData2; const tagIDs: ArrayOfguid); stdcall;
    procedure RemoveReport(const id: guid); stdcall;
    procedure RemoveDriversFromReportParameters(const reportId: guid; const driverIds: ArrayOfguid); stdcall;
    procedure AddDriversToReportParameters(const reportId: guid; const driverIds: ArrayOfguid); stdcall;
    procedure RemoveLogMessageSubtypesFromReportParameters(const reportId: guid; const subtypes: ArrayOfLogMsgSubType); stdcall;
    procedure AddLogMessageSubtypesToReportParameters(const reportId: guid; const subtypes: ArrayOfLogMsgSubType); stdcall;
    procedure AddEmployeeGroupsToReportParameters(const reportId: guid; const employeeGroupIds: ArrayOfguid); stdcall;
    procedure RemoveEmployeeGroupsFromReportParameters(const reportId: guid; const employeeGroupIds: ArrayOfguid); stdcall;
    procedure AddEmployeesToReportParameters(const reportId: guid; const employeeIds: ArrayOfguid); stdcall;
    procedure RemoveEmployeesFromReportParameters(const reportId: guid; const employeeIds: ArrayOfguid); stdcall;
    procedure AddWorkZonesToReportParameters(const reportId: guid; const workZoneIds: ArrayOfguid); stdcall;
    procedure RemoveWorkZonesFromReportParameters(const reportId: guid; const workZoneIds: ArrayOfguid); stdcall;
    function  AddReactionEvent(const reactionId: guid; const eventType: ReactionEventType; const data: ReactionEventSaveData2): guid; stdcall;
    procedure SaveReactionEventCommonData(const id: guid; const data: ReactionEventSaveData2); stdcall;
    procedure RemoveReactionEvents(const eventIds: ArrayOfguid); stdcall;
    procedure AddEmployeesToReactionEvent(const eventId: guid; const employeeIds: ArrayOfguid); stdcall;
    procedure RemoveEmployeesFromReactionEvent(const eventId: guid; const employeeIds: ArrayOfguid); stdcall;
    procedure AddEmployeeGroupsToReactionEvent(const eventId: guid; const employeeGroupIds: ArrayOfguid); stdcall;
    procedure RemoveEmployeeGroupsFromReactionEvent(const eventId: guid; const employeeGroupIds: ArrayOfguid); stdcall;
    procedure AddDriversToReactionEvent(const eventId: guid; const driverIds: ArrayOfguid); stdcall;
    procedure RemoveDriversFromReactionEvent(const eventId: guid; const driverIds: ArrayOfguid); stdcall;
    procedure AddLogMessageSubtypesToReactionEvent(const eventId: guid; const subtypes: ArrayOfLogMsgSubType); stdcall;
    procedure RemoveLogMessageSubtypesFromReactionEvent(const eventId: guid; const subtypes: ArrayOfLogMsgSubType); stdcall;
    procedure AddSwitchedOffLogMessageSubtypesToWorkplace(const workplaceId: guid; const subtypes: ArrayOfLogMsgSubType); stdcall;
    procedure RemoveSwitchedOffLogMessageSubtypesFromWorkplace(const workplaceId: guid; const subtypes: ArrayOfLogMsgSubType); stdcall;
    procedure SetRemoteTerminalSettingsByWorkplaceModuleId(const moduleId: guid; const saveData: RemoteTerminalSaveData2); stdcall;
    procedure AddSwitchedOffLogDriversToWorkplace(const workplaceId: guid; const driverIds: ArrayOfguid); stdcall;
    procedure RemoveSwitchedOffLogDriversFromWorkplace(const workplaceId: guid; const driverIds: ArrayOfguid); stdcall;
    procedure SaveReactionEventsFromDevices(const id: guid; const data: ReactionEventsFromDevicesSaveData2); stdcall;
    function  GetViolationPlan(const group: guid): ArrayOfPlanModel; stdcall;
    function  SetViolationPlan(const group: guid; const plan: ArrayOfPlanModel): Boolean; stdcall;
    procedure UpdateDriverFigureOnTheMap(const driverFigureId: guid; const data: DriverFigureSaveData2); stdcall;
    procedure RemoveDriverFigureFromMap(const driverFigureId: guid); stdcall;
    procedure SetAcsConfiguratorSettingsByWorkplaceModule(const id: guid; const data: AcsConfiguratorSaveData2); stdcall;
    function  GetReportingServicesUrl: ReportingServicesData2; stdcall;
    procedure SetIncidentTypeToReportParameters(const reportId: guid; const incidentTypeIds: ArrayOfguid; const isImportant: Boolean); stdcall;
    procedure AddWorkSchedulesToEmployee(const employeeID: guid; const workScheduleIDs: ArrayOfguid; const partOfCreateOperation: Boolean); stdcall;
    procedure AddWorkSchedulesToEmployeeGroup(const employeeGroupID: guid; const workScheduleIDs: ArrayOfguid); stdcall;
    procedure RemoveWorkSchedulesFromEmployee(const employeeID: guid; const workScheduleIDs: ArrayOfguid); stdcall;
    procedure RemoveWorkSchedulesFromEmployeeGroup(const employeeGroupID: guid; const workScheduleIDs: ArrayOfguid); stdcall;
    procedure SetUseEmployeeParentWorkSchedule(const employeeID: guid; const isUseParentWorkSchedule: Boolean; const partOfCreateOperation: Boolean); stdcall;
    procedure SetUseEmployeeGroupParentWorkSchedule(const employeeGroupID: guid; const isUseParentWorkSchedule: Boolean; const partOfCreateOperation: Boolean); stdcall;
    procedure AddWorkZonesToEmployee(const employeeID: guid; const workZoneIDs: ArrayOfguid; const partOfCreateOperation: Boolean); stdcall;
    procedure AddWorkZonesToEmployeeGroup(const employeeGroupID: guid; const workZoneIDs: ArrayOfguid); stdcall;
    procedure RemoveWorkZoneFromEmployee(const employeeID: guid; const workZoneIDs: ArrayOfguid); stdcall;
    procedure RemoveWorkZoneFromEmployeeGroup(const employeeGroupID: guid; const workZoneIDs: ArrayOfguid); stdcall;
    procedure SetUseEmployeeParentWorkZone(const employeeID: guid; const isUseParentWorkZone: Boolean; const partOfCreateOperation: Boolean); stdcall;
    procedure SetUseEmployeeGroupParentWorkZone(const employeeGroupID: guid; const isUseParentWorkZone: Boolean; const partOfCreateOperation: Boolean); stdcall;
    function  AddDayType(const data: DayTypeSaveData2): DayTypeSlimInfo2; stdcall;
    procedure SaveWorkTimtable(const workScheduleID: guid; const data: ArrayOfWorkTimetableSlimInfo); stdcall;
    procedure SaveEmployeeTimtable(const employeeID: guid; const data: ArrayOfWorkTimetableSlimInfo; const partOfCreateOperation: Boolean); stdcall;
    procedure SaveDayType(const id: guid; const data: DayTypeSaveData2); stdcall;
    procedure RemoveDayTypes(const ids: ArrayOfguid); stdcall;
    procedure DeleteWorkTimetable(const workScheduleId: guid; const beginDateTime: TXSDateTime); stdcall;
    procedure DeleteEmployeeTimetable(const employeeId: guid; const dates: ArrayOfdateTime; const partOfCreateOperation: Boolean); stdcall;
    procedure UpdateWorkTimeTable(const workScheduleID: guid; const data: ArrayOfWorkTimetableSlimInfo; const beginDate: TXSDateTime; const endDate: TXSDateTime); stdcall;
    procedure UpdateEmployeeTimeTable(const employeeID: guid; const data: ArrayOfWorkTimetableSlimInfo; const beginDate: TXSDateTime; const endDate: TXSDateTime); stdcall;
    function  AddWorkSchedule(const data: WorkScheduleSlimSaveData2): WorkScheduleSlimInfo2; stdcall;
    procedure SaveWorkSchedule(const id: guid; const data: WorkScheduleSlimSaveData2); stdcall;
    procedure RemoveWorkSchedules(const ids: ArrayOfguid); stdcall;
    function  AddWorkZone(const data: WorkZoneSlimSaveData2): WorkZoneSlimInfo2; stdcall;
    procedure RemoveWorkZones(const ids: ArrayOfguid); stdcall;
    procedure SaveWorkZone(const id: guid; const data: WorkZoneSlimSaveData2); stdcall;
    function  AddWorkZonesAccessPoint(const workZoneId: guid; const acsAccessPointDriverId: guid; const data: WorkZonesAccessPointSaveData2): WorkZonesAccessPointSlimInfo2; stdcall;
    procedure SaveWorkZonesAccessPoint(const accessPointId: guid; const data: WorkZonesAccessPointSaveData2); stdcall;
    procedure RemoveWorkZonesAccessPoint(const id: guid); stdcall;
    procedure SyncFaceX(const address: string; const port: Integer); stdcall;
    procedure ClearFaceX(const address: string; const port: Integer); stdcall;
    procedure RemoveISS_IIDKs(const ids: ArrayOfguid); stdcall;
    procedure RemoveISS_Recognition(const ids: ArrayOfguid); stdcall;
    procedure RemoveISS_Drivers(const ids: ArrayOfint); stdcall;
    procedure Save_ISS_IIDK(const id: guid; const data: ISS_IIDK_SaveData2); stdcall;
    procedure Save_ISS_Recognition(const id: guid; const data: ISS_Recognition_SaveData2); stdcall;
    procedure Save_ISS_Driver(const id: Integer; const data: ISS_Driver_SaveData2); stdcall;
    function  Add_ISS_IIDK(const data: ISS_IIDK_SaveData2): ISS_IIDK_SlimInfo2; stdcall;
    function  Add_ISS_Recognition(const data: ISS_Recognition_SaveData2): ISS_Recognition_SlimInfo2; stdcall;
    function  Add_ISS_Driver(const data: ISS_Driver_SaveData2): ISS_Driver_SlimInfo2; stdcall;
    procedure UpdateSecurOSConfiguration(const iidkId: guid); stdcall;
    function  GetSecureOSCameras(const iidkId: guid): ArrayOfArrayOfKeyValueOfstringstring; stdcall;
    procedure Add_ISS_DriverEventPlayback(const data: ISS_DriverEventPlaybackSaveData2); stdcall;
    procedure Remove_ISS_DriverEventPlayback(const data: ISS_DriverEventPlaybackSlimInfo2); stdcall;
    function  LoadPanasonicConfiguration(const deviceServerId: guid; const ip: string; const login: string; const password: string; const httpPort: Integer; const devType: Integer
                                         ): PanasonicCameraCollectionResult2; stdcall;
    function  UpdateBasIpDrivers(const serverID: guid; const resources: ArrayOfLResourcePropertyValues): ArrayOfLDriverFullInfo; stdcall;
    function  LoadNUUOConfiguration(const deviceServerId: guid; const ip: string; const login: string; const password: string; const port: Integer): NUUOArchiveServerCollectionResult2; stdcall;
    function  LoadServerConfiguration(const deviceServerId: guid; const serverName: string; const password: string): IvideonCameraCollectionResult2; stdcall;
    function  LoadPersonalCabinetConfiguration(const deviceServerId: guid; const login: string; const password: string): IvideonRemoteServerCollectionResult2; stdcall;
    function  BroadcastFindBasIpDevices(const deviceServerId: guid): ArrayOfIPAddress; stdcall;
    function  FindUsbCanConverters(const deviceServerId: guid): FindConvertersResult2; stdcall;
    function  BroadcastFindLanConverters(const deviceServerId: guid): ArrayOfLanCanConverter; stdcall;
    function  FindLanConverter(const deviceServerId: guid; const address: IPAddress2): LanCanConverter2; stdcall;
    function  FindCanControllersViaCanConverter(const deviceServerId: guid; const converters: ArrayOfCanConverterAddress): FindControllersResult2; stdcall;
    function  SetDevicesAddressBySidViaCanConverter(const deviceServerId: guid; const devices: ArrayOfCanDeviceNetConfig): SetDevicesAddressBySidResult2; stdcall;
    procedure SetNetworkConfigurationToDevice(const MacAddress: Int64; const newConfiguration: NetConfiguration2; const address: IPAddress2); stdcall;
    function  GetControllerConfigurationsViaCanConverter(const deviceServerId: guid; const devices: ArrayOfCanDeviceNetConfig): GetControllerConfigurationsResult2; stdcall;
    function  AddNestedCell(const parentCellId: guid; const saveData: ArrayOfScreenCellSaveData): ArrayOfguid; stdcall;
    procedure SaveCell(const saveData: ArrayOfScreenCellInfo); stdcall;
    procedure RemoveCell(const cellIds: ArrayOfguid); stdcall;
    procedure SaveScreen(const screenId: guid; const saveData: ScreenLayoutSaveData2); stdcall;
    procedure SetScreenCellContentToNone(const cellId: guid); stdcall;
    procedure SetScreenCellContentToPhotoIdentification(const cellId: guid; const data: CellContentFotoIdentificationSaveData2); stdcall;
    procedure SetScreenCellContentToCamera(const cellId: guid; const data: CellContentCameraSaveData2); stdcall;
    function  AddEmailAddress(const owner: EmailAddressOwner; const ownerId: guid; const data: EmailAddressSaveData2; const partOfCreateOperation: Boolean): guid; stdcall;
    procedure SaveEmailAddress(const id: guid; const data: EmailAddressSaveData2; const partOfCreateOperation: Boolean); stdcall;
    procedure RemoveEmailAddress(const ids: ArrayOfguid; const partOfCreateOperation: Boolean); stdcall;
    function  AddPhoneNumber(const owner: PhoneNumberOwner; const ownerId: guid; const data: PhoneNumberSaveData2; const partOfCreateOperation: Boolean): guid; stdcall;
    procedure SavePhoneNumber(const id: guid; const data: PhoneNumberSaveData2; const partOfCreateOperation: Boolean); stdcall;
    procedure RemovePhoneNumbers(const ids: ArrayOfguid; const partOfCreateOperation: Boolean); stdcall;
    function  AddEmailDistributionAddress(const data: EmailDistributionAddressSaveData2): guid; stdcall;
    procedure SaveEmailDistributionAddress(const id: guid; const data: EmailDistributionAddressSaveData2); stdcall;
    procedure RemoveEmailDistributionAddresses(const ids: ArrayOfguid); stdcall;
    function  AddFavoriteFolder(const data: FavoriteFolderSaveData2): FavoriteFolderInfo2; stdcall;
    function  AddFavoriteFolderByWorplace(const data: FavoriteFolderSaveData2): FavoriteFolderInfo2; stdcall;
    function  SaveFavoriteFolder(const id: guid; const data: FavoriteFolderSaveData2): FavoriteFolderInfo2; stdcall;
    function  MoveFavoriteFolder(const userId: guid; const folderId: guid; const parentId: guid; const beforeFolderId: guid; const afterFolderId: guid): FavoriteFolderInfo2; stdcall;
    function  MoveFavoriteFolderByWorkplace(const workplaceId: guid; const folderId: guid; const parentId: guid; const beforeFolderId: guid; const afterFolderId: guid): FavoriteFolderInfo2; stdcall;
    procedure RemoveFavoriteFolder(const userId: guid; const id: guid); stdcall;
    function  ForceAssignAcsKeyForEmployee(const employeeId: guid; const indexNumber: Integer; const keyData: AcsKeySaveData2; const partOfCreateOperation: Boolean): AcsKeyInfo2; stdcall;
    procedure SetStatusOfAcsKeyAsLost(const keyNumber: Int64; const indexNumber: Integer; const employeeID: guid; const partOfCreateOperation: Boolean); stdcall;
    procedure SetStatusOfAcsKeyAsClear(const keyNumber: Int64; const employeeID: guid; const partOfCreateOperation: Boolean); stdcall;
    function  AddAccessPoint2CameraChain(const saveData: AccessPoint2CameraSaveData2): AccessPoint2CameraChain2; stdcall;
    procedure RemoveAccessPoint2CameraChain(const ids: ArrayOfguid); stdcall;
    function  GetAccessPoint2CameraForAccessPoint(const driverId: ArrayOfguid): ArrayOfAccessPoint2CameraChain; stdcall;
    function  AddAcsVehicle(const VehicleGroupID: guid; const data: AcsVehicleSavedData2): AcsVehicle2; stdcall;
    procedure SaveAcsVehicle(const id: guid; const data: AcsVehicleSavedData2); stdcall;
    procedure RemoveAcsVehicle(const id: guid); stdcall;
    procedure MoveVehiclesToGroup(const groupId: guid; const VehiclesIDs: ArrayOfguid); stdcall;
    function  AddEmployee2VehicleChain(const employeeId: guid; const vehicles: ArrayOfEmployeesVehicle): TupleOfArrayOfguidArrayOfguid0dMmj3_Sh2; stdcall;
    function  GetVehicleForEmployee(const employeeId: guid): ArrayOfAcsVehicle; stdcall;
    function  GetVehicleForEmployeeIncludeRemovedEmployees(const employeeId: guid; const includeRemovedEmployees: Boolean): ArrayOfAcsVehicle; stdcall;
    function  GetEmployeesForVehicle(const vehicleId: guid; const includeRemoved: Boolean): ArrayOfAcsEmployeeFull; stdcall;
    procedure RemoveAllEmployee2VehicleChainForEmployee(const employeeId: guid); stdcall;
    function  AddLogMessageForAccessPoint(const accessPointID: guid; const keyNumber: Int64; const subType: LogMsgSubType; const dateTime: TXSDateTime; const message_: string; const details: string;
                                          const operatorID: guid): Int64; stdcall;
    procedure SetAdditionalDateTimeValue(const ownerId: guid; const fieldId: guid; const value: TXSDateTime; const partOfCreateOperation: Boolean; const savedFieldContext: SavedFieldContext); stdcall;
    procedure SetAdditionalIntValue(const ownerId: guid; const fieldId: guid; const value: Integer; const partOfCreateOperation: Boolean; const savedFieldContext: SavedFieldContext); stdcall;
    procedure SetAdditionalDoubleValue(const ownerId: guid; const fieldId: guid; const value: Double; const partOfCreateOperation: Boolean; const savedFieldContext: SavedFieldContext); stdcall;
    procedure SetAdditionalColorValue(const ownerId: guid; const fieldId: guid; const value: TArray<System.Byte>; const partOfCreateOperation: Boolean; const savedFieldContext: SavedFieldContext); stdcall;
    procedure SetAdditionalListValue(const ownerId: guid; const fieldId: guid; const value: ListItem2; const partOfCreateOperation: Boolean; const savedFieldContext: SavedFieldContext); stdcall;
    procedure SetAdditionalStringValue(const ownerId: guid; const fieldId: guid; const value: string; const partOfCreateOperation: Boolean; const savedFieldContext: SavedFieldContext); stdcall;
    procedure SetAdditionalFieldsVlaues(const ownerId: guid; const addDateTimeInfos: ArrayOfAddDateTimeInfo; const addDoubleInfo: ArrayOfAddDoubleInfo; const addIntInfos: ArrayOfAddIntInfo; const addStringInfos: ArrayOfAddStringInfo; const addColorInfo: ArrayOfAddColorInfo;
                                        const addListInfo: ArrayOfAddListInfo; const partOfCreateOperation: Boolean; const savedFieldContext: SavedFieldContext); stdcall;
    function  AddField(const field: AdditionalFieldBase2): guid; stdcall;
    procedure SaveField(const field: AdditionalFieldBase2); stdcall;
    procedure DeleteFields(const ids: ArrayOfguid); stdcall;
    function  AddPhotoOrder(const photoOrder: PhotoOrder2): guid; stdcall;
    procedure SavePhotoOrder(const photoOrder: PhotoOrder2); stdcall;
    procedure DeletePhotoFields(const ids: ArrayOfguid); stdcall;
    function  SaveAcsBoxAccessElements(const boxAccessLevelId: guid; const deletedElements: ArrayOfguid; const editedElements: ArrayOfAcsBoxAccessLevelElementSlimInfo; const addedElements: ArrayOfAcsBoxAccessElementSaveInfo): TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH2; stdcall;
    function  AddAcsBoxAccessLevel(const data: AcsBoxAccessLevelSaveData2; const tagIDs: ArrayOfguid): AcsBoxAccessLevelSlimInfo2; stdcall;
    procedure SaveAcsBoxAccessLevel(const id: guid; const data: AcsBoxAccessLevelSaveData2; const tagIDs: ArrayOfguid); stdcall;
    procedure RemoveAcsBoxAccessLevel(const id: guid; const accessElementIds: ArrayOfguid); stdcall;
    function  AddAcsAccessLevel(const data: AcsAccessLevelSaveData2; const tagIDs: ArrayOfguid): AcsAccessLevelSlimInfo2; stdcall;
    procedure RemoveAlcoGroup(const id: guid); stdcall;
    function  AddAlcoGroup(const data: AcsAlcoGroupSaveData2): AcsAlcoGroupSlimInfo2; stdcall;
    procedure AlcoGroupChangePriority(const ids: ArrayOfguid); stdcall;
    procedure SaveAlcoGroup(const id: guid; const data: AcsAlcoGroupSaveData2); stdcall;
    procedure SetEmployees2AlcoGroup(const alcoGroupId: guid; const employeesIds: ArrayOfguid; const deletedEmployeesIds: ArrayOfguid); stdcall;
    procedure AddEmployeePositionsToAlcoGroup(const alcoGroupId: guid; const positionIds: ArrayOfguid); stdcall;
    procedure SetPositionCodesToAlcoGroup(const alcoGroupId: guid; const codes: ArrayOfstring); stdcall;
    procedure SetBiometricPermissions(const perms: ArrayOfCardTypeBiometricPermission); stdcall;
    procedure AddEmployeeGroupsToAlcoGroup(const alcoGroupId: guid; const groups: ArrayOfEmployeeGroupForAlcoGroup); stdcall;
    procedure SaveAcsAccessLevel(const id: guid; const data: AcsAccessLevelSaveData2; const tagIDs: ArrayOfguid); stdcall;
    procedure RemoveAcsAccessLevel(const id: guid; const accessPointIds: ArrayOfguid); stdcall;
    function  AddAcsAccessPoint(const acsAccessLevelId: guid; const acsAccessPointDriverId: guid; const data: AcsAccessPointSaveData2): AcsAccessPointSlimInfo2; stdcall;
    procedure SaveAcsAccessPoint(const accessPointId: guid; const data: AcsAccessPointSaveData2); stdcall;
    procedure RemoveAcsAccessPoint(const id: guid); stdcall;
    function  ReplaceAccessPointDriver(const accessPointId: guid; const acsAccessLevelId: guid; const oldAcsAccessPointDriverId: guid; const acsAccessPointDriverId: guid; const data: AcsAccessPointSaveData2): AcsAccessPointSlimInfo2; stdcall;
    function  AddEmployeesToSecurityGroup(const securityGroup: guid; const employeeIds: ArrayOfguid): ArrayOfguid; stdcall;
    procedure RemoveEmployeesToSecurityGroup(const securityGroup: guid; const employeeIds: ArrayOfguid); stdcall;
    procedure AddAccessLevelsToEmployeeWithPeriod(const employeeID: guid; const accessLevelInfo: ArrayOfTupleOfguidNullableOfdateTimeGOBf0pnW; const partOfCreateOperation: Boolean); stdcall;
    procedure AddAccessLevelsToEmployeeGroupWithPeriod(const employeeGroupID: guid; const accessLevelInfo: ArrayOfTupleOfguidNullableOfdateTimeGOBf0pnW); stdcall;
    procedure AddAccessLevelsToEmployee(const employeeID: guid; const accessLevelIDs: ArrayOfguid); stdcall;
    procedure AddAccessLevelsToEmployeeGroup(const employeeGroupID: guid; const accessLevelIDs: ArrayOfguid); stdcall;
    procedure RemoveAccessLevelsFromEmployeeForce(const employeeID: guid; const accessLevelInfo: ArrayOfTupleOfguidNullableOfdateTimeGOBf0pnW); stdcall;
    procedure AddAccessLevelsToEmployeeForce(const employeeID: guid; const accessLevelInfo: ArrayOfTupleOfguidNullableOfdateTimeGOBf0pnW); stdcall;
    procedure RemoveAccessLevelFromEmployee(const employeeID: guid; const accessLevelIDs: ArrayOfguid); stdcall;
    procedure RemoveAccessLevelFromEmployeeGroup(const employeeGroupID: guid; const accessLevelIDs: ArrayOfguid); stdcall;
    function  GetAccessLevelsByEmployeeID(const employeeID: guid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: AccessLevelSortedColumn; const sortOrder: SortOrder; const accessLevelsOwner: AccessLevelsOwner
                                          ): LAccessLevelsData2; stdcall;
    function  GetAccessLevelsByEmployeeIDIncludeRemovedEmployees(const employeeID: guid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: AccessLevelSortedColumn; const sortOrder: SortOrder; const accessLevelsOwner: AccessLevelsOwner;
                                                                 const includeRemovedEmployees: Boolean; const ignoreRights: Boolean): LAccessLevelsData2; stdcall;
    function  GetAccessLevelsByDriverID(const driverID: guid): ArrayOfAcsAccessLevelSimpleInfo; stdcall;
    function  GetBiometricPermissions: ArrayOfCardTypeBiometricPermission; stdcall;
    function  GetAccessLevelsByEmployeeGroupID(const employeeGroupID: guid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: AccessLevelSortedColumn; const sortOrder: SortOrder; const accessLevelsOwner: AccessLevelsOwner
                                               ): LAccessLevelsData2; stdcall;
    function  GetAllAccessLevelsByEmployeeGroupID(const employeeGroupID: guid; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: AccessLevelSortedColumn; const sortOrder: SortOrder; const accessLevelsOwner: AccessLevelsOwner
                                                  ): LAccessLevelsData2; stdcall;
    procedure SetUseEmployeeParentAccessLevel(const employeeID: guid; const isUseParentAccessLevel: Boolean; const partOfCreateOperation: Boolean); stdcall;
    procedure SetUseEmployeeGroupParentAccessLevel(const employeeGroupID: guid; const isUseParentAccessLevel: Boolean; const partOfCreateOperation: Boolean); stdcall;
    function  GetKeysChanges(const idDriver: guid): LChangedKeys2; stdcall;
    procedure ProcessSyncDriver(const processDriverID: guid; const connectionId: guid; const driverIDs: ArrayOfguid); stdcall;
    procedure ProcessSyncDriverLight(const processDriverID: guid; const connectionId: guid; const driverIDs: ArrayOfguid); stdcall;
    function  GetCustomizableDaysChanges(const driverID: guid): LChangedCustomizableDays2; stdcall;
    procedure Import(const data: TArray<System.Byte>); stdcall;
    function  UpdateDeviceDrivers(const driversTreeInfo: ArrayOfDeviceDriverInfo; const ignoreInvalidProps: Boolean): ArrayOfDeviceDriverInfo; stdcall;
    function  AddWorkplace(const data: WorkplaceSaveData2): WorkplaceInfo2; stdcall;
    procedure SaveWorkplace(const id: guid; const data: WorkplaceSaveData2); stdcall;
    procedure RemoveWorkplace(const id: guid); stdcall;
    function  AddWorkplaceModule(const workplaceId: guid; const moduleType: WorkplaceModuleType; const data: WorkplaceModuleSaveData2): WorkplaceModuleInfo2; stdcall;
    procedure SaveWorkplaceModule(const id: guid; const data: WorkplaceModuleSaveData2); stdcall;
    procedure RemoveWorkplaceModule(const id: guid); stdcall;
    function  AddRootMap(const mapsWorkplaceModuleId: guid; const data: MapSaveData2): MapInfo2; stdcall;
    function  AddMap(const rootMapId: guid; const data: MapSaveData2): MapInfo2; stdcall;
    procedure SaveMap(const id: guid; const data: MapSaveData2); stdcall;
    procedure RemoveMap(const id: guid); stdcall;
    procedure SetMapImage(const mapId: guid; const image: TArray<System.Byte>); stdcall;
    function  AddDriverFigureToMap(const mapId: guid; const data: DriverFigureSaveData2): DriverFigureInfo2; stdcall;
    function  GetTagsByClaim(const claim: string): ArrayOfTagFullInfo; stdcall;
    procedure SetVariable(const data: VariableInfo2); stdcall;
    function  AddNetwork(const networkId: guid; const gatewayUrl: string): guid; stdcall;
    procedure RemoveNetwork(const networkId: guid); stdcall;
    function  AddLocalServer(const serverType: ServerType; const url: string): guid; stdcall;
    function  AddServer(const networkId: guid; const serverType: ServerType; const url: string): guid; stdcall;
    procedure RemoveServer(const serverId: guid); stdcall;
    function  AddRootDriverProps(const serverId: guid; const driverType: string; const properties: ArrayOfLPropertyValue): guid; stdcall;
    function  AddDriverProps(const parentId: guid; const parentPropertyName: string; const driverType: string; const properties: ArrayOfLPropertyValue): guid; stdcall;
    function  RemoveDriver(const driverId: guid; const isProcessing: Boolean): LDriverFullInfo2; stdcall;
    procedure AddNetworkToSubnetworkLink(const parentId: guid; const childId: guid); stdcall;
    procedure RemoveNetworkToSubnetworkLink(const parentId: guid; const childId: guid); stdcall;
    procedure SetProperty(const resourceType: ResourceType; const resourceId: guid; const propertyName: string; const propertyValue: string); stdcall;
    procedure SetPropertyValues(const resources: ArrayOfLResourcePropertyValues); stdcall;
    function  AddUser(const login: string; const passsword: string; const fullName: string; const description: string): LUser2; stdcall;
    procedure SaveUser(const id: guid; const login: string; const password: string; const fullName: string; const description: string; const changePasswordRequired: Boolean
                       ); stdcall;
    procedure RemoveUser(const id: guid); stdcall;
    function  AddUserGroup(const name_: string; const description: string): LUserGroup2; stdcall;
    procedure SaveUserGroup(const id: guid; const name_: string; const description: string); stdcall;
    procedure RemoveUserGroup(const id: guid); stdcall;
    procedure AddUsersToUserGroup(const userGroupID: guid; const userIDs: ArrayOfguid); stdcall;
    procedure RemoveUsersFromUserGroup(const userGroupID: guid; const userIDs: ArrayOfguid); stdcall;
    procedure AddUserGroupsToUser(const userID: guid; const userGroupIDs: ArrayOfguid); stdcall;
    procedure RemoveUserGroupsFromUser(const userID: guid; const userGroupIDs: ArrayOfguid); stdcall;
    function  AddClaim(const userGroupId: guid; const data: ClaimSaveData2): guid; stdcall;
    procedure RemoveClaim(const claimId: guid); stdcall;
    procedure RemoveAcsSchedule(const id: guid); stdcall;
    function  AddAcsDaySchedule(const name_: string; const comment: string; const dayIntervals: RGDayIntervals2): AcsDaySchedule2; stdcall;
    function  AddAcsDayScheduleForOwner(const name_: string; const comment: string; const dayIntervals: RGDayIntervals2; const owner: AcsScheduleOwnerType): AcsDaySchedule2; stdcall;
    procedure SaveAcsDaySchedule(const id: guid; const name_: string; const comment: string; const dayIntervals: RGDayIntervals2); stdcall;
    procedure SaveAcsDayScheduleForOwner(const id: guid; const name_: string; const comment: string; const dayIntervals: RGDayIntervals2; const owner: AcsScheduleOwnerType); stdcall;
    function  AddAcsMultiDaySchedule(const name_: string; const comment: string; const dayIntervals: ArrayOfRGDayIntervals): AcsMultiDaySchedule2; stdcall;
    procedure SaveAcsMultiDaySchedule(const id: guid; const name_: string; const comment: string; const dayIntervals: ArrayOfRGDayIntervals); stdcall;
    function  AddAcsWeekSchedule(const name_: string; const comment: string; const weeks: ArrayOfAcsWeekSlim): AcsWeekScheduleFull2; stdcall;
    procedure SaveAcsWeekSchedule(const id: guid; const name_: string; const comment: string; const weeks: ArrayOfAcsWeekSlim); stdcall;
    procedure RemoveAcsDay(const id: guid); stdcall;
    function  AddAcsCustomDay(const name_: string; const date: TXSDateTime; const dayType: AcsCustomizableDayType): AcsCustomDay2; stdcall;
    procedure SaveAcsCustomDay(const id: guid; const name_: string; const date: TXSDateTime; const dayType: AcsCustomizableDayType); stdcall;
    function  AddAcsWorkDayWithTransfer(const name_: string; const date: TXSDateTime; const transferedDate: TXSDateTime): AcsWorkDayWithTransfer2; stdcall;
    procedure SaveAcsWorkDayWithTransfer(const id: guid; const name_: string; const date: TXSDateTime; const transferedDate: TXSDateTime); stdcall;
    function  AddEmployeePosition(const name_: string; const description: string; const code: string): LEmployeePositionInfo2; stdcall;
    function  AddEmployeePositionForIncident(const name_: string; const description: string; const code: string): LEmployeePositionInfo2; stdcall;
    procedure SaveEmployeePosition(const id: guid; const name_: string; const description: string; const code: string); stdcall;
    procedure SaveEmployeePositionForIncident(const id: guid; const name_: string; const description: string; const code: string); stdcall;
    procedure RemoveEmployeePosition(const id: guid); stdcall;
    procedure RemoveEmployeePositionForIncident(const id: guid); stdcall;
    function  AddIncidentTemplate(const info: IncidentTemplateSaveData2): IncidentTemplateInfo2; stdcall;
    procedure SaveIncidentTemplate(const id: guid; const info: IncidentTemplateSaveData2); stdcall;
    procedure RemoveIncidentTemplate(const ids: ArrayOfguid); stdcall;
    function  AddIncident(const info: IncidentSaveInfo2): IncidentElementFullInfo2; stdcall;
    procedure SaveIncident(const id: guid; const info: IncidentSaveInfo2); stdcall;
    procedure RemoveIncidents(const ids: ArrayOfguid); stdcall;
    function  AddDictionaryElement(const info: DictionaryElementSaveInfo2; const type_: DictionaryType): DictionaryElementInfo2; stdcall;
    procedure SaveDictionaryElement(const id: guid; const info: DictionaryElementSaveInfo2; const type_: DictionaryType); stdcall;
    procedure RemoveDectionaryElement(const id: ArrayOfguid; const type_: DictionaryType; const isIgnoreIncidentRigths: Boolean); stdcall;
    procedure SetOrganization2EmployeeChain(const employeeId: guid; const organizationAssignments: ArrayOfEmployee2OrganizationAssignment); stdcall;
    procedure SetOrganization2VehicleChain(const vehicleID: guid; const organizationAssignments: ArrayOfEmployee2OrganizationAssignment); stdcall;
    function  AddCardType(const name_: string; const description: string): CardTypeInfo2; stdcall;
    procedure SaveCardType(const id: guid; const name_: string; const description: string); stdcall;
    procedure RemoveCardType(const id: guid; const force: Boolean); stdcall;
    function  AddMifareProfile(const data: MifareProfileSaveData2; const tagIDs: ArrayOfguid): MifareProfileInfo2; stdcall;
    procedure RemoveMifareProfile(const id: guid); stdcall;
    function  SaveMifareProfile(const id: guid; const data: MifareProfileFullSaveData2; const connectionId: guid; const tagIDs: ArrayOfguid): ArrayOfguid; stdcall;
    procedure SetUidsKeys(const data: ArrayOfUidKeyInfo); stdcall;
    function  AddAcsEmployeeGroup(const parentId: guid; const name_: string; const comment: string; const tagIDs: ArrayOfguid; const isGuestGroup: Boolean; const groupCode: string
                                  ): AcsEmployeeGroup2; stdcall;
    procedure SaveAcsEmployeeGroup(const id: guid; const name_: string; const comment: string; const tagIDs: ArrayOfguid; const isGuestGroup: Boolean; const groupCode: string
                                   ); stdcall;
    function  AddAcsEmployeeGroupWithGroupType(const parentId: guid; const name_: string; const comment: string; const tagIDs: ArrayOfguid; const isGuestGroup: EmployeeGroupType; const groupCode: string
                                               ): AcsEmployeeGroup2; stdcall;
    procedure SaveAcsEmployeeGroupWithGroupType(const id: guid; const name_: string; const comment: string; const tagIDs: ArrayOfguid; const isGuestGroup: EmployeeGroupType; const groupCode: string
                                                ); stdcall;
    procedure RemoveAcsEmployeeGroup(const id: guid); stdcall;
    function  AddAcsEmployee(const employeeGroupID: guid; const data: AcsEmployeeSaveData2): AcsEmployeeSlim2; stdcall;
    procedure MoveEmployeesToGroup(const groupId: guid; const employeesIDs: ArrayOfguid); stdcall;
    function  GetFilteredEmployees(const searchString: string; const pageNumber: Integer; const pageSize: Integer; const sortedColumn: EmployeesSortedColumn; const sortOrder: SortOrder): EmployeesData2; stdcall;
    procedure SaveAcsEmployee(const id: guid; const data: AcsEmployeeSaveData2); stdcall;
    procedure SaveAcsEmployeesDocuments(const id: guid; const data: AcsEmployeeDocumentsSaveData2; const partOfCreateOperation: Boolean); stdcall;
    procedure SetEmployeeFaces(const employeeId: guid; const data: ArrayOfAcsEmployeeFaceVectorSaveData); stdcall;
    procedure LockAcsEmployee(const ids: ArrayOfguid; const isLocked: Boolean); stdcall;
    procedure RemoveAcsEmployee(const id: guid); stdcall;
    function  AddEmployeeSchedule(const employeeId: guid; const saveData: AcsEmployeeScheduleSaveData2; const partOfCreateOperation: Boolean): AcsEmployeeSchedule2; stdcall;
    procedure SaveEmployeeSchedule(const id: guid; const data: AcsEmployeeScheduleSaveData2; const partOfCreateOperation: Boolean); stdcall;
    procedure RemoveEmployeeSchedule(const ids: ArrayOfguid; const partOfCreateOperation: Boolean); stdcall;
    procedure SetAcsEmployeePhoto(const employeeId: guid; const photoNumber: Integer; const data: TArray<System.Byte>; const partOfCreateOperation: Boolean); stdcall;
    procedure SetAcsEmployeePhotoByType(const employeeId: guid; const photoNumber: Integer; const data: TArray<System.Byte>; const imageType: EmployeeImageType; const partOfCreateOperation: Boolean); stdcall;
    function  AssignAcsKeyForEmployee(const employeeId: guid; const indexNumber: Integer; const keyData: AcsKeySaveData2; const partOfCreateOperation: Boolean): AcsKeyInfo2; stdcall;
    procedure ReindexKeys(const employeeId: guid); stdcall;
    procedure UpdateAcsKeyEndTime(const employeeId: guid; const data: Int64; const indexNumber: Integer; const endDate: TXSDateTime); stdcall;
  end;


  // ************************************************************************ //
  // Namespace : http://tempuri.org/
  // soapAction: http://tempuri.org/IOperatorContract/%operationName%
  // transport : http://schemas.xmlsoap.org/soap/http
  // style     : document
  // use       : literal
  // binding   : BasicHttpBinding_IOperatorContract
  // service   : LNetworkService
  // port      : BasicHttpBinding_IOperatorContract
  // URL       : https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc
  // ************************************************************************ //
  IOperatorContract = interface(IInvokable)
  ['{6AC4456E-9D9F-08B7-B905-8E4A070FA727}']
    function  GetDepartmentTree(const departmentId: guid; const isChild: Boolean): ArrayOfDepartmentTreeModel; stdcall;
    function  GetDataForPeriodByDepartments(const login: string; const departmentsIds: ArrayOfguid; const startedOn: TXSDateTime; const endedOn: TXSDateTime; const type_: ViolationType): ArrayOfDataForPeriodModel; stdcall;
    function  GetDataForPeriodByDepartmentsDetail(const login: string; const departmentId: guid; const startedOn: TXSDateTime; const endedOn: TXSDateTime): ArrayOfDataForPeriodModel; stdcall;
    function  GetIsPresentInWorkplace(const departmentsIds: ArrayOfguid; const startedOn: TXSDateTime): ArrayOfDataOnPresenceInWorkplace; stdcall;
    function  GetAbscenceInWorkplace(const departmentId: guid; const startedOn: TXSDateTime): ArrayOfAbsent; stdcall;
    function  GetDataForGraph(const departmentId: guid; const startedOn: TXSDateTime; const endedOn: TXSDateTime; const type_: ViolationType): ArrayOfDataForViolator; stdcall;
    function  GetProblemDates(const departmentsIds: ArrayOfguid; const startedOn: TXSDateTime; const endedOn: TXSDateTime): ArrayOfDataForViolator; stdcall;
    function  GetSystematicViolation(const userId: guid): Double; stdcall;
    function  GetSystematicViolationByLogin(const login: string): Double; stdcall;
    function  SaveSystematicViolation(const userId: guid; const percentValue: Double): Integer; stdcall;
    function  SaveSystematicViolationByLogin(const login: string; const percentValue: Double): Integer; stdcall;
    function  GetListOfViolations(const userId: guid; const departmentsIds: ArrayOfguid; const startedOn: TXSDateTime; const endedOn: TXSDateTime; const type_: ViolationType): ArrayOfViolator; stdcall;
    function  GetListOfViolationsByLogin(const login: string; const departmentsIds: ArrayOfguid; const startedOn: TXSDateTime; const endedOn: TXSDateTime; const type_: ViolationType): ArrayOfViolator; stdcall;
    function  GetPhoto(const UserId: guid): TArray<System.Byte>; stdcall;
  end;

function GetILNetworkService(UseWSDL: Boolean=System.False; Addr: string=''; HTTPRIO: THTTPRIO = nil): ILNetworkService;
function GetILMonitoringService(UseWSDL: Boolean=System.False; Addr: string=''; HTTPRIO: THTTPRIO = nil): ILMonitoringService;
function GetILSubnetworkSubscribeService(UseWSDL: Boolean=System.False; Addr: string=''; HTTPRIO: THTTPRIO = nil): ILSubnetworkSubscribeService;
function GetILNetworkConfigurationService(UseWSDL: Boolean=System.False; Addr: string=''; HTTPRIO: THTTPRIO = nil): ILNetworkConfigurationService;
function GetIOperatorContract(UseWSDL: Boolean=System.False; Addr: string=''; HTTPRIO: THTTPRIO = nil): IOperatorContract;


implementation
  uses System.SysUtils;

function GetILNetworkService(UseWSDL: Boolean; Addr: string; HTTPRIO: THTTPRIO): ILNetworkService;
const
  defWSDL = 'https://localhost/LNetworkServer/LNetworkService.svc?wsdl';
  defURL  = 'https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc';
  defSvc  = 'LNetworkService';
  defPrt  = 'BasicHttpBinding_ILNetworkService';
var
  RIO: THTTPRIO;
begin
  Result := nil;
  if (Addr = '') then
  begin
    if UseWSDL then
      Addr := defWSDL
    else
      Addr := defURL;
  end;
  if HTTPRIO = nil then
    RIO := THTTPRIO.Create(nil)
  else
    RIO := HTTPRIO;
  try
    Result := (RIO as ILNetworkService);
    if UseWSDL then
    begin
      RIO.WSDLLocation := Addr;
      RIO.Service := defSvc;
      RIO.Port := defPrt;
    end else
      RIO.URL := Addr;
  finally
    if (Result = nil) and (HTTPRIO = nil) then
      RIO.Free;
  end;
end;


function GetILMonitoringService(UseWSDL: Boolean; Addr: string; HTTPRIO: THTTPRIO): ILMonitoringService;
const
  defWSDL = 'https://localhost/LNetworkServer/LNetworkService.svc?wsdl';
  defURL  = 'http://desktop-sq44e9v/LNetworkServer/LNetworkService.svc';
  defSvc  = 'LNetworkService';
  defPrt  = 'BasicHttpBinding_ILMonitoringService';
var
  RIO: THTTPRIO;
begin
  Result := nil;
  if (Addr = '') then
  begin
    if UseWSDL then
      Addr := defWSDL
    else
      Addr := defURL;
  end;
  if HTTPRIO = nil then
    RIO := THTTPRIO.Create(nil)
  else
    RIO := HTTPRIO;
  try
    Result := (RIO as ILMonitoringService);
    if UseWSDL then
    begin
      RIO.WSDLLocation := Addr;
      RIO.Service := defSvc;
      RIO.Port := defPrt;
    end else
      RIO.URL := Addr;
  finally
    if (Result = nil) and (HTTPRIO = nil) then
      RIO.Free;
  end;
end;


function GetILSubnetworkSubscribeService(UseWSDL: Boolean; Addr: string; HTTPRIO: THTTPRIO): ILSubnetworkSubscribeService;
const
  defWSDL = 'https://localhost/LNetworkServer/LNetworkService.svc?wsdl';
  defURL  = 'https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc';
  defSvc  = 'LNetworkService';
  defPrt  = 'BasicHttpBinding_ILSubnetworkSubscribeService';
var
  RIO: THTTPRIO;
begin
  Result := nil;
  if (Addr = '') then
  begin
    if UseWSDL then
      Addr := defWSDL
    else
      Addr := defURL;
  end;
  if HTTPRIO = nil then
    RIO := THTTPRIO.Create(nil)
  else
    RIO := HTTPRIO;
  try
    Result := (RIO as ILSubnetworkSubscribeService);
    if UseWSDL then
    begin
      RIO.WSDLLocation := Addr;
      RIO.Service := defSvc;
      RIO.Port := defPrt;
    end else
      RIO.URL := Addr;
  finally
    if (Result = nil) and (HTTPRIO = nil) then
      RIO.Free;
  end;
end;


function GetILNetworkConfigurationService(UseWSDL: Boolean; Addr: string; HTTPRIO: THTTPRIO): ILNetworkConfigurationService;
const
  defWSDL = 'https://localhost/LNetworkServer/LNetworkService.svc?wsdl';
  defURL  = 'https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc';
  defSvc  = 'LNetworkService';
  defPrt  = 'BasicHttpBinding_ILNetworkConfigurationService';
var
  RIO: THTTPRIO;
begin
  Result := nil;
  if (Addr = '') then
  begin
    if UseWSDL then
      Addr := defWSDL
    else
      Addr := defURL;
  end;
  if HTTPRIO = nil then
    RIO := THTTPRIO.Create(nil)
  else
    RIO := HTTPRIO;
  try
    Result := (RIO as ILNetworkConfigurationService);
    if UseWSDL then
    begin
      RIO.WSDLLocation := Addr;
      RIO.Service := defSvc;
      RIO.Port := defPrt;
    end else
      RIO.URL := Addr;
  finally
    if (Result = nil) and (HTTPRIO = nil) then
      RIO.Free;
  end;
end;


function GetIOperatorContract(UseWSDL: Boolean; Addr: string; HTTPRIO: THTTPRIO): IOperatorContract;
const
  defWSDL = 'https://localhost/LNetworkServer/LNetworkService.svc?wsdl';
  defURL  = 'https://desktop-sq44e9v/LNetworkServer/LNetworkService.svc';
  defSvc  = 'LNetworkService';
  defPrt  = 'BasicHttpBinding_IOperatorContract';
var
  RIO: THTTPRIO;
begin
  Result := nil;
  if (Addr = '') then
  begin
    if UseWSDL then
      Addr := defWSDL
    else
      Addr := defURL;
  end;
  if HTTPRIO = nil then
    RIO := THTTPRIO.Create(nil)
  else
    RIO := HTTPRIO;
  try
    Result := (RIO as IOperatorContract);
    if UseWSDL then
    begin
      RIO.WSDLLocation := Addr;
      RIO.Service := defSvc;
      RIO.Port := defPrt;
    end else
      RIO.URL := Addr;
  finally
    if (Result = nil) and (HTTPRIO = nil) then
      RIO.Free;
  end;
end;


destructor GeEmployeesViewResult.Destroy;
begin
  System.SysUtils.FreeAndNil(Fschema);
  inherited Destroy;
end;

destructor UserPassEditorSaveData2.Destroy;
begin
  System.SysUtils.FreeAndNil(FEditor);
  inherited Destroy;
end;

procedure UserPassEditorSaveData2.SetEditor(Index: Integer; const AEditor: Editor);
begin
  FEditor := AEditor;
  FEditor_Specified := True;
end;

function UserPassEditorSaveData2.Editor_Specified(Index: Integer): boolean;
begin
  Result := FEditor_Specified;
end;

procedure AcsBoxAccessLevelSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function AcsBoxAccessLevelSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure AcsBoxAccessLevelSaveData2.SetMode(Index: Integer; const ABoxAccessLevelMode: BoxAccessLevelMode);
begin
  FMode := ABoxAccessLevelMode;
  FMode_Specified := True;
end;

function AcsBoxAccessLevelSaveData2.Mode_Specified(Index: Integer): boolean;
begin
  Result := FMode_Specified;
end;

procedure AcsBoxAccessLevelSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AcsBoxAccessLevelSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure TagSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function TagSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure TagSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function TagSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AcsAccessLevelSlimBase2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AcsAccessLevelSlimBase2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AcsAccessLevelSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function AcsAccessLevelSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ReactionSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ReactionSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ReactionSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function ReactionSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure WorkScheduleSlimSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function WorkScheduleSlimSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure WorkScheduleSlimSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function WorkScheduleSlimSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure WorkZoneSlimSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function WorkZoneSlimSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure WorkZoneSlimSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function WorkZoneSlimSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure EmployeeViewFieldMetadata2.SetFieldDBType(Index: Integer; const ASqlDbType: SqlDbType);
begin
  FFieldDBType := ASqlDbType;
  FFieldDBType_Specified := True;
end;

function EmployeeViewFieldMetadata2.FieldDBType_Specified(Index: Integer): boolean;
begin
  Result := FFieldDBType_Specified;
end;

procedure EmployeeViewFieldMetadata2.SetFieldName(Index: Integer; const Astring: string);
begin
  FFieldName := Astring;
  FFieldName_Specified := True;
end;

function EmployeeViewFieldMetadata2.FieldName_Specified(Index: Integer): boolean;
begin
  Result := FFieldName_Specified;
end;

procedure EmployeeViewFieldMetadata2.SetFieldType(Index: Integer; const Astring: string);
begin
  FFieldType := Astring;
  FFieldType_Specified := True;
end;

function EmployeeViewFieldMetadata2.FieldType_Specified(Index: Integer): boolean;
begin
  Result := FFieldType_Specified;
end;

procedure ScreenLayoutSaveData2.SetAspectRatio(Index: Integer; const AScreenAspectRatio: ScreenAspectRatio);
begin
  FAspectRatio := AScreenAspectRatio;
  FAspectRatio_Specified := True;
end;

function ScreenLayoutSaveData2.AspectRatio_Specified(Index: Integer): boolean;
begin
  Result := FAspectRatio_Specified;
end;

procedure ScreenLayoutSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function ScreenLayoutSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure ScreenLayoutSaveData2.SetScaleMode(Index: Integer; const AScreenScaleMode: ScreenScaleMode);
begin
  FScaleMode := AScreenScaleMode;
  FScaleMode_Specified := True;
end;

function ScreenLayoutSaveData2.ScaleMode_Specified(Index: Integer): boolean;
begin
  Result := FScaleMode_Specified;
end;

procedure ScreenLayoutSaveData2.SetShowGrid(Index: Integer; const ABoolean: Boolean);
begin
  FShowGrid := ABoolean;
  FShowGrid_Specified := True;
end;

function ScreenLayoutSaveData2.ShowGrid_Specified(Index: Integer): boolean;
begin
  Result := FShowGrid_Specified;
end;

procedure ScreenLayoutSaveData2.SetShowName(Index: Integer; const ABoolean: Boolean);
begin
  FShowName := ABoolean;
  FShowName_Specified := True;
end;

function ScreenLayoutSaveData2.ShowName_Specified(Index: Integer): boolean;
begin
  Result := FShowName_Specified;
end;

procedure ReactionExecuteProgramActionSaveData2.SetArgs(Index: Integer; const Astring: string);
begin
  FArgs := Astring;
  FArgs_Specified := True;
end;

function ReactionExecuteProgramActionSaveData2.Args_Specified(Index: Integer): boolean;
begin
  Result := FArgs_Specified;
end;

procedure ReactionExecuteProgramActionSaveData2.SetFilePath(Index: Integer; const Astring: string);
begin
  FFilePath := Astring;
  FFilePath_Specified := True;
end;

function ReactionExecuteProgramActionSaveData2.FilePath_Specified(Index: Integer): boolean;
begin
  Result := FFilePath_Specified;
end;

procedure ReactionExecuteProgramActionSaveData2.SetIsUseEventInfoForArgs(Index: Integer; const ABoolean: Boolean);
begin
  FIsUseEventInfoForArgs := ABoolean;
  FIsUseEventInfoForArgs_Specified := True;
end;

function ReactionExecuteProgramActionSaveData2.IsUseEventInfoForArgs_Specified(Index: Integer): boolean;
begin
  Result := FIsUseEventInfoForArgs_Specified;
end;

procedure ReactionExecuteProgramActionSaveData2.SetWorkingDir(Index: Integer; const Astring: string);
begin
  FWorkingDir := Astring;
  FWorkingDir_Specified := True;
end;

function ReactionExecuteProgramActionSaveData2.WorkingDir_Specified(Index: Integer): boolean;
begin
  Result := FWorkingDir_Specified;
end;

destructor ReactionExecuteProgramActionSlimInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FCommonData);
  inherited Destroy;
end;

procedure ReactionExecuteProgramActionSlimInfo2.SetCommonData(Index: Integer; const AReactionActionSlimInfo2: ReactionActionSlimInfo2);
begin
  FCommonData := AReactionActionSlimInfo2;
  FCommonData_Specified := True;
end;

function ReactionExecuteProgramActionSlimInfo2.CommonData_Specified(Index: Integer): boolean;
begin
  Result := FCommonData_Specified;
end;

procedure ReactionEventSaveData2.SetIsActive(Index: Integer; const ABoolean: Boolean);
begin
  FIsActive := ABoolean;
  FIsActive_Specified := True;
end;

function ReactionEventSaveData2.IsActive_Specified(Index: Integer): boolean;
begin
  Result := FIsActive_Specified;
end;

procedure ReactionEventSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function ReactionEventSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AcsAccessPointBase2.SetAntipassback(Index: Integer; const ABoolean: Boolean);
begin
  FAntipassback := ABoolean;
  FAntipassback_Specified := True;
end;

function AcsAccessPointBase2.Antipassback_Specified(Index: Integer): boolean;
begin
  Result := FAntipassback_Specified;
end;

procedure AcsAccessPointBase2.SetControllerIdentification(Index: Integer; const AControllerIdentificationType: ControllerIdentificationType);
begin
  FControllerIdentification := AControllerIdentificationType;
  FControllerIdentification_Specified := True;
end;

function AcsAccessPointBase2.ControllerIdentification_Specified(Index: Integer): boolean;
begin
  Result := FControllerIdentification_Specified;
end;

procedure AcsAccessPointBase2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function AcsAccessPointBase2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure AcsAccessPointBase2.SetDontCheckExternalResolution(Index: Integer; const ABoolean: Boolean);
begin
  FDontCheckExternalResolution := ABoolean;
  FDontCheckExternalResolution_Specified := True;
end;

function AcsAccessPointBase2.DontCheckExternalResolution_Specified(Index: Integer): boolean;
begin
  Result := FDontCheckExternalResolution_Specified;
end;

procedure AcsAccessPointBase2.SetDontRequireOpConfirmation(Index: Integer; const ABoolean: Boolean);
begin
  FDontRequireOpConfirmation := ABoolean;
  FDontRequireOpConfirmation_Specified := True;
end;

function AcsAccessPointBase2.DontRequireOpConfirmation_Specified(Index: Integer): boolean;
begin
  Result := FDontRequireOpConfirmation_Specified;
end;

procedure AcsAccessPointBase2.SetIsGuardOffModeOn(Index: Integer; const ABoolean: Boolean);
begin
  FIsGuardOffModeOn := ABoolean;
  FIsGuardOffModeOn_Specified := True;
end;

function AcsAccessPointBase2.IsGuardOffModeOn_Specified(Index: Integer): boolean;
begin
  Result := FIsGuardOffModeOn_Specified;
end;

procedure AcsAccessPointBase2.SetIsGuardOnModeOn(Index: Integer; const ABoolean: Boolean);
begin
  FIsGuardOnModeOn := ABoolean;
  FIsGuardOnModeOn_Specified := True;
end;

function AcsAccessPointBase2.IsGuardOnModeOn_Specified(Index: Integer): boolean;
begin
  Result := FIsGuardOnModeOn_Specified;
end;

procedure AcsAccessPointBase2.SetIsLockModeOn(Index: Integer; const ABoolean: Boolean);
begin
  FIsLockModeOn := ABoolean;
  FIsLockModeOn_Specified := True;
end;

function AcsAccessPointBase2.IsLockModeOn_Specified(Index: Integer): boolean;
begin
  Result := FIsLockModeOn_Specified;
end;

procedure AcsAccessPointBase2.SetIsMultiIdentification(Index: Integer; const ABoolean: Boolean);
begin
  FIsMultiIdentification := ABoolean;
  FIsMultiIdentification_Specified := True;
end;

function AcsAccessPointBase2.IsMultiIdentification_Specified(Index: Integer): boolean;
begin
  Result := FIsMultiIdentification_Specified;
end;

procedure AcsAccessPointBase2.SetIsOpenForALongTimeModeOn(Index: Integer; const ABoolean: Boolean);
begin
  FIsOpenForALongTimeModeOn := ABoolean;
  FIsOpenForALongTimeModeOn_Specified := True;
end;

function AcsAccessPointBase2.IsOpenForALongTimeModeOn_Specified(Index: Integer): boolean;
begin
  Result := FIsOpenForALongTimeModeOn_Specified;
end;

procedure AcsAccessPointBase2.SetMainIdentification(Index: Integer; const AMainIdentificationType: MainIdentificationType);
begin
  FMainIdentification := AMainIdentificationType;
  FMainIdentification_Specified := True;
end;

function AcsAccessPointBase2.MainIdentification_Specified(Index: Integer): boolean;
begin
  Result := FMainIdentification_Specified;
end;

procedure AcsAccessPointBase2.SetOrderedServerIdentification(Index: Integer; const AArrayOfServerIdentificationType: ArrayOfServerIdentificationType);
begin
  FOrderedServerIdentification := AArrayOfServerIdentificationType;
  FOrderedServerIdentification_Specified := True;
end;

function AcsAccessPointBase2.OrderedServerIdentification_Specified(Index: Integer): boolean;
begin
  Result := FOrderedServerIdentification_Specified;
end;

procedure AcsAccessPointBase2.SetOrderedServerIdentificationInString(Index: Integer; const Astring: string);
begin
  FOrderedServerIdentificationInString := Astring;
  FOrderedServerIdentificationInString_Specified := True;
end;

function AcsAccessPointBase2.OrderedServerIdentificationInString_Specified(Index: Integer): boolean;
begin
  Result := FOrderedServerIdentificationInString_Specified;
end;

procedure AcsAccessPointBase2.SetPassageByRuleOfTwoPersonsMode(Index: Integer; const APassageByRuleOfTwoPersonsMode: PassageByRuleOfTwoPersonsMode);
begin
  FPassageByRuleOfTwoPersonsMode := APassageByRuleOfTwoPersonsMode;
  FPassageByRuleOfTwoPersonsMode_Specified := True;
end;

function AcsAccessPointBase2.PassageByRuleOfTwoPersonsMode_Specified(Index: Integer): boolean;
begin
  Result := FPassageByRuleOfTwoPersonsMode_Specified;
end;

procedure AcsAccessPointBase2.SetServerAlcoFrame(Index: Integer; const ABoolean: Boolean);
begin
  FServerAlcoFrame := ABoolean;
  FServerAlcoFrame_Specified := True;
end;

function AcsAccessPointBase2.ServerAlcoFrame_Specified(Index: Integer): boolean;
begin
  Result := FServerAlcoFrame_Specified;
end;

procedure AcsAccessPointBase2.SetServerFace(Index: Integer; const ABoolean: Boolean);
begin
  FServerFace := ABoolean;
  FServerFace_Specified := True;
end;

function AcsAccessPointBase2.ServerFace_Specified(Index: Integer): boolean;
begin
  Result := FServerFace_Specified;
end;

procedure AcsAccessPointBase2.SetServerVehicle(Index: Integer; const ABoolean: Boolean);
begin
  FServerVehicle := ABoolean;
  FServerVehicle_Specified := True;
end;

function AcsAccessPointBase2.ServerVehicle_Specified(Index: Integer): boolean;
begin
  Result := FServerVehicle_Specified;
end;

procedure AcsAccessPointBase2.SetUseHolidaysAndTransfers(Index: Integer; const ABoolean: Boolean);
begin
  FUseHolidaysAndTransfers := ABoolean;
  FUseHolidaysAndTransfers_Specified := True;
end;

function AcsAccessPointBase2.UseHolidaysAndTransfers_Specified(Index: Integer): boolean;
begin
  Result := FUseHolidaysAndTransfers_Specified;
end;

procedure DepartmentTreeModel2.SetHasChild(Index: Integer; const ABoolean: Boolean);
begin
  FHasChild := ABoolean;
  FHasChild_Specified := True;
end;

function DepartmentTreeModel2.HasChild_Specified(Index: Integer): boolean;
begin
  Result := FHasChild_Specified;
end;

procedure DepartmentTreeModel2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function DepartmentTreeModel2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure DepartmentTreeModel2.SetIsInherited(Index: Integer; const ABoolean: Boolean);
begin
  FIsInherited := ABoolean;
  FIsInherited_Specified := True;
end;

function DepartmentTreeModel2.IsInherited_Specified(Index: Integer): boolean;
begin
  Result := FIsInherited_Specified;
end;

procedure DepartmentTreeModel2.SetList(Index: Integer; const Astring: string);
begin
  FList := Astring;
  FList_Specified := True;
end;

function DepartmentTreeModel2.List_Specified(Index: Integer): boolean;
begin
  Result := FList_Specified;
end;

procedure DepartmentTreeModel2.SetListName(Index: Integer; const Astring: string);
begin
  FListName := Astring;
  FListName_Specified := True;
end;

function DepartmentTreeModel2.ListName_Specified(Index: Integer): boolean;
begin
  Result := FListName_Specified;
end;

procedure DepartmentTreeModel2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function DepartmentTreeModel2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure DepartmentTreeModel2.SetParentID(Index: Integer; const Aguid: guid);
begin
  FParentID := Aguid;
  FParentID_Specified := True;
end;

function DepartmentTreeModel2.ParentID_Specified(Index: Integer): boolean;
begin
  Result := FParentID_Specified;
end;

procedure EmployeePositionSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function EmployeePositionSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure EmployeePositionSlimInfo2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function EmployeePositionSlimInfo2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure EmployeePositionSlimInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function EmployeePositionSlimInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure LEmployeePositionInfo2.SetCode(Index: Integer; const Astring: string);
begin
  FCode := Astring;
  FCode_Specified := True;
end;

function LEmployeePositionInfo2.Code_Specified(Index: Integer): boolean;
begin
  Result := FCode_Specified;
end;

procedure LEmployeePositionInfo2.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function LEmployeePositionInfo2.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

procedure LEmployeePositionInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function LEmployeePositionInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure LEmployeePositionInfo2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function LEmployeePositionInfo2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure LEmployeePositionInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function LEmployeePositionInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

destructor AcsBoxAccessLevelSlimInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FBoxAccessElements)-1 do
    System.SysUtils.FreeAndNil(FBoxAccessElements[I]);
  System.SetLength(FBoxAccessElements, 0);
  inherited Destroy;
end;

procedure AcsBoxAccessLevelSlimInfo2.SetBoxAccessElements(Index: Integer; const AArrayOfAcsBoxAccessLevelElementSlimInfo: ArrayOfAcsBoxAccessLevelElementSlimInfo);
begin
  FBoxAccessElements := AArrayOfAcsBoxAccessLevelElementSlimInfo;
  FBoxAccessElements_Specified := True;
end;

function AcsBoxAccessLevelSlimInfo2.BoxAccessElements_Specified(Index: Integer): boolean;
begin
  Result := FBoxAccessElements_Specified;
end;

procedure AcsBoxAccessLevelSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function AcsBoxAccessLevelSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure AcsBoxAccessLevelSlimInfo2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function AcsBoxAccessLevelSlimInfo2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure AcsAccessLevelSimpleInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function AcsAccessLevelSimpleInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

destructor ScreenLayoutInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FRootCell);
  inherited Destroy;
end;

procedure ScreenLayoutInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function ScreenLayoutInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure ScreenLayoutInfo2.SetRootCell(Index: Integer; const AScreenCellTreeInfo2: ScreenCellTreeInfo2);
begin
  FRootCell := AScreenCellTreeInfo2;
  FRootCell_Specified := True;
end;

function ScreenLayoutInfo2.RootCell_Specified(Index: Integer): boolean;
begin
  Result := FRootCell_Specified;
end;

procedure ReactionEventsFromDevicesSaveData2.SetEventsFromAnyDevice(Index: Integer; const ABoolean: Boolean);
begin
  FEventsFromAnyDevice := ABoolean;
  FEventsFromAnyDevice_Specified := True;
end;

function ReactionEventsFromDevicesSaveData2.EventsFromAnyDevice_Specified(Index: Integer): boolean;
begin
  Result := FEventsFromAnyDevice_Specified;
end;

procedure ReactionEventsFromDevicesSaveData2.SetEventsWithAnyKnownEmployee(Index: Integer; const ABoolean: Boolean);
begin
  FEventsWithAnyKnownEmployee := ABoolean;
  FEventsWithAnyKnownEmployee_Specified := True;
end;

function ReactionEventsFromDevicesSaveData2.EventsWithAnyKnownEmployee_Specified(Index: Integer): boolean;
begin
  Result := FEventsWithAnyKnownEmployee_Specified;
end;

procedure ReactionEventsFromDevicesSaveData2.SetEventsWithAnySubtype(Index: Integer; const ABoolean: Boolean);
begin
  FEventsWithAnySubtype := ABoolean;
  FEventsWithAnySubtype_Specified := True;
end;

function ReactionEventsFromDevicesSaveData2.EventsWithAnySubtype_Specified(Index: Integer): boolean;
begin
  Result := FEventsWithAnySubtype_Specified;
end;

procedure ReactionEventsFromDevicesSaveData2.SetEventsWithUnknownEmployee(Index: Integer; const ABoolean: Boolean);
begin
  FEventsWithUnknownEmployee := ABoolean;
  FEventsWithUnknownEmployee_Specified := True;
end;

function ReactionEventsFromDevicesSaveData2.EventsWithUnknownEmployee_Specified(Index: Integer): boolean;
begin
  Result := FEventsWithUnknownEmployee_Specified;
end;

procedure ReactionEventsFromDevicesSaveData2.SetScheduleId(Index: Integer; const Aguid: guid);
begin
  FScheduleId := Aguid;
  FScheduleId_Specified := True;
end;

function ReactionEventsFromDevicesSaveData2.ScheduleId_Specified(Index: Integer): boolean;
begin
  Result := FScheduleId_Specified;
end;

destructor ReactionEventsFromDevicesSlimInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FCommonData);
  inherited Destroy;
end;

procedure ReactionEventsFromDevicesSlimInfo2.SetCommonData(Index: Integer; const AReactionEventSlimInfo2: ReactionEventSlimInfo2);
begin
  FCommonData := AReactionEventSlimInfo2;
  FCommonData_Specified := True;
end;

function ReactionEventsFromDevicesSlimInfo2.CommonData_Specified(Index: Integer): boolean;
begin
  Result := FCommonData_Specified;
end;

procedure UserPassEditorData2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function UserPassEditorData2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure ReactionEventSlimInfo2.SetEventType(Index: Integer; const AReactionEventType: ReactionEventType);
begin
  FEventType := AReactionEventType;
  FEventType_Specified := True;
end;

function ReactionEventSlimInfo2.EventType_Specified(Index: Integer): boolean;
begin
  Result := FEventType_Specified;
end;

procedure ReactionEventSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function ReactionEventSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure ReactionEventSlimInfo2.SetReactionId(Index: Integer; const Aguid: guid);
begin
  FReactionId := Aguid;
  FReactionId_Specified := True;
end;

function ReactionEventSlimInfo2.ReactionId_Specified(Index: Integer): boolean;
begin
  Result := FReactionId_Specified;
end;

procedure ReactionSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function ReactionSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure ReactionSlimInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function ReactionSlimInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

destructor ReactionFullInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FActions)-1 do
    System.SysUtils.FreeAndNil(FActions[I]);
  System.SetLength(FActions, 0);
  for I := 0 to System.Length(FEvents)-1 do
    System.SysUtils.FreeAndNil(FEvents[I]);
  System.SetLength(FEvents, 0);
  inherited Destroy;
end;

procedure ReactionFullInfo2.SetActions(Index: Integer; const AArrayOfReactionActionSlimInfo: ArrayOfReactionActionSlimInfo);
begin
  FActions := AArrayOfReactionActionSlimInfo;
  FActions_Specified := True;
end;

function ReactionFullInfo2.Actions_Specified(Index: Integer): boolean;
begin
  Result := FActions_Specified;
end;

procedure ReactionFullInfo2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ReactionFullInfo2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ReactionFullInfo2.SetEvents(Index: Integer; const AArrayOfReactionEventSlimInfo: ArrayOfReactionEventSlimInfo);
begin
  FEvents := AArrayOfReactionEventSlimInfo;
  FEvents_Specified := True;
end;

function ReactionFullInfo2.Events_Specified(Index: Integer): boolean;
begin
  Result := FEvents_Specified;
end;

procedure WorkScheduleSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function WorkScheduleSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure WorkZoneSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function WorkZoneSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure WorkZonesAccessPointBase2.SetAccesPointType(Index: Integer; const AWorkZonesAccessPointType: WorkZonesAccessPointType);
begin
  FAccesPointType := AWorkZonesAccessPointType;
  FAccesPointType_Specified := True;
end;

function WorkZonesAccessPointBase2.AccesPointType_Specified(Index: Integer): boolean;
begin
  Result := FAccesPointType_Specified;
end;

procedure WorkZonesAccessPointBase2.SetEventType(Index: Integer; const AWorkZonesAccessPointEventType: WorkZonesAccessPointEventType);
begin
  FEventType := AWorkZonesAccessPointEventType;
  FEventType_Specified := True;
end;

function WorkZonesAccessPointBase2.EventType_Specified(Index: Integer): boolean;
begin
  Result := FEventType_Specified;
end;

procedure WorkZonesAccessPointBase2.SetWorkZoneId(Index: Integer; const Aguid: guid);
begin
  FWorkZoneId := Aguid;
  FWorkZoneId_Specified := True;
end;

function WorkZonesAccessPointBase2.WorkZoneId_Specified(Index: Integer): boolean;
begin
  Result := FWorkZoneId_Specified;
end;

destructor WorkZonesAccessPointSlimInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FAcsAccessPointDriverInfo);
  inherited Destroy;
end;

procedure WorkZonesAccessPointSlimInfo2.SetAcsAccessPointDriverInfo(Index: Integer; const AAcsAccessPointDriverInfo2: AcsAccessPointDriverInfo2);
begin
  FAcsAccessPointDriverInfo := AAcsAccessPointDriverInfo2;
  FAcsAccessPointDriverInfo_Specified := True;
end;

function WorkZonesAccessPointSlimInfo2.AcsAccessPointDriverInfo_Specified(Index: Integer): boolean;
begin
  Result := FAcsAccessPointDriverInfo_Specified;
end;

procedure WorkZonesAccessPointSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function WorkZonesAccessPointSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure WorkZonesAccessPointSaveData2.SetDriverID(Index: Integer; const Aguid: guid);
begin
  FDriverID := Aguid;
  FDriverID_Specified := True;
end;

function WorkZonesAccessPointSaveData2.DriverID_Specified(Index: Integer): boolean;
begin
  Result := FDriverID_Specified;
end;

procedure AcsAccessPointSaveData2.SetAcsBoxAccessLevelID(Index: Integer; const Aguid: guid);
begin
  FAcsBoxAccessLevelID := Aguid;
  FAcsBoxAccessLevelID_Specified := True;
end;

function AcsAccessPointSaveData2.AcsBoxAccessLevelID_Specified(Index: Integer): boolean;
begin
  Result := FAcsBoxAccessLevelID_Specified;
end;

procedure AcsAccessPointSaveData2.SetScheduleId(Index: Integer; const Aguid: guid);
begin
  FScheduleId := Aguid;
  FScheduleId_Specified := True;
end;

function AcsAccessPointSaveData2.ScheduleId_Specified(Index: Integer): boolean;
begin
  Result := FScheduleId_Specified;
end;

destructor AcsAccessPointSlimInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FAcsAccessPointDriverInfo);
  System.SysUtils.FreeAndNil(FBoxAccessLevel);
  System.SysUtils.FreeAndNil(FSchedule);
  inherited Destroy;
end;

procedure AcsAccessPointSlimInfo2.SetAcsAccessLevelId(Index: Integer; const Aguid: guid);
begin
  FAcsAccessLevelId := Aguid;
  FAcsAccessLevelId_Specified := True;
end;

function AcsAccessPointSlimInfo2.AcsAccessLevelId_Specified(Index: Integer): boolean;
begin
  Result := FAcsAccessLevelId_Specified;
end;

procedure AcsAccessPointSlimInfo2.SetAcsAccessPointDriverInfo(Index: Integer; const AAcsAccessPointDriverInfo2: AcsAccessPointDriverInfo2);
begin
  FAcsAccessPointDriverInfo := AAcsAccessPointDriverInfo2;
  FAcsAccessPointDriverInfo_Specified := True;
end;

function AcsAccessPointSlimInfo2.AcsAccessPointDriverInfo_Specified(Index: Integer): boolean;
begin
  Result := FAcsAccessPointDriverInfo_Specified;
end;

procedure AcsAccessPointSlimInfo2.SetBoxAccessLevel(Index: Integer; const AAcsBoxAccessLevelSlimInfo2: AcsBoxAccessLevelSlimInfo2);
begin
  FBoxAccessLevel := AAcsBoxAccessLevelSlimInfo2;
  FBoxAccessLevel_Specified := True;
end;

function AcsAccessPointSlimInfo2.BoxAccessLevel_Specified(Index: Integer): boolean;
begin
  Result := FBoxAccessLevel_Specified;
end;

procedure AcsAccessPointSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function AcsAccessPointSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure AcsAccessPointSlimInfo2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function AcsAccessPointSlimInfo2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure AcsAccessPointSlimInfo2.SetSchedule(Index: Integer; const AAcsScheduleSlimInfo2: AcsScheduleSlimInfo2);
begin
  FSchedule := AAcsScheduleSlimInfo2;
  FSchedule_Specified := True;
end;

function AcsAccessPointSlimInfo2.Schedule_Specified(Index: Integer): boolean;
begin
  Result := FSchedule_Specified;
end;

procedure AcsVehicleSearched2.SetGroupID(Index: Integer; const Aguid: guid);
begin
  FGroupID := Aguid;
  FGroupID_Specified := True;
end;

function AcsVehicleSearched2.GroupID_Specified(Index: Integer): boolean;
begin
  Result := FGroupID_Specified;
end;

procedure AcsVehicleSearched2.SetVehicleID(Index: Integer; const Aguid: guid);
begin
  FVehicleID := Aguid;
  FVehicleID_Specified := True;
end;

function AcsVehicleSearched2.VehicleID_Specified(Index: Integer): boolean;
begin
  Result := FVehicleID_Specified;
end;

procedure AcsEmployeeFaceVector2.SetEmployeeID(Index: Integer; const Aguid: guid);
begin
  FEmployeeID := Aguid;
  FEmployeeID_Specified := True;
end;

function AcsEmployeeFaceVector2.EmployeeID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeID_Specified;
end;

procedure AcsEmployeeFaceVector2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function AcsEmployeeFaceVector2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure AcsEmployeeFaceVector2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AcsEmployeeFaceVector2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AcsEmployeeFaceVector2.SetSourceName(Index: Integer; const Astring: string);
begin
  FSourceName := Astring;
  FSourceName_Specified := True;
end;

function AcsEmployeeFaceVector2.SourceName_Specified(Index: Integer): boolean;
begin
  Result := FSourceName_Specified;
end;

procedure AcsEmployeeFaceVector2.SetSourcePath(Index: Integer; const Astring: string);
begin
  FSourcePath := Astring;
  FSourcePath_Specified := True;
end;

function AcsEmployeeFaceVector2.SourcePath_Specified(Index: Integer): boolean;
begin
  Result := FSourcePath_Specified;
end;

procedure AcsEmployeeFaceVector2.SetSourceType(Index: Integer; const AFaceSourceType: FaceSourceType);
begin
  FSourceType := AFaceSourceType;
  FSourceType_Specified := True;
end;

function AcsEmployeeFaceVector2.SourceType_Specified(Index: Integer): boolean;
begin
  Result := FSourceType_Specified;
end;

procedure AcsEmployeeFaceVectorFull2.SetFaceVector(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFaceVector := ATArray;
  FFaceVector_Specified := True;
end;

function AcsEmployeeFaceVectorFull2.FaceVector_Specified(Index: Integer): boolean;
begin
  Result := FFaceVector_Specified;
end;

procedure AcsEmployeeFaceVectorFull2.SetImage(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FImage := ATArray;
  FImage_Specified := True;
end;

function AcsEmployeeFaceVectorFull2.Image_Specified(Index: Integer): boolean;
begin
  Result := FImage_Specified;
end;

procedure AcsEmployeeFaceVectorFull2.SetInfo(Index: Integer; const Astring: string);
begin
  FInfo := Astring;
  FInfo_Specified := True;
end;

function AcsEmployeeFaceVectorFull2.Info_Specified(Index: Integer): boolean;
begin
  Result := FInfo_Specified;
end;

procedure EmployeeShortInfo2.SetEmployeeGroup(Index: Integer; const Astring: string);
begin
  FEmployeeGroup := Astring;
  FEmployeeGroup_Specified := True;
end;

function EmployeeShortInfo2.EmployeeGroup_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroup_Specified;
end;

procedure EmployeeShortInfo2.SetEmployeeGroupID(Index: Integer; const Aguid: guid);
begin
  FEmployeeGroupID := Aguid;
  FEmployeeGroupID_Specified := True;
end;

function EmployeeShortInfo2.EmployeeGroupID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroupID_Specified;
end;

procedure EmployeeShortInfo2.SetFIO(Index: Integer; const Astring: string);
begin
  FFIO := Astring;
  FFIO_Specified := True;
end;

function EmployeeShortInfo2.FIO_Specified(Index: Integer): boolean;
begin
  Result := FFIO_Specified;
end;

procedure EmployeeShortInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function EmployeeShortInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure AcsEmployee2.SetEmployeeID(Index: Integer; const Aguid: guid);
begin
  FEmployeeID := Aguid;
  FEmployeeID_Specified := True;
end;

function AcsEmployee2.EmployeeID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeID_Specified;
end;

procedure AcsEmployee2.SetGroupID(Index: Integer; const Aguid: guid);
begin
  FGroupID := Aguid;
  FGroupID_Specified := True;
end;

function AcsEmployee2.GroupID_Specified(Index: Integer): boolean;
begin
  Result := FGroupID_Specified;
end;

destructor AcsEmployeePhotosInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FPhotos)-1 do
    System.SysUtils.FreeAndNil(FPhotos[I]);
  System.SetLength(FPhotos, 0);
  inherited Destroy;
end;

procedure AcsEmployeePhotosInfo2.SetFirstName(Index: Integer; const Astring: string);
begin
  FFirstName := Astring;
  FFirstName_Specified := True;
end;

function AcsEmployeePhotosInfo2.FirstName_Specified(Index: Integer): boolean;
begin
  Result := FFirstName_Specified;
end;

procedure AcsEmployeePhotosInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function AcsEmployeePhotosInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure AcsEmployeePhotosInfo2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function AcsEmployeePhotosInfo2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure AcsEmployeePhotosInfo2.SetLastName(Index: Integer; const Astring: string);
begin
  FLastName := Astring;
  FLastName_Specified := True;
end;

function AcsEmployeePhotosInfo2.LastName_Specified(Index: Integer): boolean;
begin
  Result := FLastName_Specified;
end;

procedure AcsEmployeePhotosInfo2.SetPhotos(Index: Integer; const AArrayOfAscEmployeePhotoModificationDateTimeInfo: ArrayOfAscEmployeePhotoModificationDateTimeInfo);
begin
  FPhotos := AArrayOfAscEmployeePhotoModificationDateTimeInfo;
  FPhotos_Specified := True;
end;

function AcsEmployeePhotosInfo2.Photos_Specified(Index: Integer): boolean;
begin
  Result := FPhotos_Specified;
end;

procedure AcsEmployeePhotosInfo2.SetSecondName(Index: Integer; const Astring: string);
begin
  FSecondName := Astring;
  FSecondName_Specified := True;
end;

function AcsEmployeePhotosInfo2.SecondName_Specified(Index: Integer): boolean;
begin
  Result := FSecondName_Specified;
end;

procedure Absent2.SetDeparmentGuid(Index: Integer; const Aguid: guid);
begin
  FDeparmentGuid := Aguid;
  FDeparmentGuid_Specified := True;
end;

function Absent2.DeparmentGuid_Specified(Index: Integer): boolean;
begin
  Result := FDeparmentGuid_Specified;
end;

procedure Absent2.SetDepartmentName(Index: Integer; const Astring: string);
begin
  FDepartmentName := Astring;
  FDepartmentName_Specified := True;
end;

function Absent2.DepartmentName_Specified(Index: Integer): boolean;
begin
  Result := FDepartmentName_Specified;
end;

procedure Absent2.SetEmployeeGuid(Index: Integer; const Aguid: guid);
begin
  FEmployeeGuid := Aguid;
  FEmployeeGuid_Specified := True;
end;

function Absent2.EmployeeGuid_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGuid_Specified;
end;

procedure Absent2.SetFirstName(Index: Integer; const Astring: string);
begin
  FFirstName := Astring;
  FFirstName_Specified := True;
end;

function Absent2.FirstName_Specified(Index: Integer): boolean;
begin
  Result := FFirstName_Specified;
end;

procedure Absent2.SetLastName(Index: Integer; const Astring: string);
begin
  FLastName := Astring;
  FLastName_Specified := True;
end;

function Absent2.LastName_Specified(Index: Integer): boolean;
begin
  Result := FLastName_Specified;
end;

procedure Absent2.SetPhoneNumber(Index: Integer; const Astring: string);
begin
  FPhoneNumber := Astring;
  FPhoneNumber_Specified := True;
end;

function Absent2.PhoneNumber_Specified(Index: Integer): boolean;
begin
  Result := FPhoneNumber_Specified;
end;

procedure Absent2.SetPosition(Index: Integer; const Astring: string);
begin
  FPosition := Astring;
  FPosition_Specified := True;
end;

function Absent2.Position_Specified(Index: Integer): boolean;
begin
  Result := FPosition_Specified;
end;

procedure Absent2.SetSecondName(Index: Integer; const Astring: string);
begin
  FSecondName := Astring;
  FSecondName_Specified := True;
end;

function Absent2.SecondName_Specified(Index: Integer): boolean;
begin
  Result := FSecondName_Specified;
end;

procedure Absent2.SetTableNumber(Index: Integer; const AInteger: Integer);
begin
  FTableNumber := AInteger;
  FTableNumber_Specified := True;
end;

function Absent2.TableNumber_Specified(Index: Integer): boolean;
begin
  Result := FTableNumber_Specified;
end;

procedure AcsBoxAccessElementSaveInfo2.SetAccess(Index: Integer; const ABoolean: Boolean);
begin
  FAccess := ABoolean;
  FAccess_Specified := True;
end;

function AcsBoxAccessElementSaveInfo2.Access_Specified(Index: Integer): boolean;
begin
  Result := FAccess_Specified;
end;

procedure AcsBoxAccessElementSaveInfo2.SetAcsBoxAccessLevelId(Index: Integer; const Aguid: guid);
begin
  FAcsBoxAccessLevelId := Aguid;
  FAcsBoxAccessLevelId_Specified := True;
end;

function AcsBoxAccessElementSaveInfo2.AcsBoxAccessLevelId_Specified(Index: Integer): boolean;
begin
  Result := FAcsBoxAccessLevelId_Specified;
end;

procedure AcsBoxAccessElementSaveInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AcsBoxAccessElementSaveInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AcsBoxAccessElementSaveInfo2.SetPosition(Index: Integer; const AInteger: Integer);
begin
  FPosition := AInteger;
  FPosition_Specified := True;
end;

function AcsBoxAccessElementSaveInfo2.Position_Specified(Index: Integer): boolean;
begin
  Result := FPosition_Specified;
end;

procedure AcsBoxAccessLevelElementSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function AcsBoxAccessLevelElementSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure AcsBoxAccessLevelElementSlimInfo2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function AcsBoxAccessLevelElementSlimInfo2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure FavoriteFolderSaveData2.SetLeft(Index: Integer; const AInteger: Integer);
begin
  FLeft := AInteger;
  FLeft_Specified := True;
end;

function FavoriteFolderSaveData2.Left_Specified(Index: Integer): boolean;
begin
  Result := FLeft_Specified;
end;

procedure FavoriteFolderSaveData2.SetLevel(Index: Integer; const AInteger: Integer);
begin
  FLevel := AInteger;
  FLevel_Specified := True;
end;

function FavoriteFolderSaveData2.Level_Specified(Index: Integer): boolean;
begin
  Result := FLevel_Specified;
end;

procedure FavoriteFolderSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function FavoriteFolderSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure FavoriteFolderSaveData2.SetParentID(Index: Integer; const Aguid: guid);
begin
  FParentID := Aguid;
  FParentID_Specified := True;
end;

function FavoriteFolderSaveData2.ParentID_Specified(Index: Integer): boolean;
begin
  Result := FParentID_Specified;
end;

procedure FavoriteFolderSaveData2.SetUserID(Index: Integer; const Aguid: guid);
begin
  FUserID := Aguid;
  FUserID_Specified := True;
end;

function FavoriteFolderSaveData2.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

procedure FavoriteFolderSaveData2.SetWorkplaceID(Index: Integer; const Aguid: guid);
begin
  FWorkplaceID := Aguid;
  FWorkplaceID_Specified := True;
end;

function FavoriteFolderSaveData2.WorkplaceID_Specified(Index: Integer): boolean;
begin
  Result := FWorkplaceID_Specified;
end;

procedure FavoriteFolderInfo2.SetFavoreteFolderRelationName(Index: Integer; const Astring: string);
begin
  FFavoreteFolderRelationName := Astring;
  FFavoreteFolderRelationName_Specified := True;
end;

function FavoriteFolderInfo2.FavoreteFolderRelationName_Specified(Index: Integer): boolean;
begin
  Result := FFavoreteFolderRelationName_Specified;
end;

procedure FavoriteFolderInfo2.SetFavoreteFolderRelationPath(Index: Integer; const Astring: string);
begin
  FFavoreteFolderRelationPath := Astring;
  FFavoreteFolderRelationPath_Specified := True;
end;

function FavoriteFolderInfo2.FavoreteFolderRelationPath_Specified(Index: Integer): boolean;
begin
  Result := FFavoreteFolderRelationPath_Specified;
end;

procedure FavoriteFolderInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function FavoriteFolderInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure FavoriteFolderInfo2.SetLevel(Index: Integer; const AInteger: Integer);
begin
  FLevel := AInteger;
  FLevel_Specified := True;
end;

function FavoriteFolderInfo2.Level_Specified(Index: Integer): boolean;
begin
  Result := FLevel_Specified;
end;

procedure FavoriteFolderInfo2.SetRight(Index: Integer; const AInteger: Integer);
begin
  FRight := AInteger;
  FRight_Specified := True;
end;

function FavoriteFolderInfo2.Right_Specified(Index: Integer): boolean;
begin
  Result := FRight_Specified;
end;

destructor FavoriteFolderInfoWithEmployeeGroup2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FGroups)-1 do
    System.SysUtils.FreeAndNil(FGroups[I]);
  System.SetLength(FGroups, 0);
  inherited Destroy;
end;

procedure FavoriteFolderInfoWithEmployeeGroup2.SetGroups(Index: Integer; const AArrayOfAcsEmployeeGroup: ArrayOfAcsEmployeeGroup);
begin
  FGroups := AArrayOfAcsEmployeeGroup;
  FGroups_Specified := True;
end;

function FavoriteFolderInfoWithEmployeeGroup2.Groups_Specified(Index: Integer): boolean;
begin
  Result := FGroups_Specified;
end;

procedure ScreenCellSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function ScreenCellSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure ScreenCellSaveData2.SetScaleMode(Index: Integer; const AScreenScaleMode: ScreenScaleMode);
begin
  FScaleMode := AScreenScaleMode;
  FScaleMode_Specified := True;
end;

function ScreenCellSaveData2.ScaleMode_Specified(Index: Integer): boolean;
begin
  Result := FScaleMode_Specified;
end;

procedure ScreenCellSaveData2.SetShowName(Index: Integer; const ABoolean: Boolean);
begin
  FShowName := ABoolean;
  FShowName_Specified := True;
end;

function ScreenCellSaveData2.ShowName_Specified(Index: Integer): boolean;
begin
  Result := FShowName_Specified;
end;

procedure ScreenCellSaveData2.SetX(Index: Integer; const AInteger: Integer);
begin
  FX := AInteger;
  FX_Specified := True;
end;

function ScreenCellSaveData2.X_Specified(Index: Integer): boolean;
begin
  Result := FX_Specified;
end;

procedure ScreenCellSaveData2.SetY(Index: Integer; const AInteger: Integer);
begin
  FY := AInteger;
  FY_Specified := True;
end;

function ScreenCellSaveData2.Y_Specified(Index: Integer): boolean;
begin
  Result := FY_Specified;
end;

procedure ScreenCellInfo2.SetContentType(Index: Integer; const AScreenCellContentType: ScreenCellContentType);
begin
  FContentType := AScreenCellContentType;
  FContentType_Specified := True;
end;

function ScreenCellInfo2.ContentType_Specified(Index: Integer): boolean;
begin
  Result := FContentType_Specified;
end;

procedure ScreenCellInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function ScreenCellInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

destructor ScreenCellTreeInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FChildren)-1 do
    System.SysUtils.FreeAndNil(FChildren[I]);
  System.SetLength(FChildren, 0);
  inherited Destroy;
end;

procedure ScreenCellTreeInfo2.SetChildren(Index: Integer; const AArrayOfScreenCellTreeInfo: ArrayOfScreenCellTreeInfo);
begin
  FChildren := AArrayOfScreenCellTreeInfo;
  FChildren_Specified := True;
end;

function ScreenCellTreeInfo2.Children_Specified(Index: Integer): boolean;
begin
  Result := FChildren_Specified;
end;

procedure ReactionRecordVideoActionSaveData2.SetCameraDriverId(Index: Integer; const Aguid: guid);
begin
  FCameraDriverId := Aguid;
  FCameraDriverId_Specified := True;
end;

function ReactionRecordVideoActionSaveData2.CameraDriverId_Specified(Index: Integer): boolean;
begin
  Result := FCameraDriverId_Specified;
end;

procedure ReactionRecordVideoActionSaveData2.SetRecordVideoDuration(Index: Integer; const AInteger: Integer);
begin
  FRecordVideoDuration := AInteger;
  FRecordVideoDuration_Specified := True;
end;

function ReactionRecordVideoActionSaveData2.RecordVideoDuration_Specified(Index: Integer): boolean;
begin
  Result := FRecordVideoDuration_Specified;
end;

procedure ReactionRecordVideoActionSaveData2.SetRecordVideoFromBufferDuration(Index: Integer; const AInteger: Integer);
begin
  FRecordVideoFromBufferDuration := AInteger;
  FRecordVideoFromBufferDuration_Specified := True;
end;

function ReactionRecordVideoActionSaveData2.RecordVideoFromBufferDuration_Specified(Index: Integer): boolean;
begin
  Result := FRecordVideoFromBufferDuration_Specified;
end;

procedure ReactionRecordVideoActionSaveData2.SetRecordVideoPlayOffset(Index: Integer; const AInteger: Integer);
begin
  FRecordVideoPlayOffset := AInteger;
  FRecordVideoPlayOffset_Specified := True;
end;

function ReactionRecordVideoActionSaveData2.RecordVideoPlayOffset_Specified(Index: Integer): boolean;
begin
  Result := FRecordVideoPlayOffset_Specified;
end;

destructor ReactionRecordVideoActionSlimInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FCommonData);
  inherited Destroy;
end;

procedure ReactionRecordVideoActionSlimInfo2.SetCommonData(Index: Integer; const AReactionActionSlimInfo2: ReactionActionSlimInfo2);
begin
  FCommonData := AReactionActionSlimInfo2;
  FCommonData_Specified := True;
end;

function ReactionRecordVideoActionSlimInfo2.CommonData_Specified(Index: Integer): boolean;
begin
  Result := FCommonData_Specified;
end;

procedure ReportSaveData2.SetAdditionalField1(Index: Integer; const Astring: string);
begin
  FAdditionalField1 := Astring;
  FAdditionalField1_Specified := True;
end;

function ReportSaveData2.AdditionalField1_Specified(Index: Integer): boolean;
begin
  Result := FAdditionalField1_Specified;
end;

procedure ReportSaveData2.SetAdditionalField2(Index: Integer; const Astring: string);
begin
  FAdditionalField2 := Astring;
  FAdditionalField2_Specified := True;
end;

function ReportSaveData2.AdditionalField2_Specified(Index: Integer): boolean;
begin
  Result := FAdditionalField2_Specified;
end;

procedure ReportSaveData2.SetAdditionalField3(Index: Integer; const Astring: string);
begin
  FAdditionalField3 := Astring;
  FAdditionalField3_Specified := True;
end;

function ReportSaveData2.AdditionalField3_Specified(Index: Integer): boolean;
begin
  Result := FAdditionalField3_Specified;
end;

procedure ReportSaveData2.SetCompany(Index: Integer; const Astring: string);
begin
  FCompany := Astring;
  FCompany_Specified := True;
end;

function ReportSaveData2.Company_Specified(Index: Integer): boolean;
begin
  Result := FCompany_Specified;
end;

procedure ReportSaveData2.SetDepartment(Index: Integer; const Astring: string);
begin
  FDepartment := Astring;
  FDepartment_Specified := True;
end;

function ReportSaveData2.Department_Specified(Index: Integer): boolean;
begin
  Result := FDepartment_Specified;
end;

procedure ReportSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ReportSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ReportSaveData2.SetFilter(Index: Integer; const AInteger: Integer);
begin
  FFilter := AInteger;
  FFilter_Specified := True;
end;

function ReportSaveData2.Filter_Specified(Index: Integer): boolean;
begin
  Result := FFilter_Specified;
end;

procedure ReportSaveData2.SetIdentity(Index: Integer; const Astring: string);
begin
  FIdentity := Astring;
  FIdentity_Specified := True;
end;

function ReportSaveData2.Identity_Specified(Index: Integer): boolean;
begin
  Result := FIdentity_Specified;
end;

procedure ReportSaveData2.SetIsShowAllDevices(Index: Integer; const ABoolean: Boolean);
begin
  FIsShowAllDevices := ABoolean;
  FIsShowAllDevices_Specified := True;
end;

function ReportSaveData2.IsShowAllDevices_Specified(Index: Integer): boolean;
begin
  Result := FIsShowAllDevices_Specified;
end;

procedure ReportSaveData2.SetIsShowAllEmployees(Index: Integer; const ABoolean: Boolean);
begin
  FIsShowAllEmployees := ABoolean;
  FIsShowAllEmployees_Specified := True;
end;

function ReportSaveData2.IsShowAllEmployees_Specified(Index: Integer): boolean;
begin
  Result := FIsShowAllEmployees_Specified;
end;

procedure ReportSaveData2.SetIsShowAllEvents(Index: Integer; const ABoolean: Boolean);
begin
  FIsShowAllEvents := ABoolean;
  FIsShowAllEvents_Specified := True;
end;

function ReportSaveData2.IsShowAllEvents_Specified(Index: Integer): boolean;
begin
  Result := FIsShowAllEvents_Specified;
end;

procedure ReportSaveData2.SetIsShowAllWorkZones(Index: Integer; const ABoolean: Boolean);
begin
  FIsShowAllWorkZones := ABoolean;
  FIsShowAllWorkZones_Specified := True;
end;

function ReportSaveData2.IsShowAllWorkZones_Specified(Index: Integer): boolean;
begin
  Result := FIsShowAllWorkZones_Specified;
end;

procedure ReportSaveData2.SetIsShowEventsWithRelatedData(Index: Integer; const ABoolean: Boolean);
begin
  FIsShowEventsWithRelatedData := ABoolean;
  FIsShowEventsWithRelatedData_Specified := True;
end;

function ReportSaveData2.IsShowEventsWithRelatedData_Specified(Index: Integer): boolean;
begin
  Result := FIsShowEventsWithRelatedData_Specified;
end;

procedure ReportSaveData2.SetIsShowRemovedEmployees(Index: Integer; const ABoolean: Boolean);
begin
  FIsShowRemovedEmployees := ABoolean;
  FIsShowRemovedEmployees_Specified := True;
end;

function ReportSaveData2.IsShowRemovedEmployees_Specified(Index: Integer): boolean;
begin
  Result := FIsShowRemovedEmployees_Specified;
end;

procedure ReportSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function ReportSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure ReportSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function ReportSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure UserPassSlimSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function UserPassSlimSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure UserPassSlimSaveData2.SetHeight(Index: Integer; const AInteger: Integer);
begin
  FHeight := AInteger;
  FHeight_Specified := True;
end;

function UserPassSlimSaveData2.Height_Specified(Index: Integer): boolean;
begin
  Result := FHeight_Specified;
end;

procedure UserPassSlimSaveData2.SetIsStandart(Index: Integer; const ABoolean: Boolean);
begin
  FIsStandart := ABoolean;
  FIsStandart_Specified := True;
end;

function UserPassSlimSaveData2.IsStandart_Specified(Index: Integer): boolean;
begin
  Result := FIsStandart_Specified;
end;

procedure UserPassSlimSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function UserPassSlimSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure UserPassSlimSaveData2.SetStandartHeight(Index: Integer; const AInteger: Integer);
begin
  FStandartHeight := AInteger;
  FStandartHeight_Specified := True;
end;

function UserPassSlimSaveData2.StandartHeight_Specified(Index: Integer): boolean;
begin
  Result := FStandartHeight_Specified;
end;

procedure UserPassSlimSaveData2.SetStandartWidth(Index: Integer; const AInteger: Integer);
begin
  FStandartWidth := AInteger;
  FStandartWidth_Specified := True;
end;

function UserPassSlimSaveData2.StandartWidth_Specified(Index: Integer): boolean;
begin
  Result := FStandartWidth_Specified;
end;

procedure UserPassSlimSaveData2.SetWidth(Index: Integer; const AInteger: Integer);
begin
  FWidth := AInteger;
  FWidth_Specified := True;
end;

function UserPassSlimSaveData2.Width_Specified(Index: Integer): boolean;
begin
  Result := FWidth_Specified;
end;

procedure UserPassSlimData2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function UserPassSlimData2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure UserPassFullSaveData2.SetBackgroindImage(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FBackgroindImage := ATArray;
  FBackgroindImage_Specified := True;
end;

function UserPassFullSaveData2.BackgroindImage_Specified(Index: Integer): boolean;
begin
  Result := FBackgroindImage_Specified;
end;

procedure UserPassFullSaveData2.SetBackgroundColor(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FBackgroundColor := ATArray;
  FBackgroundColor_Specified := True;
end;

function UserPassFullSaveData2.BackgroundColor_Specified(Index: Integer): boolean;
begin
  Result := FBackgroundColor_Specified;
end;

procedure UserPassFullSaveData2.SetBackgroundScaleMode(Index: Integer; const AScreenScaleMode: ScreenScaleMode);
begin
  FBackgroundScaleMode := AScreenScaleMode;
  FBackgroundScaleMode_Specified := True;
end;

function UserPassFullSaveData2.BackgroundScaleMode_Specified(Index: Integer): boolean;
begin
  Result := FBackgroundScaleMode_Specified;
end;

procedure UserPassFullSaveData2.SetBackgroundType(Index: Integer; const APassBackgroundType: PassBackgroundType);
begin
  FBackgroundType := APassBackgroundType;
  FBackgroundType_Specified := True;
end;

function UserPassFullSaveData2.BackgroundType_Specified(Index: Integer): boolean;
begin
  Result := FBackgroundType_Specified;
end;

procedure UserPassFullSaveData2.SetHeight(Index: Integer; const AInteger: Integer);
begin
  FHeight := AInteger;
  FHeight_Specified := True;
end;

function UserPassFullSaveData2.Height_Specified(Index: Integer): boolean;
begin
  Result := FHeight_Specified;
end;

procedure UserPassFullSaveData2.SetIsStandart(Index: Integer; const ABoolean: Boolean);
begin
  FIsStandart := ABoolean;
  FIsStandart_Specified := True;
end;

function UserPassFullSaveData2.IsStandart_Specified(Index: Integer): boolean;
begin
  Result := FIsStandart_Specified;
end;

procedure UserPassFullSaveData2.SetStandartHeight(Index: Integer; const AInteger: Integer);
begin
  FStandartHeight := AInteger;
  FStandartHeight_Specified := True;
end;

function UserPassFullSaveData2.StandartHeight_Specified(Index: Integer): boolean;
begin
  Result := FStandartHeight_Specified;
end;

procedure UserPassFullSaveData2.SetStandartWidth(Index: Integer; const AInteger: Integer);
begin
  FStandartWidth := AInteger;
  FStandartWidth_Specified := True;
end;

function UserPassFullSaveData2.StandartWidth_Specified(Index: Integer): boolean;
begin
  Result := FStandartWidth_Specified;
end;

procedure UserPassFullSaveData2.SetWidth(Index: Integer; const AInteger: Integer);
begin
  FWidth := AInteger;
  FWidth_Specified := True;
end;

function UserPassFullSaveData2.Width_Specified(Index: Integer): boolean;
begin
  Result := FWidth_Specified;
end;

destructor UserPassFullData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FUserPassEditors)-1 do
    System.SysUtils.FreeAndNil(FUserPassEditors[I]);
  System.SetLength(FUserPassEditors, 0);
  inherited Destroy;
end;

procedure UserPassFullData2.SetUserPassEditors(Index: Integer; const AArrayOfUserPassEditorData: ArrayOfUserPassEditorData);
begin
  FUserPassEditors := AArrayOfUserPassEditorData;
  FUserPassEditors_Specified := True;
end;

function UserPassFullData2.UserPassEditors_Specified(Index: Integer): boolean;
begin
  Result := FUserPassEditors_Specified;
end;

procedure ReactionActionSaveData2.SetIsActive(Index: Integer; const ABoolean: Boolean);
begin
  FIsActive := ABoolean;
  FIsActive_Specified := True;
end;

function ReactionActionSaveData2.IsActive_Specified(Index: Integer): boolean;
begin
  Result := FIsActive_Specified;
end;

procedure ReactionActionSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function ReactionActionSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure ReactionActionSaveData2.SetOrderNumber(Index: Integer; const AInteger: Integer);
begin
  FOrderNumber := AInteger;
  FOrderNumber_Specified := True;
end;

function ReactionActionSaveData2.OrderNumber_Specified(Index: Integer): boolean;
begin
  Result := FOrderNumber_Specified;
end;

procedure ReactionActionSlimInfo2.SetActionType(Index: Integer; const AReactionActionType: ReactionActionType);
begin
  FActionType := AReactionActionType;
  FActionType_Specified := True;
end;

function ReactionActionSlimInfo2.ActionType_Specified(Index: Integer): boolean;
begin
  Result := FActionType_Specified;
end;

procedure ReactionActionSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function ReactionActionSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure ReactionActionSlimInfo2.SetReactionId(Index: Integer; const Aguid: guid);
begin
  FReactionId := Aguid;
  FReactionId_Specified := True;
end;

function ReactionActionSlimInfo2.ReactionId_Specified(Index: Integer): boolean;
begin
  Result := FReactionId_Specified;
end;

procedure DayTypeSaveData2.SetConvention(Index: Integer; const Astring: string);
begin
  FConvention := Astring;
  FConvention_Specified := True;
end;

function DayTypeSaveData2.Convention_Specified(Index: Integer): boolean;
begin
  Result := FConvention_Specified;
end;

procedure DayTypeSaveData2.SetDayMode(Index: Integer; const ADayMode: DayMode);
begin
  FDayMode := ADayMode;
  FDayMode_Specified := True;
end;

function DayTypeSaveData2.DayMode_Specified(Index: Integer): boolean;
begin
  Result := FDayMode_Specified;
end;

procedure DayTypeSaveData2.SetDigitalConvention(Index: Integer; const AInteger: Integer);
begin
  FDigitalConvention := AInteger;
  FDigitalConvention_Specified := True;
end;

function DayTypeSaveData2.DigitalConvention_Specified(Index: Integer): boolean;
begin
  Result := FDigitalConvention_Specified;
end;

procedure DayTypeSaveData2.SetIsStandart(Index: Integer; const ABoolean: Boolean);
begin
  FIsStandart := ABoolean;
  FIsStandart_Specified := True;
end;

function DayTypeSaveData2.IsStandart_Specified(Index: Integer): boolean;
begin
  Result := FIsStandart_Specified;
end;

procedure DayTypeSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function DayTypeSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure DayTypeSaveData2.SetRowColor(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FRowColor := ATArray;
  FRowColor_Specified := True;
end;

function DayTypeSaveData2.RowColor_Specified(Index: Integer): boolean;
begin
  Result := FRowColor_Specified;
end;

procedure DayTypeSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function DayTypeSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

destructor AccessPointData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FPoints)-1 do
    System.SysUtils.FreeAndNil(FPoints[I]);
  System.SetLength(FPoints, 0);
  inherited Destroy;
end;

procedure AccessPointData2.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function AccessPointData2.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

procedure AccessPointData2.SetPageSize(Index: Integer; const AInteger: Integer);
begin
  FPageSize := AInteger;
  FPageSize_Specified := True;
end;

function AccessPointData2.PageSize_Specified(Index: Integer): boolean;
begin
  Result := FPageSize_Specified;
end;

procedure AccessPointData2.SetPoints(Index: Integer; const AArrayOfAcsAccessPointDriverInfo: ArrayOfAcsAccessPointDriverInfo);
begin
  FPoints := AArrayOfAcsAccessPointDriverInfo;
  FPoints_Specified := True;
end;

function AccessPointData2.Points_Specified(Index: Integer): boolean;
begin
  Result := FPoints_Specified;
end;

procedure AccessPointData2.SetTotalCount(Index: Integer; const AInteger: Integer);
begin
  FTotalCount := AInteger;
  FTotalCount_Specified := True;
end;

function AccessPointData2.TotalCount_Specified(Index: Integer): boolean;
begin
  Result := FTotalCount_Specified;
end;

procedure AcsEmployeeSlimBase2.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function AcsEmployeeSlimBase2.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

procedure AcsEmployeeSlimBase2.SetFirstName(Index: Integer; const Astring: string);
begin
  FFirstName := Astring;
  FFirstName_Specified := True;
end;

function AcsEmployeeSlimBase2.FirstName_Specified(Index: Integer): boolean;
begin
  Result := FFirstName_Specified;
end;

procedure AcsEmployeeSlimBase2.SetIsLocked(Index: Integer; const ABoolean: Boolean);
begin
  FIsLocked := ABoolean;
  FIsLocked_Specified := True;
end;

function AcsEmployeeSlimBase2.IsLocked_Specified(Index: Integer): boolean;
begin
  Result := FIsLocked_Specified;
end;

procedure AcsEmployeeSlimBase2.SetLastName(Index: Integer; const Astring: string);
begin
  FLastName := Astring;
  FLastName_Specified := True;
end;

function AcsEmployeeSlimBase2.LastName_Specified(Index: Integer): boolean;
begin
  Result := FLastName_Specified;
end;

procedure AcsEmployeeSlimBase2.SetNumber(Index: Integer; const AInteger: Integer);
begin
  FNumber := AInteger;
  FNumber_Specified := True;
end;

function AcsEmployeeSlimBase2.Number_Specified(Index: Integer): boolean;
begin
  Result := FNumber_Specified;
end;

procedure AcsEmployeeSlimBase2.SetSecondName(Index: Integer; const Astring: string);
begin
  FSecondName := Astring;
  FSecondName_Specified := True;
end;

function AcsEmployeeSlimBase2.SecondName_Specified(Index: Integer): boolean;
begin
  Result := FSecondName_Specified;
end;

procedure AcsEmployeeInfo2.SetGroupCode(Index: Integer; const Astring: string);
begin
  FGroupCode := Astring;
  FGroupCode_Specified := True;
end;

function AcsEmployeeInfo2.GroupCode_Specified(Index: Integer): boolean;
begin
  Result := FGroupCode_Specified;
end;

procedure AcsEmployeeInfo2.SetGroupID(Index: Integer; const Aguid: guid);
begin
  FGroupID := Aguid;
  FGroupID_Specified := True;
end;

function AcsEmployeeInfo2.GroupID_Specified(Index: Integer): boolean;
begin
  Result := FGroupID_Specified;
end;

procedure AcsEmployeeInfo2.SetGroupName(Index: Integer; const Astring: string);
begin
  FGroupName := Astring;
  FGroupName_Specified := True;
end;

function AcsEmployeeInfo2.GroupName_Specified(Index: Integer): boolean;
begin
  Result := FGroupName_Specified;
end;

procedure AcsEmployeeInfo2.SetGroupPath(Index: Integer; const Astring: string);
begin
  FGroupPath := Astring;
  FGroupPath_Specified := True;
end;

function AcsEmployeeInfo2.GroupPath_Specified(Index: Integer): boolean;
begin
  Result := FGroupPath_Specified;
end;

procedure AcsEmployeeInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function AcsEmployeeInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure AcsEmployeeInfo2.SetPositionCode(Index: Integer; const Astring: string);
begin
  FPositionCode := Astring;
  FPositionCode_Specified := True;
end;

function AcsEmployeeInfo2.PositionCode_Specified(Index: Integer): boolean;
begin
  Result := FPositionCode_Specified;
end;

procedure AcsEmployeeInfo2.SetPositionName(Index: Integer; const Astring: string);
begin
  FPositionName := Astring;
  FPositionName_Specified := True;
end;

function AcsEmployeeInfo2.PositionName_Specified(Index: Integer): boolean;
begin
  Result := FPositionName_Specified;
end;

procedure AcsEmployeeInfo2.SetSecurityGroupID(Index: Integer; const Aguid: guid);
begin
  FSecurityGroupID := Aguid;
  FSecurityGroupID_Specified := True;
end;

function AcsEmployeeInfo2.SecurityGroupID_Specified(Index: Integer): boolean;
begin
  Result := FSecurityGroupID_Specified;
end;

procedure AcsEmployeeInfo2.SetSecurityGroupName(Index: Integer; const Astring: string);
begin
  FSecurityGroupName := Astring;
  FSecurityGroupName_Specified := True;
end;

function AcsEmployeeInfo2.SecurityGroupName_Specified(Index: Integer): boolean;
begin
  Result := FSecurityGroupName_Specified;
end;

destructor EmployeesData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FEmployees)-1 do
    System.SysUtils.FreeAndNil(FEmployees[I]);
  System.SetLength(FEmployees, 0);
  inherited Destroy;
end;

procedure EmployeesData2.SetEmployees(Index: Integer; const AArrayOfEmployeeCurentInfo: ArrayOfEmployeeCurentInfo);
begin
  FEmployees := AArrayOfEmployeeCurentInfo;
  FEmployees_Specified := True;
end;

function EmployeesData2.Employees_Specified(Index: Integer): boolean;
begin
  Result := FEmployees_Specified;
end;

procedure EmployeesData2.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function EmployeesData2.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

procedure EmployeesData2.SetPageSize(Index: Integer; const AInteger: Integer);
begin
  FPageSize := AInteger;
  FPageSize_Specified := True;
end;

function EmployeesData2.PageSize_Specified(Index: Integer): boolean;
begin
  Result := FPageSize_Specified;
end;

procedure EmployeesData2.SetTotalCount(Index: Integer; const AInteger: Integer);
begin
  FTotalCount := AInteger;
  FTotalCount_Specified := True;
end;

function EmployeesData2.TotalCount_Specified(Index: Integer): boolean;
begin
  Result := FTotalCount_Specified;
end;

procedure EmployeeCurentInfo2.SetEmployeeGroup(Index: Integer; const Astring: string);
begin
  FEmployeeGroup := Astring;
  FEmployeeGroup_Specified := True;
end;

function EmployeeCurentInfo2.EmployeeGroup_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroup_Specified;
end;

procedure EmployeeCurentInfo2.SetFIO(Index: Integer; const Astring: string);
begin
  FFIO := Astring;
  FFIO_Specified := True;
end;

function EmployeeCurentInfo2.FIO_Specified(Index: Integer): boolean;
begin
  Result := FFIO_Specified;
end;

procedure EmployeeCurentInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function EmployeeCurentInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure EmployeeCurentInfo2.SetPosition(Index: Integer; const Astring: string);
begin
  FPosition := Astring;
  FPosition_Specified := True;
end;

function EmployeeCurentInfo2.Position_Specified(Index: Integer): boolean;
begin
  Result := FPosition_Specified;
end;

procedure EmployeeCurentInfo2.SetTabNumber(Index: Integer; const AInteger: Integer);
begin
  FTabNumber := AInteger;
  FTabNumber_Specified := True;
end;

function EmployeeCurentInfo2.TabNumber_Specified(Index: Integer): boolean;
begin
  Result := FTabNumber_Specified;
end;

procedure Exception2.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function Exception2.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

procedure DataNotFoundException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function DataNotFoundException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

procedure DataConsistencyException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function DataConsistencyException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

procedure DataAlreadyExistsException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function DataAlreadyExistsException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

procedure DriverNotFoundException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function DriverNotFoundException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

procedure RemoveCardTypeException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function RemoveCardTypeException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

procedure DriverVisualStyleNotFoundException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function DriverVisualStyleNotFoundException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

procedure AssignmentAcsKeyException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function AssignmentAcsKeyException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

destructor LEmployeePositionsData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FUserPositions)-1 do
    System.SysUtils.FreeAndNil(FUserPositions[I]);
  System.SetLength(FUserPositions, 0);
  inherited Destroy;
end;

procedure LEmployeePositionsData2.SetCount(Index: Integer; const AInt64: Int64);
begin
  FCount := AInt64;
  FCount_Specified := True;
end;

function LEmployeePositionsData2.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure LEmployeePositionsData2.SetUserPositions(Index: Integer; const AArrayOfLEmployeePositionInfo: ArrayOfLEmployeePositionInfo);
begin
  FUserPositions := AArrayOfLEmployeePositionInfo;
  FUserPositions_Specified := True;
end;

function LEmployeePositionsData2.UserPositions_Specified(Index: Integer): boolean;
begin
  Result := FUserPositions_Specified;
end;

destructor LAccessLevelsData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAccessLevelsSlimInfo)-1 do
    System.SysUtils.FreeAndNil(FAccessLevelsSlimInfo[I]);
  System.SetLength(FAccessLevelsSlimInfo, 0);
  inherited Destroy;
end;

procedure LAccessLevelsData2.SetAccessLevelsSlimInfo(Index: Integer; const AArrayOfAcsAccessLevelSlimInfo: ArrayOfAcsAccessLevelSlimInfo);
begin
  FAccessLevelsSlimInfo := AArrayOfAcsAccessLevelSlimInfo;
  FAccessLevelsSlimInfo_Specified := True;
end;

function LAccessLevelsData2.AccessLevelsSlimInfo_Specified(Index: Integer): boolean;
begin
  Result := FAccessLevelsSlimInfo_Specified;
end;

procedure LAccessLevelsData2.SetCount(Index: Integer; const AInt64: Int64);
begin
  FCount := AInt64;
  FCount_Specified := True;
end;

function LAccessLevelsData2.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure LAccessLevelsData2.SetIsRootOwner(Index: Integer; const ABoolean: Boolean);
begin
  FIsRootOwner := ABoolean;
  FIsRootOwner_Specified := True;
end;

function LAccessLevelsData2.IsRootOwner_Specified(Index: Integer): boolean;
begin
  Result := FIsRootOwner_Specified;
end;

procedure LAccessLevelsData2.SetUseParentAccessLevel(Index: Integer; const ABoolean: Boolean);
begin
  FUseParentAccessLevel := ABoolean;
  FUseParentAccessLevel_Specified := True;
end;

function LAccessLevelsData2.UseParentAccessLevel_Specified(Index: Integer): boolean;
begin
  Result := FUseParentAccessLevel_Specified;
end;

destructor WorkSchedulesData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FWorkSchedulesSlimInfo)-1 do
    System.SysUtils.FreeAndNil(FWorkSchedulesSlimInfo[I]);
  System.SetLength(FWorkSchedulesSlimInfo, 0);
  inherited Destroy;
end;

procedure WorkSchedulesData2.SetCount(Index: Integer; const AInt64: Int64);
begin
  FCount := AInt64;
  FCount_Specified := True;
end;

function WorkSchedulesData2.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure WorkSchedulesData2.SetIsRootOwner(Index: Integer; const ABoolean: Boolean);
begin
  FIsRootOwner := ABoolean;
  FIsRootOwner_Specified := True;
end;

function WorkSchedulesData2.IsRootOwner_Specified(Index: Integer): boolean;
begin
  Result := FIsRootOwner_Specified;
end;

procedure WorkSchedulesData2.SetUseParentWorkSchedule(Index: Integer; const ABoolean: Boolean);
begin
  FUseParentWorkSchedule := ABoolean;
  FUseParentWorkSchedule_Specified := True;
end;

function WorkSchedulesData2.UseParentWorkSchedule_Specified(Index: Integer): boolean;
begin
  Result := FUseParentWorkSchedule_Specified;
end;

procedure WorkSchedulesData2.SetWorkSchedulesSlimInfo(Index: Integer; const AArrayOfWorkScheduleSlimInfo: ArrayOfWorkScheduleSlimInfo);
begin
  FWorkSchedulesSlimInfo := AArrayOfWorkScheduleSlimInfo;
  FWorkSchedulesSlimInfo_Specified := True;
end;

function WorkSchedulesData2.WorkSchedulesSlimInfo_Specified(Index: Integer): boolean;
begin
  Result := FWorkSchedulesSlimInfo_Specified;
end;

destructor WorkZonesData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FWorkZonesSlimInfo)-1 do
    System.SysUtils.FreeAndNil(FWorkZonesSlimInfo[I]);
  System.SetLength(FWorkZonesSlimInfo, 0);
  inherited Destroy;
end;

procedure WorkZonesData2.SetCount(Index: Integer; const AInt64: Int64);
begin
  FCount := AInt64;
  FCount_Specified := True;
end;

function WorkZonesData2.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure WorkZonesData2.SetIsRootOwner(Index: Integer; const ABoolean: Boolean);
begin
  FIsRootOwner := ABoolean;
  FIsRootOwner_Specified := True;
end;

function WorkZonesData2.IsRootOwner_Specified(Index: Integer): boolean;
begin
  Result := FIsRootOwner_Specified;
end;

procedure WorkZonesData2.SetUseParentWorkZone(Index: Integer; const ABoolean: Boolean);
begin
  FUseParentWorkZone := ABoolean;
  FUseParentWorkZone_Specified := True;
end;

function WorkZonesData2.UseParentWorkZone_Specified(Index: Integer): boolean;
begin
  Result := FUseParentWorkZone_Specified;
end;

procedure WorkZonesData2.SetWorkZonesSlimInfo(Index: Integer; const AArrayOfWorkZoneSlimInfo: ArrayOfWorkZoneSlimInfo);
begin
  FWorkZonesSlimInfo := AArrayOfWorkZoneSlimInfo;
  FWorkZonesSlimInfo_Specified := True;
end;

function WorkZonesData2.WorkZonesSlimInfo_Specified(Index: Integer): boolean;
begin
  Result := FWorkZonesSlimInfo_Specified;
end;

destructor EmployeesInfoData22.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FEmployees)-1 do
    System.SysUtils.FreeAndNil(FEmployees[I]);
  System.SetLength(FEmployees, 0);
  inherited Destroy;
end;

procedure EmployeesInfoData22.SetCount(Index: Integer; const AInt64: Int64);
begin
  FCount := AInt64;
  FCount_Specified := True;
end;

function EmployeesInfoData22.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure EmployeesInfoData22.SetEmployees(Index: Integer; const AArrayOfAcsEmployeeInfo: ArrayOfAcsEmployeeInfo);
begin
  FEmployees := AArrayOfAcsEmployeeInfo;
  FEmployees_Specified := True;
end;

function EmployeesInfoData22.Employees_Specified(Index: Integer): boolean;
begin
  Result := FEmployees_Specified;
end;

procedure EmployeesInfoData22.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function EmployeesInfoData22.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

destructor EmployeesInfoData3.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FEmployees)-1 do
    System.SysUtils.FreeAndNil(FEmployees[I]);
  System.SetLength(FEmployees, 0);
  inherited Destroy;
end;

procedure EmployeesInfoData3.SetCount(Index: Integer; const AInt64: Int64);
begin
  FCount := AInt64;
  FCount_Specified := True;
end;

function EmployeesInfoData3.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure EmployeesInfoData3.SetEmployees(Index: Integer; const AArrayOfAcsEmployeeSlim: ArrayOfAcsEmployeeSlim);
begin
  FEmployees := AArrayOfAcsEmployeeSlim;
  FEmployees_Specified := True;
end;

function EmployeesInfoData3.Employees_Specified(Index: Integer): boolean;
begin
  Result := FEmployees_Specified;
end;

procedure EmployeesInfoData3.SetIsFound(Index: Integer; const ABoolean: Boolean);
begin
  FIsFound := ABoolean;
  FIsFound_Specified := True;
end;

function EmployeesInfoData3.IsFound_Specified(Index: Integer): boolean;
begin
  Result := FIsFound_Specified;
end;

procedure EmployeesInfoData3.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function EmployeesInfoData3.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

destructor AcsAccessLevelSlimInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FEndDate);
  inherited Destroy;
end;

procedure AcsAccessLevelSlimInfo2.SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndDate := ATXSDateTime;
  FEndDate_Specified := True;
end;

function AcsAccessLevelSlimInfo2.EndDate_Specified(Index: Integer): boolean;
begin
  Result := FEndDate_Specified;
end;

procedure AcsAccessLevelSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function AcsAccessLevelSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure AcsAccessLevelSlimInfo2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function AcsAccessLevelSlimInfo2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure AcsAccessLevelSlimInfo2.SetReadRightDisabled(Index: Integer; const ABoolean: Boolean);
begin
  FReadRightDisabled := ABoolean;
  FReadRightDisabled_Specified := True;
end;

function AcsAccessLevelSlimInfo2.ReadRightDisabled_Specified(Index: Integer): boolean;
begin
  Result := FReadRightDisabled_Specified;
end;

destructor AcsKeySaveData2.Destroy;
begin
  System.SysUtils.FreeAndNil(FEndDate);
  System.SysUtils.FreeAndNil(FStartDate);
  inherited Destroy;
end;

procedure AcsKeySaveData2.SetCardTypeID(Index: Integer; const Aguid: guid);
begin
  FCardTypeID := Aguid;
  FCardTypeID_Specified := True;
end;

function AcsKeySaveData2.CardTypeID_Specified(Index: Integer): boolean;
begin
  Result := FCardTypeID_Specified;
end;

procedure AcsKeySaveData2.SetCardTypeName(Index: Integer; const Astring: string);
begin
  FCardTypeName := Astring;
  FCardTypeName_Specified := True;
end;

function AcsKeySaveData2.CardTypeName_Specified(Index: Integer): boolean;
begin
  Result := FCardTypeName_Specified;
end;

procedure AcsKeySaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function AcsKeySaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure AcsKeySaveData2.SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndDate := ATXSDateTime;
  FEndDate_Specified := True;
end;

function AcsKeySaveData2.EndDate_Specified(Index: Integer): boolean;
begin
  Result := FEndDate_Specified;
end;

procedure AcsKeySaveData2.SetFinger1_Image(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger1_Image := ATArray;
  FFinger1_Image_Specified := True;
end;

function AcsKeySaveData2.Finger1_Image_Specified(Index: Integer): boolean;
begin
  Result := FFinger1_Image_Specified;
end;

procedure AcsKeySaveData2.SetFinger1_Template(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger1_Template := ATArray;
  FFinger1_Template_Specified := True;
end;

function AcsKeySaveData2.Finger1_Template_Specified(Index: Integer): boolean;
begin
  Result := FFinger1_Template_Specified;
end;

procedure AcsKeySaveData2.SetFinger2_Image(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger2_Image := ATArray;
  FFinger2_Image_Specified := True;
end;

function AcsKeySaveData2.Finger2_Image_Specified(Index: Integer): boolean;
begin
  Result := FFinger2_Image_Specified;
end;

procedure AcsKeySaveData2.SetFinger2_Template(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger2_Template := ATArray;
  FFinger2_Template_Specified := True;
end;

function AcsKeySaveData2.Finger2_Template_Specified(Index: Integer): boolean;
begin
  Result := FFinger2_Template_Specified;
end;

procedure AcsKeySaveData2.SetFinger3_Image(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger3_Image := ATArray;
  FFinger3_Image_Specified := True;
end;

function AcsKeySaveData2.Finger3_Image_Specified(Index: Integer): boolean;
begin
  Result := FFinger3_Image_Specified;
end;

procedure AcsKeySaveData2.SetFinger3_Template(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger3_Template := ATArray;
  FFinger3_Template_Specified := True;
end;

function AcsKeySaveData2.Finger3_Template_Specified(Index: Integer): boolean;
begin
  Result := FFinger3_Template_Specified;
end;

procedure AcsKeySaveData2.SetFinger4_Image(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger4_Image := ATArray;
  FFinger4_Image_Specified := True;
end;

function AcsKeySaveData2.Finger4_Image_Specified(Index: Integer): boolean;
begin
  Result := FFinger4_Image_Specified;
end;

procedure AcsKeySaveData2.SetFinger4_Template(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger4_Template := ATArray;
  FFinger4_Template_Specified := True;
end;

function AcsKeySaveData2.Finger4_Template_Specified(Index: Integer): boolean;
begin
  Result := FFinger4_Template_Specified;
end;

procedure AcsKeySaveData2.SetFinger5_Image(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger5_Image := ATArray;
  FFinger5_Image_Specified := True;
end;

function AcsKeySaveData2.Finger5_Image_Specified(Index: Integer): boolean;
begin
  Result := FFinger5_Image_Specified;
end;

procedure AcsKeySaveData2.SetFinger5_Template(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger5_Template := ATArray;
  FFinger5_Template_Specified := True;
end;

function AcsKeySaveData2.Finger5_Template_Specified(Index: Integer): boolean;
begin
  Result := FFinger5_Template_Specified;
end;

procedure AcsKeySaveData2.SetKeyNumber(Index: Integer; const AInt64: Int64);
begin
  FKeyNumber := AInt64;
  FKeyNumber_Specified := True;
end;

function AcsKeySaveData2.KeyNumber_Specified(Index: Integer): boolean;
begin
  Result := FKeyNumber_Specified;
end;

procedure AcsKeySaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AcsKeySaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AcsKeySaveData2.SetStartDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartDate := ATXSDateTime;
  FStartDate_Specified := True;
end;

function AcsKeySaveData2.StartDate_Specified(Index: Integer): boolean;
begin
  Result := FStartDate_Specified;
end;

destructor AcsKeyInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FAssignmentModificationDateTime);
  inherited Destroy;
end;

procedure AcsKeyInfo2.SetAcsEmployeeId(Index: Integer; const Aguid: guid);
begin
  FAcsEmployeeId := Aguid;
  FAcsEmployeeId_Specified := True;
end;

function AcsKeyInfo2.AcsEmployeeId_Specified(Index: Integer): boolean;
begin
  Result := FAcsEmployeeId_Specified;
end;

procedure AcsKeyInfo2.SetAssignmentModificationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FAssignmentModificationDateTime := ATXSDateTime;
  FAssignmentModificationDateTime_Specified := True;
end;

function AcsKeyInfo2.AssignmentModificationDateTime_Specified(Index: Integer): boolean;
begin
  Result := FAssignmentModificationDateTime_Specified;
end;

procedure AcsKeyInfo2.SetIndexNumber(Index: Integer; const AInteger: Integer);
begin
  FIndexNumber := AInteger;
  FIndexNumber_Specified := True;
end;

function AcsKeyInfo2.IndexNumber_Specified(Index: Integer): boolean;
begin
  Result := FIndexNumber_Specified;
end;

procedure AcsKeyInfo2.SetIsLost(Index: Integer; const ABoolean: Boolean);
begin
  FIsLost := ABoolean;
  FIsLost_Specified := True;
end;

function AcsKeyInfo2.IsLost_Specified(Index: Integer): boolean;
begin
  Result := FIsLost_Specified;
end;

destructor WorkTimetableSlimInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FAbsence);
  System.SysUtils.FreeAndNil(FBreakBeginTime);
  System.SysUtils.FreeAndNil(FBreakEndTime);
  System.SysUtils.FreeAndNil(FDate);
  System.SysUtils.FreeAndNil(FDayMode);
  System.SysUtils.FreeAndNil(FEarlyArrival);
  System.SysUtils.FreeAndNil(FEarlyDeparture);
  System.SysUtils.FreeAndNil(FEntryTime);
  System.SysUtils.FreeAndNil(FExitTime);
  System.SysUtils.FreeAndNil(FLateArrival);
  System.SysUtils.FreeAndNil(FLateDeparture);
  System.SysUtils.FreeAndNil(FMaxAbsence);
  System.SysUtils.FreeAndNil(FWorkBreak);
  System.SysUtils.FreeAndNil(FWorkTime);
  inherited Destroy;
end;

procedure WorkTimetableSlimInfo2.SetAbsence(Index: Integer; const Aduration: duration);
begin
  FAbsence := Aduration;
  FAbsence_Specified := True;
end;

function WorkTimetableSlimInfo2.Absence_Specified(Index: Integer): boolean;
begin
  Result := FAbsence_Specified;
end;

procedure WorkTimetableSlimInfo2.SetBreakBeginTime(Index: Integer; const Aduration: duration);
begin
  FBreakBeginTime := Aduration;
  FBreakBeginTime_Specified := True;
end;

function WorkTimetableSlimInfo2.BreakBeginTime_Specified(Index: Integer): boolean;
begin
  Result := FBreakBeginTime_Specified;
end;

procedure WorkTimetableSlimInfo2.SetBreakEndTime(Index: Integer; const Aduration: duration);
begin
  FBreakEndTime := Aduration;
  FBreakEndTime_Specified := True;
end;

function WorkTimetableSlimInfo2.BreakEndTime_Specified(Index: Integer): boolean;
begin
  Result := FBreakEndTime_Specified;
end;

procedure WorkTimetableSlimInfo2.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function WorkTimetableSlimInfo2.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

procedure WorkTimetableSlimInfo2.SetDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDate := ATXSDateTime;
  FDate_Specified := True;
end;

function WorkTimetableSlimInfo2.Date_Specified(Index: Integer): boolean;
begin
  Result := FDate_Specified;
end;

procedure WorkTimetableSlimInfo2.SetDayForm(Index: Integer; const ADayForm: DayForm);
begin
  FDayForm := ADayForm;
  FDayForm_Specified := True;
end;

function WorkTimetableSlimInfo2.DayForm_Specified(Index: Integer): boolean;
begin
  Result := FDayForm_Specified;
end;

procedure WorkTimetableSlimInfo2.SetDayMode(Index: Integer; const ADayTypeSlimInfo2: DayTypeSlimInfo2);
begin
  FDayMode := ADayTypeSlimInfo2;
  FDayMode_Specified := True;
end;

function WorkTimetableSlimInfo2.DayMode_Specified(Index: Integer): boolean;
begin
  Result := FDayMode_Specified;
end;

procedure WorkTimetableSlimInfo2.SetEarlyArrival(Index: Integer; const Aduration: duration);
begin
  FEarlyArrival := Aduration;
  FEarlyArrival_Specified := True;
end;

function WorkTimetableSlimInfo2.EarlyArrival_Specified(Index: Integer): boolean;
begin
  Result := FEarlyArrival_Specified;
end;

procedure WorkTimetableSlimInfo2.SetEarlyDeparture(Index: Integer; const Aduration: duration);
begin
  FEarlyDeparture := Aduration;
  FEarlyDeparture_Specified := True;
end;

function WorkTimetableSlimInfo2.EarlyDeparture_Specified(Index: Integer): boolean;
begin
  Result := FEarlyDeparture_Specified;
end;

procedure WorkTimetableSlimInfo2.SetEntryTime(Index: Integer; const Aduration: duration);
begin
  FEntryTime := Aduration;
  FEntryTime_Specified := True;
end;

function WorkTimetableSlimInfo2.EntryTime_Specified(Index: Integer): boolean;
begin
  Result := FEntryTime_Specified;
end;

procedure WorkTimetableSlimInfo2.SetExitTime(Index: Integer; const Aduration: duration);
begin
  FExitTime := Aduration;
  FExitTime_Specified := True;
end;

function WorkTimetableSlimInfo2.ExitTime_Specified(Index: Integer): boolean;
begin
  Result := FExitTime_Specified;
end;

procedure WorkTimetableSlimInfo2.SetIsEveningOvertime(Index: Integer; const ABoolean: Boolean);
begin
  FIsEveningOvertime := ABoolean;
  FIsEveningOvertime_Specified := True;
end;

function WorkTimetableSlimInfo2.IsEveningOvertime_Specified(Index: Integer): boolean;
begin
  Result := FIsEveningOvertime_Specified;
end;

procedure WorkTimetableSlimInfo2.SetIsMoningOvertime(Index: Integer; const ABoolean: Boolean);
begin
  FIsMoningOvertime := ABoolean;
  FIsMoningOvertime_Specified := True;
end;

function WorkTimetableSlimInfo2.IsMoningOvertime_Specified(Index: Integer): boolean;
begin
  Result := FIsMoningOvertime_Specified;
end;

procedure WorkTimetableSlimInfo2.SetIsNightShift(Index: Integer; const ABoolean: Boolean);
begin
  FIsNightShift := ABoolean;
  FIsNightShift_Specified := True;
end;

function WorkTimetableSlimInfo2.IsNightShift_Specified(Index: Integer): boolean;
begin
  Result := FIsNightShift_Specified;
end;

procedure WorkTimetableSlimInfo2.SetLateArrival(Index: Integer; const Aduration: duration);
begin
  FLateArrival := Aduration;
  FLateArrival_Specified := True;
end;

function WorkTimetableSlimInfo2.LateArrival_Specified(Index: Integer): boolean;
begin
  Result := FLateArrival_Specified;
end;

procedure WorkTimetableSlimInfo2.SetLateDeparture(Index: Integer; const Aduration: duration);
begin
  FLateDeparture := Aduration;
  FLateDeparture_Specified := True;
end;

function WorkTimetableSlimInfo2.LateDeparture_Specified(Index: Integer): boolean;
begin
  Result := FLateDeparture_Specified;
end;

procedure WorkTimetableSlimInfo2.SetMaxAbsence(Index: Integer; const Aduration: duration);
begin
  FMaxAbsence := Aduration;
  FMaxAbsence_Specified := True;
end;

function WorkTimetableSlimInfo2.MaxAbsence_Specified(Index: Integer): boolean;
begin
  Result := FMaxAbsence_Specified;
end;

procedure WorkTimetableSlimInfo2.SetOrder(Index: Integer; const AInteger: Integer);
begin
  FOrder := AInteger;
  FOrder_Specified := True;
end;

function WorkTimetableSlimInfo2.Order_Specified(Index: Integer): boolean;
begin
  Result := FOrder_Specified;
end;

procedure WorkTimetableSlimInfo2.SetWorkBreak(Index: Integer; const Aduration: duration);
begin
  FWorkBreak := Aduration;
  FWorkBreak_Specified := True;
end;

function WorkTimetableSlimInfo2.WorkBreak_Specified(Index: Integer): boolean;
begin
  Result := FWorkBreak_Specified;
end;

procedure WorkTimetableSlimInfo2.SetWorkTime(Index: Integer; const Aduration: duration);
begin
  FWorkTime := Aduration;
  FWorkTime_Specified := True;
end;

function WorkTimetableSlimInfo2.WorkTime_Specified(Index: Integer): boolean;
begin
  Result := FWorkTime_Specified;
end;

destructor AcsEmployeeScheduleSaveData2.Destroy;
begin
  System.SysUtils.FreeAndNil(FBeginDate);
  System.SysUtils.FreeAndNil(FEndDate);
  inherited Destroy;
end;

procedure AcsEmployeeScheduleSaveData2.SetBeginDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FBeginDate := ATXSDateTime;
  FBeginDate_Specified := True;
end;

function AcsEmployeeScheduleSaveData2.BeginDate_Specified(Index: Integer): boolean;
begin
  Result := FBeginDate_Specified;
end;

procedure AcsEmployeeScheduleSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function AcsEmployeeScheduleSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure AcsEmployeeScheduleSaveData2.SetEmployeeID(Index: Integer; const Aguid: guid);
begin
  FEmployeeID := Aguid;
  FEmployeeID_Specified := True;
end;

function AcsEmployeeScheduleSaveData2.EmployeeID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeID_Specified;
end;

procedure AcsEmployeeScheduleSaveData2.SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndDate := ATXSDateTime;
  FEndDate_Specified := True;
end;

function AcsEmployeeScheduleSaveData2.EndDate_Specified(Index: Integer): boolean;
begin
  Result := FEndDate_Specified;
end;

procedure AcsEmployeeSchedule2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function AcsEmployeeSchedule2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

destructor AcsEmployeeFullBase2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDateOfIssue);
  inherited Destroy;
end;

procedure AcsEmployeeFullBase2.SetAuthority(Index: Integer; const Astring: string);
begin
  FAuthority := Astring;
  FAuthority_Specified := True;
end;

function AcsEmployeeFullBase2.Authority_Specified(Index: Integer): boolean;
begin
  Result := FAuthority_Specified;
end;

procedure AcsEmployeeFullBase2.SetDateOfIssue(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDateOfIssue := ATXSDateTime;
  FDateOfIssue_Specified := True;
end;

function AcsEmployeeFullBase2.DateOfIssue_Specified(Index: Integer): boolean;
begin
  Result := FDateOfIssue_Specified;
end;

procedure AcsEmployeeFullBase2.SetIsChangePin(Index: Integer; const ABoolean: Boolean);
begin
  FIsChangePin := ABoolean;
  FIsChangePin_Specified := True;
end;

function AcsEmployeeFullBase2.IsChangePin_Specified(Index: Integer): boolean;
begin
  Result := FIsChangePin_Specified;
end;

procedure AcsEmployeeFullBase2.SetPINCode(Index: Integer; const AInt64: Int64);
begin
  FPINCode := AInt64;
  FPINCode_Specified := True;
end;

function AcsEmployeeFullBase2.PINCode_Specified(Index: Integer): boolean;
begin
  Result := FPINCode_Specified;
end;

procedure AcsEmployeeFullBase2.SetPINCodeDescription(Index: Integer; const Astring: string);
begin
  FPINCodeDescription := Astring;
  FPINCodeDescription_Specified := True;
end;

function AcsEmployeeFullBase2.PINCodeDescription_Specified(Index: Integer): boolean;
begin
  Result := FPINCodeDescription_Specified;
end;

procedure AcsEmployeeFullBase2.SetPINCodeUnderPressure(Index: Integer; const AInt64: Int64);
begin
  FPINCodeUnderPressure := AInt64;
  FPINCodeUnderPressure_Specified := True;
end;

function AcsEmployeeFullBase2.PINCodeUnderPressure_Specified(Index: Integer): boolean;
begin
  Result := FPINCodeUnderPressure_Specified;
end;

procedure AcsEmployeeFullBase2.SetPINCodeUnderPressureDescription(Index: Integer; const Astring: string);
begin
  FPINCodeUnderPressureDescription := Astring;
  FPINCodeUnderPressureDescription_Specified := True;
end;

function AcsEmployeeFullBase2.PINCodeUnderPressureDescription_Specified(Index: Integer): boolean;
begin
  Result := FPINCodeUnderPressureDescription_Specified;
end;

procedure AcsEmployeeFullBase2.SetPassportIssue(Index: Integer; const Astring: string);
begin
  FPassportIssue := Astring;
  FPassportIssue_Specified := True;
end;

function AcsEmployeeFullBase2.PassportIssue_Specified(Index: Integer): boolean;
begin
  Result := FPassportIssue_Specified;
end;

procedure AcsEmployeeFullBase2.SetPassportNumber(Index: Integer; const Astring: string);
begin
  FPassportNumber := Astring;
  FPassportNumber_Specified := True;
end;

function AcsEmployeeFullBase2.PassportNumber_Specified(Index: Integer): boolean;
begin
  Result := FPassportNumber_Specified;
end;

procedure AcsEmployeeFullBase2.SetRegistrationAddress(Index: Integer; const Astring: string);
begin
  FRegistrationAddress := Astring;
  FRegistrationAddress_Specified := True;
end;

function AcsEmployeeFullBase2.RegistrationAddress_Specified(Index: Integer): boolean;
begin
  Result := FRegistrationAddress_Specified;
end;

procedure AcsEmployeeFullBase2.SetResidentialAddress(Index: Integer; const Astring: string);
begin
  FResidentialAddress := Astring;
  FResidentialAddress_Specified := True;
end;

function AcsEmployeeFullBase2.ResidentialAddress_Specified(Index: Integer): boolean;
begin
  Result := FResidentialAddress_Specified;
end;

procedure AcsEmployeeSaveData2.SetEmployeePositionID(Index: Integer; const Aguid: guid);
begin
  FEmployeePositionID := Aguid;
  FEmployeePositionID_Specified := True;
end;

function AcsEmployeeSaveData2.EmployeePositionID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeePositionID_Specified;
end;

destructor AcsEmployeeFull2.Destroy;
begin
  System.SysUtils.FreeAndNil(FCreationDateTime);
  System.SysUtils.FreeAndNil(FModificationDateTime);
  System.SysUtils.FreeAndNil(FPosition);
  inherited Destroy;
end;

procedure AcsEmployeeFull2.SetCreationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreationDateTime := ATXSDateTime;
  FCreationDateTime_Specified := True;
end;

function AcsEmployeeFull2.CreationDateTime_Specified(Index: Integer): boolean;
begin
  Result := FCreationDateTime_Specified;
end;

procedure AcsEmployeeFull2.SetEmployeeGroupID(Index: Integer; const Aguid: guid);
begin
  FEmployeeGroupID := Aguid;
  FEmployeeGroupID_Specified := True;
end;

function AcsEmployeeFull2.EmployeeGroupID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroupID_Specified;
end;

procedure AcsEmployeeFull2.SetEmployeeGroupPath(Index: Integer; const Astring: string);
begin
  FEmployeeGroupPath := Astring;
  FEmployeeGroupPath_Specified := True;
end;

function AcsEmployeeFull2.EmployeeGroupPath_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroupPath_Specified;
end;

procedure AcsEmployeeFull2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function AcsEmployeeFull2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure AcsEmployeeFull2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function AcsEmployeeFull2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure AcsEmployeeFull2.SetModificationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModificationDateTime := ATXSDateTime;
  FModificationDateTime_Specified := True;
end;

function AcsEmployeeFull2.ModificationDateTime_Specified(Index: Integer): boolean;
begin
  Result := FModificationDateTime_Specified;
end;

procedure AcsEmployeeFull2.SetPosition(Index: Integer; const ALEmployeePositionInfo2: LEmployeePositionInfo2);
begin
  FPosition := ALEmployeePositionInfo2;
  FPosition_Specified := True;
end;

function AcsEmployeeFull2.Position_Specified(Index: Integer): boolean;
begin
  Result := FPosition_Specified;
end;

destructor AcsEmployeeSlim2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAccessLevels)-1 do
    System.SysUtils.FreeAndNil(FAccessLevels[I]);
  System.SetLength(FAccessLevels, 0);
  for I := 0 to System.Length(FKeys)-1 do
    System.SysUtils.FreeAndNil(FKeys[I]);
  System.SetLength(FKeys, 0);
  for I := 0 to System.Length(FWorkSchedules)-1 do
    System.SysUtils.FreeAndNil(FWorkSchedules[I]);
  System.SetLength(FWorkSchedules, 0);
  for I := 0 to System.Length(FWorkZones)-1 do
    System.SysUtils.FreeAndNil(FWorkZones[I]);
  System.SetLength(FWorkZones, 0);
  System.SysUtils.FreeAndNil(FCreationDateTime);
  System.SysUtils.FreeAndNil(FModificationDateTime);
  System.SysUtils.FreeAndNil(FPosition);
  inherited Destroy;
end;

procedure AcsEmployeeSlim2.SetAccessLevels(Index: Integer; const AArrayOfAcsAccessLevelSlimInfo: ArrayOfAcsAccessLevelSlimInfo);
begin
  FAccessLevels := AArrayOfAcsAccessLevelSlimInfo;
  FAccessLevels_Specified := True;
end;

function AcsEmployeeSlim2.AccessLevels_Specified(Index: Integer): boolean;
begin
  Result := FAccessLevels_Specified;
end;

procedure AcsEmployeeSlim2.SetCreationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreationDateTime := ATXSDateTime;
  FCreationDateTime_Specified := True;
end;

function AcsEmployeeSlim2.CreationDateTime_Specified(Index: Integer): boolean;
begin
  Result := FCreationDateTime_Specified;
end;

procedure AcsEmployeeSlim2.SetEmployeeGroupID(Index: Integer; const Aguid: guid);
begin
  FEmployeeGroupID := Aguid;
  FEmployeeGroupID_Specified := True;
end;

function AcsEmployeeSlim2.EmployeeGroupID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroupID_Specified;
end;

procedure AcsEmployeeSlim2.SetEmployeeGroupPath(Index: Integer; const Astring: string);
begin
  FEmployeeGroupPath := Astring;
  FEmployeeGroupPath_Specified := True;
end;

function AcsEmployeeSlim2.EmployeeGroupPath_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroupPath_Specified;
end;

procedure AcsEmployeeSlim2.SetGroupCode(Index: Integer; const Astring: string);
begin
  FGroupCode := Astring;
  FGroupCode_Specified := True;
end;

function AcsEmployeeSlim2.GroupCode_Specified(Index: Integer): boolean;
begin
  Result := FGroupCode_Specified;
end;

procedure AcsEmployeeSlim2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function AcsEmployeeSlim2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure AcsEmployeeSlim2.SetIsAccessLevelsInherited(Index: Integer; const ABoolean: Boolean);
begin
  FIsAccessLevelsInherited := ABoolean;
  FIsAccessLevelsInherited_Specified := True;
end;

function AcsEmployeeSlim2.IsAccessLevelsInherited_Specified(Index: Integer): boolean;
begin
  Result := FIsAccessLevelsInherited_Specified;
end;

procedure AcsEmployeeSlim2.SetIsPhotoAny(Index: Integer; const ABoolean: Boolean);
begin
  FIsPhotoAny := ABoolean;
  FIsPhotoAny_Specified := True;
end;

function AcsEmployeeSlim2.IsPhotoAny_Specified(Index: Integer): boolean;
begin
  Result := FIsPhotoAny_Specified;
end;

procedure AcsEmployeeSlim2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function AcsEmployeeSlim2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure AcsEmployeeSlim2.SetIsWorkSchedulesInherited(Index: Integer; const ABoolean: Boolean);
begin
  FIsWorkSchedulesInherited := ABoolean;
  FIsWorkSchedulesInherited_Specified := True;
end;

function AcsEmployeeSlim2.IsWorkSchedulesInherited_Specified(Index: Integer): boolean;
begin
  Result := FIsWorkSchedulesInherited_Specified;
end;

procedure AcsEmployeeSlim2.SetIsWorkZonesInherited(Index: Integer; const ABoolean: Boolean);
begin
  FIsWorkZonesInherited := ABoolean;
  FIsWorkZonesInherited_Specified := True;
end;

function AcsEmployeeSlim2.IsWorkZonesInherited_Specified(Index: Integer): boolean;
begin
  Result := FIsWorkZonesInherited_Specified;
end;

procedure AcsEmployeeSlim2.SetKeys(Index: Integer; const AArrayOfAcsKeyInfo: ArrayOfAcsKeyInfo);
begin
  FKeys := AArrayOfAcsKeyInfo;
  FKeys_Specified := True;
end;

function AcsEmployeeSlim2.Keys_Specified(Index: Integer): boolean;
begin
  Result := FKeys_Specified;
end;

procedure AcsEmployeeSlim2.SetModificationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModificationDateTime := ATXSDateTime;
  FModificationDateTime_Specified := True;
end;

function AcsEmployeeSlim2.ModificationDateTime_Specified(Index: Integer): boolean;
begin
  Result := FModificationDateTime_Specified;
end;

procedure AcsEmployeeSlim2.SetPosition(Index: Integer; const ALEmployeePositionInfo2: LEmployeePositionInfo2);
begin
  FPosition := ALEmployeePositionInfo2;
  FPosition_Specified := True;
end;

function AcsEmployeeSlim2.Position_Specified(Index: Integer): boolean;
begin
  Result := FPosition_Specified;
end;

procedure AcsEmployeeSlim2.SetWorkSchedules(Index: Integer; const AArrayOfWorkScheduleSlimInfo: ArrayOfWorkScheduleSlimInfo);
begin
  FWorkSchedules := AArrayOfWorkScheduleSlimInfo;
  FWorkSchedules_Specified := True;
end;

function AcsEmployeeSlim2.WorkSchedules_Specified(Index: Integer): boolean;
begin
  Result := FWorkSchedules_Specified;
end;

procedure AcsEmployeeSlim2.SetWorkZones(Index: Integer; const AArrayOfWorkZoneSlimInfo: ArrayOfWorkZoneSlimInfo);
begin
  FWorkZones := AArrayOfWorkZoneSlimInfo;
  FWorkZones_Specified := True;
end;

function AcsEmployeeSlim2.WorkZones_Specified(Index: Integer): boolean;
begin
  Result := FWorkZones_Specified;
end;

destructor AcsEmployeeGroup2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FEmployeeGroups)-1 do
    System.SysUtils.FreeAndNil(FEmployeeGroups[I]);
  System.SetLength(FEmployeeGroups, 0);
  System.SysUtils.FreeAndNil(FCreationDateTime);
  System.SysUtils.FreeAndNil(FModificationDateTime);
  inherited Destroy;
end;

procedure AcsEmployeeGroup2.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function AcsEmployeeGroup2.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

procedure AcsEmployeeGroup2.SetCreationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreationDateTime := ATXSDateTime;
  FCreationDateTime_Specified := True;
end;

function AcsEmployeeGroup2.CreationDateTime_Specified(Index: Integer): boolean;
begin
  Result := FCreationDateTime_Specified;
end;

procedure AcsEmployeeGroup2.SetEmployeeGroups(Index: Integer; const AArrayOfAcsEmployeeGroup: ArrayOfAcsEmployeeGroup);
begin
  FEmployeeGroups := AArrayOfAcsEmployeeGroup;
  FEmployeeGroups_Specified := True;
end;

function AcsEmployeeGroup2.EmployeeGroups_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroups_Specified;
end;

procedure AcsEmployeeGroup2.SetFavoriteName(Index: Integer; const Astring: string);
begin
  FFavoriteName := Astring;
  FFavoriteName_Specified := True;
end;

function AcsEmployeeGroup2.FavoriteName_Specified(Index: Integer): boolean;
begin
  Result := FFavoriteName_Specified;
end;

procedure AcsEmployeeGroup2.SetFavoritePath(Index: Integer; const Astring: string);
begin
  FFavoritePath := Astring;
  FFavoritePath_Specified := True;
end;

function AcsEmployeeGroup2.FavoritePath_Specified(Index: Integer): boolean;
begin
  Result := FFavoritePath_Specified;
end;

procedure AcsEmployeeGroup2.SetGroupCode(Index: Integer; const Astring: string);
begin
  FGroupCode := Astring;
  FGroupCode_Specified := True;
end;

function AcsEmployeeGroup2.GroupCode_Specified(Index: Integer): boolean;
begin
  Result := FGroupCode_Specified;
end;

procedure AcsEmployeeGroup2.SetGroupType(Index: Integer; const AEmployeeGroupType: EmployeeGroupType);
begin
  FGroupType := AEmployeeGroupType;
  FGroupType_Specified := True;
end;

function AcsEmployeeGroup2.GroupType_Specified(Index: Integer): boolean;
begin
  Result := FGroupType_Specified;
end;

procedure AcsEmployeeGroup2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function AcsEmployeeGroup2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure AcsEmployeeGroup2.SetIsGuestGroup(Index: Integer; const ABoolean: Boolean);
begin
  FIsGuestGroup := ABoolean;
  FIsGuestGroup_Specified := True;
end;

function AcsEmployeeGroup2.IsGuestGroup_Specified(Index: Integer): boolean;
begin
  Result := FIsGuestGroup_Specified;
end;

procedure AcsEmployeeGroup2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function AcsEmployeeGroup2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure AcsEmployeeGroup2.SetModificationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModificationDateTime := ATXSDateTime;
  FModificationDateTime_Specified := True;
end;

function AcsEmployeeGroup2.ModificationDateTime_Specified(Index: Integer): boolean;
begin
  Result := FModificationDateTime_Specified;
end;

procedure AcsEmployeeGroup2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AcsEmployeeGroup2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

destructor AscEmployeePhotoModificationDateTimeInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FModificationDateTime);
  inherited Destroy;
end;

procedure AscEmployeePhotoModificationDateTimeInfo2.SetModificationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModificationDateTime := ATXSDateTime;
  FModificationDateTime_Specified := True;
end;

function AscEmployeePhotoModificationDateTimeInfo2.ModificationDateTime_Specified(Index: Integer): boolean;
begin
  Result := FModificationDateTime_Specified;
end;

procedure AscEmployeePhotoModificationDateTimeInfo2.SetPhotoNumber(Index: Integer; const AInteger: Integer);
begin
  FPhotoNumber := AInteger;
  FPhotoNumber_Specified := True;
end;

function AscEmployeePhotoModificationDateTimeInfo2.PhotoNumber_Specified(Index: Integer): boolean;
begin
  Result := FPhotoNumber_Specified;
end;

destructor SearchCondition2.Destroy;
begin
  System.SysUtils.FreeAndNil(FBirthday);
  inherited Destroy;
end;

procedure SearchCondition2.SetAddField(Index: Integer; const Astring: string);
begin
  FAddField := Astring;
  FAddField_Specified := True;
end;

function SearchCondition2.AddField_Specified(Index: Integer): boolean;
begin
  Result := FAddField_Specified;
end;

procedure SearchCondition2.SetAdditionalFieldID(Index: Integer; const Aguid: guid);
begin
  FAdditionalFieldID := Aguid;
  FAdditionalFieldID_Specified := True;
end;

function SearchCondition2.AdditionalFieldID_Specified(Index: Integer): boolean;
begin
  Result := FAdditionalFieldID_Specified;
end;

procedure SearchCondition2.SetBirthday(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FBirthday := ATXSDateTime;
  FBirthday_Specified := True;
end;

function SearchCondition2.Birthday_Specified(Index: Integer): boolean;
begin
  Result := FBirthday_Specified;
end;

procedure SearchCondition2.SetEmail(Index: Integer; const Astring: string);
begin
  FEmail := Astring;
  FEmail_Specified := True;
end;

function SearchCondition2.Email_Specified(Index: Integer): boolean;
begin
  Result := FEmail_Specified;
end;

procedure SearchCondition2.SetFirstName(Index: Integer; const Astring: string);
begin
  FFirstName := Astring;
  FFirstName_Specified := True;
end;

function SearchCondition2.FirstName_Specified(Index: Integer): boolean;
begin
  Result := FFirstName_Specified;
end;

procedure SearchCondition2.SetIsFullMatch(Index: Integer; const ABoolean: Boolean);
begin
  FIsFullMatch := ABoolean;
  FIsFullMatch_Specified := True;
end;

function SearchCondition2.IsFullMatch_Specified(Index: Integer): boolean;
begin
  Result := FIsFullMatch_Specified;
end;

procedure SearchCondition2.SetKeyDescription(Index: Integer; const Astring: string);
begin
  FKeyDescription := Astring;
  FKeyDescription_Specified := True;
end;

function SearchCondition2.KeyDescription_Specified(Index: Integer): boolean;
begin
  Result := FKeyDescription_Specified;
end;

procedure SearchCondition2.SetKeyNumber(Index: Integer; const AInt64: Int64);
begin
  FKeyNumber := AInt64;
  FKeyNumber_Specified := True;
end;

function SearchCondition2.KeyNumber_Specified(Index: Integer): boolean;
begin
  Result := FKeyNumber_Specified;
end;

procedure SearchCondition2.SetLastName(Index: Integer; const Astring: string);
begin
  FLastName := Astring;
  FLastName_Specified := True;
end;

function SearchCondition2.LastName_Specified(Index: Integer): boolean;
begin
  Result := FLastName_Specified;
end;

procedure SearchCondition2.SetPassportNumber(Index: Integer; const Astring: string);
begin
  FPassportNumber := Astring;
  FPassportNumber_Specified := True;
end;

function SearchCondition2.PassportNumber_Specified(Index: Integer): boolean;
begin
  Result := FPassportNumber_Specified;
end;

procedure SearchCondition2.SetPhone(Index: Integer; const Astring: string);
begin
  FPhone := Astring;
  FPhone_Specified := True;
end;

function SearchCondition2.Phone_Specified(Index: Integer): boolean;
begin
  Result := FPhone_Specified;
end;

procedure SearchCondition2.SetSearchWay(Index: Integer; const ASearchWay: SearchWay);
begin
  FSearchWay := ASearchWay;
  FSearchWay_Specified := True;
end;

function SearchCondition2.SearchWay_Specified(Index: Integer): boolean;
begin
  Result := FSearchWay_Specified;
end;

procedure SearchCondition2.SetSecondName(Index: Integer; const Astring: string);
begin
  FSecondName := Astring;
  FSecondName_Specified := True;
end;

function SearchCondition2.SecondName_Specified(Index: Integer): boolean;
begin
  Result := FSecondName_Specified;
end;

procedure SearchCondition2.SetTableNumber(Index: Integer; const AInteger: Integer);
begin
  FTableNumber := AInteger;
  FTableNumber_Specified := True;
end;

function SearchCondition2.TableNumber_Specified(Index: Integer): boolean;
begin
  Result := FTableNumber_Specified;
end;

destructor AcsEmployeeDocumentsSaveData2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDriverDateOfBirth);
  System.SysUtils.FreeAndNil(FDriverDateOfExpiry);
  System.SysUtils.FreeAndNil(FDriverDateOfIssue);
  System.SysUtils.FreeAndNil(FForeignPassportDateOfBirth);
  System.SysUtils.FreeAndNil(FForeignPassportDateOfExpiry);
  System.SysUtils.FreeAndNil(FPassportDateOfBirth);
  System.SysUtils.FreeAndNil(FPassportDateOfIssue);
  inherited Destroy;
end;

procedure AcsEmployeeDocumentsSaveData2.SetDriverDateOfBirth(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDriverDateOfBirth := ATXSDateTime;
  FDriverDateOfBirth_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.DriverDateOfBirth_Specified(Index: Integer): boolean;
begin
  Result := FDriverDateOfBirth_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetDriverDateOfExpiry(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDriverDateOfExpiry := ATXSDateTime;
  FDriverDateOfExpiry_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.DriverDateOfExpiry_Specified(Index: Integer): boolean;
begin
  Result := FDriverDateOfExpiry_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetDriverDateOfIssue(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDriverDateOfIssue := ATXSDateTime;
  FDriverDateOfIssue_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.DriverDateOfIssue_Specified(Index: Integer): boolean;
begin
  Result := FDriverDateOfIssue_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetDriverFirstName(Index: Integer; const Astring: string);
begin
  FDriverFirstName := Astring;
  FDriverFirstName_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.DriverFirstName_Specified(Index: Integer): boolean;
begin
  Result := FDriverFirstName_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetDriverLastName(Index: Integer; const Astring: string);
begin
  FDriverLastName := Astring;
  FDriverLastName_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.DriverLastName_Specified(Index: Integer): boolean;
begin
  Result := FDriverLastName_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetDriverMiddleName(Index: Integer; const Astring: string);
begin
  FDriverMiddleName := Astring;
  FDriverMiddleName_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.DriverMiddleName_Specified(Index: Integer): boolean;
begin
  Result := FDriverMiddleName_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetDriverNumber(Index: Integer; const Astring: string);
begin
  FDriverNumber := Astring;
  FDriverNumber_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.DriverNumber_Specified(Index: Integer): boolean;
begin
  Result := FDriverNumber_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetDriverPlaceOfBirth(Index: Integer; const Astring: string);
begin
  FDriverPlaceOfBirth := Astring;
  FDriverPlaceOfBirth_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.DriverPlaceOfBirth_Specified(Index: Integer): boolean;
begin
  Result := FDriverPlaceOfBirth_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetDriverSeries(Index: Integer; const Astring: string);
begin
  FDriverSeries := Astring;
  FDriverSeries_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.DriverSeries_Specified(Index: Integer): boolean;
begin
  Result := FDriverSeries_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetForeignPassportCodeOfIssuingState(Index: Integer; const Astring: string);
begin
  FForeignPassportCodeOfIssuingState := Astring;
  FForeignPassportCodeOfIssuingState_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.ForeignPassportCodeOfIssuingState_Specified(Index: Integer): boolean;
begin
  Result := FForeignPassportCodeOfIssuingState_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetForeignPassportDateOfBirth(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FForeignPassportDateOfBirth := ATXSDateTime;
  FForeignPassportDateOfBirth_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.ForeignPassportDateOfBirth_Specified(Index: Integer): boolean;
begin
  Result := FForeignPassportDateOfBirth_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetForeignPassportDateOfExpiry(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FForeignPassportDateOfExpiry := ATXSDateTime;
  FForeignPassportDateOfExpiry_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.ForeignPassportDateOfExpiry_Specified(Index: Integer): boolean;
begin
  Result := FForeignPassportDateOfExpiry_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetForeignPassportFirstName(Index: Integer; const Astring: string);
begin
  FForeignPassportFirstName := Astring;
  FForeignPassportFirstName_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.ForeignPassportFirstName_Specified(Index: Integer): boolean;
begin
  Result := FForeignPassportFirstName_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetForeignPassportLastName(Index: Integer; const Astring: string);
begin
  FForeignPassportLastName := Astring;
  FForeignPassportLastName_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.ForeignPassportLastName_Specified(Index: Integer): boolean;
begin
  Result := FForeignPassportLastName_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetForeignPassportMRZ(Index: Integer; const Astring: string);
begin
  FForeignPassportMRZ := Astring;
  FForeignPassportMRZ_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.ForeignPassportMRZ_Specified(Index: Integer): boolean;
begin
  Result := FForeignPassportMRZ_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetForeignPassportMiddleName(Index: Integer; const Astring: string);
begin
  FForeignPassportMiddleName := Astring;
  FForeignPassportMiddleName_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.ForeignPassportMiddleName_Specified(Index: Integer): boolean;
begin
  Result := FForeignPassportMiddleName_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetForeignPassportNationality(Index: Integer; const Astring: string);
begin
  FForeignPassportNationality := Astring;
  FForeignPassportNationality_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.ForeignPassportNationality_Specified(Index: Integer): boolean;
begin
  Result := FForeignPassportNationality_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetForeignPassportNumber(Index: Integer; const Astring: string);
begin
  FForeignPassportNumber := Astring;
  FForeignPassportNumber_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.ForeignPassportNumber_Specified(Index: Integer): boolean;
begin
  Result := FForeignPassportNumber_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetForeignPassportPersonalCode(Index: Integer; const Astring: string);
begin
  FForeignPassportPersonalCode := Astring;
  FForeignPassportPersonalCode_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.ForeignPassportPersonalCode_Specified(Index: Integer): boolean;
begin
  Result := FForeignPassportPersonalCode_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetForeignPassportSex(Index: Integer; const Astring: string);
begin
  FForeignPassportSex := Astring;
  FForeignPassportSex_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.ForeignPassportSex_Specified(Index: Integer): boolean;
begin
  Result := FForeignPassportSex_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetPassportDateOfBirth(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FPassportDateOfBirth := ATXSDateTime;
  FPassportDateOfBirth_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.PassportDateOfBirth_Specified(Index: Integer): boolean;
begin
  Result := FPassportDateOfBirth_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetPassportDateOfIssue(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FPassportDateOfIssue := ATXSDateTime;
  FPassportDateOfIssue_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.PassportDateOfIssue_Specified(Index: Integer): boolean;
begin
  Result := FPassportDateOfIssue_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetPassportDepartmentCode(Index: Integer; const Astring: string);
begin
  FPassportDepartmentCode := Astring;
  FPassportDepartmentCode_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.PassportDepartmentCode_Specified(Index: Integer): boolean;
begin
  Result := FPassportDepartmentCode_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetPassportFirstName(Index: Integer; const Astring: string);
begin
  FPassportFirstName := Astring;
  FPassportFirstName_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.PassportFirstName_Specified(Index: Integer): boolean;
begin
  Result := FPassportFirstName_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetPassportIssue(Index: Integer; const Astring: string);
begin
  FPassportIssue := Astring;
  FPassportIssue_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.PassportIssue_Specified(Index: Integer): boolean;
begin
  Result := FPassportIssue_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetPassportLastName(Index: Integer; const Astring: string);
begin
  FPassportLastName := Astring;
  FPassportLastName_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.PassportLastName_Specified(Index: Integer): boolean;
begin
  Result := FPassportLastName_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetPassportMiddleName(Index: Integer; const Astring: string);
begin
  FPassportMiddleName := Astring;
  FPassportMiddleName_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.PassportMiddleName_Specified(Index: Integer): boolean;
begin
  Result := FPassportMiddleName_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetPassportNumber(Index: Integer; const Astring: string);
begin
  FPassportNumber := Astring;
  FPassportNumber_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.PassportNumber_Specified(Index: Integer): boolean;
begin
  Result := FPassportNumber_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetPassportPlaceOfBirth(Index: Integer; const Astring: string);
begin
  FPassportPlaceOfBirth := Astring;
  FPassportPlaceOfBirth_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.PassportPlaceOfBirth_Specified(Index: Integer): boolean;
begin
  Result := FPassportPlaceOfBirth_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetPassportRegistrationAddress(Index: Integer; const Astring: string);
begin
  FPassportRegistrationAddress := Astring;
  FPassportRegistrationAddress_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.PassportRegistrationAddress_Specified(Index: Integer): boolean;
begin
  Result := FPassportRegistrationAddress_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetPassportSeries(Index: Integer; const Astring: string);
begin
  FPassportSeries := Astring;
  FPassportSeries_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.PassportSeries_Specified(Index: Integer): boolean;
begin
  Result := FPassportSeries_Specified;
end;

procedure AcsEmployeeDocumentsSaveData2.SetPassportSex(Index: Integer; const Astring: string);
begin
  FPassportSex := Astring;
  FPassportSex_Specified := True;
end;

function AcsEmployeeDocumentsSaveData2.PassportSex_Specified(Index: Integer): boolean;
begin
  Result := FPassportSex_Specified;
end;

procedure AcsEmployeeDocumentsData2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function AcsEmployeeDocumentsData2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure DataForPeriodModel2.SetActualNumberEmployee(Index: Integer; const AInteger: Integer);
begin
  FActualNumberEmployee := AInteger;
  FActualNumberEmployee_Specified := True;
end;

function DataForPeriodModel2.ActualNumberEmployee_Specified(Index: Integer): boolean;
begin
  Result := FActualNumberEmployee_Specified;
end;

procedure DataForPeriodModel2.SetActualPercentValue(Index: Integer; const ADouble: Double);
begin
  FActualPercentValue := ADouble;
  FActualPercentValue_Specified := True;
end;

function DataForPeriodModel2.ActualPercentValue_Specified(Index: Integer): boolean;
begin
  Result := FActualPercentValue_Specified;
end;

procedure DataForPeriodModel2.SetDeparmentGuid(Index: Integer; const Aguid: guid);
begin
  FDeparmentGuid := Aguid;
  FDeparmentGuid_Specified := True;
end;

function DataForPeriodModel2.DeparmentGuid_Specified(Index: Integer): boolean;
begin
  Result := FDeparmentGuid_Specified;
end;

procedure DataForPeriodModel2.SetEvaluationSystem(Index: Integer; const AInteger: Integer);
begin
  FEvaluationSystem := AInteger;
  FEvaluationSystem_Specified := True;
end;

function DataForPeriodModel2.EvaluationSystem_Specified(Index: Integer): boolean;
begin
  Result := FEvaluationSystem_Specified;
end;

procedure DataForPeriodModel2.SetMessageError(Index: Integer; const Astring: string);
begin
  FMessageError := Astring;
  FMessageError_Specified := True;
end;

function DataForPeriodModel2.MessageError_Specified(Index: Integer): boolean;
begin
  Result := FMessageError_Specified;
end;

procedure DataForPeriodModel2.SetNumberOfEmployees(Index: Integer; const AInteger: Integer);
begin
  FNumberOfEmployees := AInteger;
  FNumberOfEmployees_Specified := True;
end;

function DataForPeriodModel2.NumberOfEmployees_Specified(Index: Integer): boolean;
begin
  Result := FNumberOfEmployees_Specified;
end;

procedure DataForPeriodModel2.SetPlanNumberEmployee(Index: Integer; const AInteger: Integer);
begin
  FPlanNumberEmployee := AInteger;
  FPlanNumberEmployee_Specified := True;
end;

function DataForPeriodModel2.PlanNumberEmployee_Specified(Index: Integer): boolean;
begin
  Result := FPlanNumberEmployee_Specified;
end;

procedure DataForPeriodModel2.SetPlanPercentValue(Index: Integer; const ADouble: Double);
begin
  FPlanPercentValue := ADouble;
  FPlanPercentValue_Specified := True;
end;

function DataForPeriodModel2.PlanPercentValue_Specified(Index: Integer): boolean;
begin
  Result := FPlanPercentValue_Specified;
end;

procedure DataForPeriodModel2.SetVType(Index: Integer; const AViolationType: ViolationType);
begin
  FVType := AViolationType;
  FVType_Specified := True;
end;

function DataForPeriodModel2.VType_Specified(Index: Integer): boolean;
begin
  Result := FVType_Specified;
end;

procedure DataOnPresenceInWorkplace2.SetActualNumberEmployee(Index: Integer; const AInteger: Integer);
begin
  FActualNumberEmployee := AInteger;
  FActualNumberEmployee_Specified := True;
end;

function DataOnPresenceInWorkplace2.ActualNumberEmployee_Specified(Index: Integer): boolean;
begin
  Result := FActualNumberEmployee_Specified;
end;

procedure DataOnPresenceInWorkplace2.SetActualPercentValue(Index: Integer; const ADouble: Double);
begin
  FActualPercentValue := ADouble;
  FActualPercentValue_Specified := True;
end;

function DataOnPresenceInWorkplace2.ActualPercentValue_Specified(Index: Integer): boolean;
begin
  Result := FActualPercentValue_Specified;
end;

procedure DataOnPresenceInWorkplace2.SetDeparmentGuid(Index: Integer; const Aguid: guid);
begin
  FDeparmentGuid := Aguid;
  FDeparmentGuid_Specified := True;
end;

function DataOnPresenceInWorkplace2.DeparmentGuid_Specified(Index: Integer): boolean;
begin
  Result := FDeparmentGuid_Specified;
end;

procedure DataOnPresenceInWorkplace2.SetTotalNumberEmployee(Index: Integer; const AInteger: Integer);
begin
  FTotalNumberEmployee := AInteger;
  FTotalNumberEmployee_Specified := True;
end;

function DataOnPresenceInWorkplace2.TotalNumberEmployee_Specified(Index: Integer): boolean;
begin
  Result := FTotalNumberEmployee_Specified;
end;

procedure PlanModel2.SetDepartmentGuid(Index: Integer; const Aguid: guid);
begin
  FDepartmentGuid := Aguid;
  FDepartmentGuid_Specified := True;
end;

function PlanModel2.DepartmentGuid_Specified(Index: Integer): boolean;
begin
  Result := FDepartmentGuid_Specified;
end;

procedure PlanModel2.SetDeviationValue(Index: Integer; const ADouble: Double);
begin
  FDeviationValue := ADouble;
  FDeviationValue_Specified := True;
end;

function PlanModel2.DeviationValue_Specified(Index: Integer): boolean;
begin
  Result := FDeviationValue_Specified;
end;

procedure PlanModel2.SetPlanValue(Index: Integer; const ADouble: Double);
begin
  FPlanValue := ADouble;
  FPlanValue_Specified := True;
end;

function PlanModel2.PlanValue_Specified(Index: Integer): boolean;
begin
  Result := FPlanValue_Specified;
end;

procedure PlanModel2.SetVType(Index: Integer; const AInteger: Integer);
begin
  FVType := AInteger;
  FVType_Specified := True;
end;

function PlanModel2.VType_Specified(Index: Integer): boolean;
begin
  Result := FVType_Specified;
end;

procedure TagFullInfo2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function TagFullInfo2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure TagFullInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function TagFullInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure TagFullInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function TagFullInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure ResourceTagsData2.SetResourceID(Index: Integer; const Aguid: guid);
begin
  FResourceID := Aguid;
  FResourceID_Specified := True;
end;

function ResourceTagsData2.ResourceID_Specified(Index: Integer): boolean;
begin
  Result := FResourceID_Specified;
end;

procedure ResourceTagsData2.SetTagID(Index: Integer; const Aguid: guid);
begin
  FTagID := Aguid;
  FTagID_Specified := True;
end;

function ResourceTagsData2.TagID_Specified(Index: Integer): boolean;
begin
  Result := FTagID_Specified;
end;

procedure BoxAccessLevelTagsData2.SetBoxAccessLevelID(Index: Integer; const Aguid: guid);
begin
  FBoxAccessLevelID := Aguid;
  FBoxAccessLevelID_Specified := True;
end;

function BoxAccessLevelTagsData2.BoxAccessLevelID_Specified(Index: Integer): boolean;
begin
  Result := FBoxAccessLevelID_Specified;
end;

procedure BoxAccessLevelTagsData2.SetTagID(Index: Integer; const Aguid: guid);
begin
  FTagID := Aguid;
  FTagID_Specified := True;
end;

function BoxAccessLevelTagsData2.TagID_Specified(Index: Integer): boolean;
begin
  Result := FTagID_Specified;
end;

procedure AccessLevelTagsData2.SetAccessLevelID(Index: Integer; const Aguid: guid);
begin
  FAccessLevelID := Aguid;
  FAccessLevelID_Specified := True;
end;

function AccessLevelTagsData2.AccessLevelID_Specified(Index: Integer): boolean;
begin
  Result := FAccessLevelID_Specified;
end;

procedure AccessLevelTagsData2.SetTagID(Index: Integer; const Aguid: guid);
begin
  FTagID := Aguid;
  FTagID_Specified := True;
end;

function AccessLevelTagsData2.TagID_Specified(Index: Integer): boolean;
begin
  Result := FTagID_Specified;
end;

procedure EmployeeGroupTagsData2.SetEmployeeGroupID(Index: Integer; const Aguid: guid);
begin
  FEmployeeGroupID := Aguid;
  FEmployeeGroupID_Specified := True;
end;

function EmployeeGroupTagsData2.EmployeeGroupID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroupID_Specified;
end;

procedure EmployeeGroupTagsData2.SetTagID(Index: Integer; const Aguid: guid);
begin
  FTagID := Aguid;
  FTagID_Specified := True;
end;

function EmployeeGroupTagsData2.TagID_Specified(Index: Integer): boolean;
begin
  Result := FTagID_Specified;
end;

procedure ReportTagsData2.SetReportID(Index: Integer; const Aguid: guid);
begin
  FReportID := Aguid;
  FReportID_Specified := True;
end;

function ReportTagsData2.ReportID_Specified(Index: Integer): boolean;
begin
  Result := FReportID_Specified;
end;

procedure ReportTagsData2.SetTagID(Index: Integer; const Aguid: guid);
begin
  FTagID := Aguid;
  FTagID_Specified := True;
end;

function ReportTagsData2.TagID_Specified(Index: Integer): boolean;
begin
  Result := FTagID_Specified;
end;

procedure MifareProfileTagsData2.SetMifareProfileID(Index: Integer; const Aguid: guid);
begin
  FMifareProfileID := Aguid;
  FMifareProfileID_Specified := True;
end;

function MifareProfileTagsData2.MifareProfileID_Specified(Index: Integer): boolean;
begin
  Result := FMifareProfileID_Specified;
end;

procedure MifareProfileTagsData2.SetTagID(Index: Integer; const Aguid: guid);
begin
  FTagID := Aguid;
  FTagID_Specified := True;
end;

function MifareProfileTagsData2.TagID_Specified(Index: Integer): boolean;
begin
  Result := FTagID_Specified;
end;

destructor DataForViolator2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDate);
  inherited Destroy;
end;

procedure DataForViolator2.SetDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDate := ATXSDateTime;
  FDate_Specified := True;
end;

function DataForViolator2.Date_Specified(Index: Integer): boolean;
begin
  Result := FDate_Specified;
end;

procedure DataForViolator2.SetDeparmentGuid(Index: Integer; const Aguid: guid);
begin
  FDeparmentGuid := Aguid;
  FDeparmentGuid_Specified := True;
end;

function DataForViolator2.DeparmentGuid_Specified(Index: Integer): boolean;
begin
  Result := FDeparmentGuid_Specified;
end;

procedure DataForViolator2.SetPercentValue(Index: Integer; const ADouble: Double);
begin
  FPercentValue := ADouble;
  FPercentValue_Specified := True;
end;

function DataForViolator2.PercentValue_Specified(Index: Integer): boolean;
begin
  Result := FPercentValue_Specified;
end;

procedure DataForViolator2.SetValue(Index: Integer; const AInteger: Integer);
begin
  FValue := AInteger;
  FValue_Specified := True;
end;

function DataForViolator2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure Violator2.SetIsSystematic(Index: Integer; const ABoolean: Boolean);
begin
  FIsSystematic := ABoolean;
  FIsSystematic_Specified := True;
end;

function Violator2.IsSystematic_Specified(Index: Integer): boolean;
begin
  Result := FIsSystematic_Specified;
end;

procedure Violator2.SetMessageError(Index: Integer; const Astring: string);
begin
  FMessageError := Astring;
  FMessageError_Specified := True;
end;

function Violator2.MessageError_Specified(Index: Integer): boolean;
begin
  Result := FMessageError_Specified;
end;

procedure ReactionSendEmailActionSaveData2.SetCustomText(Index: Integer; const Astring: string);
begin
  FCustomText := Astring;
  FCustomText_Specified := True;
end;

function ReactionSendEmailActionSaveData2.CustomText_Specified(Index: Integer): boolean;
begin
  Result := FCustomText_Specified;
end;

procedure ReactionSendEmailActionSaveData2.SetEmailDistributionAddressId(Index: Integer; const Aguid: guid);
begin
  FEmailDistributionAddressId := Aguid;
  FEmailDistributionAddressId_Specified := True;
end;

function ReactionSendEmailActionSaveData2.EmailDistributionAddressId_Specified(Index: Integer): boolean;
begin
  Result := FEmailDistributionAddressId_Specified;
end;

procedure ReactionSendEmailActionSaveData2.SetNumbersToSendEmailForEmployeesFromEvents(Index: Integer; const AArrayOfint: ArrayOfint);
begin
  FNumbersToSendEmailForEmployeesFromEvents := AArrayOfint;
  FNumbersToSendEmailForEmployeesFromEvents_Specified := True;
end;

function ReactionSendEmailActionSaveData2.NumbersToSendEmailForEmployeesFromEvents_Specified(Index: Integer): boolean;
begin
  Result := FNumbersToSendEmailForEmployeesFromEvents_Specified;
end;

procedure ReactionSendEmailActionSaveData2.SetNumbersToSendEmailForEmployeesFromList(Index: Integer; const AArrayOfint: ArrayOfint);
begin
  FNumbersToSendEmailForEmployeesFromList := AArrayOfint;
  FNumbersToSendEmailForEmployeesFromList_Specified := True;
end;

function ReactionSendEmailActionSaveData2.NumbersToSendEmailForEmployeesFromList_Specified(Index: Integer): boolean;
begin
  Result := FNumbersToSendEmailForEmployeesFromList_Specified;
end;

procedure ReactionSendEmailActionSaveData2.SetSendCustomText(Index: Integer; const ABoolean: Boolean);
begin
  FSendCustomText := ABoolean;
  FSendCustomText_Specified := True;
end;

function ReactionSendEmailActionSaveData2.SendCustomText_Specified(Index: Integer): boolean;
begin
  Result := FSendCustomText_Specified;
end;

procedure ReactionSendEmailActionSaveData2.SetSendToAllEmailAddressesOfEmployeesFromEvents(Index: Integer; const ABoolean: Boolean);
begin
  FSendToAllEmailAddressesOfEmployeesFromEvents := ABoolean;
  FSendToAllEmailAddressesOfEmployeesFromEvents_Specified := True;
end;

function ReactionSendEmailActionSaveData2.SendToAllEmailAddressesOfEmployeesFromEvents_Specified(Index: Integer): boolean;
begin
  Result := FSendToAllEmailAddressesOfEmployeesFromEvents_Specified;
end;

procedure ReactionSendEmailActionSaveData2.SetSendToAllEmailAddressesOfEmployeesFromList(Index: Integer; const ABoolean: Boolean);
begin
  FSendToAllEmailAddressesOfEmployeesFromList := ABoolean;
  FSendToAllEmailAddressesOfEmployeesFromList_Specified := True;
end;

function ReactionSendEmailActionSaveData2.SendToAllEmailAddressesOfEmployeesFromList_Specified(Index: Integer): boolean;
begin
  Result := FSendToAllEmailAddressesOfEmployeesFromList_Specified;
end;

procedure ReactionSendEmailActionSaveData2.SetWhetherToSendEmployeesFromEvents(Index: Integer; const ABoolean: Boolean);
begin
  FWhetherToSendEmployeesFromEvents := ABoolean;
  FWhetherToSendEmployeesFromEvents_Specified := True;
end;

function ReactionSendEmailActionSaveData2.WhetherToSendEmployeesFromEvents_Specified(Index: Integer): boolean;
begin
  Result := FWhetherToSendEmployeesFromEvents_Specified;
end;

procedure ReactionSendEmailActionSaveData2.SetWhetherToSendEmployeesFromList(Index: Integer; const ABoolean: Boolean);
begin
  FWhetherToSendEmployeesFromList := ABoolean;
  FWhetherToSendEmployeesFromList_Specified := True;
end;

function ReactionSendEmailActionSaveData2.WhetherToSendEmployeesFromList_Specified(Index: Integer): boolean;
begin
  Result := FWhetherToSendEmployeesFromList_Specified;
end;

destructor ReactionSendEmailActionSlimInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FCommonData);
  inherited Destroy;
end;

procedure ReactionSendEmailActionSlimInfo2.SetCommonData(Index: Integer; const AReactionActionSlimInfo2: ReactionActionSlimInfo2);
begin
  FCommonData := AReactionActionSlimInfo2;
  FCommonData_Specified := True;
end;

function ReactionSendEmailActionSlimInfo2.CommonData_Specified(Index: Integer): boolean;
begin
  Result := FCommonData_Specified;
end;

procedure ReactionSendSMSActionSaveData2.SetCustomText(Index: Integer; const Astring: string);
begin
  FCustomText := Astring;
  FCustomText_Specified := True;
end;

function ReactionSendSMSActionSaveData2.CustomText_Specified(Index: Integer): boolean;
begin
  Result := FCustomText_Specified;
end;

procedure ReactionSendSMSActionSaveData2.SetGsmModemDriverId(Index: Integer; const Aguid: guid);
begin
  FGsmModemDriverId := Aguid;
  FGsmModemDriverId_Specified := True;
end;

function ReactionSendSMSActionSaveData2.GsmModemDriverId_Specified(Index: Integer): boolean;
begin
  Result := FGsmModemDriverId_Specified;
end;

procedure ReactionSendSMSActionSaveData2.SetNumbersToSendSMSForEmployeesFromEvents(Index: Integer; const AArrayOfint: ArrayOfint);
begin
  FNumbersToSendSMSForEmployeesFromEvents := AArrayOfint;
  FNumbersToSendSMSForEmployeesFromEvents_Specified := True;
end;

function ReactionSendSMSActionSaveData2.NumbersToSendSMSForEmployeesFromEvents_Specified(Index: Integer): boolean;
begin
  Result := FNumbersToSendSMSForEmployeesFromEvents_Specified;
end;

procedure ReactionSendSMSActionSaveData2.SetNumbersToSendSMSForEmployeesFromList(Index: Integer; const AArrayOfint: ArrayOfint);
begin
  FNumbersToSendSMSForEmployeesFromList := AArrayOfint;
  FNumbersToSendSMSForEmployeesFromList_Specified := True;
end;

function ReactionSendSMSActionSaveData2.NumbersToSendSMSForEmployeesFromList_Specified(Index: Integer): boolean;
begin
  Result := FNumbersToSendSMSForEmployeesFromList_Specified;
end;

procedure ReactionSendSMSActionSaveData2.SetSendCustomText(Index: Integer; const ABoolean: Boolean);
begin
  FSendCustomText := ABoolean;
  FSendCustomText_Specified := True;
end;

function ReactionSendSMSActionSaveData2.SendCustomText_Specified(Index: Integer): boolean;
begin
  Result := FSendCustomText_Specified;
end;

procedure ReactionSendSMSActionSaveData2.SetSendToAllPhoneNumbersOfEmployeesFromEvents(Index: Integer; const ABoolean: Boolean);
begin
  FSendToAllPhoneNumbersOfEmployeesFromEvents := ABoolean;
  FSendToAllPhoneNumbersOfEmployeesFromEvents_Specified := True;
end;

function ReactionSendSMSActionSaveData2.SendToAllPhoneNumbersOfEmployeesFromEvents_Specified(Index: Integer): boolean;
begin
  Result := FSendToAllPhoneNumbersOfEmployeesFromEvents_Specified;
end;

procedure ReactionSendSMSActionSaveData2.SetSendToAllPhoneNumbersOfEmployeesFromList(Index: Integer; const ABoolean: Boolean);
begin
  FSendToAllPhoneNumbersOfEmployeesFromList := ABoolean;
  FSendToAllPhoneNumbersOfEmployeesFromList_Specified := True;
end;

function ReactionSendSMSActionSaveData2.SendToAllPhoneNumbersOfEmployeesFromList_Specified(Index: Integer): boolean;
begin
  Result := FSendToAllPhoneNumbersOfEmployeesFromList_Specified;
end;

procedure ReactionSendSMSActionSaveData2.SetWhetherToSendEmployeesFromEvents(Index: Integer; const ABoolean: Boolean);
begin
  FWhetherToSendEmployeesFromEvents := ABoolean;
  FWhetherToSendEmployeesFromEvents_Specified := True;
end;

function ReactionSendSMSActionSaveData2.WhetherToSendEmployeesFromEvents_Specified(Index: Integer): boolean;
begin
  Result := FWhetherToSendEmployeesFromEvents_Specified;
end;

procedure ReactionSendSMSActionSaveData2.SetWhetherToSendEmployeesFromList(Index: Integer; const ABoolean: Boolean);
begin
  FWhetherToSendEmployeesFromList := ABoolean;
  FWhetherToSendEmployeesFromList_Specified := True;
end;

function ReactionSendSMSActionSaveData2.WhetherToSendEmployeesFromList_Specified(Index: Integer): boolean;
begin
  Result := FWhetherToSendEmployeesFromList_Specified;
end;

destructor ReactionSendSMSActionSlimInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FCommonData);
  inherited Destroy;
end;

procedure ReactionSendSMSActionSlimInfo2.SetCommonData(Index: Integer; const AReactionActionSlimInfo2: ReactionActionSlimInfo2);
begin
  FCommonData := AReactionActionSlimInfo2;
  FCommonData_Specified := True;
end;

function ReactionSendSMSActionSlimInfo2.CommonData_Specified(Index: Integer): boolean;
begin
  Result := FCommonData_Specified;
end;

destructor AcsEmployeeGroupReactionInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FEmployeeGroups1)-1 do
    System.SysUtils.FreeAndNil(FEmployeeGroups1[I]);
  System.SetLength(FEmployeeGroups1, 0);
  inherited Destroy;
end;

procedure AcsEmployeeGroupReactionInfo2.SetEmployeeGroups1(Index: Integer; const AArrayOfAcsEmployeeGroupReactionInfo: ArrayOfAcsEmployeeGroupReactionInfo);
begin
  FEmployeeGroups1 := AArrayOfAcsEmployeeGroupReactionInfo;
  FEmployeeGroups1_Specified := True;
end;

function AcsEmployeeGroupReactionInfo2.EmployeeGroups1_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroups1_Specified;
end;

procedure AcsEmployeeGroupReactionInfo2.SetEmployeesFromGroupsGuids(Index: Integer; const AArrayOfguid: ArrayOfguid);
begin
  FEmployeesFromGroupsGuids := AArrayOfguid;
  FEmployeesFromGroupsGuids_Specified := True;
end;

function AcsEmployeeGroupReactionInfo2.EmployeesFromGroupsGuids_Specified(Index: Integer): boolean;
begin
  Result := FEmployeesFromGroupsGuids_Specified;
end;

procedure AcsEmployeeGroupReactionInfo2.SetSelectedEmployeesGuids(Index: Integer; const AArrayOfguid: ArrayOfguid);
begin
  FSelectedEmployeesGuids := AArrayOfguid;
  FSelectedEmployeesGuids_Specified := True;
end;

function AcsEmployeeGroupReactionInfo2.SelectedEmployeesGuids_Specified(Index: Integer): boolean;
begin
  Result := FSelectedEmployeesGuids_Specified;
end;

destructor AcsEmployeeGroupReportInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FEmployeeGroups2)-1 do
    System.SysUtils.FreeAndNil(FEmployeeGroups2[I]);
  System.SetLength(FEmployeeGroups2, 0);
  inherited Destroy;
end;

procedure AcsEmployeeGroupReportInfo2.SetEmployeeGroups2(Index: Integer; const AArrayOfAcsEmployeeGroupReportInfo: ArrayOfAcsEmployeeGroupReportInfo);
begin
  FEmployeeGroups2 := AArrayOfAcsEmployeeGroupReportInfo;
  FEmployeeGroups2_Specified := True;
end;

function AcsEmployeeGroupReportInfo2.EmployeeGroups2_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroups2_Specified;
end;

procedure AcsEmployeeGroupReportInfo2.SetEmployeesFromGroupsGuids(Index: Integer; const AArrayOfguid: ArrayOfguid);
begin
  FEmployeesFromGroupsGuids := AArrayOfguid;
  FEmployeesFromGroupsGuids_Specified := True;
end;

function AcsEmployeeGroupReportInfo2.EmployeesFromGroupsGuids_Specified(Index: Integer): boolean;
begin
  Result := FEmployeesFromGroupsGuids_Specified;
end;

procedure AcsEmployeeGroupReportInfo2.SetSelectedEmployeesGuids(Index: Integer; const AArrayOfguid: ArrayOfguid);
begin
  FSelectedEmployeesGuids := AArrayOfguid;
  FSelectedEmployeesGuids_Specified := True;
end;

function AcsEmployeeGroupReportInfo2.SelectedEmployeesGuids_Specified(Index: Integer): boolean;
begin
  Result := FSelectedEmployeesGuids_Specified;
end;

destructor EmployeeInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFields)-1 do
    System.SysUtils.FreeAndNil(FFields[I]);
  System.SetLength(FFields, 0);
  inherited Destroy;
end;

procedure EmployeeInfo2.SetEmployeeID(Index: Integer; const Aguid: guid);
begin
  FEmployeeID := Aguid;
  FEmployeeID_Specified := True;
end;

function EmployeeInfo2.EmployeeID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeID_Specified;
end;

procedure EmployeeInfo2.SetFields(Index: Integer; const AArrayOfVariableInfo: ArrayOfVariableInfo);
begin
  FFields := AArrayOfVariableInfo;
  FFields_Specified := True;
end;

function EmployeeInfo2.Fields_Specified(Index: Integer): boolean;
begin
  Result := FFields_Specified;
end;

procedure EmployeeInfo2.SetPhoto(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FPhoto := ATArray;
  FPhoto_Specified := True;
end;

function EmployeeInfo2.Photo_Specified(Index: Integer): boolean;
begin
  Result := FPhoto_Specified;
end;

procedure ReportingServicesData2.SetLogin(Index: Integer; const Astring: string);
begin
  FLogin := Astring;
  FLogin_Specified := True;
end;

function ReportingServicesData2.Login_Specified(Index: Integer): boolean;
begin
  Result := FLogin_Specified;
end;

procedure ReportingServicesData2.SetPassword(Index: Integer; const Astring: string);
begin
  FPassword := Astring;
  FPassword_Specified := True;
end;

function ReportingServicesData2.Password_Specified(Index: Integer): boolean;
begin
  Result := FPassword_Specified;
end;

procedure ReportingServicesData2.SetUrl(Index: Integer; const Astring: string);
begin
  FUrl := Astring;
  FUrl_Specified := True;
end;

function ReportingServicesData2.Url_Specified(Index: Integer): boolean;
begin
  Result := FUrl_Specified;
end;

destructor LServerAdded2.Destroy;
begin
  System.SysUtils.FreeAndNil(FServerInfo);
  inherited Destroy;
end;

procedure LServerAdded2.SetServerInfo(Index: Integer; const ALServerInfo2: LServerInfo2);
begin
  FServerInfo := ALServerInfo2;
  FServerInfo_Specified := True;
end;

function LServerAdded2.ServerInfo_Specified(Index: Integer): boolean;
begin
  Result := FServerInfo_Specified;
end;

procedure AccessPoint2CameraSaveData2.SetAccessPointID(Index: Integer; const Aguid: guid);
begin
  FAccessPointID := Aguid;
  FAccessPointID_Specified := True;
end;

function AccessPoint2CameraSaveData2.AccessPointID_Specified(Index: Integer): boolean;
begin
  Result := FAccessPointID_Specified;
end;

procedure AccessPoint2CameraSaveData2.SetCameraID(Index: Integer; const Aguid: guid);
begin
  FCameraID := Aguid;
  FCameraID_Specified := True;
end;

function AccessPoint2CameraSaveData2.CameraID_Specified(Index: Integer): boolean;
begin
  Result := FCameraID_Specified;
end;

procedure AccessPoint2CameraSaveData2.SetDirection(Index: Integer; const AEntryType: EntryType);
begin
  FDirection := AEntryType;
  FDirection_Specified := True;
end;

function AccessPoint2CameraSaveData2.Direction_Specified(Index: Integer): boolean;
begin
  Result := FDirection_Specified;
end;

procedure AccessPoint2CameraChain2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function AccessPoint2CameraChain2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

destructor AcsWeekFull2.Destroy;
begin
  System.SysUtils.FreeAndNil(FFriday);
  System.SysUtils.FreeAndNil(FMonday);
  System.SysUtils.FreeAndNil(FSaturday);
  System.SysUtils.FreeAndNil(FSunday);
  System.SysUtils.FreeAndNil(FThursday);
  System.SysUtils.FreeAndNil(FTuesday);
  System.SysUtils.FreeAndNil(FWednesday);
  inherited Destroy;
end;

procedure AcsWeekFull2.SetFriday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
begin
  FFriday := AAcsDaySchedule2;
  FFriday_Specified := True;
end;

function AcsWeekFull2.Friday_Specified(Index: Integer): boolean;
begin
  Result := FFriday_Specified;
end;

procedure AcsWeekFull2.SetMonday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
begin
  FMonday := AAcsDaySchedule2;
  FMonday_Specified := True;
end;

function AcsWeekFull2.Monday_Specified(Index: Integer): boolean;
begin
  Result := FMonday_Specified;
end;

procedure AcsWeekFull2.SetSaturday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
begin
  FSaturday := AAcsDaySchedule2;
  FSaturday_Specified := True;
end;

function AcsWeekFull2.Saturday_Specified(Index: Integer): boolean;
begin
  Result := FSaturday_Specified;
end;

procedure AcsWeekFull2.SetSunday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
begin
  FSunday := AAcsDaySchedule2;
  FSunday_Specified := True;
end;

function AcsWeekFull2.Sunday_Specified(Index: Integer): boolean;
begin
  Result := FSunday_Specified;
end;

procedure AcsWeekFull2.SetThursday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
begin
  FThursday := AAcsDaySchedule2;
  FThursday_Specified := True;
end;

function AcsWeekFull2.Thursday_Specified(Index: Integer): boolean;
begin
  Result := FThursday_Specified;
end;

procedure AcsWeekFull2.SetTuesday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
begin
  FTuesday := AAcsDaySchedule2;
  FTuesday_Specified := True;
end;

function AcsWeekFull2.Tuesday_Specified(Index: Integer): boolean;
begin
  Result := FTuesday_Specified;
end;

procedure AcsWeekFull2.SetWednesday(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
begin
  FWednesday := AAcsDaySchedule2;
  FWednesday_Specified := True;
end;

function AcsWeekFull2.Wednesday_Specified(Index: Integer): boolean;
begin
  Result := FWednesday_Specified;
end;

procedure AcsWeekSlim2.SetFriday(Index: Integer; const Aguid: guid);
begin
  FFriday := Aguid;
  FFriday_Specified := True;
end;

function AcsWeekSlim2.Friday_Specified(Index: Integer): boolean;
begin
  Result := FFriday_Specified;
end;

procedure AcsWeekSlim2.SetMonday(Index: Integer; const Aguid: guid);
begin
  FMonday := Aguid;
  FMonday_Specified := True;
end;

function AcsWeekSlim2.Monday_Specified(Index: Integer): boolean;
begin
  Result := FMonday_Specified;
end;

procedure AcsWeekSlim2.SetSaturday(Index: Integer; const Aguid: guid);
begin
  FSaturday := Aguid;
  FSaturday_Specified := True;
end;

function AcsWeekSlim2.Saturday_Specified(Index: Integer): boolean;
begin
  Result := FSaturday_Specified;
end;

procedure AcsWeekSlim2.SetSunday(Index: Integer; const Aguid: guid);
begin
  FSunday := Aguid;
  FSunday_Specified := True;
end;

function AcsWeekSlim2.Sunday_Specified(Index: Integer): boolean;
begin
  Result := FSunday_Specified;
end;

procedure AcsWeekSlim2.SetThursday(Index: Integer; const Aguid: guid);
begin
  FThursday := Aguid;
  FThursday_Specified := True;
end;

function AcsWeekSlim2.Thursday_Specified(Index: Integer): boolean;
begin
  Result := FThursday_Specified;
end;

procedure AcsWeekSlim2.SetTuesday(Index: Integer; const Aguid: guid);
begin
  FTuesday := Aguid;
  FTuesday_Specified := True;
end;

function AcsWeekSlim2.Tuesday_Specified(Index: Integer): boolean;
begin
  Result := FTuesday_Specified;
end;

procedure AcsWeekSlim2.SetWednesday(Index: Integer; const Aguid: guid);
begin
  FWednesday := Aguid;
  FWednesday_Specified := True;
end;

function AcsWeekSlim2.Wednesday_Specified(Index: Integer): boolean;
begin
  Result := FWednesday_Specified;
end;

destructor AcsCustomizableDayBase2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDate);
  inherited Destroy;
end;

procedure AcsCustomizableDayBase2.SetDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDate := ATXSDateTime;
  FDate_Specified := True;
end;

function AcsCustomizableDayBase2.Date_Specified(Index: Integer): boolean;
begin
  Result := FDate_Specified;
end;

procedure AcsCustomizableDayBase2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function AcsCustomizableDayBase2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure AcsCustomizableDayBase2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function AcsCustomizableDayBase2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure AcsCustomizableDayBase2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AcsCustomizableDayBase2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AcsCustomDay2.SetDayType(Index: Integer; const AAcsCustomizableDayType: AcsCustomizableDayType);
begin
  FDayType := AAcsCustomizableDayType;
  FDayType_Specified := True;
end;

function AcsCustomDay2.DayType_Specified(Index: Integer): boolean;
begin
  Result := FDayType_Specified;
end;

destructor AcsWorkDayWithTransfer2.Destroy;
begin
  System.SysUtils.FreeAndNil(FTransferedDate);
  inherited Destroy;
end;

procedure AcsWorkDayWithTransfer2.SetTransferedDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FTransferedDate := ATXSDateTime;
  FTransferedDate_Specified := True;
end;

function AcsWorkDayWithTransfer2.TransferedDate_Specified(Index: Integer): boolean;
begin
  Result := FTransferedDate_Specified;
end;

procedure AcsScheduleSlimInfo2.SetAcsScheduleType(Index: Integer; const AAcsScheduleType: AcsScheduleType);
begin
  FAcsScheduleType := AAcsScheduleType;
  FAcsScheduleType_Specified := True;
end;

function AcsScheduleSlimInfo2.AcsScheduleType_Specified(Index: Integer): boolean;
begin
  Result := FAcsScheduleType_Specified;
end;

procedure AcsScheduleSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function AcsScheduleSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure AcsScheduleSlimInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AcsScheduleSlimInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AcsScheduleBase2.SetBuiltInType(Index: Integer; const AAcsScheduleBuiltInType: AcsScheduleBuiltInType);
begin
  FBuiltInType := AAcsScheduleBuiltInType;
  FBuiltInType_Specified := True;
end;

function AcsScheduleBase2.BuiltInType_Specified(Index: Integer): boolean;
begin
  Result := FBuiltInType_Specified;
end;

procedure AcsScheduleBase2.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function AcsScheduleBase2.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

procedure AcsScheduleBase2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function AcsScheduleBase2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure AcsScheduleBase2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function AcsScheduleBase2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure AcsScheduleBase2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AcsScheduleBase2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

destructor AcsMultiDaySchedule2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDayIntervals)-1 do
    System.SysUtils.FreeAndNil(FDayIntervals[I]);
  System.SetLength(FDayIntervals, 0);
  inherited Destroy;
end;

procedure AcsMultiDaySchedule2.SetDayIntervals(Index: Integer; const AArrayOfRGDayIntervals: ArrayOfRGDayIntervals);
begin
  FDayIntervals := AArrayOfRGDayIntervals;
  FDayIntervals_Specified := True;
end;

function AcsMultiDaySchedule2.DayIntervals_Specified(Index: Integer): boolean;
begin
  Result := FDayIntervals_Specified;
end;

destructor AcsWeekScheduleFull2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FWeeks)-1 do
    System.SysUtils.FreeAndNil(FWeeks[I]);
  System.SetLength(FWeeks, 0);
  inherited Destroy;
end;

procedure AcsWeekScheduleFull2.SetWeeks(Index: Integer; const AArrayOfAcsWeekFull: ArrayOfAcsWeekFull);
begin
  FWeeks := AArrayOfAcsWeekFull;
  FWeeks_Specified := True;
end;

function AcsWeekScheduleFull2.Weeks_Specified(Index: Integer): boolean;
begin
  Result := FWeeks_Specified;
end;

destructor AcsWeekScheduleSlim2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FWeeks)-1 do
    System.SysUtils.FreeAndNil(FWeeks[I]);
  System.SetLength(FWeeks, 0);
  inherited Destroy;
end;

procedure AcsWeekScheduleSlim2.SetWeeks(Index: Integer; const AArrayOfAcsWeekSlim: ArrayOfAcsWeekSlim);
begin
  FWeeks := AArrayOfAcsWeekSlim;
  FWeeks_Specified := True;
end;

function AcsWeekScheduleSlim2.Weeks_Specified(Index: Integer): boolean;
begin
  Result := FWeeks_Specified;
end;

destructor AcsDaySchedule2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDayIntervals);
  inherited Destroy;
end;

procedure AcsDaySchedule2.SetDayIntervals(Index: Integer; const ARGDayIntervals2: RGDayIntervals2);
begin
  FDayIntervals := ARGDayIntervals2;
  FDayIntervals_Specified := True;
end;

function AcsDaySchedule2.DayIntervals_Specified(Index: Integer): boolean;
begin
  Result := FDayIntervals_Specified;
end;

destructor RGDayIntervals2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FTimeIntervals)-1 do
    System.SysUtils.FreeAndNil(FTimeIntervals[I]);
  System.SetLength(FTimeIntervals, 0);
  inherited Destroy;
end;

procedure RGDayIntervals2.SetTimeIntervals(Index: Integer; const AArrayOfRGTimeInterval: ArrayOfRGTimeInterval);
begin
  FTimeIntervals := AArrayOfRGTimeInterval;
  FTimeIntervals_Specified := True;
end;

function RGDayIntervals2.TimeIntervals_Specified(Index: Integer): boolean;
begin
  Result := FTimeIntervals_Specified;
end;

destructor RGTimeInterval2.Destroy;
begin
  System.SysUtils.FreeAndNil(FEndTime);
  System.SysUtils.FreeAndNil(FStartTime);
  inherited Destroy;
end;

procedure RGTimeInterval2.SetEndTime(Index: Integer; const ATimeOfDay2: TimeOfDay2);
begin
  FEndTime := ATimeOfDay2;
  FEndTime_Specified := True;
end;

function RGTimeInterval2.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure RGTimeInterval2.SetIntervalType(Index: Integer; const AAcsTimeIntervalType: AcsTimeIntervalType);
begin
  FIntervalType := AAcsTimeIntervalType;
  FIntervalType_Specified := True;
end;

function RGTimeInterval2.IntervalType_Specified(Index: Integer): boolean;
begin
  Result := FIntervalType_Specified;
end;

procedure RGTimeInterval2.SetStartTime(Index: Integer; const ATimeOfDay2: TimeOfDay2);
begin
  FStartTime := ATimeOfDay2;
  FStartTime_Specified := True;
end;

function RGTimeInterval2.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure OperationCanceledException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function OperationCanceledException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

procedure WebException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function WebException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

procedure SocketException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function SocketException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

destructor TupleOfguidNullableOfdateTimeGOBf0pnW2.Destroy;
begin
  System.SysUtils.FreeAndNil(Fm_Item2);
  inherited Destroy;
end;

procedure ApplicationException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function ApplicationException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

destructor TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(Fm_Item1)-1 do
    System.SysUtils.FreeAndNil(Fm_Item1[I]);
  System.SetLength(Fm_Item1, 0);
  for I := 0 to System.Length(Fm_Item2)-1 do
    System.SysUtils.FreeAndNil(Fm_Item2[I]);
  System.SetLength(Fm_Item2, 0);
  for I := 0 to System.Length(Fm_Item3)-1 do
    System.SysUtils.FreeAndNil(Fm_Item3[I]);
  System.SetLength(Fm_Item3, 0);
  inherited Destroy;
end;

procedure ArgumentNullException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function ArgumentNullException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

procedure ArgumentOutOfRangeException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function ArgumentOutOfRangeException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

procedure TimeoutException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function TimeoutException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

procedure ArgumentException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function ArgumentException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

procedure InvalidOperationException.SetFactoryType(Index: Integer; const AFactoryType: FactoryType);
begin
  FFactoryType := AFactoryType;
  FFactoryType_Specified := True;
end;

function InvalidOperationException.FactoryType_Specified(Index: Integer): boolean;
begin
  Result := FFactoryType_Specified;
end;

destructor LDriverAdded2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDriverInfo);
  inherited Destroy;
end;

procedure LDriverAdded2.SetDriverInfo(Index: Integer; const ALDriverFullInfo2: LDriverFullInfo2);
begin
  FDriverInfo := ALDriverFullInfo2;
  FDriverInfo_Specified := True;
end;

function LDriverAdded2.DriverInfo_Specified(Index: Integer): boolean;
begin
  Result := FDriverInfo_Specified;
end;

procedure LProperty2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function LProperty2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure LProperty2.SetValue(Index: Integer; const Astring: string);
begin
  FValue := Astring;
  FValue_Specified := True;
end;

function LProperty2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

destructor LResourcePropertyValue2.Destroy;
begin
  System.SysUtils.FreeAndNil(FLastUpdated);
  inherited Destroy;
end;

procedure LResourcePropertyValue2.SetLastUpdated(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastUpdated := ATXSDateTime;
  FLastUpdated_Specified := True;
end;

function LResourcePropertyValue2.LastUpdated_Specified(Index: Integer): boolean;
begin
  Result := FLastUpdated_Specified;
end;

procedure LResourcePropertyValue2.SetPropertyName(Index: Integer; const Astring: string);
begin
  FPropertyName := Astring;
  FPropertyName_Specified := True;
end;

function LResourcePropertyValue2.PropertyName_Specified(Index: Integer): boolean;
begin
  Result := FPropertyName_Specified;
end;

procedure LResourcePropertyValue2.SetValue(Index: Integer; const Astring: string);
begin
  FValue := Astring;
  FValue_Specified := True;
end;

function LResourcePropertyValue2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

destructor LResourceProperty2.Destroy;
begin
  System.SysUtils.FreeAndNil(FLastUpdated);
  inherited Destroy;
end;

procedure LResourceProperty2.SetLastUpdated(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastUpdated := ATXSDateTime;
  FLastUpdated_Specified := True;
end;

function LResourceProperty2.LastUpdated_Specified(Index: Integer): boolean;
begin
  Result := FLastUpdated_Specified;
end;

procedure LResourceProperty2.SetPropertyName(Index: Integer; const Astring: string);
begin
  FPropertyName := Astring;
  FPropertyName_Specified := True;
end;

function LResourceProperty2.PropertyName_Specified(Index: Integer): boolean;
begin
  Result := FPropertyName_Specified;
end;

procedure LResourceProperty2.SetResourceId(Index: Integer; const Aguid: guid);
begin
  FResourceId := Aguid;
  FResourceId_Specified := True;
end;

function LResourceProperty2.ResourceId_Specified(Index: Integer): boolean;
begin
  Result := FResourceId_Specified;
end;

procedure LResourceProperty2.SetResourceType(Index: Integer; const AResourceType: ResourceType);
begin
  FResourceType := AResourceType;
  FResourceType_Specified := True;
end;

function LResourceProperty2.ResourceType_Specified(Index: Integer): boolean;
begin
  Result := FResourceType_Specified;
end;

procedure LResourceProperty2.SetValue(Index: Integer; const Astring: string);
begin
  FValue := Astring;
  FValue_Specified := True;
end;

function LResourceProperty2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure LResourceInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function LResourceInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure LResourceInfo2.SetResourceType(Index: Integer; const AResourceType: ResourceType);
begin
  FResourceType := AResourceType;
  FResourceType_Specified := True;
end;

function LResourceInfo2.ResourceType_Specified(Index: Integer): boolean;
begin
  Result := FResourceType_Specified;
end;

destructor LNetworkAdded2.Destroy;
begin
  System.SysUtils.FreeAndNil(FNetInfo);
  inherited Destroy;
end;

procedure LNetworkAdded2.SetNetInfo(Index: Integer; const ALNetInfo2: LNetInfo2);
begin
  FNetInfo := ALNetInfo2;
  FNetInfo_Specified := True;
end;

function LNetworkAdded2.NetInfo_Specified(Index: Integer): boolean;
begin
  Result := FNetInfo_Specified;
end;

procedure LOperationResult2.SetConnectionId(Index: Integer; const Aguid: guid);
begin
  FConnectionId := Aguid;
  FConnectionId_Specified := True;
end;

function LOperationResult2.ConnectionId_Specified(Index: Integer): boolean;
begin
  Result := FConnectionId_Specified;
end;

procedure LOperationResult2.SetContext(Index: Integer; const Astring: string);
begin
  FContext := Astring;
  FContext_Specified := True;
end;

function LOperationResult2.Context_Specified(Index: Integer): boolean;
begin
  Result := FContext_Specified;
end;

procedure LOperationResult2.SetDetails(Index: Integer; const Astring: string);
begin
  FDetails := Astring;
  FDetails_Specified := True;
end;

function LOperationResult2.Details_Specified(Index: Integer): boolean;
begin
  Result := FDetails_Specified;
end;

procedure LOperationResult2.SetMemberSignature(Index: Integer; const Astring: string);
begin
  FMemberSignature := Astring;
  FMemberSignature_Specified := True;
end;

function LOperationResult2.MemberSignature_Specified(Index: Integer): boolean;
begin
  Result := FMemberSignature_Specified;
end;

procedure LOperationResult2.SetOperationType(Index: Integer; const AOperationType: OperationType);
begin
  FOperationType := AOperationType;
  FOperationType_Specified := True;
end;

function LOperationResult2.OperationType_Specified(Index: Integer): boolean;
begin
  Result := FOperationType_Specified;
end;

procedure LOperationResult2.SetResourceId(Index: Integer; const Aguid: guid);
begin
  FResourceId := Aguid;
  FResourceId_Specified := True;
end;

function LOperationResult2.ResourceId_Specified(Index: Integer): boolean;
begin
  Result := FResourceId_Specified;
end;

procedure LOperationResult2.SetResourceType(Index: Integer; const AResourceType: ResourceType);
begin
  FResourceType := AResourceType;
  FResourceType_Specified := True;
end;

function LOperationResult2.ResourceType_Specified(Index: Integer): boolean;
begin
  Result := FResourceType_Specified;
end;

procedure LOperationResult2.SetResultType(Index: Integer; const AOperationResultType: OperationResultType);
begin
  FResultType := AOperationResultType;
  FResultType_Specified := True;
end;

function LOperationResult2.ResultType_Specified(Index: Integer): boolean;
begin
  Result := FResultType_Specified;
end;

destructor LDriverFullInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FProperties)-1 do
    System.SysUtils.FreeAndNil(FProperties[I]);
  System.SetLength(FProperties, 0);
  for I := 0 to System.Length(FStates)-1 do
    System.SysUtils.FreeAndNil(FStates[I]);
  System.SetLength(FStates, 0);
  inherited Destroy;
end;

procedure LDriverFullInfo2.SetDeviceServerId(Index: Integer; const Aguid: guid);
begin
  FDeviceServerId := Aguid;
  FDeviceServerId_Specified := True;
end;

function LDriverFullInfo2.DeviceServerId_Specified(Index: Integer): boolean;
begin
  Result := FDeviceServerId_Specified;
end;

procedure LDriverFullInfo2.SetDriverType(Index: Integer; const Astring: string);
begin
  FDriverType := Astring;
  FDriverType_Specified := True;
end;

function LDriverFullInfo2.DriverType_Specified(Index: Integer): boolean;
begin
  Result := FDriverType_Specified;
end;

procedure LDriverFullInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function LDriverFullInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure LDriverFullInfo2.SetIsActive(Index: Integer; const ABoolean: Boolean);
begin
  FIsActive := ABoolean;
  FIsActive_Specified := True;
end;

function LDriverFullInfo2.IsActive_Specified(Index: Integer): boolean;
begin
  Result := FIsActive_Specified;
end;

procedure LDriverFullInfo2.SetIsUnknownID(Index: Integer; const ABoolean: Boolean);
begin
  FIsUnknownID := ABoolean;
  FIsUnknownID_Specified := True;
end;

function LDriverFullInfo2.IsUnknownID_Specified(Index: Integer): boolean;
begin
  Result := FIsUnknownID_Specified;
end;

procedure LDriverFullInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function LDriverFullInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure LDriverFullInfo2.SetParentId(Index: Integer; const Aguid: guid);
begin
  FParentId := Aguid;
  FParentId_Specified := True;
end;

function LDriverFullInfo2.ParentId_Specified(Index: Integer): boolean;
begin
  Result := FParentId_Specified;
end;

procedure LDriverFullInfo2.SetParentPropertyName(Index: Integer; const Astring: string);
begin
  FParentPropertyName := Astring;
  FParentPropertyName_Specified := True;
end;

function LDriverFullInfo2.ParentPropertyName_Specified(Index: Integer): boolean;
begin
  Result := FParentPropertyName_Specified;
end;

procedure LDriverFullInfo2.SetProperties(Index: Integer; const AArrayOfLResourcePropertyValue: ArrayOfLResourcePropertyValue);
begin
  FProperties := AArrayOfLResourcePropertyValue;
  FProperties_Specified := True;
end;

function LDriverFullInfo2.Properties_Specified(Index: Integer): boolean;
begin
  Result := FProperties_Specified;
end;

procedure LDriverFullInfo2.SetState(Index: Integer; const ADeviceStateEnum: DeviceStateEnum);
begin
  FState := ADeviceStateEnum;
  FState_Specified := True;
end;

function LDriverFullInfo2.State_Specified(Index: Integer): boolean;
begin
  Result := FState_Specified;
end;

procedure LDriverFullInfo2.SetStates(Index: Integer; const AArrayOfLResourcePropertyValue: ArrayOfLResourcePropertyValue);
begin
  FStates := AArrayOfLResourcePropertyValue;
  FStates_Specified := True;
end;

function LDriverFullInfo2.States_Specified(Index: Integer): boolean;
begin
  Result := FStates_Specified;
end;

destructor NetConfiguration2.Destroy;
begin
  System.SysUtils.FreeAndNil(FGateway);
  System.SysUtils.FreeAndNil(FIPAddress);
  System.SysUtils.FreeAndNil(FMask);
  inherited Destroy;
end;

procedure NetConfiguration2.SetGateway(Index: Integer; const AIPAddress2: IPAddress2);
begin
  FGateway := AIPAddress2;
  FGateway_Specified := True;
end;

function NetConfiguration2.Gateway_Specified(Index: Integer): boolean;
begin
  Result := FGateway_Specified;
end;

procedure NetConfiguration2.SetIPAddress(Index: Integer; const AIPAddress2: IPAddress2);
begin
  FIPAddress := AIPAddress2;
  FIPAddress_Specified := True;
end;

function NetConfiguration2.IPAddress_Specified(Index: Integer): boolean;
begin
  Result := FIPAddress_Specified;
end;

procedure NetConfiguration2.SetMask(Index: Integer; const AIPAddress2: IPAddress2);
begin
  FMask := AIPAddress2;
  FMask_Specified := True;
end;

function NetConfiguration2.Mask_Specified(Index: Integer): boolean;
begin
  Result := FMask_Specified;
end;

procedure AcsAccessPointDriverInfo2.SetAccessPointType(Index: Integer; const AAcsAccessPointType: AcsAccessPointType);
begin
  FAccessPointType := AAcsAccessPointType;
  FAccessPointType_Specified := True;
end;

function AcsAccessPointDriverInfo2.AccessPointType_Specified(Index: Integer): boolean;
begin
  Result := FAccessPointType_Specified;
end;

procedure AcsAccessPointDriverInfo2.SetDriverId(Index: Integer; const Aguid: guid);
begin
  FDriverId := Aguid;
  FDriverId_Specified := True;
end;

function AcsAccessPointDriverInfo2.DriverId_Specified(Index: Integer): boolean;
begin
  Result := FDriverId_Specified;
end;

procedure AcsAccessPointDriverInfo2.SetDriverType(Index: Integer; const Astring: string);
begin
  FDriverType := Astring;
  FDriverType_Specified := True;
end;

function AcsAccessPointDriverInfo2.DriverType_Specified(Index: Integer): boolean;
begin
  Result := FDriverType_Specified;
end;

procedure AcsAccessPointDriverInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AcsAccessPointDriverInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AcsAccessPointDriverInfo2.SetServerID(Index: Integer; const Aguid: guid);
begin
  FServerID := Aguid;
  FServerID_Specified := True;
end;

function AcsAccessPointDriverInfo2.ServerID_Specified(Index: Integer): boolean;
begin
  Result := FServerID_Specified;
end;

procedure LServerInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function LServerInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure LServerInfo2.SetIdNet(Index: Integer; const Aguid: guid);
begin
  FIdNet := Aguid;
  FIdNet_Specified := True;
end;

function LServerInfo2.IdNet_Specified(Index: Integer): boolean;
begin
  Result := FIdNet_Specified;
end;

procedure LServerInfo2.SetIsAttached(Index: Integer; const ABoolean: Boolean);
begin
  FIsAttached := ABoolean;
  FIsAttached_Specified := True;
end;

function LServerInfo2.IsAttached_Specified(Index: Integer): boolean;
begin
  Result := FIsAttached_Specified;
end;

procedure LServerInfo2.SetServerType(Index: Integer; const AServerType: ServerType);
begin
  FServerType := AServerType;
  FServerType_Specified := True;
end;

function LServerInfo2.ServerType_Specified(Index: Integer): boolean;
begin
  Result := FServerType_Specified;
end;

procedure LServerInfo2.SetUrl(Index: Integer; const Astring: string);
begin
  FUrl := Astring;
  FUrl_Specified := True;
end;

function LServerInfo2.Url_Specified(Index: Integer): boolean;
begin
  Result := FUrl_Specified;
end;

procedure LNetInfo2.SetGatewayUrl(Index: Integer; const Astring: string);
begin
  FGatewayUrl := Astring;
  FGatewayUrl_Specified := True;
end;

function LNetInfo2.GatewayUrl_Specified(Index: Integer): boolean;
begin
  Result := FGatewayUrl_Specified;
end;

procedure LNetInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function LNetInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure LNetInfo2.SetIsAttached(Index: Integer; const ABoolean: Boolean);
begin
  FIsAttached := ABoolean;
  FIsAttached_Specified := True;
end;

function LNetInfo2.IsAttached_Specified(Index: Integer): boolean;
begin
  Result := FIsAttached_Specified;
end;

procedure License2.SetElementID(Index: Integer; const Astring: string);
begin
  FElementID := Astring;
  FElementID_Specified := True;
end;

function License2.ElementID_Specified(Index: Integer): boolean;
begin
  Result := FElementID_Specified;
end;

procedure License2.SetElementName(Index: Integer; const Astring: string);
begin
  FElementName := Astring;
  FElementName_Specified := True;
end;

function License2.ElementName_Specified(Index: Integer): boolean;
begin
  Result := FElementName_Specified;
end;

procedure License2.SetModuleID(Index: Integer; const Astring: string);
begin
  FModuleID := Astring;
  FModuleID_Specified := True;
end;

function License2.ModuleID_Specified(Index: Integer): boolean;
begin
  Result := FModuleID_Specified;
end;

procedure License2.SetModuleName(Index: Integer; const Astring: string);
begin
  FModuleName := Astring;
  FModuleName_Specified := True;
end;

function License2.ModuleName_Specified(Index: Integer): boolean;
begin
  Result := FModuleName_Specified;
end;

procedure License2.SetValue(Index: Integer; const Astring: string);
begin
  FValue := Astring;
  FValue_Specified := True;
end;

function License2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure VariableInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function VariableInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure VariableInfo2.SetValue(Index: Integer; const Astring: string);
begin
  FValue := Astring;
  FValue_Specified := True;
end;

function VariableInfo2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure EmailAddressSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function EmailAddressSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure EmailAddressSaveData2.SetEmail(Index: Integer; const Astring: string);
begin
  FEmail := Astring;
  FEmail_Specified := True;
end;

function EmailAddressSaveData2.Email_Specified(Index: Integer): boolean;
begin
  Result := FEmail_Specified;
end;

procedure EmailAddressSaveData2.SetEmailOrder(Index: Integer; const AInteger: Integer);
begin
  FEmailOrder := AInteger;
  FEmailOrder_Specified := True;
end;

function EmailAddressSaveData2.EmailOrder_Specified(Index: Integer): boolean;
begin
  Result := FEmailOrder_Specified;
end;

procedure EmailAddressInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function EmailAddressInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure IvideonCameraDriverInfo2.SetCameraType(Index: Integer; const ACameraProductType: CameraProductType);
begin
  FCameraType := ACameraProductType;
  FCameraType_Specified := True;
end;

function IvideonCameraDriverInfo2.CameraType_Specified(Index: Integer): boolean;
begin
  Result := FCameraType_Specified;
end;

procedure IvideonCameraDriverInfo2.SetDriverId(Index: Integer; const Aguid: guid);
begin
  FDriverId := Aguid;
  FDriverId_Specified := True;
end;

function IvideonCameraDriverInfo2.DriverId_Specified(Index: Integer): boolean;
begin
  Result := FDriverId_Specified;
end;

procedure IvideonCameraDriverInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function IvideonCameraDriverInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure IvideonCameraDriverInfo2.SetPath(Index: Integer; const Astring: string);
begin
  FPath := Astring;
  FPath_Specified := True;
end;

function IvideonCameraDriverInfo2.Path_Specified(Index: Integer): boolean;
begin
  Result := FPath_Specified;
end;

procedure IvideonCameraDriverInfo2.SetServerID(Index: Integer; const Aguid: guid);
begin
  FServerID := Aguid;
  FServerID_Specified := True;
end;

function IvideonCameraDriverInfo2.ServerID_Specified(Index: Integer): boolean;
begin
  Result := FServerID_Specified;
end;

procedure IvideonCameraDriverInfo2.SetServerType(Index: Integer; const Astring: string);
begin
  FServerType := Astring;
  FServerType_Specified := True;
end;

function IvideonCameraDriverInfo2.ServerType_Specified(Index: Integer): boolean;
begin
  Result := FServerType_Specified;
end;

procedure EmailDistributionAddressSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function EmailDistributionAddressSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure EmailDistributionAddressSaveData2.SetIsAuthenticationRequired(Index: Integer; const ABoolean: Boolean);
begin
  FIsAuthenticationRequired := ABoolean;
  FIsAuthenticationRequired_Specified := True;
end;

function EmailDistributionAddressSaveData2.IsAuthenticationRequired_Specified(Index: Integer): boolean;
begin
  Result := FIsAuthenticationRequired_Specified;
end;

procedure EmailDistributionAddressSaveData2.SetIsSPARequired(Index: Integer; const ABoolean: Boolean);
begin
  FIsSPARequired := ABoolean;
  FIsSPARequired_Specified := True;
end;

function EmailDistributionAddressSaveData2.IsSPARequired_Specified(Index: Integer): boolean;
begin
  Result := FIsSPARequired_Specified;
end;

procedure EmailDistributionAddressSaveData2.SetLogin(Index: Integer; const Astring: string);
begin
  FLogin := Astring;
  FLogin_Specified := True;
end;

function EmailDistributionAddressSaveData2.Login_Specified(Index: Integer): boolean;
begin
  Result := FLogin_Specified;
end;

procedure EmailDistributionAddressSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function EmailDistributionAddressSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure EmailDistributionAddressSaveData2.SetPassword(Index: Integer; const Astring: string);
begin
  FPassword := Astring;
  FPassword_Specified := True;
end;

function EmailDistributionAddressSaveData2.Password_Specified(Index: Integer): boolean;
begin
  Result := FPassword_Specified;
end;

procedure EmailDistributionAddressSaveData2.SetSenderEmailAddress(Index: Integer; const Astring: string);
begin
  FSenderEmailAddress := Astring;
  FSenderEmailAddress_Specified := True;
end;

function EmailDistributionAddressSaveData2.SenderEmailAddress_Specified(Index: Integer): boolean;
begin
  Result := FSenderEmailAddress_Specified;
end;

procedure EmailDistributionAddressSaveData2.SetSenderName(Index: Integer; const Astring: string);
begin
  FSenderName := Astring;
  FSenderName_Specified := True;
end;

function EmailDistributionAddressSaveData2.SenderName_Specified(Index: Integer): boolean;
begin
  Result := FSenderName_Specified;
end;

procedure EmailDistributionAddressSaveData2.SetSmtpEncryptionType(Index: Integer; const ASmtpEncryptionType: SmtpEncryptionType);
begin
  FSmtpEncryptionType := ASmtpEncryptionType;
  FSmtpEncryptionType_Specified := True;
end;

function EmailDistributionAddressSaveData2.SmtpEncryptionType_Specified(Index: Integer): boolean;
begin
  Result := FSmtpEncryptionType_Specified;
end;

procedure EmailDistributionAddressSaveData2.SetSmtpServerAddress(Index: Integer; const Astring: string);
begin
  FSmtpServerAddress := Astring;
  FSmtpServerAddress_Specified := True;
end;

function EmailDistributionAddressSaveData2.SmtpServerAddress_Specified(Index: Integer): boolean;
begin
  Result := FSmtpServerAddress_Specified;
end;

procedure EmailDistributionAddressSaveData2.SetSmtpServerPort(Index: Integer; const AInteger: Integer);
begin
  FSmtpServerPort := AInteger;
  FSmtpServerPort_Specified := True;
end;

function EmailDistributionAddressSaveData2.SmtpServerPort_Specified(Index: Integer): boolean;
begin
  Result := FSmtpServerPort_Specified;
end;

procedure EmailDistributionAddressInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function EmailDistributionAddressInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure PhoneNumberSaveData2.SetCityCode(Index: Integer; const Astring: string);
begin
  FCityCode := Astring;
  FCityCode_Specified := True;
end;

function PhoneNumberSaveData2.CityCode_Specified(Index: Integer): boolean;
begin
  Result := FCityCode_Specified;
end;

procedure PhoneNumberSaveData2.SetCountryCode(Index: Integer; const Astring: string);
begin
  FCountryCode := Astring;
  FCountryCode_Specified := True;
end;

function PhoneNumberSaveData2.CountryCode_Specified(Index: Integer): boolean;
begin
  Result := FCountryCode_Specified;
end;

procedure PhoneNumberSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function PhoneNumberSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure PhoneNumberSaveData2.SetPhoneNumber(Index: Integer; const Astring: string);
begin
  FPhoneNumber := Astring;
  FPhoneNumber_Specified := True;
end;

function PhoneNumberSaveData2.PhoneNumber_Specified(Index: Integer): boolean;
begin
  Result := FPhoneNumber_Specified;
end;

procedure PhoneNumberSaveData2.SetPhoneOrder(Index: Integer; const AInteger: Integer);
begin
  FPhoneOrder := AInteger;
  FPhoneOrder_Specified := True;
end;

function PhoneNumberSaveData2.PhoneOrder_Specified(Index: Integer): boolean;
begin
  Result := FPhoneOrder_Specified;
end;

procedure PhoneNumberInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function PhoneNumberInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure AccessBits2.SetC1(Index: Integer; const ABoolean: Boolean);
begin
  FC1 := ABoolean;
  FC1_Specified := True;
end;

function AccessBits2.C1_Specified(Index: Integer): boolean;
begin
  Result := FC1_Specified;
end;

procedure AccessBits2.SetC2(Index: Integer; const ABoolean: Boolean);
begin
  FC2 := ABoolean;
  FC2_Specified := True;
end;

function AccessBits2.C2_Specified(Index: Integer): boolean;
begin
  Result := FC2_Specified;
end;

procedure AccessBits2.SetC3(Index: Integer; const ABoolean: Boolean);
begin
  FC3 := ABoolean;
  FC3_Specified := True;
end;

function AccessBits2.C3_Specified(Index: Integer): boolean;
begin
  Result := FC3_Specified;
end;

procedure CellContentCameraSaveData2.SetCameraDriverId(Index: Integer; const Aguid: guid);
begin
  FCameraDriverId := Aguid;
  FCameraDriverId_Specified := True;
end;

function CellContentCameraSaveData2.CameraDriverId_Specified(Index: Integer): boolean;
begin
  Result := FCameraDriverId_Specified;
end;

procedure CellContentCameraInfo2.SetCameraDriverName(Index: Integer; const Astring: string);
begin
  FCameraDriverName := Astring;
  FCameraDriverName_Specified := True;
end;

function CellContentCameraInfo2.CameraDriverName_Specified(Index: Integer): boolean;
begin
  Result := FCameraDriverName_Specified;
end;

procedure CellContentCameraInfo2.SetCellId(Index: Integer; const Aguid: guid);
begin
  FCellId := Aguid;
  FCellId_Specified := True;
end;

function CellContentCameraInfo2.CellId_Specified(Index: Integer): boolean;
begin
  Result := FCellId_Specified;
end;

destructor DeviceDriverInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FArrayChilds)-1 do
    System.SysUtils.FreeAndNil(FArrayChilds[I]);
  System.SetLength(FArrayChilds, 0);
  for I := 0 to System.Length(FArrayProperties)-1 do
    System.SysUtils.FreeAndNil(FArrayProperties[I]);
  System.SetLength(FArrayProperties, 0);
  for I := 0 to System.Length(FCameras)-1 do
    System.SysUtils.FreeAndNil(FCameras[I]);
  System.SetLength(FCameras, 0);
  for I := 0 to System.Length(FDirtyArrayProperties)-1 do
    System.SysUtils.FreeAndNil(FDirtyArrayProperties[I]);
  System.SetLength(FDirtyArrayProperties, 0);
  inherited Destroy;
end;

procedure DeviceDriverInfo2.SetArrayChilds(Index: Integer; const AArrayOfDeviceDriverInfo: ArrayOfDeviceDriverInfo);
begin
  FArrayChilds := AArrayOfDeviceDriverInfo;
  FArrayChilds_Specified := True;
end;

function DeviceDriverInfo2.ArrayChilds_Specified(Index: Integer): boolean;
begin
  Result := FArrayChilds_Specified;
end;

procedure DeviceDriverInfo2.SetArrayProperties(Index: Integer; const AArrayOfPropertyValue: ArrayOfPropertyValue);
begin
  FArrayProperties := AArrayOfPropertyValue;
  FArrayProperties_Specified := True;
end;

function DeviceDriverInfo2.ArrayProperties_Specified(Index: Integer): boolean;
begin
  Result := FArrayProperties_Specified;
end;

procedure DeviceDriverInfo2.SetCameras(Index: Integer; const AArrayOfAccessPoint2CameraChain: ArrayOfAccessPoint2CameraChain);
begin
  FCameras := AArrayOfAccessPoint2CameraChain;
  FCameras_Specified := True;
end;

function DeviceDriverInfo2.Cameras_Specified(Index: Integer): boolean;
begin
  Result := FCameras_Specified;
end;

procedure DeviceDriverInfo2.SetChangeVersion(Index: Integer; const AInt64: Int64);
begin
  FChangeVersion := AInt64;
  FChangeVersion_Specified := True;
end;

function DeviceDriverInfo2.ChangeVersion_Specified(Index: Integer): boolean;
begin
  Result := FChangeVersion_Specified;
end;

procedure DeviceDriverInfo2.SetDeviceServerId(Index: Integer; const Aguid: guid);
begin
  FDeviceServerId := Aguid;
  FDeviceServerId_Specified := True;
end;

function DeviceDriverInfo2.DeviceServerId_Specified(Index: Integer): boolean;
begin
  Result := FDeviceServerId_Specified;
end;

procedure DeviceDriverInfo2.SetDirtyArrayProperties(Index: Integer; const AArrayOfPropertyValue: ArrayOfPropertyValue);
begin
  FDirtyArrayProperties := AArrayOfPropertyValue;
  FDirtyArrayProperties_Specified := True;
end;

function DeviceDriverInfo2.DirtyArrayProperties_Specified(Index: Integer): boolean;
begin
  Result := FDirtyArrayProperties_Specified;
end;

procedure DeviceDriverInfo2.SetDriverType(Index: Integer; const Astring: string);
begin
  FDriverType := Astring;
  FDriverType_Specified := True;
end;

function DeviceDriverInfo2.DriverType_Specified(Index: Integer): boolean;
begin
  Result := FDriverType_Specified;
end;

procedure DeviceDriverInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function DeviceDriverInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure DeviceDriverInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function DeviceDriverInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure DeviceDriverInfo2.SetParentPropertyName(Index: Integer; const Astring: string);
begin
  FParentPropertyName := Astring;
  FParentPropertyName_Specified := True;
end;

function DeviceDriverInfo2.ParentPropertyName_Specified(Index: Integer): boolean;
begin
  Result := FParentPropertyName_Specified;
end;

procedure DeviceDriverInfo2.SetState(Index: Integer; const AStateType: StateType);
begin
  FState := AStateType;
  FState_Specified := True;
end;

function DeviceDriverInfo2.State_Specified(Index: Integer): boolean;
begin
  Result := FState_Specified;
end;

procedure DeviceDriverInfo2.SetTagIds(Index: Integer; const AArrayOfguid: ArrayOfguid);
begin
  FTagIds := AArrayOfguid;
  FTagIds_Specified := True;
end;

function DeviceDriverInfo2.TagIds_Specified(Index: Integer): boolean;
begin
  Result := FTagIds_Specified;
end;

destructor LResourcePropertyValues2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FProperties)-1 do
    System.SysUtils.FreeAndNil(FProperties[I]);
  System.SetLength(FProperties, 0);
  inherited Destroy;
end;

procedure LResourcePropertyValues2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function LResourcePropertyValues2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure LResourcePropertyValues2.SetProperties(Index: Integer; const AArrayOfLPropertyValue: ArrayOfLPropertyValue);
begin
  FProperties := AArrayOfLPropertyValue;
  FProperties_Specified := True;
end;

function LResourcePropertyValues2.Properties_Specified(Index: Integer): boolean;
begin
  Result := FProperties_Specified;
end;

procedure LResourcePropertyValues2.SetType_(Index: Integer; const AResourceType: ResourceType);
begin
  FType_ := AResourceType;
  FType__Specified := True;
end;

function LResourcePropertyValues2.Type__Specified(Index: Integer): boolean;
begin
  Result := FType__Specified;
end;

procedure LPropertyValue2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function LPropertyValue2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure LPropertyValue2.SetValue(Index: Integer; const Astring: string);
begin
  FValue := Astring;
  FValue_Specified := True;
end;

function LPropertyValue2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure PropertyValue2.SetIsDirty(Index: Integer; const ABoolean: Boolean);
begin
  FIsDirty := ABoolean;
  FIsDirty_Specified := True;
end;

function PropertyValue2.IsDirty_Specified(Index: Integer): boolean;
begin
  Result := FIsDirty_Specified;
end;

procedure PropertyValue2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function PropertyValue2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure PropertyValue2.SetValue(Index: Integer; const Astring: string);
begin
  FValue := Astring;
  FValue_Specified := True;
end;

function PropertyValue2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure Operation2.SetPath(Index: Integer; const AArrayOfguid: ArrayOfguid);
begin
  FPath := AArrayOfguid;
  FPath_Specified := True;
end;

function Operation2.Path_Specified(Index: Integer): boolean;
begin
  Result := FPath_Specified;
end;

procedure Operation2.SetUserID(Index: Integer; const Aguid: guid);
begin
  FUserID := Aguid;
  FUserID_Specified := True;
end;

function Operation2.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

procedure DeviceOperation2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function DeviceOperation2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure DeviceCallMethodOperation2.SetLogMessageId(Index: Integer; const AInt64: Int64);
begin
  FLogMessageId := AInt64;
  FLogMessageId_Specified := True;
end;

function DeviceCallMethodOperation2.LogMessageId_Specified(Index: Integer): boolean;
begin
  Result := FLogMessageId_Specified;
end;

procedure DeviceCallMethodOperation2.SetMethodArgs(Index: Integer; const AArrayOfstring: ArrayOfstring);
begin
  FMethodArgs := AArrayOfstring;
  FMethodArgs_Specified := True;
end;

function DeviceCallMethodOperation2.MethodArgs_Specified(Index: Integer): boolean;
begin
  Result := FMethodArgs_Specified;
end;

procedure DeviceCallMethodOperation2.SetMethodName(Index: Integer; const Astring: string);
begin
  FMethodName := Astring;
  FMethodName_Specified := True;
end;

function DeviceCallMethodOperation2.MethodName_Specified(Index: Integer): boolean;
begin
  Result := FMethodName_Specified;
end;

procedure LLinkChanged2.SetCUDType(Index: Integer; const ACUDType: CUDType);
begin
  FCUDType := ACUDType;
  FCUDType_Specified := True;
end;

function LLinkChanged2.CUDType_Specified(Index: Integer): boolean;
begin
  Result := FCUDType_Specified;
end;

procedure LLinkChanged2.SetChildId(Index: Integer; const Aguid: guid);
begin
  FChildId := Aguid;
  FChildId_Specified := True;
end;

function LLinkChanged2.ChildId_Specified(Index: Integer): boolean;
begin
  Result := FChildId_Specified;
end;

procedure LLinkChanged2.SetLinkType(Index: Integer; const ALinkType: LinkType);
begin
  FLinkType := ALinkType;
  FLinkType_Specified := True;
end;

function LLinkChanged2.LinkType_Specified(Index: Integer): boolean;
begin
  Result := FLinkType_Specified;
end;

procedure LLinkChanged2.SetParentId(Index: Integer; const Aguid: guid);
begin
  FParentId := Aguid;
  FParentId_Specified := True;
end;

function LLinkChanged2.ParentId_Specified(Index: Integer): boolean;
begin
  Result := FParentId_Specified;
end;

destructor LNetworkChanges2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDriversAdded)-1 do
    System.SysUtils.FreeAndNil(FDriversAdded[I]);
  System.SetLength(FDriversAdded, 0);
  for I := 0 to System.Length(FLinkChanges)-1 do
    System.SysUtils.FreeAndNil(FLinkChanges[I]);
  System.SetLength(FLinkChanges, 0);
  for I := 0 to System.Length(FNetworksAdded)-1 do
    System.SysUtils.FreeAndNil(FNetworksAdded[I]);
  System.SetLength(FNetworksAdded, 0);
  for I := 0 to System.Length(FOperationResults)-1 do
    System.SysUtils.FreeAndNil(FOperationResults[I]);
  System.SetLength(FOperationResults, 0);
  for I := 0 to System.Length(FProperties)-1 do
    System.SysUtils.FreeAndNil(FProperties[I]);
  System.SetLength(FProperties, 0);
  for I := 0 to System.Length(FResourcesRemoved)-1 do
    System.SysUtils.FreeAndNil(FResourcesRemoved[I]);
  System.SetLength(FResourcesRemoved, 0);
  for I := 0 to System.Length(FServersAdded)-1 do
    System.SysUtils.FreeAndNil(FServersAdded[I]);
  System.SetLength(FServersAdded, 0);
  for I := 0 to System.Length(FStates)-1 do
    System.SysUtils.FreeAndNil(FStates[I]);
  System.SetLength(FStates, 0);
  inherited Destroy;
end;

procedure LNetworkChanges2.SetDriversAdded(Index: Integer; const AArrayOfLDriverAdded: ArrayOfLDriverAdded);
begin
  FDriversAdded := AArrayOfLDriverAdded;
  FDriversAdded_Specified := True;
end;

function LNetworkChanges2.DriversAdded_Specified(Index: Integer): boolean;
begin
  Result := FDriversAdded_Specified;
end;

procedure LNetworkChanges2.SetLinkChanges(Index: Integer; const AArrayOfLLinkChanged: ArrayOfLLinkChanged);
begin
  FLinkChanges := AArrayOfLLinkChanged;
  FLinkChanges_Specified := True;
end;

function LNetworkChanges2.LinkChanges_Specified(Index: Integer): boolean;
begin
  Result := FLinkChanges_Specified;
end;

procedure LNetworkChanges2.SetNetworksAdded(Index: Integer; const AArrayOfLNetworkAdded: ArrayOfLNetworkAdded);
begin
  FNetworksAdded := AArrayOfLNetworkAdded;
  FNetworksAdded_Specified := True;
end;

function LNetworkChanges2.NetworksAdded_Specified(Index: Integer): boolean;
begin
  Result := FNetworksAdded_Specified;
end;

procedure LNetworkChanges2.SetOperationResults(Index: Integer; const AArrayOfLOperationResult: ArrayOfLOperationResult);
begin
  FOperationResults := AArrayOfLOperationResult;
  FOperationResults_Specified := True;
end;

function LNetworkChanges2.OperationResults_Specified(Index: Integer): boolean;
begin
  Result := FOperationResults_Specified;
end;

procedure LNetworkChanges2.SetProperties(Index: Integer; const AArrayOfLResourceProperty: ArrayOfLResourceProperty);
begin
  FProperties := AArrayOfLResourceProperty;
  FProperties_Specified := True;
end;

function LNetworkChanges2.Properties_Specified(Index: Integer): boolean;
begin
  Result := FProperties_Specified;
end;

procedure LNetworkChanges2.SetResourcesRemoved(Index: Integer; const AArrayOfLResourceInfo: ArrayOfLResourceInfo);
begin
  FResourcesRemoved := AArrayOfLResourceInfo;
  FResourcesRemoved_Specified := True;
end;

function LNetworkChanges2.ResourcesRemoved_Specified(Index: Integer): boolean;
begin
  Result := FResourcesRemoved_Specified;
end;

procedure LNetworkChanges2.SetServersAdded(Index: Integer; const AArrayOfLServerAdded: ArrayOfLServerAdded);
begin
  FServersAdded := AArrayOfLServerAdded;
  FServersAdded_Specified := True;
end;

function LNetworkChanges2.ServersAdded_Specified(Index: Integer): boolean;
begin
  Result := FServersAdded_Specified;
end;

procedure LNetworkChanges2.SetStates(Index: Integer; const AArrayOfLResourceProperty: ArrayOfLResourceProperty);
begin
  FStates := AArrayOfLResourceProperty;
  FStates_Specified := True;
end;

function LNetworkChanges2.States_Specified(Index: Integer): boolean;
begin
  Result := FStates_Specified;
end;

procedure ISS_DriverEventPlaybackSaveData2.SetISS_Cam_ID(Index: Integer; const Aguid: guid);
begin
  FISS_Cam_ID := Aguid;
  FISS_Cam_ID_Specified := True;
end;

function ISS_DriverEventPlaybackSaveData2.ISS_Cam_ID_Specified(Index: Integer): boolean;
begin
  Result := FISS_Cam_ID_Specified;
end;

procedure ISS_DriverEventPlaybackSaveData2.SetISS_DRIVER_ID(Index: Integer; const AInteger: Integer);
begin
  FISS_DRIVER_ID := AInteger;
  FISS_DRIVER_ID_Specified := True;
end;

function ISS_DriverEventPlaybackSaveData2.ISS_DRIVER_ID_Specified(Index: Integer): boolean;
begin
  Result := FISS_DRIVER_ID_Specified;
end;

procedure ISS_DriverEventPlaybackSaveData2.SetISS_EVENT_VIEWER_ID(Index: Integer; const Aguid: guid);
begin
  FISS_EVENT_VIEWER_ID := Aguid;
  FISS_EVENT_VIEWER_ID_Specified := True;
end;

function ISS_DriverEventPlaybackSaveData2.ISS_EVENT_VIEWER_ID_Specified(Index: Integer): boolean;
begin
  Result := FISS_EVENT_VIEWER_ID_Specified;
end;

procedure ISS_Driver_SaveData2.SetDriverID(Index: Integer; const Aguid: guid);
begin
  FDriverID := Aguid;
  FDriverID_Specified := True;
end;

function ISS_Driver_SaveData2.DriverID_Specified(Index: Integer): boolean;
begin
  Result := FDriverID_Specified;
end;

procedure ISS_Driver_SaveData2.SetISS_RusGuardIntegrationPoint_ID(Index: Integer; const Aguid: guid);
begin
  FISS_RusGuardIntegrationPoint_ID := Aguid;
  FISS_RusGuardIntegrationPoint_ID_Specified := True;
end;

function ISS_Driver_SaveData2.ISS_RusGuardIntegrationPoint_ID_Specified(Index: Integer): boolean;
begin
  Result := FISS_RusGuardIntegrationPoint_ID_Specified;
end;

procedure ISS_Recognition_SaveData2.SetAddress(Index: Integer; const Astring: string);
begin
  FAddress := Astring;
  FAddress_Specified := True;
end;

function ISS_Recognition_SaveData2.Address_Specified(Index: Integer): boolean;
begin
  Result := FAddress_Specified;
end;

procedure ISS_Recognition_SaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function ISS_Recognition_SaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure ISS_Recognition_SaveData2.SetPort(Index: Integer; const AInteger: Integer);
begin
  FPort := AInteger;
  FPort_Specified := True;
end;

function ISS_Recognition_SaveData2.Port_Specified(Index: Integer): boolean;
begin
  Result := FPort_Specified;
end;

procedure ISS_Recognition_SaveData2.SetResolvedUnrecognizedSymbols(Index: Integer; const AInteger: Integer);
begin
  FResolvedUnrecognizedSymbols := AInteger;
  FResolvedUnrecognizedSymbols_Specified := True;
end;

function ISS_Recognition_SaveData2.ResolvedUnrecognizedSymbols_Specified(Index: Integer): boolean;
begin
  Result := FResolvedUnrecognizedSymbols_Specified;
end;

procedure ISS_Recognition_SaveData2.SetSimilarity(Index: Integer; const AInteger: Integer);
begin
  FSimilarity := AInteger;
  FSimilarity_Specified := True;
end;

function ISS_Recognition_SaveData2.Similarity_Specified(Index: Integer): boolean;
begin
  Result := FSimilarity_Specified;
end;

procedure ISS_Driver_SlimInfo2.SetAccessPointType(Index: Integer; const AAcsAccessPointType: AcsAccessPointType);
begin
  FAccessPointType := AAcsAccessPointType;
  FAccessPointType_Specified := True;
end;

function ISS_Driver_SlimInfo2.AccessPointType_Specified(Index: Integer): boolean;
begin
  Result := FAccessPointType_Specified;
end;

procedure ISS_Driver_SlimInfo2.SetISS_DriverID(Index: Integer; const AInteger: Integer);
begin
  FISS_DriverID := AInteger;
  FISS_DriverID_Specified := True;
end;

function ISS_Driver_SlimInfo2.ISS_DriverID_Specified(Index: Integer): boolean;
begin
  Result := FISS_DriverID_Specified;
end;

procedure ISS_Driver_SlimInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function ISS_Driver_SlimInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure ISS_Recognition_SlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function ISS_Recognition_SlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure VisitorsScoreboardWorkplaceModuleSaveData2.SetBackgroundColor(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FBackgroundColor := ATArray;
  FBackgroundColor_Specified := True;
end;

function VisitorsScoreboardWorkplaceModuleSaveData2.BackgroundColor_Specified(Index: Integer): boolean;
begin
  Result := FBackgroundColor_Specified;
end;

procedure VisitorsScoreboardWorkplaceModuleSaveData2.SetCaption(Index: Integer; const Astring: string);
begin
  FCaption := Astring;
  FCaption_Specified := True;
end;

function VisitorsScoreboardWorkplaceModuleSaveData2.Caption_Specified(Index: Integer): boolean;
begin
  Result := FCaption_Specified;
end;

procedure VisitorsScoreboardWorkplaceModuleSaveData2.SetCaptionColor(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FCaptionColor := ATArray;
  FCaptionColor_Specified := True;
end;

function VisitorsScoreboardWorkplaceModuleSaveData2.CaptionColor_Specified(Index: Integer): boolean;
begin
  Result := FCaptionColor_Specified;
end;

procedure VisitorsScoreboardWorkplaceModuleSaveData2.SetEmployeesCountColor(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FEmployeesCountColor := ATArray;
  FEmployeesCountColor_Specified := True;
end;

function VisitorsScoreboardWorkplaceModuleSaveData2.EmployeesCountColor_Specified(Index: Integer): boolean;
begin
  Result := FEmployeesCountColor_Specified;
end;

procedure VisitorsScoreboardWorkplaceModuleSaveData2.SetEmployeesCountLabelColor(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FEmployeesCountLabelColor := ATArray;
  FEmployeesCountLabelColor_Specified := True;
end;

function VisitorsScoreboardWorkplaceModuleSaveData2.EmployeesCountLabelColor_Specified(Index: Integer): boolean;
begin
  Result := FEmployeesCountLabelColor_Specified;
end;

procedure VisitorsScoreboardWorkplaceModuleSaveData2.SetGuestsCountColor(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FGuestsCountColor := ATArray;
  FGuestsCountColor_Specified := True;
end;

function VisitorsScoreboardWorkplaceModuleSaveData2.GuestsCountColor_Specified(Index: Integer): boolean;
begin
  Result := FGuestsCountColor_Specified;
end;

procedure VisitorsScoreboardWorkplaceModuleSaveData2.SetGuestsCountLabelColor(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FGuestsCountLabelColor := ATArray;
  FGuestsCountLabelColor_Specified := True;
end;

function VisitorsScoreboardWorkplaceModuleSaveData2.GuestsCountLabelColor_Specified(Index: Integer): boolean;
begin
  Result := FGuestsCountLabelColor_Specified;
end;

procedure VisitorsScoreboardWorkplaceModuleSaveData2.SetTotalVisitorsColor(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FTotalVisitorsColor := ATArray;
  FTotalVisitorsColor_Specified := True;
end;

function VisitorsScoreboardWorkplaceModuleSaveData2.TotalVisitorsColor_Specified(Index: Integer): boolean;
begin
  Result := FTotalVisitorsColor_Specified;
end;

procedure VisitorsScoreboardWorkplaceModuleSaveData2.SetTotalVisitorsLabelColor(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FTotalVisitorsLabelColor := ATArray;
  FTotalVisitorsLabelColor_Specified := True;
end;

function VisitorsScoreboardWorkplaceModuleSaveData2.TotalVisitorsLabelColor_Specified(Index: Integer): boolean;
begin
  Result := FTotalVisitorsLabelColor_Specified;
end;

procedure VisitorsScoreboardWorkplaceModuleSaveData2.SetWorkZoneID(Index: Integer; const Aguid: guid);
begin
  FWorkZoneID := Aguid;
  FWorkZoneID_Specified := True;
end;

function VisitorsScoreboardWorkplaceModuleSaveData2.WorkZoneID_Specified(Index: Integer): boolean;
begin
  Result := FWorkZoneID_Specified;
end;

procedure VisitorsScoreboardWorkplaceModuleInfo2.SetWorkZoneName(Index: Integer; const Astring: string);
begin
  FWorkZoneName := Astring;
  FWorkZoneName_Specified := True;
end;

function VisitorsScoreboardWorkplaceModuleInfo2.WorkZoneName_Specified(Index: Integer): boolean;
begin
  Result := FWorkZoneName_Specified;
end;

procedure WorkZoneVisitorsCountDTO2.SetEmployeesCount(Index: Integer; const AInteger: Integer);
begin
  FEmployeesCount := AInteger;
  FEmployeesCount_Specified := True;
end;

function WorkZoneVisitorsCountDTO2.EmployeesCount_Specified(Index: Integer): boolean;
begin
  Result := FEmployeesCount_Specified;
end;

procedure WorkZoneVisitorsCountDTO2.SetGuestsCount(Index: Integer; const AInteger: Integer);
begin
  FGuestsCount := AInteger;
  FGuestsCount_Specified := True;
end;

function WorkZoneVisitorsCountDTO2.GuestsCount_Specified(Index: Integer): boolean;
begin
  Result := FGuestsCount_Specified;
end;

procedure WorkZoneVisitorsCountDTO2.SetTotal(Index: Integer; const AInteger: Integer);
begin
  FTotal := AInteger;
  FTotal_Specified := True;
end;

function WorkZoneVisitorsCountDTO2.Total_Specified(Index: Integer): boolean;
begin
  Result := FTotal_Specified;
end;

procedure MifareProfileSaveData2.SetAuthenticationMode(Index: Integer; const ASectorAuthentication: SectorAuthentication);
begin
  FAuthenticationMode := ASectorAuthentication;
  FAuthenticationMode_Specified := True;
end;

function MifareProfileSaveData2.AuthenticationMode_Specified(Index: Integer): boolean;
begin
  Result := FAuthenticationMode_Specified;
end;

procedure MifareProfileSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function MifareProfileSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure MifareProfileSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function MifareProfileSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure MifareProfileSaveData2.SetProfileType(Index: Integer; const AProfileType: ProfileType);
begin
  FProfileType := AProfileType;
  FProfileType_Specified := True;
end;

function MifareProfileSaveData2.ProfileType_Specified(Index: Integer): boolean;
begin
  Result := FProfileType_Specified;
end;

procedure MifareProfileSaveData2.SetSectorNumber(Index: Integer; const AInteger: Integer);
begin
  FSectorNumber := AInteger;
  FSectorNumber_Specified := True;
end;

function MifareProfileSaveData2.SectorNumber_Specified(Index: Integer): boolean;
begin
  Result := FSectorNumber_Specified;
end;

destructor MifareProfileFullSaveData2.Destroy;
begin
  System.SysUtils.FreeAndNil(FBlock1);
  System.SysUtils.FreeAndNil(FBlock2);
  System.SysUtils.FreeAndNil(FBlock3);
  System.SysUtils.FreeAndNil(FKeyBlock);
  inherited Destroy;
end;

procedure MifareProfileFullSaveData2.SetBlock1(Index: Integer; const AAccessBits2: AccessBits2);
begin
  FBlock1 := AAccessBits2;
  FBlock1_Specified := True;
end;

function MifareProfileFullSaveData2.Block1_Specified(Index: Integer): boolean;
begin
  Result := FBlock1_Specified;
end;

procedure MifareProfileFullSaveData2.SetBlock1DataType(Index: Integer; const ABlockData: BlockData);
begin
  FBlock1DataType := ABlockData;
  FBlock1DataType_Specified := True;
end;

function MifareProfileFullSaveData2.Block1DataType_Specified(Index: Integer): boolean;
begin
  Result := FBlock1DataType_Specified;
end;

procedure MifareProfileFullSaveData2.SetBlock2(Index: Integer; const AAccessBits2: AccessBits2);
begin
  FBlock2 := AAccessBits2;
  FBlock2_Specified := True;
end;

function MifareProfileFullSaveData2.Block2_Specified(Index: Integer): boolean;
begin
  Result := FBlock2_Specified;
end;

procedure MifareProfileFullSaveData2.SetBlock2DataType(Index: Integer; const ABlockData: BlockData);
begin
  FBlock2DataType := ABlockData;
  FBlock2DataType_Specified := True;
end;

function MifareProfileFullSaveData2.Block2DataType_Specified(Index: Integer): boolean;
begin
  Result := FBlock2DataType_Specified;
end;

procedure MifareProfileFullSaveData2.SetBlock3(Index: Integer; const AAccessBits2: AccessBits2);
begin
  FBlock3 := AAccessBits2;
  FBlock3_Specified := True;
end;

function MifareProfileFullSaveData2.Block3_Specified(Index: Integer): boolean;
begin
  Result := FBlock3_Specified;
end;

procedure MifareProfileFullSaveData2.SetBlock3DataType(Index: Integer; const ABlockData: BlockData);
begin
  FBlock3DataType := ABlockData;
  FBlock3DataType_Specified := True;
end;

function MifareProfileFullSaveData2.Block3DataType_Specified(Index: Integer): boolean;
begin
  Result := FBlock3DataType_Specified;
end;

procedure MifareProfileFullSaveData2.SetCardConfigurationKey(Index: Integer; const Astring: string);
begin
  FCardConfigurationKey := Astring;
  FCardConfigurationKey_Specified := True;
end;

function MifareProfileFullSaveData2.CardConfigurationKey_Specified(Index: Integer): boolean;
begin
  Result := FCardConfigurationKey_Specified;
end;

procedure MifareProfileFullSaveData2.SetCardMasterKey(Index: Integer; const Astring: string);
begin
  FCardMasterKey := Astring;
  FCardMasterKey_Specified := True;
end;

function MifareProfileFullSaveData2.CardMasterKey_Specified(Index: Integer): boolean;
begin
  Result := FCardMasterKey_Specified;
end;

procedure MifareProfileFullSaveData2.SetClassicEmissionMode(Index: Integer; const ABoolean: Boolean);
begin
  FClassicEmissionMode := ABoolean;
  FClassicEmissionMode_Specified := True;
end;

function MifareProfileFullSaveData2.ClassicEmissionMode_Specified(Index: Integer): boolean;
begin
  Result := FClassicEmissionMode_Specified;
end;

procedure MifareProfileFullSaveData2.SetClassicEmissionTypeKey(Index: Integer; const ABoolean: Boolean);
begin
  FClassicEmissionTypeKey := ABoolean;
  FClassicEmissionTypeKey_Specified := True;
end;

function MifareProfileFullSaveData2.ClassicEmissionTypeKey_Specified(Index: Integer): boolean;
begin
  Result := FClassicEmissionTypeKey_Specified;
end;

procedure MifareProfileFullSaveData2.SetClassicKeyA(Index: Integer; const Astring: string);
begin
  FClassicKeyA := Astring;
  FClassicKeyA_Specified := True;
end;

function MifareProfileFullSaveData2.ClassicKeyA_Specified(Index: Integer): boolean;
begin
  Result := FClassicKeyA_Specified;
end;

procedure MifareProfileFullSaveData2.SetClassicKeyB(Index: Integer; const Astring: string);
begin
  FClassicKeyB := Astring;
  FClassicKeyB_Specified := True;
end;

function MifareProfileFullSaveData2.ClassicKeyB_Specified(Index: Integer): boolean;
begin
  Result := FClassicKeyB_Specified;
end;

procedure MifareProfileFullSaveData2.SetClassikControllerTypeKey(Index: Integer; const ABoolean: Boolean);
begin
  FClassikControllerTypeKey := ABoolean;
  FClassikControllerTypeKey_Specified := True;
end;

function MifareProfileFullSaveData2.ClassikControllerTypeKey_Specified(Index: Integer): boolean;
begin
  Result := FClassikControllerTypeKey_Specified;
end;

procedure MifareProfileFullSaveData2.SetIsUsePlusKeyA(Index: Integer; const ABoolean: Boolean);
begin
  FIsUsePlusKeyA := ABoolean;
  FIsUsePlusKeyA_Specified := True;
end;

function MifareProfileFullSaveData2.IsUsePlusKeyA_Specified(Index: Integer): boolean;
begin
  Result := FIsUsePlusKeyA_Specified;
end;

procedure MifareProfileFullSaveData2.SetKeyBlock(Index: Integer; const AAccessBits2: AccessBits2);
begin
  FKeyBlock := AAccessBits2;
  FKeyBlock_Specified := True;
end;

function MifareProfileFullSaveData2.KeyBlock_Specified(Index: Integer): boolean;
begin
  Result := FKeyBlock_Specified;
end;

procedure MifareProfileFullSaveData2.SetLevel2SwitchKey(Index: Integer; const Astring: string);
begin
  FLevel2SwitchKey := Astring;
  FLevel2SwitchKey_Specified := True;
end;

function MifareProfileFullSaveData2.Level2SwitchKey_Specified(Index: Integer): boolean;
begin
  Result := FLevel2SwitchKey_Specified;
end;

procedure MifareProfileFullSaveData2.SetLevel3SwitchKey(Index: Integer; const Astring: string);
begin
  FLevel3SwitchKey := Astring;
  FLevel3SwitchKey_Specified := True;
end;

function MifareProfileFullSaveData2.Level3SwitchKey_Specified(Index: Integer): boolean;
begin
  Result := FLevel3SwitchKey_Specified;
end;

procedure MifareProfileFullSaveData2.SetPlusControllerTypeKey(Index: Integer; const ABoolean: Boolean);
begin
  FPlusControllerTypeKey := ABoolean;
  FPlusControllerTypeKey_Specified := True;
end;

function MifareProfileFullSaveData2.PlusControllerTypeKey_Specified(Index: Integer): boolean;
begin
  Result := FPlusControllerTypeKey_Specified;
end;

procedure MifareProfileFullSaveData2.SetPlusEmissionMode(Index: Integer; const ABoolean: Boolean);
begin
  FPlusEmissionMode := ABoolean;
  FPlusEmissionMode_Specified := True;
end;

function MifareProfileFullSaveData2.PlusEmissionMode_Specified(Index: Integer): boolean;
begin
  Result := FPlusEmissionMode_Specified;
end;

procedure MifareProfileFullSaveData2.SetPlusEmissionProtectionLevel(Index: Integer; const AEmissionProtectionLevel: EmissionProtectionLevel);
begin
  FPlusEmissionProtectionLevel := AEmissionProtectionLevel;
  FPlusEmissionProtectionLevel_Specified := True;
end;

function MifareProfileFullSaveData2.PlusEmissionProtectionLevel_Specified(Index: Integer): boolean;
begin
  Result := FPlusEmissionProtectionLevel_Specified;
end;

procedure MifareProfileFullSaveData2.SetPlusEmissionTypeKey(Index: Integer; const ABoolean: Boolean);
begin
  FPlusEmissionTypeKey := ABoolean;
  FPlusEmissionTypeKey_Specified := True;
end;

function MifareProfileFullSaveData2.PlusEmissionTypeKey_Specified(Index: Integer): boolean;
begin
  Result := FPlusEmissionTypeKey_Specified;
end;

procedure MifareProfileFullSaveData2.SetPlusKeyA(Index: Integer; const Astring: string);
begin
  FPlusKeyA := Astring;
  FPlusKeyA_Specified := True;
end;

function MifareProfileFullSaveData2.PlusKeyA_Specified(Index: Integer): boolean;
begin
  Result := FPlusKeyA_Specified;
end;

procedure MifareProfileFullSaveData2.SetPlusKeyB(Index: Integer; const Astring: string);
begin
  FPlusKeyB := Astring;
  FPlusKeyB_Specified := True;
end;

function MifareProfileFullSaveData2.PlusKeyB_Specified(Index: Integer): boolean;
begin
  Result := FPlusKeyB_Specified;
end;

procedure MifareProfileFullSaveData2.SetSl1CardAuthenticationKey(Index: Integer; const Astring: string);
begin
  FSl1CardAuthenticationKey := Astring;
  FSl1CardAuthenticationKey_Specified := True;
end;

function MifareProfileFullSaveData2.Sl1CardAuthenticationKey_Specified(Index: Integer): boolean;
begin
  Result := FSl1CardAuthenticationKey_Specified;
end;

procedure MifareProfileFullInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function MifareProfileFullInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure UidKeyInfo2.SetICCID(Index: Integer; const Astring: string);
begin
  FICCID := Astring;
  FICCID_Specified := True;
end;

function UidKeyInfo2.ICCID_Specified(Index: Integer): boolean;
begin
  Result := FICCID_Specified;
end;

procedure UidKeyInfo2.SetKey(Index: Integer; const Astring: string);
begin
  FKey := Astring;
  FKey_Specified := True;
end;

function UidKeyInfo2.Key_Specified(Index: Integer): boolean;
begin
  Result := FKey_Specified;
end;

procedure UidKeyInfo2.SetUid(Index: Integer; const Astring: string);
begin
  FUid := Astring;
  FUid_Specified := True;
end;

function UidKeyInfo2.Uid_Specified(Index: Integer): boolean;
begin
  Result := FUid_Specified;
end;

procedure MifareProfileInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function MifareProfileInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure DriverFigureSaveData2.SetDriverId(Index: Integer; const Aguid: guid);
begin
  FDriverId := Aguid;
  FDriverId_Specified := True;
end;

function DriverFigureSaveData2.DriverId_Specified(Index: Integer): boolean;
begin
  Result := FDriverId_Specified;
end;

procedure DriverFigureSaveData2.SetShowDriverName(Index: Integer; const ABoolean: Boolean);
begin
  FShowDriverName := ABoolean;
  FShowDriverName_Specified := True;
end;

function DriverFigureSaveData2.ShowDriverName_Specified(Index: Integer): boolean;
begin
  Result := FShowDriverName_Specified;
end;

procedure DriverFigureSaveData2.SetX(Index: Integer; const ADouble: Double);
begin
  FX := ADouble;
  FX_Specified := True;
end;

function DriverFigureSaveData2.X_Specified(Index: Integer): boolean;
begin
  Result := FX_Specified;
end;

procedure DriverFigureSaveData2.SetY(Index: Integer; const ADouble: Double);
begin
  FY := ADouble;
  FY_Specified := True;
end;

function DriverFigureSaveData2.Y_Specified(Index: Integer): boolean;
begin
  Result := FY_Specified;
end;

procedure DriverFigureSaveData2.SetZ(Index: Integer; const AInteger: Integer);
begin
  FZ := AInteger;
  FZ_Specified := True;
end;

function DriverFigureSaveData2.Z_Specified(Index: Integer): boolean;
begin
  Result := FZ_Specified;
end;

procedure MapSaveData2.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function MapSaveData2.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

procedure MapSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function MapSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure MapSaveData2.SetTextWrappingLength(Index: Integer; const AInteger: Integer);
begin
  FTextWrappingLength := AInteger;
  FTextWrappingLength_Specified := True;
end;

function MapSaveData2.TextWrappingLength_Specified(Index: Integer): boolean;
begin
  Result := FTextWrappingLength_Specified;
end;

destructor MapInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDriverFigures)-1 do
    System.SysUtils.FreeAndNil(FDriverFigures[I]);
  System.SetLength(FDriverFigures, 0);
  for I := 0 to System.Length(FMaps)-1 do
    System.SysUtils.FreeAndNil(FMaps[I]);
  System.SetLength(FMaps, 0);
  inherited Destroy;
end;

procedure MapInfo2.SetDriverFigures(Index: Integer; const AArrayOfDriverFigureInfo: ArrayOfDriverFigureInfo);
begin
  FDriverFigures := AArrayOfDriverFigureInfo;
  FDriverFigures_Specified := True;
end;

function MapInfo2.DriverFigures_Specified(Index: Integer): boolean;
begin
  Result := FDriverFigures_Specified;
end;

procedure MapInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function MapInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure MapInfo2.SetMaps(Index: Integer; const AArrayOfMapInfo: ArrayOfMapInfo);
begin
  FMaps := AArrayOfMapInfo;
  FMaps_Specified := True;
end;

function MapInfo2.Maps_Specified(Index: Integer): boolean;
begin
  Result := FMaps_Specified;
end;

procedure MapInfo2.SetParentId(Index: Integer; const Aguid: guid);
begin
  FParentId := Aguid;
  FParentId_Specified := True;
end;

function MapInfo2.ParentId_Specified(Index: Integer): boolean;
begin
  Result := FParentId_Specified;
end;

procedure DriverFigureInfo2.SetDriverAssemblyQualifiedName(Index: Integer; const Astring: string);
begin
  FDriverAssemblyQualifiedName := Astring;
  FDriverAssemblyQualifiedName_Specified := True;
end;

function DriverFigureInfo2.DriverAssemblyQualifiedName_Specified(Index: Integer): boolean;
begin
  Result := FDriverAssemblyQualifiedName_Specified;
end;

procedure DriverFigureInfo2.SetDriverName(Index: Integer; const Astring: string);
begin
  FDriverName := Astring;
  FDriverName_Specified := True;
end;

function DriverFigureInfo2.DriverName_Specified(Index: Integer): boolean;
begin
  Result := FDriverName_Specified;
end;

procedure DriverFigureInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function DriverFigureInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

destructor GetControllerConfigurationsResult_Config2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FConfiguration)-1 do
    System.SysUtils.FreeAndNil(FConfiguration[I]);
  System.SetLength(FConfiguration, 0);
  System.SysUtils.FreeAndNil(FNetConfig);
  inherited Destroy;
end;

procedure GetControllerConfigurationsResult_Config2.SetConfiguration(Index: Integer; const AArrayOfLDriverFullInfo: ArrayOfLDriverFullInfo);
begin
  FConfiguration := AArrayOfLDriverFullInfo;
  FConfiguration_Specified := True;
end;

function GetControllerConfigurationsResult_Config2.Configuration_Specified(Index: Integer): boolean;
begin
  Result := FConfiguration_Specified;
end;

procedure GetControllerConfigurationsResult_Config2.SetNetConfig(Index: Integer; const ACanDeviceNetConfig2: CanDeviceNetConfig2);
begin
  FNetConfig := ACanDeviceNetConfig2;
  FNetConfig_Specified := True;
end;

function GetControllerConfigurationsResult_Config2.NetConfig_Specified(Index: Integer): boolean;
begin
  Result := FNetConfig_Specified;
end;

destructor GetControllerConfigurationsResult_FailedConfig2.Destroy;
begin
  System.SysUtils.FreeAndNil(FNetConfig);
  inherited Destroy;
end;

procedure GetControllerConfigurationsResult_FailedConfig2.SetError(Index: Integer; const Astring: string);
begin
  FError := Astring;
  FError_Specified := True;
end;

function GetControllerConfigurationsResult_FailedConfig2.Error_Specified(Index: Integer): boolean;
begin
  Result := FError_Specified;
end;

procedure GetControllerConfigurationsResult_FailedConfig2.SetNetConfig(Index: Integer; const ACanDeviceNetConfig2: CanDeviceNetConfig2);
begin
  FNetConfig := ACanDeviceNetConfig2;
  FNetConfig_Specified := True;
end;

function GetControllerConfigurationsResult_FailedConfig2.NetConfig_Specified(Index: Integer): boolean;
begin
  Result := FNetConfig_Specified;
end;

destructor CanDeviceInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FNetConfig);
  inherited Destroy;
end;

procedure CanDeviceInfo2.SetError(Index: Integer; const Astring: string);
begin
  FError := Astring;
  FError_Specified := True;
end;

function CanDeviceInfo2.Error_Specified(Index: Integer): boolean;
begin
  Result := FError_Specified;
end;

procedure CanDeviceInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function CanDeviceInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure CanDeviceInfo2.SetNetConfig(Index: Integer; const ACanDeviceNetConfig2: CanDeviceNetConfig2);
begin
  FNetConfig := ACanDeviceNetConfig2;
  FNetConfig_Specified := True;
end;

function CanDeviceInfo2.NetConfig_Specified(Index: Integer): boolean;
begin
  Result := FNetConfig_Specified;
end;

destructor CanDeviceNetConfig2.Destroy;
begin
  System.SysUtils.FreeAndNil(FConverterAddress);
  System.SysUtils.FreeAndNil(FDriverFullInfo);
  inherited Destroy;
end;

procedure CanDeviceNetConfig2.SetBusAddress(Index: Integer; const AByte: Byte);
begin
  FBusAddress := AByte;
  FBusAddress_Specified := True;
end;

function CanDeviceNetConfig2.BusAddress_Specified(Index: Integer): boolean;
begin
  Result := FBusAddress_Specified;
end;

procedure CanDeviceNetConfig2.SetConverterAddress(Index: Integer; const ACanConverterAddress2: CanConverterAddress2);
begin
  FConverterAddress := ACanConverterAddress2;
  FConverterAddress_Specified := True;
end;

function CanDeviceNetConfig2.ConverterAddress_Specified(Index: Integer): boolean;
begin
  Result := FConverterAddress_Specified;
end;

procedure CanDeviceNetConfig2.SetDriverFullInfo(Index: Integer; const ALDriverFullInfo2: LDriverFullInfo2);
begin
  FDriverFullInfo := ALDriverFullInfo2;
  FDriverFullInfo_Specified := True;
end;

function CanDeviceNetConfig2.DriverFullInfo_Specified(Index: Integer): boolean;
begin
  Result := FDriverFullInfo_Specified;
end;

procedure CanDeviceNetConfig2.SetHardwareType(Index: Integer; const Astring: string);
begin
  FHardwareType := Astring;
  FHardwareType_Specified := True;
end;

function CanDeviceNetConfig2.HardwareType_Specified(Index: Integer): boolean;
begin
  Result := FHardwareType_Specified;
end;

procedure CanDeviceNetConfig2.SetIsEncrypted(Index: Integer; const ABoolean: Boolean);
begin
  FIsEncrypted := ABoolean;
  FIsEncrypted_Specified := True;
end;

function CanDeviceNetConfig2.IsEncrypted_Specified(Index: Integer): boolean;
begin
  Result := FIsEncrypted_Specified;
end;

procedure CanDeviceNetConfig2.SetMajorVersion(Index: Integer; const AByte: Byte);
begin
  FMajorVersion := AByte;
  FMajorVersion_Specified := True;
end;

function CanDeviceNetConfig2.MajorVersion_Specified(Index: Integer): boolean;
begin
  Result := FMajorVersion_Specified;
end;

procedure CanDeviceNetConfig2.SetMinorVersion(Index: Integer; const AByte: Byte);
begin
  FMinorVersion := AByte;
  FMinorVersion_Specified := True;
end;

function CanDeviceNetConfig2.MinorVersion_Specified(Index: Integer): boolean;
begin
  Result := FMinorVersion_Specified;
end;

procedure CanDeviceNetConfig2.SetRawHardwareType(Index: Integer; const AByte: Byte);
begin
  FRawHardwareType := AByte;
  FRawHardwareType_Specified := True;
end;

function CanDeviceNetConfig2.RawHardwareType_Specified(Index: Integer): boolean;
begin
  Result := FRawHardwareType_Specified;
end;

procedure CanDeviceNetConfig2.SetSID(Index: Integer; const ACardinal: Cardinal);
begin
  FSID := ACardinal;
  FSID_Specified := True;
end;

function CanDeviceNetConfig2.SID_Specified(Index: Integer): boolean;
begin
  Result := FSID_Specified;
end;

destructor LanCanConverter2.Destroy;
begin
  System.SysUtils.FreeAndNil(FAddress);
  System.SysUtils.FreeAndNil(FGateway);
  System.SysUtils.FreeAndNil(FMask);
  inherited Destroy;
end;

procedure LanCanConverter2.SetAddress(Index: Integer; const ACanConverterAddress2: CanConverterAddress2);
begin
  FAddress := ACanConverterAddress2;
  FAddress_Specified := True;
end;

function LanCanConverter2.Address_Specified(Index: Integer): boolean;
begin
  Result := FAddress_Specified;
end;

procedure LanCanConverter2.SetControllerMac(Index: Integer; const AInt64: Int64);
begin
  FControllerMac := AInt64;
  FControllerMac_Specified := True;
end;

function LanCanConverter2.ControllerMac_Specified(Index: Integer): boolean;
begin
  Result := FControllerMac_Specified;
end;

procedure LanCanConverter2.SetControllerPort(Index: Integer; const AWord: Word);
begin
  FControllerPort := AWord;
  FControllerPort_Specified := True;
end;

function LanCanConverter2.ControllerPort_Specified(Index: Integer): boolean;
begin
  Result := FControllerPort_Specified;
end;

procedure LanCanConverter2.SetEncryption(Index: Integer; const ABoolean: Boolean);
begin
  FEncryption := ABoolean;
  FEncryption_Specified := True;
end;

function LanCanConverter2.Encryption_Specified(Index: Integer): boolean;
begin
  Result := FEncryption_Specified;
end;

procedure LanCanConverter2.SetFirmwareMajorVersion(Index: Integer; const AByte: Byte);
begin
  FFirmwareMajorVersion := AByte;
  FFirmwareMajorVersion_Specified := True;
end;

function LanCanConverter2.FirmwareMajorVersion_Specified(Index: Integer): boolean;
begin
  Result := FFirmwareMajorVersion_Specified;
end;

procedure LanCanConverter2.SetFirmwareMinorVersion(Index: Integer; const AByte: Byte);
begin
  FFirmwareMinorVersion := AByte;
  FFirmwareMinorVersion_Specified := True;
end;

function LanCanConverter2.FirmwareMinorVersion_Specified(Index: Integer): boolean;
begin
  Result := FFirmwareMinorVersion_Specified;
end;

procedure LanCanConverter2.SetGateway(Index: Integer; const AIPAddress2: IPAddress2);
begin
  FGateway := AIPAddress2;
  FGateway_Specified := True;
end;

function LanCanConverter2.Gateway_Specified(Index: Integer): boolean;
begin
  Result := FGateway_Specified;
end;

procedure LanCanConverter2.SetHardwareType(Index: Integer; const Astring: string);
begin
  FHardwareType := Astring;
  FHardwareType_Specified := True;
end;

function LanCanConverter2.HardwareType_Specified(Index: Integer): boolean;
begin
  Result := FHardwareType_Specified;
end;

procedure LanCanConverter2.SetMask(Index: Integer; const AIPAddress2: IPAddress2);
begin
  FMask := AIPAddress2;
  FMask_Specified := True;
end;

function LanCanConverter2.Mask_Specified(Index: Integer): boolean;
begin
  Result := FMask_Specified;
end;

destructor FindControllersResult2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FControllers)-1 do
    System.SysUtils.FreeAndNil(FControllers[I]);
  System.SetLength(FControllers, 0);
  for I := 0 to System.Length(FFailedControllers)-1 do
    System.SysUtils.FreeAndNil(FFailedControllers[I]);
  System.SetLength(FFailedControllers, 0);
  for I := 0 to System.Length(FFailedConverters)-1 do
    System.SysUtils.FreeAndNil(FFailedConverters[I]);
  System.SetLength(FFailedConverters, 0);
  inherited Destroy;
end;

procedure FindControllersResult2.SetControllers(Index: Integer; const AArrayOfCanDeviceInfo: ArrayOfCanDeviceInfo);
begin
  FControllers := AArrayOfCanDeviceInfo;
  FControllers_Specified := True;
end;

function FindControllersResult2.Controllers_Specified(Index: Integer): boolean;
begin
  Result := FControllers_Specified;
end;

procedure FindControllersResult2.SetFailedControllers(Index: Integer; const AArrayOfCanDeviceInfo: ArrayOfCanDeviceInfo);
begin
  FFailedControllers := AArrayOfCanDeviceInfo;
  FFailedControllers_Specified := True;
end;

function FindControllersResult2.FailedControllers_Specified(Index: Integer): boolean;
begin
  Result := FFailedControllers_Specified;
end;

procedure FindControllersResult2.SetFailedConverters(Index: Integer; const AArrayOfFindControllersResult_FailedConverterInfo: ArrayOfFindControllersResult_FailedConverterInfo);
begin
  FFailedConverters := AArrayOfFindControllersResult_FailedConverterInfo;
  FFailedConverters_Specified := True;
end;

function FindControllersResult2.FailedConverters_Specified(Index: Integer): boolean;
begin
  Result := FFailedConverters_Specified;
end;

destructor SetDevicesAddressBySidResult_FailedAddress2.Destroy;
begin
  System.SysUtils.FreeAndNil(FNetConfig);
  inherited Destroy;
end;

procedure SetDevicesAddressBySidResult_FailedAddress2.SetError(Index: Integer; const Astring: string);
begin
  FError := Astring;
  FError_Specified := True;
end;

function SetDevicesAddressBySidResult_FailedAddress2.Error_Specified(Index: Integer): boolean;
begin
  Result := FError_Specified;
end;

procedure SetDevicesAddressBySidResult_FailedAddress2.SetNetConfig(Index: Integer; const ACanDeviceNetConfig2: CanDeviceNetConfig2);
begin
  FNetConfig := ACanDeviceNetConfig2;
  FNetConfig_Specified := True;
end;

function SetDevicesAddressBySidResult_FailedAddress2.NetConfig_Specified(Index: Integer): boolean;
begin
  Result := FNetConfig_Specified;
end;

destructor GetControllerConfigurationsResult2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FConfigurations)-1 do
    System.SysUtils.FreeAndNil(FConfigurations[I]);
  System.SetLength(FConfigurations, 0);
  for I := 0 to System.Length(FFailedDevices)-1 do
    System.SysUtils.FreeAndNil(FFailedDevices[I]);
  System.SetLength(FFailedDevices, 0);
  inherited Destroy;
end;

procedure GetControllerConfigurationsResult2.SetConfigurations(Index: Integer; const AArrayOfGetControllerConfigurationsResult_Config: ArrayOfGetControllerConfigurationsResult_Config);
begin
  FConfigurations := AArrayOfGetControllerConfigurationsResult_Config;
  FConfigurations_Specified := True;
end;

function GetControllerConfigurationsResult2.Configurations_Specified(Index: Integer): boolean;
begin
  Result := FConfigurations_Specified;
end;

procedure GetControllerConfigurationsResult2.SetFailedDevices(Index: Integer; const AArrayOfGetControllerConfigurationsResult_FailedConfig: ArrayOfGetControllerConfigurationsResult_FailedConfig);
begin
  FFailedDevices := AArrayOfGetControllerConfigurationsResult_FailedConfig;
  FFailedDevices_Specified := True;
end;

function GetControllerConfigurationsResult2.FailedDevices_Specified(Index: Integer): boolean;
begin
  Result := FFailedDevices_Specified;
end;

destructor FindControllersResult_FailedConverterInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FConverterAddress);
  inherited Destroy;
end;

procedure FindControllersResult_FailedConverterInfo2.SetConverterAddress(Index: Integer; const ACanConverterAddress2: CanConverterAddress2);
begin
  FConverterAddress := ACanConverterAddress2;
  FConverterAddress_Specified := True;
end;

function FindControllersResult_FailedConverterInfo2.ConverterAddress_Specified(Index: Integer): boolean;
begin
  Result := FConverterAddress_Specified;
end;

procedure FindControllersResult_FailedConverterInfo2.SetError(Index: Integer; const Astring: string);
begin
  FError := Astring;
  FError_Specified := True;
end;

function FindControllersResult_FailedConverterInfo2.Error_Specified(Index: Integer): boolean;
begin
  Result := FError_Specified;
end;

destructor SetDevicesAddressBySidResult2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFailedDevices)-1 do
    System.SysUtils.FreeAndNil(FFailedDevices[I]);
  System.SetLength(FFailedDevices, 0);
  inherited Destroy;
end;

procedure SetDevicesAddressBySidResult2.SetFailedDevices(Index: Integer; const AArrayOfSetDevicesAddressBySidResult_FailedAddress: ArrayOfSetDevicesAddressBySidResult_FailedAddress);
begin
  FFailedDevices := AArrayOfSetDevicesAddressBySidResult_FailedAddress;
  FFailedDevices_Specified := True;
end;

function SetDevicesAddressBySidResult2.FailedDevices_Specified(Index: Integer): boolean;
begin
  Result := FFailedDevices_Specified;
end;

destructor LDriversCustomizableDays2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDays)-1 do
    System.SysUtils.FreeAndNil(FDays[I]);
  System.SetLength(FDays, 0);
  inherited Destroy;
end;

procedure LDriversCustomizableDays2.SetDays(Index: Integer; const AArrayOfLCustomizableDayInfo: ArrayOfLCustomizableDayInfo);
begin
  FDays := AArrayOfLCustomizableDayInfo;
  FDays_Specified := True;
end;

function LDriversCustomizableDays2.Days_Specified(Index: Integer): boolean;
begin
  Result := FDays_Specified;
end;

procedure LDriversCustomizableDays2.SetDriverID(Index: Integer; const Aguid: guid);
begin
  FDriverID := Aguid;
  FDriverID_Specified := True;
end;

function LDriversCustomizableDays2.DriverID_Specified(Index: Integer): boolean;
begin
  Result := FDriverID_Specified;
end;

procedure LDriversCustomizableDays2.SetId(Index: Integer; const AInteger: Integer);
begin
  FId := AInteger;
  FId_Specified := True;
end;

function LDriversCustomizableDays2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

destructor LCustomizableDayInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDate);
  System.SysUtils.FreeAndNil(FTransferedDate);
  inherited Destroy;
end;

procedure LCustomizableDayInfo2.SetDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDate := ATXSDateTime;
  FDate_Specified := True;
end;

function LCustomizableDayInfo2.Date_Specified(Index: Integer): boolean;
begin
  Result := FDate_Specified;
end;

procedure LCustomizableDayInfo2.SetDayType(Index: Integer; const ACustomizableDayType: CustomizableDayType);
begin
  FDayType := ACustomizableDayType;
  FDayType_Specified := True;
end;

function LCustomizableDayInfo2.DayType_Specified(Index: Integer): boolean;
begin
  Result := FDayType_Specified;
end;

procedure LCustomizableDayInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function LCustomizableDayInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure LCustomizableDayInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function LCustomizableDayInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure LCustomizableDayInfo2.SetTransferedDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FTransferedDate := ATXSDateTime;
  FTransferedDate_Specified := True;
end;

function LCustomizableDayInfo2.TransferedDate_Specified(Index: Integer): boolean;
begin
  Result := FTransferedDate_Specified;
end;

destructor LChangedKeys2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FKeys)-1 do
    System.SysUtils.FreeAndNil(FKeys[I]);
  System.SetLength(FKeys, 0);
  inherited Destroy;
end;

procedure LChangedKeys2.SetKeys(Index: Integer; const AArrayOfLKeyInfo: ArrayOfLKeyInfo);
begin
  FKeys := AArrayOfLKeyInfo;
  FKeys_Specified := True;
end;

function LChangedKeys2.Keys_Specified(Index: Integer): boolean;
begin
  Result := FKeys_Specified;
end;

procedure CardTypeBiometricPermission2.SetCardTypeID(Index: Integer; const Aguid: guid);
begin
  FCardTypeID := Aguid;
  FCardTypeID_Specified := True;
end;

function CardTypeBiometricPermission2.CardTypeID_Specified(Index: Integer): boolean;
begin
  Result := FCardTypeID_Specified;
end;

procedure CardTypeBiometricPermission2.SetCardTypeName(Index: Integer; const Astring: string);
begin
  FCardTypeName := Astring;
  FCardTypeName_Specified := True;
end;

function CardTypeBiometricPermission2.CardTypeName_Specified(Index: Integer): boolean;
begin
  Result := FCardTypeName_Specified;
end;

procedure DoorRelay2.SetAccess(Index: Integer; const ABoolean: Boolean);
begin
  FAccess := ABoolean;
  FAccess_Specified := True;
end;

function DoorRelay2.Access_Specified(Index: Integer): boolean;
begin
  Result := FAccess_Specified;
end;

procedure DoorRelay2.SetPosition(Index: Integer; const AInteger: Integer);
begin
  FPosition := AInteger;
  FPosition_Specified := True;
end;

function DoorRelay2.Position_Specified(Index: Integer): boolean;
begin
  Result := FPosition_Specified;
end;

destructor LChangedCustomizableDays2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FRows)-1 do
    System.SysUtils.FreeAndNil(FRows[I]);
  System.SetLength(FRows, 0);
  inherited Destroy;
end;

procedure LChangedCustomizableDays2.SetRows(Index: Integer; const AArrayOfLDriversCustomizableDays: ArrayOfLDriversCustomizableDays);
begin
  FRows := AArrayOfLDriversCustomizableDays;
  FRows_Specified := True;
end;

function LChangedCustomizableDays2.Rows_Specified(Index: Integer): boolean;
begin
  Result := FRows_Specified;
end;

destructor DoorRelays2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FRelays)-1 do
    System.SysUtils.FreeAndNil(FRelays[I]);
  System.SetLength(FRelays, 0);
  inherited Destroy;
end;

procedure DoorRelays2.SetRelays(Index: Integer; const AArrayOfDoorRelay: ArrayOfDoorRelay);
begin
  FRelays := AArrayOfDoorRelay;
  FRelays_Specified := True;
end;

function DoorRelays2.Relays_Specified(Index: Integer): boolean;
begin
  Result := FRelays_Specified;
end;

procedure DoorRelays2.SetType_(Index: Integer; const ABoxAccessLevelMode: BoxAccessLevelMode);
begin
  FType_ := ABoxAccessLevelMode;
  FType__Specified := True;
end;

function DoorRelays2.Type__Specified(Index: Integer): boolean;
begin
  Result := FType__Specified;
end;

destructor DriverSettings2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDaySchedule);
  System.SysUtils.FreeAndNil(FDoorRelays);
  System.SysUtils.FreeAndNil(FMultiDaySchedule);
  System.SysUtils.FreeAndNil(FWeekSchedule);
  inherited Destroy;
end;

procedure DriverSettings2.SetAntipassback(Index: Integer; const ABoolean: Boolean);
begin
  FAntipassback := ABoolean;
  FAntipassback_Specified := True;
end;

function DriverSettings2.Antipassback_Specified(Index: Integer): boolean;
begin
  Result := FAntipassback_Specified;
end;

procedure DriverSettings2.SetCardPlusAlcoFrame(Index: Integer; const ABoolean: Boolean);
begin
  FCardPlusAlcoFrame := ABoolean;
  FCardPlusAlcoFrame_Specified := True;
end;

function DriverSettings2.CardPlusAlcoFrame_Specified(Index: Integer): boolean;
begin
  Result := FCardPlusAlcoFrame_Specified;
end;

procedure DriverSettings2.SetCardPlusFace(Index: Integer; const ABoolean: Boolean);
begin
  FCardPlusFace := ABoolean;
  FCardPlusFace_Specified := True;
end;

function DriverSettings2.CardPlusFace_Specified(Index: Integer): boolean;
begin
  Result := FCardPlusFace_Specified;
end;

procedure DriverSettings2.SetCardPlusVehicle(Index: Integer; const ABoolean: Boolean);
begin
  FCardPlusVehicle := ABoolean;
  FCardPlusVehicle_Specified := True;
end;

function DriverSettings2.CardPlusVehicle_Specified(Index: Integer): boolean;
begin
  Result := FCardPlusVehicle_Specified;
end;

procedure DriverSettings2.SetControllerIdentification(Index: Integer; const AControllerIdentificationType: ControllerIdentificationType);
begin
  FControllerIdentification := AControllerIdentificationType;
  FControllerIdentification_Specified := True;
end;

function DriverSettings2.ControllerIdentification_Specified(Index: Integer): boolean;
begin
  Result := FControllerIdentification_Specified;
end;

procedure DriverSettings2.SetDaySchedule(Index: Integer; const AAcsDaySchedule2: AcsDaySchedule2);
begin
  FDaySchedule := AAcsDaySchedule2;
  FDaySchedule_Specified := True;
end;

function DriverSettings2.DaySchedule_Specified(Index: Integer): boolean;
begin
  Result := FDaySchedule_Specified;
end;

procedure DriverSettings2.SetDontCheckExternalResolution(Index: Integer; const ABoolean: Boolean);
begin
  FDontCheckExternalResolution := ABoolean;
  FDontCheckExternalResolution_Specified := True;
end;

function DriverSettings2.DontCheckExternalResolution_Specified(Index: Integer): boolean;
begin
  Result := FDontCheckExternalResolution_Specified;
end;

procedure DriverSettings2.SetDontRequireOpConfirmation(Index: Integer; const ABoolean: Boolean);
begin
  FDontRequireOpConfirmation := ABoolean;
  FDontRequireOpConfirmation_Specified := True;
end;

function DriverSettings2.DontRequireOpConfirmation_Specified(Index: Integer): boolean;
begin
  Result := FDontRequireOpConfirmation_Specified;
end;

procedure DriverSettings2.SetDoorRelays(Index: Integer; const ADoorRelays2: DoorRelays2);
begin
  FDoorRelays := ADoorRelays2;
  FDoorRelays_Specified := True;
end;

function DriverSettings2.DoorRelays_Specified(Index: Integer): boolean;
begin
  Result := FDoorRelays_Specified;
end;

procedure DriverSettings2.SetIsGuardOffModeOn(Index: Integer; const ABoolean: Boolean);
begin
  FIsGuardOffModeOn := ABoolean;
  FIsGuardOffModeOn_Specified := True;
end;

function DriverSettings2.IsGuardOffModeOn_Specified(Index: Integer): boolean;
begin
  Result := FIsGuardOffModeOn_Specified;
end;

procedure DriverSettings2.SetIsGuardOnModeOn(Index: Integer; const ABoolean: Boolean);
begin
  FIsGuardOnModeOn := ABoolean;
  FIsGuardOnModeOn_Specified := True;
end;

function DriverSettings2.IsGuardOnModeOn_Specified(Index: Integer): boolean;
begin
  Result := FIsGuardOnModeOn_Specified;
end;

procedure DriverSettings2.SetIsLockModeOn(Index: Integer; const ABoolean: Boolean);
begin
  FIsLockModeOn := ABoolean;
  FIsLockModeOn_Specified := True;
end;

function DriverSettings2.IsLockModeOn_Specified(Index: Integer): boolean;
begin
  Result := FIsLockModeOn_Specified;
end;

procedure DriverSettings2.SetIsMultiIdentification(Index: Integer; const ABoolean: Boolean);
begin
  FIsMultiIdentification := ABoolean;
  FIsMultiIdentification_Specified := True;
end;

function DriverSettings2.IsMultiIdentification_Specified(Index: Integer): boolean;
begin
  Result := FIsMultiIdentification_Specified;
end;

procedure DriverSettings2.SetIsOpenForALongTimeModeOn(Index: Integer; const ABoolean: Boolean);
begin
  FIsOpenForALongTimeModeOn := ABoolean;
  FIsOpenForALongTimeModeOn_Specified := True;
end;

function DriverSettings2.IsOpenForALongTimeModeOn_Specified(Index: Integer): boolean;
begin
  Result := FIsOpenForALongTimeModeOn_Specified;
end;

procedure DriverSettings2.SetMainIdentification(Index: Integer; const AMainIdentificationType: MainIdentificationType);
begin
  FMainIdentification := AMainIdentificationType;
  FMainIdentification_Specified := True;
end;

function DriverSettings2.MainIdentification_Specified(Index: Integer): boolean;
begin
  Result := FMainIdentification_Specified;
end;

procedure DriverSettings2.SetMultiDaySchedule(Index: Integer; const AAcsMultiDaySchedule2: AcsMultiDaySchedule2);
begin
  FMultiDaySchedule := AAcsMultiDaySchedule2;
  FMultiDaySchedule_Specified := True;
end;

function DriverSettings2.MultiDaySchedule_Specified(Index: Integer): boolean;
begin
  Result := FMultiDaySchedule_Specified;
end;

procedure DriverSettings2.SetOrderedServerIdentification(Index: Integer; const AArrayOfServerIdentificationType: ArrayOfServerIdentificationType);
begin
  FOrderedServerIdentification := AArrayOfServerIdentificationType;
  FOrderedServerIdentification_Specified := True;
end;

function DriverSettings2.OrderedServerIdentification_Specified(Index: Integer): boolean;
begin
  Result := FOrderedServerIdentification_Specified;
end;

procedure DriverSettings2.SetPassageByRuleOfTwoPersonsMode(Index: Integer; const APassageByRuleOfTwoPersonsMode: PassageByRuleOfTwoPersonsMode);
begin
  FPassageByRuleOfTwoPersonsMode := APassageByRuleOfTwoPersonsMode;
  FPassageByRuleOfTwoPersonsMode_Specified := True;
end;

function DriverSettings2.PassageByRuleOfTwoPersonsMode_Specified(Index: Integer): boolean;
begin
  Result := FPassageByRuleOfTwoPersonsMode_Specified;
end;

procedure DriverSettings2.SetScheduleType(Index: Integer; const AAcsScheduleType: AcsScheduleType);
begin
  FScheduleType := AAcsScheduleType;
  FScheduleType_Specified := True;
end;

function DriverSettings2.ScheduleType_Specified(Index: Integer): boolean;
begin
  Result := FScheduleType_Specified;
end;

procedure DriverSettings2.SetUseHolidaysAndTransfers(Index: Integer; const ABoolean: Boolean);
begin
  FUseHolidaysAndTransfers := ABoolean;
  FUseHolidaysAndTransfers_Specified := True;
end;

function DriverSettings2.UseHolidaysAndTransfers_Specified(Index: Integer): boolean;
begin
  Result := FUseHolidaysAndTransfers_Specified;
end;

procedure DriverSettings2.SetWeekSchedule(Index: Integer; const AAcsWeekScheduleFull2: AcsWeekScheduleFull2);
begin
  FWeekSchedule := AAcsWeekScheduleFull2;
  FWeekSchedule_Specified := True;
end;

function DriverSettings2.WeekSchedule_Specified(Index: Integer): boolean;
begin
  Result := FWeekSchedule_Specified;
end;

procedure LStateBase2.SetState(Index: Integer; const AStorageStateEnum: StorageStateEnum);
begin
  FState := AStorageStateEnum;
  FState_Specified := True;
end;

function LStateBase2.State_Specified(Index: Integer): boolean;
begin
  Result := FState_Specified;
end;

destructor LKeyInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDriverSettings);
  System.SysUtils.FreeAndNil(FEndDate);
  System.SysUtils.FreeAndNil(FStartDate);
  inherited Destroy;
end;

procedure LKeyInfo2.SetAccessPointID(Index: Integer; const Aguid: guid);
begin
  FAccessPointID := Aguid;
  FAccessPointID_Specified := True;
end;

function LKeyInfo2.AccessPointID_Specified(Index: Integer): boolean;
begin
  Result := FAccessPointID_Specified;
end;

procedure LKeyInfo2.SetDriverSettings(Index: Integer; const ADriverSettings2: DriverSettings2);
begin
  FDriverSettings := ADriverSettings2;
  FDriverSettings_Specified := True;
end;

function LKeyInfo2.DriverSettings_Specified(Index: Integer): boolean;
begin
  Result := FDriverSettings_Specified;
end;

procedure LKeyInfo2.SetEmployeeFirstName(Index: Integer; const Astring: string);
begin
  FEmployeeFirstName := Astring;
  FEmployeeFirstName_Specified := True;
end;

function LKeyInfo2.EmployeeFirstName_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeFirstName_Specified;
end;

procedure LKeyInfo2.SetEmployeeID(Index: Integer; const Aguid: guid);
begin
  FEmployeeID := Aguid;
  FEmployeeID_Specified := True;
end;

function LKeyInfo2.EmployeeID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeID_Specified;
end;

procedure LKeyInfo2.SetEmployeeLastName(Index: Integer; const Astring: string);
begin
  FEmployeeLastName := Astring;
  FEmployeeLastName_Specified := True;
end;

function LKeyInfo2.EmployeeLastName_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeLastName_Specified;
end;

procedure LKeyInfo2.SetEmployeeSecondName(Index: Integer; const Astring: string);
begin
  FEmployeeSecondName := Astring;
  FEmployeeSecondName_Specified := True;
end;

function LKeyInfo2.EmployeeSecondName_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeSecondName_Specified;
end;

procedure LKeyInfo2.SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndDate := ATXSDateTime;
  FEndDate_Specified := True;
end;

function LKeyInfo2.EndDate_Specified(Index: Integer): boolean;
begin
  Result := FEndDate_Specified;
end;

procedure LKeyInfo2.SetFinger1_Template(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger1_Template := ATArray;
  FFinger1_Template_Specified := True;
end;

function LKeyInfo2.Finger1_Template_Specified(Index: Integer): boolean;
begin
  Result := FFinger1_Template_Specified;
end;

procedure LKeyInfo2.SetFinger2_Template(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger2_Template := ATArray;
  FFinger2_Template_Specified := True;
end;

function LKeyInfo2.Finger2_Template_Specified(Index: Integer): boolean;
begin
  Result := FFinger2_Template_Specified;
end;

procedure LKeyInfo2.SetFinger3_Template(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger3_Template := ATArray;
  FFinger3_Template_Specified := True;
end;

function LKeyInfo2.Finger3_Template_Specified(Index: Integer): boolean;
begin
  Result := FFinger3_Template_Specified;
end;

procedure LKeyInfo2.SetFinger4_Template(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger4_Template := ATArray;
  FFinger4_Template_Specified := True;
end;

function LKeyInfo2.Finger4_Template_Specified(Index: Integer): boolean;
begin
  Result := FFinger4_Template_Specified;
end;

procedure LKeyInfo2.SetFinger5_Template(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FFinger5_Template := ATArray;
  FFinger5_Template_Specified := True;
end;

function LKeyInfo2.Finger5_Template_Specified(Index: Integer): boolean;
begin
  Result := FFinger5_Template_Specified;
end;

procedure LKeyInfo2.SetID(Index: Integer; const AInteger: Integer);
begin
  FID := AInteger;
  FID_Specified := True;
end;

function LKeyInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure LKeyInfo2.SetIsForBiometrics(Index: Integer; const ABoolean: Boolean);
begin
  FIsForBiometrics := ABoolean;
  FIsForBiometrics_Specified := True;
end;

function LKeyInfo2.IsForBiometrics_Specified(Index: Integer): boolean;
begin
  Result := FIsForBiometrics_Specified;
end;

procedure LKeyInfo2.SetKeyNumber(Index: Integer; const AInt64: Int64);
begin
  FKeyNumber := AInt64;
  FKeyNumber_Specified := True;
end;

function LKeyInfo2.KeyNumber_Specified(Index: Integer): boolean;
begin
  Result := FKeyNumber_Specified;
end;

procedure LKeyInfo2.SetPINCode(Index: Integer; const AInt64: Int64);
begin
  FPINCode := AInt64;
  FPINCode_Specified := True;
end;

function LKeyInfo2.PINCode_Specified(Index: Integer): boolean;
begin
  Result := FPINCode_Specified;
end;

procedure LKeyInfo2.SetPINCodeUnderPressure(Index: Integer; const AInt64: Int64);
begin
  FPINCodeUnderPressure := AInt64;
  FPINCodeUnderPressure_Specified := True;
end;

function LKeyInfo2.PINCodeUnderPressure_Specified(Index: Integer): boolean;
begin
  Result := FPINCodeUnderPressure_Specified;
end;

procedure LKeyInfo2.SetStartDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartDate := ATXSDateTime;
  FStartDate_Specified := True;
end;

function LKeyInfo2.StartDate_Specified(Index: Integer): boolean;
begin
  Result := FStartDate_Specified;
end;

procedure CardTypeSaveInfo2.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function CardTypeSaveInfo2.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

procedure CardTypeSaveInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function CardTypeSaveInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure CardTypeInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function CardTypeInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

destructor CardTypesInfoData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCardTypes)-1 do
    System.SysUtils.FreeAndNil(FCardTypes[I]);
  System.SetLength(FCardTypes, 0);
  inherited Destroy;
end;

procedure CardTypesInfoData2.SetCardTypes(Index: Integer; const AArrayOfCardTypeInfo: ArrayOfCardTypeInfo);
begin
  FCardTypes := AArrayOfCardTypeInfo;
  FCardTypes_Specified := True;
end;

function CardTypesInfoData2.CardTypes_Specified(Index: Integer): boolean;
begin
  Result := FCardTypes_Specified;
end;

procedure CardTypesInfoData2.SetCount(Index: Integer; const AInt64: Int64);
begin
  FCount := AInt64;
  FCount_Specified := True;
end;

function CardTypesInfoData2.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure LUserGroup2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function LUserGroup2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure LUserGroup2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function LUserGroup2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure LUserGroup2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function LUserGroup2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure LUserGroup2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function LUserGroup2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure LUserGroup2.SetUserGroupType(Index: Integer; const AUserGroupType: UserGroupType);
begin
  FUserGroupType := AUserGroupType;
  FUserGroupType_Specified := True;
end;

function LUserGroup2.UserGroupType_Specified(Index: Integer): boolean;
begin
  Result := FUserGroupType_Specified;
end;

destructor LUsersData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FUsers)-1 do
    System.SysUtils.FreeAndNil(FUsers[I]);
  System.SetLength(FUsers, 0);
  inherited Destroy;
end;

procedure LUsersData2.SetCount(Index: Integer; const AInt64: Int64);
begin
  FCount := AInt64;
  FCount_Specified := True;
end;

function LUsersData2.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure LUsersData2.SetUsers(Index: Integer; const AArrayOfLUser: ArrayOfLUser);
begin
  FUsers := AArrayOfLUser;
  FUsers_Specified := True;
end;

function LUsersData2.Users_Specified(Index: Integer): boolean;
begin
  Result := FUsers_Specified;
end;

procedure LUser2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function LUser2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure LUser2.SetFullName(Index: Integer; const Astring: string);
begin
  FFullName := Astring;
  FFullName_Specified := True;
end;

function LUser2.FullName_Specified(Index: Integer): boolean;
begin
  Result := FFullName_Specified;
end;

procedure LUser2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function LUser2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure LUser2.SetIsBuiltIn(Index: Integer; const ABoolean: Boolean);
begin
  FIsBuiltIn := ABoolean;
  FIsBuiltIn_Specified := True;
end;

function LUser2.IsBuiltIn_Specified(Index: Integer): boolean;
begin
  Result := FIsBuiltIn_Specified;
end;

procedure LUser2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function LUser2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure LUser2.SetLogin(Index: Integer; const Astring: string);
begin
  FLogin := Astring;
  FLogin_Specified := True;
end;

function LUser2.Login_Specified(Index: Integer): boolean;
begin
  Result := FLogin_Specified;
end;

procedure ClaimSaveData2.SetResource(Index: Integer; const Astring: string);
begin
  FResource := Astring;
  FResource_Specified := True;
end;

function ClaimSaveData2.Resource_Specified(Index: Integer): boolean;
begin
  Result := FResource_Specified;
end;

procedure ClaimSaveData2.SetType_(Index: Integer; const Astring: string);
begin
  FType_ := Astring;
  FType__Specified := True;
end;

function ClaimSaveData2.Type__Specified(Index: Integer): boolean;
begin
  Result := FType__Specified;
end;

destructor LUserGroupsData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FUserGroups)-1 do
    System.SysUtils.FreeAndNil(FUserGroups[I]);
  System.SetLength(FUserGroups, 0);
  inherited Destroy;
end;

procedure LUserGroupsData2.SetCount(Index: Integer; const AInt64: Int64);
begin
  FCount := AInt64;
  FCount_Specified := True;
end;

function LUserGroupsData2.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure LUserGroupsData2.SetUserGroups(Index: Integer; const AArrayOfLUserGroup: ArrayOfLUserGroup);
begin
  FUserGroups := AArrayOfLUserGroup;
  FUserGroups_Specified := True;
end;

function LUserGroupsData2.UserGroups_Specified(Index: Integer): boolean;
begin
  Result := FUserGroups_Specified;
end;

procedure ClaimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function ClaimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure ClaimInfo2.SetOwnerId(Index: Integer; const Aguid: guid);
begin
  FOwnerId := Aguid;
  FOwnerId_Specified := True;
end;

function ClaimInfo2.OwnerId_Specified(Index: Integer): boolean;
begin
  Result := FOwnerId_Specified;
end;

destructor IvideonCameraCollectionResult2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDriverFullInfo)-1 do
    System.SysUtils.FreeAndNil(FDriverFullInfo[I]);
  System.SetLength(FDriverFullInfo, 0);
  inherited Destroy;
end;

procedure IvideonCameraCollectionResult2.SetDriverFullInfo(Index: Integer; const AArrayOfLDriverFullInfo: ArrayOfLDriverFullInfo);
begin
  FDriverFullInfo := AArrayOfLDriverFullInfo;
  FDriverFullInfo_Specified := True;
end;

function IvideonCameraCollectionResult2.DriverFullInfo_Specified(Index: Integer): boolean;
begin
  Result := FDriverFullInfo_Specified;
end;

destructor IvideonRemoteServerCollectionResult2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDriverFullInfo)-1 do
    System.SysUtils.FreeAndNil(FDriverFullInfo[I]);
  System.SetLength(FDriverFullInfo, 0);
  inherited Destroy;
end;

procedure IvideonRemoteServerCollectionResult2.SetDriverFullInfo(Index: Integer; const AArrayOfLDriverFullInfo: ArrayOfLDriverFullInfo);
begin
  FDriverFullInfo := AArrayOfLDriverFullInfo;
  FDriverFullInfo_Specified := True;
end;

function IvideonRemoteServerCollectionResult2.DriverFullInfo_Specified(Index: Integer): boolean;
begin
  Result := FDriverFullInfo_Specified;
end;

destructor LanCanConverterAddress2.Destroy;
begin
  System.SysUtils.FreeAndNil(FIpAddress);
  inherited Destroy;
end;

procedure LanCanConverterAddress2.SetIpAddress(Index: Integer; const AIPAddress2: IPAddress2);
begin
  FIpAddress := AIPAddress2;
  FIpAddress_Specified := True;
end;

function LanCanConverterAddress2.IpAddress_Specified(Index: Integer): boolean;
begin
  Result := FIpAddress_Specified;
end;

procedure UsbCanConverterAddress2.SetChannel(Index: Integer; const AInteger: Integer);
begin
  FChannel := AInteger;
  FChannel_Specified := True;
end;

function UsbCanConverterAddress2.Channel_Specified(Index: Integer): boolean;
begin
  Result := FChannel_Specified;
end;

procedure UsbCanConverterAddress2.SetSerialNumber(Index: Integer; const Astring: string);
begin
  FSerialNumber := Astring;
  FSerialNumber_Specified := True;
end;

function UsbCanConverterAddress2.SerialNumber_Specified(Index: Integer): boolean;
begin
  Result := FSerialNumber_Specified;
end;

procedure UsbCanConverterAddress2.SetVendor(Index: Integer; const Astring: string);
begin
  FVendor := Astring;
  FVendor_Specified := True;
end;

function UsbCanConverterAddress2.Vendor_Specified(Index: Integer): boolean;
begin
  Result := FVendor_Specified;
end;

destructor CanConverterAddress2.Destroy;
begin
  System.SysUtils.FreeAndNil(FLanCanConverterAddress);
  System.SysUtils.FreeAndNil(FUsbCanConverterAddress);
  inherited Destroy;
end;

procedure CanConverterAddress2.SetLanCanConverterAddress(Index: Integer; const ALanCanConverterAddress2: LanCanConverterAddress2);
begin
  FLanCanConverterAddress := ALanCanConverterAddress2;
  FLanCanConverterAddress_Specified := True;
end;

function CanConverterAddress2.LanCanConverterAddress_Specified(Index: Integer): boolean;
begin
  Result := FLanCanConverterAddress_Specified;
end;

procedure CanConverterAddress2.SetTag(Index: Integer; const ACanConverterAddress_TagEnum: CanConverterAddress_TagEnum);
begin
  FTag := ACanConverterAddress_TagEnum;
  FTag_Specified := True;
end;

function CanConverterAddress2.Tag_Specified(Index: Integer): boolean;
begin
  Result := FTag_Specified;
end;

procedure CanConverterAddress2.SetUsbCanConverterAddress(Index: Integer; const AUsbCanConverterAddress2: UsbCanConverterAddress2);
begin
  FUsbCanConverterAddress := AUsbCanConverterAddress2;
  FUsbCanConverterAddress_Specified := True;
end;

function CanConverterAddress2.UsbCanConverterAddress_Specified(Index: Integer): boolean;
begin
  Result := FUsbCanConverterAddress_Specified;
end;

destructor FindConvertersResult2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FConverters)-1 do
    System.SysUtils.FreeAndNil(FConverters[I]);
  System.SetLength(FConverters, 0);
  inherited Destroy;
end;

procedure FindConvertersResult2.SetConverters(Index: Integer; const AArrayOfCanConverterAddress: ArrayOfCanConverterAddress);
begin
  FConverters := AArrayOfCanConverterAddress;
  FConverters_Specified := True;
end;

function FindConvertersResult2.Converters_Specified(Index: Integer): boolean;
begin
  Result := FConverters_Specified;
end;

procedure FindConvertersResult2.SetMissingDrivers(Index: Integer; const AArrayOfstring: ArrayOfstring);
begin
  FMissingDrivers := AArrayOfstring;
  FMissingDrivers_Specified := True;
end;

function FindConvertersResult2.MissingDrivers_Specified(Index: Integer): boolean;
begin
  Result := FMissingDrivers_Specified;
end;

procedure NUUOCamera2.SetCentralID(Index: Integer; const AInt64: Int64);
begin
  FCentralID := AInt64;
  FCentralID_Specified := True;
end;

function NUUOCamera2.CentralID_Specified(Index: Integer): boolean;
begin
  Result := FCentralID_Specified;
end;

procedure NUUOCamera2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function NUUOCamera2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure NUUOCamera2.SetLocalID(Index: Integer; const AInt64: Int64);
begin
  FLocalID := AInt64;
  FLocalID_Specified := True;
end;

function NUUOCamera2.LocalID_Specified(Index: Integer): boolean;
begin
  Result := FLocalID_Specified;
end;

procedure NUUOCamera2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function NUUOCamera2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

destructor PanasonicCameraCollectionResult2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDriverFullInfo)-1 do
    System.SysUtils.FreeAndNil(FDriverFullInfo[I]);
  System.SetLength(FDriverFullInfo, 0);
  inherited Destroy;
end;

procedure PanasonicCameraCollectionResult2.SetDriverFullInfo(Index: Integer; const AArrayOfLDriverFullInfo: ArrayOfLDriverFullInfo);
begin
  FDriverFullInfo := AArrayOfLDriverFullInfo;
  FDriverFullInfo_Specified := True;
end;

function PanasonicCameraCollectionResult2.DriverFullInfo_Specified(Index: Integer): boolean;
begin
  Result := FDriverFullInfo_Specified;
end;

destructor NotificationInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FEmployeePassageNotifications)-1 do
    System.SysUtils.FreeAndNil(FEmployeePassageNotifications[I]);
  System.SetLength(FEmployeePassageNotifications, 0);
  inherited Destroy;
end;

procedure NotificationInfo2.SetEmployeePassageNotifications(Index: Integer; const AArrayOfEmployeePassageNotification: ArrayOfEmployeePassageNotification);
begin
  FEmployeePassageNotifications := AArrayOfEmployeePassageNotification;
  FEmployeePassageNotifications_Specified := True;
end;

function NotificationInfo2.EmployeePassageNotifications_Specified(Index: Integer): boolean;
begin
  Result := FEmployeePassageNotifications_Specified;
end;

destructor NUUOVideoRecorder2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCameras)-1 do
    System.SysUtils.FreeAndNil(FCameras[I]);
  System.SetLength(FCameras, 0);
  inherited Destroy;
end;

procedure NUUOVideoRecorder2.SetCameras(Index: Integer; const AArrayOfNUUOCamera: ArrayOfNUUOCamera);
begin
  FCameras := AArrayOfNUUOCamera;
  FCameras_Specified := True;
end;

function NUUOVideoRecorder2.Cameras_Specified(Index: Integer): boolean;
begin
  Result := FCameras_Specified;
end;

procedure NUUOVideoRecorder2.SetCentralID(Index: Integer; const AInt64: Int64);
begin
  FCentralID := AInt64;
  FCentralID_Specified := True;
end;

function NUUOVideoRecorder2.CentralID_Specified(Index: Integer): boolean;
begin
  Result := FCentralID_Specified;
end;

procedure NUUOVideoRecorder2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function NUUOVideoRecorder2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure NUUOVideoRecorder2.SetLocalID(Index: Integer; const AInt64: Int64);
begin
  FLocalID := AInt64;
  FLocalID_Specified := True;
end;

function NUUOVideoRecorder2.LocalID_Specified(Index: Integer): boolean;
begin
  Result := FLocalID_Specified;
end;

procedure NUUOVideoRecorder2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function NUUOVideoRecorder2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

destructor NUUOArchiveServer2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FVideoRecorders)-1 do
    System.SysUtils.FreeAndNil(FVideoRecorders[I]);
  System.SetLength(FVideoRecorders, 0);
  inherited Destroy;
end;

procedure NUUOArchiveServer2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function NUUOArchiveServer2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure NUUOArchiveServer2.SetVideoRecorders(Index: Integer; const AArrayOfNUUOVideoRecorder: ArrayOfNUUOVideoRecorder);
begin
  FVideoRecorders := AArrayOfNUUOVideoRecorder;
  FVideoRecorders_Specified := True;
end;

function NUUOArchiveServer2.VideoRecorders_Specified(Index: Integer): boolean;
begin
  Result := FVideoRecorders_Specified;
end;

destructor NUUOArchiveServerCollectionResult2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FArchiveServers)-1 do
    System.SysUtils.FreeAndNil(FArchiveServers[I]);
  System.SetLength(FArchiveServers, 0);
  inherited Destroy;
end;

procedure NUUOArchiveServerCollectionResult2.SetArchiveServers(Index: Integer; const AArrayOfNUUOArchiveServer: ArrayOfNUUOArchiveServer);
begin
  FArchiveServers := AArrayOfNUUOArchiveServer;
  FArchiveServers_Specified := True;
end;

function NUUOArchiveServerCollectionResult2.ArchiveServers_Specified(Index: Integer): boolean;
begin
  Result := FArchiveServers_Specified;
end;

procedure Employee2OrganizationAssignment2.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function Employee2OrganizationAssignment2.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

procedure Employee2OrganizationAssignment2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function Employee2OrganizationAssignment2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure Employee2OrganizationAssignment2.SetOrganizationID(Index: Integer; const Aguid: guid);
begin
  FOrganizationID := Aguid;
  FOrganizationID_Specified := True;
end;

function Employee2OrganizationAssignment2.OrganizationID_Specified(Index: Integer): boolean;
begin
  Result := FOrganizationID_Specified;
end;

procedure Employee2OrganizationAssignment2.SetSubdivisionID(Index: Integer; const Aguid: guid);
begin
  FSubdivisionID := Aguid;
  FSubdivisionID_Specified := True;
end;

function Employee2OrganizationAssignment2.SubdivisionID_Specified(Index: Integer): boolean;
begin
  Result := FSubdivisionID_Specified;
end;

destructor FirebirdIncidentEventsResult2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDateEvent);
  inherited Destroy;
end;

procedure FirebirdIncidentEventsResult2.SetDateEvent(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDateEvent := ATXSDateTime;
  FDateEvent_Specified := True;
end;

function FirebirdIncidentEventsResult2.DateEvent_Specified(Index: Integer): boolean;
begin
  Result := FDateEvent_Specified;
end;

procedure FirebirdIncidentEventsResult2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function FirebirdIncidentEventsResult2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure FirebirdIncidentEventsResult2.SetNameDoc(Index: Integer; const Astring: string);
begin
  FNameDoc := Astring;
  FNameDoc_Specified := True;
end;

function FirebirdIncidentEventsResult2.NameDoc_Specified(Index: Integer): boolean;
begin
  Result := FNameDoc_Specified;
end;

procedure FirebirdIncidentEventsResult2.SetNumDoc(Index: Integer; const Astring: string);
begin
  FNumDoc := Astring;
  FNumDoc_Specified := True;
end;

function FirebirdIncidentEventsResult2.NumDoc_Specified(Index: Integer): boolean;
begin
  Result := FNumDoc_Specified;
end;

procedure FirebirdIncidentEventsResult2.SetPatronomic(Index: Integer; const Astring: string);
begin
  FPatronomic := Astring;
  FPatronomic_Specified := True;
end;

function FirebirdIncidentEventsResult2.Patronomic_Specified(Index: Integer): boolean;
begin
  Result := FPatronomic_Specified;
end;

procedure FirebirdIncidentEventsResult2.SetSignificance(Index: Integer; const Astring: string);
begin
  FSignificance := Astring;
  FSignificance_Specified := True;
end;

function FirebirdIncidentEventsResult2.Significance_Specified(Index: Integer): boolean;
begin
  Result := FSignificance_Specified;
end;

procedure FirebirdIncidentEventsResult2.SetSurname(Index: Integer; const Astring: string);
begin
  FSurname := Astring;
  FSurname_Specified := True;
end;

function FirebirdIncidentEventsResult2.Surname_Specified(Index: Integer): boolean;
begin
  Result := FSurname_Specified;
end;

procedure FirebirdIncidentEventsResult2.SetViolation(Index: Integer; const Astring: string);
begin
  FViolation := Astring;
  FViolation_Specified := True;
end;

function FirebirdIncidentEventsResult2.Violation_Specified(Index: Integer): boolean;
begin
  Result := FViolation_Specified;
end;

procedure FirebirdIncidentEventsResult2.SetWayOfPlunder(Index: Integer; const Astring: string);
begin
  FWayOfPlunder := Astring;
  FWayOfPlunder_Specified := True;
end;

function FirebirdIncidentEventsResult2.WayOfPlunder_Specified(Index: Integer): boolean;
begin
  Result := FWayOfPlunder_Specified;
end;

procedure FirebirdIncidentEventsResult2.SetWayOfPlunderInfo(Index: Integer; const Astring: string);
begin
  FWayOfPlunderInfo := Astring;
  FWayOfPlunderInfo_Specified := True;
end;

function FirebirdIncidentEventsResult2.WayOfPlunderInfo_Specified(Index: Integer): boolean;
begin
  Result := FWayOfPlunderInfo_Specified;
end;

destructor ViolatorFilter2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDateOfBirth);
  inherited Destroy;
end;

procedure ViolatorFilter2.SetDateOfBirth(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDateOfBirth := ATXSDateTime;
  FDateOfBirth_Specified := True;
end;

function ViolatorFilter2.DateOfBirth_Specified(Index: Integer): boolean;
begin
  Result := FDateOfBirth_Specified;
end;

procedure ViolatorFilter2.SetFirstName(Index: Integer; const Astring: string);
begin
  FFirstName := Astring;
  FFirstName_Specified := True;
end;

function ViolatorFilter2.FirstName_Specified(Index: Integer): boolean;
begin
  Result := FFirstName_Specified;
end;

procedure ViolatorFilter2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function ViolatorFilter2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure ViolatorFilter2.SetLastName(Index: Integer; const Astring: string);
begin
  FLastName := Astring;
  FLastName_Specified := True;
end;

function ViolatorFilter2.LastName_Specified(Index: Integer): boolean;
begin
  Result := FLastName_Specified;
end;

procedure ViolatorFilter2.SetSecondName(Index: Integer; const Astring: string);
begin
  FSecondName := Astring;
  FSecondName_Specified := True;
end;

function ViolatorFilter2.SecondName_Specified(Index: Integer): boolean;
begin
  Result := FSecondName_Specified;
end;

procedure ViolatorFilter2.SetTableNumber(Index: Integer; const AInteger: Integer);
begin
  FTableNumber := AInteger;
  FTableNumber_Specified := True;
end;

function ViolatorFilter2.TableNumber_Specified(Index: Integer): boolean;
begin
  Result := FTableNumber_Specified;
end;

destructor Employee2OrganizationAssignmentFull2.Destroy;
begin
  System.SysUtils.FreeAndNil(FOrganization);
  System.SysUtils.FreeAndNil(FSubdivision);
  inherited Destroy;
end;

procedure Employee2OrganizationAssignmentFull2.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function Employee2OrganizationAssignmentFull2.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

procedure Employee2OrganizationAssignmentFull2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function Employee2OrganizationAssignmentFull2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure Employee2OrganizationAssignmentFull2.SetOrganization(Index: Integer; const ADictionaryElementInfo2: DictionaryElementInfo2);
begin
  FOrganization := ADictionaryElementInfo2;
  FOrganization_Specified := True;
end;

function Employee2OrganizationAssignmentFull2.Organization_Specified(Index: Integer): boolean;
begin
  Result := FOrganization_Specified;
end;

procedure Employee2OrganizationAssignmentFull2.SetSubdivision(Index: Integer; const ADictionaryElementInfo2: DictionaryElementInfo2);
begin
  FSubdivision := ADictionaryElementInfo2;
  FSubdivision_Specified := True;
end;

function Employee2OrganizationAssignmentFull2.Subdivision_Specified(Index: Integer): boolean;
begin
  Result := FSubdivision_Specified;
end;

destructor IncidentTemplateSaveData2.Destroy;
begin
  System.SysUtils.FreeAndNil(FTemplate);
  inherited Destroy;
end;

procedure IncidentTemplateSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function IncidentTemplateSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure IncidentTemplateSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function IncidentTemplateSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure IncidentTemplateSaveData2.SetTemplate(Index: Integer; const ATemplate: Template);
begin
  FTemplate := ATemplate;
  FTemplate_Specified := True;
end;

function IncidentTemplateSaveData2.Template_Specified(Index: Integer): boolean;
begin
  Result := FTemplate_Specified;
end;

destructor Violation2.Destroy;
begin
  System.SysUtils.FreeAndNil(FIncidentDate);
  inherited Destroy;
end;

procedure Violation2.SetDocumentNumber(Index: Integer; const Astring: string);
begin
  FDocumentNumber := Astring;
  FDocumentNumber_Specified := True;
end;

function Violation2.DocumentNumber_Specified(Index: Integer): boolean;
begin
  Result := FDocumentNumber_Specified;
end;

procedure Violation2.SetDocumentType(Index: Integer; const Astring: string);
begin
  FDocumentType := Astring;
  FDocumentType_Specified := True;
end;

function Violation2.DocumentType_Specified(Index: Integer): boolean;
begin
  Result := FDocumentType_Specified;
end;

procedure Violation2.SetEmployeeID(Index: Integer; const Aguid: guid);
begin
  FEmployeeID := Aguid;
  FEmployeeID_Specified := True;
end;

function Violation2.EmployeeID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeID_Specified;
end;

procedure Violation2.SetFirstName(Index: Integer; const Astring: string);
begin
  FFirstName := Astring;
  FFirstName_Specified := True;
end;

function Violation2.FirstName_Specified(Index: Integer): boolean;
begin
  Result := FFirstName_Specified;
end;

procedure Violation2.SetGroupID(Index: Integer; const Aguid: guid);
begin
  FGroupID := Aguid;
  FGroupID_Specified := True;
end;

function Violation2.GroupID_Specified(Index: Integer): boolean;
begin
  Result := FGroupID_Specified;
end;

procedure Violation2.SetGroupName(Index: Integer; const Astring: string);
begin
  FGroupName := Astring;
  FGroupName_Specified := True;
end;

function Violation2.GroupName_Specified(Index: Integer): boolean;
begin
  Result := FGroupName_Specified;
end;

procedure Violation2.SetGroupPath(Index: Integer; const Astring: string);
begin
  FGroupPath := Astring;
  FGroupPath_Specified := True;
end;

function Violation2.GroupPath_Specified(Index: Integer): boolean;
begin
  Result := FGroupPath_Specified;
end;

procedure Violation2.SetIncidentDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FIncidentDate := ATXSDateTime;
  FIncidentDate_Specified := True;
end;

function Violation2.IncidentDate_Specified(Index: Integer): boolean;
begin
  Result := FIncidentDate_Specified;
end;

procedure Violation2.SetIncidentID(Index: Integer; const Aguid: guid);
begin
  FIncidentID := Aguid;
  FIncidentID_Specified := True;
end;

function Violation2.IncidentID_Specified(Index: Integer): boolean;
begin
  Result := FIncidentID_Specified;
end;

procedure Violation2.SetLastName(Index: Integer; const Astring: string);
begin
  FLastName := Astring;
  FLastName_Specified := True;
end;

function Violation2.LastName_Specified(Index: Integer): boolean;
begin
  Result := FLastName_Specified;
end;

procedure Violation2.SetNatureOfViolation(Index: Integer; const Astring: string);
begin
  FNatureOfViolation := Astring;
  FNatureOfViolation_Specified := True;
end;

function Violation2.NatureOfViolation_Specified(Index: Integer): boolean;
begin
  Result := FNatureOfViolation_Specified;
end;

procedure Violation2.SetSecondName(Index: Integer; const Astring: string);
begin
  FSecondName := Astring;
  FSecondName_Specified := True;
end;

function Violation2.SecondName_Specified(Index: Integer): boolean;
begin
  Result := FSecondName_Specified;
end;

procedure Violation2.SetSignificance(Index: Integer; const Astring: string);
begin
  FSignificance := Astring;
  FSignificance_Specified := True;
end;

function Violation2.Significance_Specified(Index: Integer): boolean;
begin
  Result := FSignificance_Specified;
end;

procedure Violation2.SetTypeOfViolation(Index: Integer; const Astring: string);
begin
  FTypeOfViolation := Astring;
  FTypeOfViolation_Specified := True;
end;

function Violation2.TypeOfViolation_Specified(Index: Integer): boolean;
begin
  Result := FTypeOfViolation_Specified;
end;

procedure IncidentTemplateInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function IncidentTemplateInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

destructor IncidentStatisticData2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDateBegin);
  System.SysUtils.FreeAndNil(FDateEnd);
  inherited Destroy;
end;

procedure IncidentStatisticData2.SetDateBegin(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDateBegin := ATXSDateTime;
  FDateBegin_Specified := True;
end;

function IncidentStatisticData2.DateBegin_Specified(Index: Integer): boolean;
begin
  Result := FDateBegin_Specified;
end;

procedure IncidentStatisticData2.SetDateEnd(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDateEnd := ATXSDateTime;
  FDateEnd_Specified := True;
end;

function IncidentStatisticData2.DateEnd_Specified(Index: Integer): boolean;
begin
  Result := FDateEnd_Specified;
end;

procedure IncidentStatisticData2.SetImportantIncidentTypeIds(Index: Integer; const AArrayOfguid: ArrayOfguid);
begin
  FImportantIncidentTypeIds := AArrayOfguid;
  FImportantIncidentTypeIds_Specified := True;
end;

function IncidentStatisticData2.ImportantIncidentTypeIds_Specified(Index: Integer): boolean;
begin
  Result := FImportantIncidentTypeIds_Specified;
end;

procedure IncidentStatisticData2.SetIncidentReportName(Index: Integer; const Astring: string);
begin
  FIncidentReportName := Astring;
  FIncidentReportName_Specified := True;
end;

function IncidentStatisticData2.IncidentReportName_Specified(Index: Integer): boolean;
begin
  Result := FIncidentReportName_Specified;
end;

procedure IncidentStatisticData2.SetIncidentsDescription(Index: Integer; const Astring: string);
begin
  FIncidentsDescription := Astring;
  FIncidentsDescription_Specified := True;
end;

function IncidentStatisticData2.IncidentsDescription_Specified(Index: Integer): boolean;
begin
  Result := FIncidentsDescription_Specified;
end;

procedure IncidentStatisticData2.SetOrganizaion(Index: Integer; const Astring: string);
begin
  FOrganizaion := Astring;
  FOrganizaion_Specified := True;
end;

function IncidentStatisticData2.Organizaion_Specified(Index: Integer): boolean;
begin
  Result := FOrganizaion_Specified;
end;

procedure IncidentStatisticData2.SetOtherIncidentTypeIds(Index: Integer; const AArrayOfguid: ArrayOfguid);
begin
  FOtherIncidentTypeIds := AArrayOfguid;
  FOtherIncidentTypeIds_Specified := True;
end;

function IncidentStatisticData2.OtherIncidentTypeIds_Specified(Index: Integer): boolean;
begin
  Result := FOtherIncidentTypeIds_Specified;
end;

procedure IncidentStatisticData2.SetOtherIncidents(Index: Integer; const Astring: string);
begin
  FOtherIncidents := Astring;
  FOtherIncidents_Specified := True;
end;

function IncidentStatisticData2.OtherIncidents_Specified(Index: Integer): boolean;
begin
  Result := FOtherIncidents_Specified;
end;

procedure IncidentStatisticData2.SetPlace(Index: Integer; const Astring: string);
begin
  FPlace := Astring;
  FPlace_Specified := True;
end;

function IncidentStatisticData2.Place_Specified(Index: Integer): boolean;
begin
  Result := FPlace_Specified;
end;

procedure PhotoidentificationPersonalDataSaveInfo2.SetAdditionalFieldId(Index: Integer; const Aguid: guid);
begin
  FAdditionalFieldId := Aguid;
  FAdditionalFieldId_Specified := True;
end;

function PhotoidentificationPersonalDataSaveInfo2.AdditionalFieldId_Specified(Index: Integer): boolean;
begin
  Result := FAdditionalFieldId_Specified;
end;

procedure PhotoidentificationPersonalDataSaveInfo2.SetAdditionalFieldName(Index: Integer; const Astring: string);
begin
  FAdditionalFieldName := Astring;
  FAdditionalFieldName_Specified := True;
end;

function PhotoidentificationPersonalDataSaveInfo2.AdditionalFieldName_Specified(Index: Integer): boolean;
begin
  Result := FAdditionalFieldName_Specified;
end;

procedure PhotoidentificationPersonalDataSaveInfo2.SetFieldName(Index: Integer; const Astring: string);
begin
  FFieldName := Astring;
  FFieldName_Specified := True;
end;

function PhotoidentificationPersonalDataSaveInfo2.FieldName_Specified(Index: Integer): boolean;
begin
  Result := FFieldName_Specified;
end;

procedure PhotoidentificationPersonalDataSaveInfo2.SetOrder(Index: Integer; const AInteger: Integer);
begin
  FOrder := AInteger;
  FOrder_Specified := True;
end;

function PhotoidentificationPersonalDataSaveInfo2.Order_Specified(Index: Integer): boolean;
begin
  Result := FOrder_Specified;
end;

procedure PhotoidentificationPersonalData2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function PhotoidentificationPersonalData2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

destructor AcsVehicleSavedData2.Destroy;
begin
  System.SysUtils.FreeAndNil(FCreationDateTime);
  System.SysUtils.FreeAndNil(FEndDateTime);
  System.SysUtils.FreeAndNil(FModificationDateTime);
  System.SysUtils.FreeAndNil(FStartDateTime);
  System.SysUtils.FreeAndNil(FVehicleType);
  inherited Destroy;
end;

procedure AcsVehicleSavedData2.SetBrand(Index: Integer; const Astring: string);
begin
  FBrand := Astring;
  FBrand_Specified := True;
end;

function AcsVehicleSavedData2.Brand_Specified(Index: Integer): boolean;
begin
  Result := FBrand_Specified;
end;

procedure AcsVehicleSavedData2.SetColor(Index: Integer; const Astring: string);
begin
  FColor := Astring;
  FColor_Specified := True;
end;

function AcsVehicleSavedData2.Color_Specified(Index: Integer): boolean;
begin
  Result := FColor_Specified;
end;

procedure AcsVehicleSavedData2.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function AcsVehicleSavedData2.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

procedure AcsVehicleSavedData2.SetCreationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreationDateTime := ATXSDateTime;
  FCreationDateTime_Specified := True;
end;

function AcsVehicleSavedData2.CreationDateTime_Specified(Index: Integer): boolean;
begin
  Result := FCreationDateTime_Specified;
end;

procedure AcsVehicleSavedData2.SetEndDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndDateTime := ATXSDateTime;
  FEndDateTime_Specified := True;
end;

function AcsVehicleSavedData2.EndDateTime_Specified(Index: Integer): boolean;
begin
  Result := FEndDateTime_Specified;
end;

procedure AcsVehicleSavedData2.SetGroupId(Index: Integer; const Aguid: guid);
begin
  FGroupId := Aguid;
  FGroupId_Specified := True;
end;

function AcsVehicleSavedData2.GroupId_Specified(Index: Integer): boolean;
begin
  Result := FGroupId_Specified;
end;

procedure AcsVehicleSavedData2.SetIsLock(Index: Integer; const ABoolean: Boolean);
begin
  FIsLock := ABoolean;
  FIsLock_Specified := True;
end;

function AcsVehicleSavedData2.IsLock_Specified(Index: Integer): boolean;
begin
  Result := FIsLock_Specified;
end;

procedure AcsVehicleSavedData2.SetModificationDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModificationDateTime := ATXSDateTime;
  FModificationDateTime_Specified := True;
end;

function AcsVehicleSavedData2.ModificationDateTime_Specified(Index: Integer): boolean;
begin
  Result := FModificationDateTime_Specified;
end;

procedure AcsVehicleSavedData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AcsVehicleSavedData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AcsVehicleSavedData2.SetRegistrationNumber(Index: Integer; const Astring: string);
begin
  FRegistrationNumber := Astring;
  FRegistrationNumber_Specified := True;
end;

function AcsVehicleSavedData2.RegistrationNumber_Specified(Index: Integer): boolean;
begin
  Result := FRegistrationNumber_Specified;
end;

procedure AcsVehicleSavedData2.SetStartDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartDateTime := ATXSDateTime;
  FStartDateTime_Specified := True;
end;

function AcsVehicleSavedData2.StartDateTime_Specified(Index: Integer): boolean;
begin
  Result := FStartDateTime_Specified;
end;

procedure AcsVehicleSavedData2.SetVehicleType(Index: Integer; const ADictionaryElementInfo2: DictionaryElementInfo2);
begin
  FVehicleType := ADictionaryElementInfo2;
  FVehicleType_Specified := True;
end;

function AcsVehicleSavedData2.VehicleType_Specified(Index: Integer): boolean;
begin
  Result := FVehicleType_Specified;
end;

procedure AcsVehicleSavedData2.SetVehicleTypeID(Index: Integer; const Aguid: guid);
begin
  FVehicleTypeID := Aguid;
  FVehicleTypeID_Specified := True;
end;

function AcsVehicleSavedData2.VehicleTypeID_Specified(Index: Integer): boolean;
begin
  Result := FVehicleTypeID_Specified;
end;

procedure AcsVehicle2.SetGroupPath(Index: Integer; const Astring: string);
begin
  FGroupPath := Astring;
  FGroupPath_Specified := True;
end;

function AcsVehicle2.GroupPath_Specified(Index: Integer): boolean;
begin
  Result := FGroupPath_Specified;
end;

procedure AcsVehicle2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function AcsVehicle2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure AcsVehicle2.SetIsRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FIsRemoved := ABoolean;
  FIsRemoved_Specified := True;
end;

function AcsVehicle2.IsRemoved_Specified(Index: Integer): boolean;
begin
  Result := FIsRemoved_Specified;
end;

procedure DictionaryElementSaveInfo2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function DictionaryElementSaveInfo2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure DictionaryElementSaveInfo2.SetIsIgnoreIncidentRigths(Index: Integer; const ABoolean: Boolean);
begin
  FIsIgnoreIncidentRigths := ABoolean;
  FIsIgnoreIncidentRigths_Specified := True;
end;

function DictionaryElementSaveInfo2.IsIgnoreIncidentRigths_Specified(Index: Integer): boolean;
begin
  Result := FIsIgnoreIncidentRigths_Specified;
end;

procedure DictionaryElementSaveInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function DictionaryElementSaveInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure DictionaryElementInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function DictionaryElementInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure IncidentTypeInfo2.SetIsImportant(Index: Integer; const ABoolean: Boolean);
begin
  FIsImportant := ABoolean;
  FIsImportant_Specified := True;
end;

function IncidentTypeInfo2.IsImportant_Specified(Index: Integer): boolean;
begin
  Result := FIsImportant_Specified;
end;

destructor EmployeesVehicle2.Destroy;
begin
  System.SysUtils.FreeAndNil(FEndDateTime);
  System.SysUtils.FreeAndNil(FStartDateTime);
  inherited Destroy;
end;

procedure EmployeesVehicle2.SetEndDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndDateTime := ATXSDateTime;
  FEndDateTime_Specified := True;
end;

function EmployeesVehicle2.EndDateTime_Specified(Index: Integer): boolean;
begin
  Result := FEndDateTime_Specified;
end;

procedure EmployeesVehicle2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function EmployeesVehicle2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure EmployeesVehicle2.SetStartDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartDateTime := ATXSDateTime;
  FStartDateTime_Specified := True;
end;

function EmployeesVehicle2.StartDateTime_Specified(Index: Integer): boolean;
begin
  Result := FStartDateTime_Specified;
end;

procedure LogMessageTypeSlimInfo2.SetLogMesssageType(Index: Integer; const ALogMsgType: LogMsgType);
begin
  FLogMesssageType := ALogMsgType;
  FLogMesssageType_Specified := True;
end;

function LogMessageTypeSlimInfo2.LogMesssageType_Specified(Index: Integer): boolean;
begin
  Result := FLogMesssageType_Specified;
end;

procedure LogMessageTypeSlimInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function LogMessageTypeSlimInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure LogMessageTypeSlimInfo2.SetOrderNumber(Index: Integer; const AInteger: Integer);
begin
  FOrderNumber := AInteger;
  FOrderNumber_Specified := True;
end;

function LogMessageTypeSlimInfo2.OrderNumber_Specified(Index: Integer): boolean;
begin
  Result := FOrderNumber_Specified;
end;

procedure LogMessageTypeSlimInfo2.SetPublish(Index: Integer; const ABoolean: Boolean);
begin
  FPublish := ABoolean;
  FPublish_Specified := True;
end;

function LogMessageTypeSlimInfo2.Publish_Specified(Index: Integer): boolean;
begin
  Result := FPublish_Specified;
end;

destructor DriverEventNotification2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDateTime);
  inherited Destroy;
end;

procedure DriverEventNotification2.SetData(Index: Integer; const AInteger: Integer);
begin
  FData := AInteger;
  FData_Specified := True;
end;

function DriverEventNotification2.Data_Specified(Index: Integer): boolean;
begin
  Result := FData_Specified;
end;

procedure DriverEventNotification2.SetDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDateTime := ATXSDateTime;
  FDateTime_Specified := True;
end;

function DriverEventNotification2.DateTime_Specified(Index: Integer): boolean;
begin
  Result := FDateTime_Specified;
end;

procedure DriverEventNotification2.SetDetails(Index: Integer; const Astring: string);
begin
  FDetails := Astring;
  FDetails_Specified := True;
end;

function DriverEventNotification2.Details_Specified(Index: Integer): boolean;
begin
  Result := FDetails_Specified;
end;

procedure DriverEventNotification2.SetDriverId(Index: Integer; const Aguid: guid);
begin
  FDriverId := Aguid;
  FDriverId_Specified := True;
end;

function DriverEventNotification2.DriverId_Specified(Index: Integer): boolean;
begin
  Result := FDriverId_Specified;
end;

procedure DriverEventNotification2.SetEmployeeId(Index: Integer; const Aguid: guid);
begin
  FEmployeeId := Aguid;
  FEmployeeId_Specified := True;
end;

function DriverEventNotification2.EmployeeId_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeId_Specified;
end;

procedure DriverEventNotification2.SetIsKeyEvent(Index: Integer; const ABoolean: Boolean);
begin
  FIsKeyEvent := ABoolean;
  FIsKeyEvent_Specified := True;
end;

function DriverEventNotification2.IsKeyEvent_Specified(Index: Integer): boolean;
begin
  Result := FIsKeyEvent_Specified;
end;

procedure DriverEventNotification2.SetLogMessageId(Index: Integer; const AInt64: Int64);
begin
  FLogMessageId := AInt64;
  FLogMessageId_Specified := True;
end;

function DriverEventNotification2.LogMessageId_Specified(Index: Integer): boolean;
begin
  Result := FLogMessageId_Specified;
end;

procedure DriverEventNotification2.SetMessage_(Index: Integer; const Astring: string);
begin
  FMessage_ := Astring;
  FMessage__Specified := True;
end;

function DriverEventNotification2.Message__Specified(Index: Integer): boolean;
begin
  Result := FMessage__Specified;
end;

procedure DriverEventNotification2.SetMessageSubType(Index: Integer; const ALogMsgSubType: LogMsgSubType);
begin
  FMessageSubType := ALogMsgSubType;
  FMessageSubType_Specified := True;
end;

function DriverEventNotification2.MessageSubType_Specified(Index: Integer): boolean;
begin
  Result := FMessageSubType_Specified;
end;

procedure DriverEventNotification2.SetMessageType(Index: Integer; const ALogMsgType: LogMsgType);
begin
  FMessageType := ALogMsgType;
  FMessageType_Specified := True;
end;

function DriverEventNotification2.MessageType_Specified(Index: Integer): boolean;
begin
  Result := FMessageType_Specified;
end;

procedure DriverEventNotification2.SetOperatorId(Index: Integer; const Aguid: guid);
begin
  FOperatorId := Aguid;
  FOperatorId_Specified := True;
end;

function DriverEventNotification2.OperatorId_Specified(Index: Integer): boolean;
begin
  Result := FOperatorId_Specified;
end;

destructor EmployeePassageNotification2.Destroy;
begin
  System.SysUtils.FreeAndNil(FAddFields);
  inherited Destroy;
end;

procedure EmployeePassageNotification2.SetAddFields(Index: Integer; const AOwnerAdditionalFieldsValue2: OwnerAdditionalFieldsValue2);
begin
  FAddFields := AOwnerAdditionalFieldsValue2;
  FAddFields_Specified := True;
end;

function EmployeePassageNotification2.AddFields_Specified(Index: Integer): boolean;
begin
  Result := FAddFields_Specified;
end;

procedure EmployeePassageNotification2.SetEmployeeComment(Index: Integer; const Astring: string);
begin
  FEmployeeComment := Astring;
  FEmployeeComment_Specified := True;
end;

function EmployeePassageNotification2.EmployeeComment_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeComment_Specified;
end;

procedure EmployeePassageNotification2.SetEmployeeFirstName(Index: Integer; const Astring: string);
begin
  FEmployeeFirstName := Astring;
  FEmployeeFirstName_Specified := True;
end;

function EmployeePassageNotification2.EmployeeFirstName_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeFirstName_Specified;
end;

procedure EmployeePassageNotification2.SetEmployeeGroupFullPath(Index: Integer; const Astring: string);
begin
  FEmployeeGroupFullPath := Astring;
  FEmployeeGroupFullPath_Specified := True;
end;

function EmployeePassageNotification2.EmployeeGroupFullPath_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroupFullPath_Specified;
end;

procedure EmployeePassageNotification2.SetEmployeeLastName(Index: Integer; const Astring: string);
begin
  FEmployeeLastName := Astring;
  FEmployeeLastName_Specified := True;
end;

function EmployeePassageNotification2.EmployeeLastName_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeLastName_Specified;
end;

procedure EmployeePassageNotification2.SetEmployeePosition(Index: Integer; const Astring: string);
begin
  FEmployeePosition := Astring;
  FEmployeePosition_Specified := True;
end;

function EmployeePassageNotification2.EmployeePosition_Specified(Index: Integer): boolean;
begin
  Result := FEmployeePosition_Specified;
end;

procedure EmployeePassageNotification2.SetEmployeeSecondName(Index: Integer; const Astring: string);
begin
  FEmployeeSecondName := Astring;
  FEmployeeSecondName_Specified := True;
end;

function EmployeePassageNotification2.EmployeeSecondName_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeSecondName_Specified;
end;

destructor LogMessage2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDateTime);
  inherited Destroy;
end;

procedure LogMessage2.SetContentData(Index: Integer; const Astring: string);
begin
  FContentData := Astring;
  FContentData_Specified := True;
end;

function LogMessage2.ContentData_Specified(Index: Integer): boolean;
begin
  Result := FContentData_Specified;
end;

procedure LogMessage2.SetContentType(Index: Integer; const ALogMessageContentDataType: LogMessageContentDataType);
begin
  FContentType := ALogMessageContentDataType;
  FContentType_Specified := True;
end;

function LogMessage2.ContentType_Specified(Index: Integer): boolean;
begin
  Result := FContentType_Specified;
end;

procedure LogMessage2.SetDateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDateTime := ATXSDateTime;
  FDateTime_Specified := True;
end;

function LogMessage2.DateTime_Specified(Index: Integer): boolean;
begin
  Result := FDateTime_Specified;
end;

procedure LogMessage2.SetDetails(Index: Integer; const Astring: string);
begin
  FDetails := Astring;
  FDetails_Specified := True;
end;

function LogMessage2.Details_Specified(Index: Integer): boolean;
begin
  Result := FDetails_Specified;
end;

procedure LogMessage2.SetDriverID(Index: Integer; const Aguid: guid);
begin
  FDriverID := Aguid;
  FDriverID_Specified := True;
end;

function LogMessage2.DriverID_Specified(Index: Integer): boolean;
begin
  Result := FDriverID_Specified;
end;

procedure LogMessage2.SetDriverName(Index: Integer; const Astring: string);
begin
  FDriverName := Astring;
  FDriverName_Specified := True;
end;

function LogMessage2.DriverName_Specified(Index: Integer): boolean;
begin
  Result := FDriverName_Specified;
end;

procedure LogMessage2.SetEmployeeFirstName(Index: Integer; const Astring: string);
begin
  FEmployeeFirstName := Astring;
  FEmployeeFirstName_Specified := True;
end;

function LogMessage2.EmployeeFirstName_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeFirstName_Specified;
end;

procedure LogMessage2.SetEmployeeGroupFullName(Index: Integer; const Astring: string);
begin
  FEmployeeGroupFullName := Astring;
  FEmployeeGroupFullName_Specified := True;
end;

function LogMessage2.EmployeeGroupFullName_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroupFullName_Specified;
end;

procedure LogMessage2.SetEmployeeGroupId(Index: Integer; const Aguid: guid);
begin
  FEmployeeGroupId := Aguid;
  FEmployeeGroupId_Specified := True;
end;

function LogMessage2.EmployeeGroupId_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroupId_Specified;
end;

procedure LogMessage2.SetEmployeeGroupName(Index: Integer; const Astring: string);
begin
  FEmployeeGroupName := Astring;
  FEmployeeGroupName_Specified := True;
end;

function LogMessage2.EmployeeGroupName_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeGroupName_Specified;
end;

procedure LogMessage2.SetEmployeeID(Index: Integer; const Aguid: guid);
begin
  FEmployeeID := Aguid;
  FEmployeeID_Specified := True;
end;

function LogMessage2.EmployeeID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeID_Specified;
end;

procedure LogMessage2.SetEmployeeLastName(Index: Integer; const Astring: string);
begin
  FEmployeeLastName := Astring;
  FEmployeeLastName_Specified := True;
end;

function LogMessage2.EmployeeLastName_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeLastName_Specified;
end;

procedure LogMessage2.SetEmployeeSecondName(Index: Integer; const Astring: string);
begin
  FEmployeeSecondName := Astring;
  FEmployeeSecondName_Specified := True;
end;

function LogMessage2.EmployeeSecondName_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeSecondName_Specified;
end;

procedure LogMessage2.SetId(Index: Integer; const AInt64: Int64);
begin
  FId := AInt64;
  FId_Specified := True;
end;

function LogMessage2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure LogMessage2.SetLogMessageSubType(Index: Integer; const ALogMsgSubType: LogMsgSubType);
begin
  FLogMessageSubType := ALogMsgSubType;
  FLogMessageSubType_Specified := True;
end;

function LogMessage2.LogMessageSubType_Specified(Index: Integer): boolean;
begin
  Result := FLogMessageSubType_Specified;
end;

procedure LogMessage2.SetLogMessageType(Index: Integer; const ALogMsgType: LogMsgType);
begin
  FLogMessageType := ALogMsgType;
  FLogMessageType_Specified := True;
end;

function LogMessage2.LogMessageType_Specified(Index: Integer): boolean;
begin
  Result := FLogMessageType_Specified;
end;

procedure LogMessage2.SetMessage_(Index: Integer; const Astring: string);
begin
  FMessage_ := Astring;
  FMessage__Specified := True;
end;

function LogMessage2.Message__Specified(Index: Integer): boolean;
begin
  Result := FMessage__Specified;
end;

procedure LogMessage2.SetOperatorFullName(Index: Integer; const Astring: string);
begin
  FOperatorFullName := Astring;
  FOperatorFullName_Specified := True;
end;

function LogMessage2.OperatorFullName_Specified(Index: Integer): boolean;
begin
  Result := FOperatorFullName_Specified;
end;

procedure LogMessage2.SetOperatorID(Index: Integer; const Aguid: guid);
begin
  FOperatorID := Aguid;
  FOperatorID_Specified := True;
end;

function LogMessage2.OperatorID_Specified(Index: Integer): boolean;
begin
  Result := FOperatorID_Specified;
end;

procedure LogMessage2.SetOperatorLogin(Index: Integer; const Astring: string);
begin
  FOperatorLogin := Astring;
  FOperatorLogin_Specified := True;
end;

function LogMessage2.OperatorLogin_Specified(Index: Integer): boolean;
begin
  Result := FOperatorLogin_Specified;
end;

procedure LogMessage2.SetServerId(Index: Integer; const Aguid: guid);
begin
  FServerId := Aguid;
  FServerId_Specified := True;
end;

function LogMessage2.ServerId_Specified(Index: Integer): boolean;
begin
  Result := FServerId_Specified;
end;

procedure LogMessage2.SetServerName(Index: Integer; const Astring: string);
begin
  FServerName := Astring;
  FServerName_Specified := True;
end;

function LogMessage2.ServerName_Specified(Index: Integer): boolean;
begin
  Result := FServerName_Specified;
end;

procedure LogMessageSubtypeSlimInfo2.SetLogMessageSubtype(Index: Integer; const ALogMsgSubType: LogMsgSubType);
begin
  FLogMessageSubtype := ALogMsgSubType;
  FLogMessageSubtype_Specified := True;
end;

function LogMessageSubtypeSlimInfo2.LogMessageSubtype_Specified(Index: Integer): boolean;
begin
  Result := FLogMessageSubtype_Specified;
end;

procedure LogMessageSubtypeSlimInfo2.SetLogMesssageType(Index: Integer; const ALogMsgType: LogMsgType);
begin
  FLogMesssageType := ALogMsgType;
  FLogMesssageType_Specified := True;
end;

function LogMessageSubtypeSlimInfo2.LogMesssageType_Specified(Index: Integer): boolean;
begin
  Result := FLogMesssageType_Specified;
end;

procedure LogMessageSubtypeSlimInfo2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function LogMessageSubtypeSlimInfo2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure LogMessageSubtypeSlimInfo2.SetOrderNumber(Index: Integer; const AInteger: Integer);
begin
  FOrderNumber := AInteger;
  FOrderNumber_Specified := True;
end;

function LogMessageSubtypeSlimInfo2.OrderNumber_Specified(Index: Integer): boolean;
begin
  Result := FOrderNumber_Specified;
end;

procedure LogMessageSubtypeSlimInfo2.SetPublish(Index: Integer; const ABoolean: Boolean);
begin
  FPublish := ABoolean;
  FPublish_Specified := True;
end;

function LogMessageSubtypeSlimInfo2.Publish_Specified(Index: Integer): boolean;
begin
  Result := FPublish_Specified;
end;

destructor LogData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FMessages)-1 do
    System.SysUtils.FreeAndNil(FMessages[I]);
  System.SetLength(FMessages, 0);
  inherited Destroy;
end;

procedure LogData2.SetCount(Index: Integer; const AInt64: Int64);
begin
  FCount := AInt64;
  FCount_Specified := True;
end;

function LogData2.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure LogData2.SetMessages(Index: Integer; const AArrayOfLogMessage: ArrayOfLogMessage);
begin
  FMessages := AArrayOfLogMessage;
  FMessages_Specified := True;
end;

function LogData2.Messages_Specified(Index: Integer): boolean;
begin
  Result := FMessages_Specified;
end;

destructor DocumentForActionSaveInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FAnswerDate);
  System.SysUtils.FreeAndNil(FCreateDate);
  System.SysUtils.FreeAndNil(FSentDate);
  inherited Destroy;
end;

procedure DocumentForActionSaveInfo2.SetAnswerDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FAnswerDate := ATXSDateTime;
  FAnswerDate_Specified := True;
end;

function DocumentForActionSaveInfo2.AnswerDate_Specified(Index: Integer): boolean;
begin
  Result := FAnswerDate_Specified;
end;

procedure DocumentForActionSaveInfo2.SetAnswerNumber(Index: Integer; const Astring: string);
begin
  FAnswerNumber := Astring;
  FAnswerNumber_Specified := True;
end;

function DocumentForActionSaveInfo2.AnswerNumber_Specified(Index: Integer): boolean;
begin
  Result := FAnswerNumber_Specified;
end;

procedure DocumentForActionSaveInfo2.SetCreateDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreateDate := ATXSDateTime;
  FCreateDate_Specified := True;
end;

function DocumentForActionSaveInfo2.CreateDate_Specified(Index: Integer): boolean;
begin
  Result := FCreateDate_Specified;
end;

procedure DocumentForActionSaveInfo2.SetDecisionDocumentTypeID(Index: Integer; const Aguid: guid);
begin
  FDecisionDocumentTypeID := Aguid;
  FDecisionDocumentTypeID_Specified := True;
end;

function DocumentForActionSaveInfo2.DecisionDocumentTypeID_Specified(Index: Integer): boolean;
begin
  Result := FDecisionDocumentTypeID_Specified;
end;

procedure DocumentForActionSaveInfo2.SetDocumentNumber(Index: Integer; const Astring: string);
begin
  FDocumentNumber := Astring;
  FDocumentNumber_Specified := True;
end;

function DocumentForActionSaveInfo2.DocumentNumber_Specified(Index: Integer): boolean;
begin
  Result := FDocumentNumber_Specified;
end;

procedure DocumentForActionSaveInfo2.SetExtraFinalPunishmentID(Index: Integer; const Aguid: guid);
begin
  FExtraFinalPunishmentID := Aguid;
  FExtraFinalPunishmentID_Specified := True;
end;

function DocumentForActionSaveInfo2.ExtraFinalPunishmentID_Specified(Index: Integer): boolean;
begin
  Result := FExtraFinalPunishmentID_Specified;
end;

procedure DocumentForActionSaveInfo2.SetFinalPunishmentID(Index: Integer; const Aguid: guid);
begin
  FFinalPunishmentID := Aguid;
  FFinalPunishmentID_Specified := True;
end;

function DocumentForActionSaveInfo2.FinalPunishmentID_Specified(Index: Integer): boolean;
begin
  Result := FFinalPunishmentID_Specified;
end;

procedure DocumentForActionSaveInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function DocumentForActionSaveInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure DocumentForActionSaveInfo2.SetSentDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FSentDate := ATXSDateTime;
  FSentDate_Specified := True;
end;

function DocumentForActionSaveInfo2.SentDate_Specified(Index: Integer): boolean;
begin
  Result := FSentDate_Specified;
end;

procedure DocumentForActionSaveInfo2.SetWhoTransferredDecisionDocumentID(Index: Integer; const Aguid: guid);
begin
  FWhoTransferredDecisionDocumentID := Aguid;
  FWhoTransferredDecisionDocumentID_Specified := True;
end;

function DocumentForActionSaveInfo2.WhoTransferredDecisionDocumentID_Specified(Index: Integer): boolean;
begin
  Result := FWhoTransferredDecisionDocumentID_Specified;
end;

procedure DocumentFullForActionInfo2.SetDocumentSentName(Index: Integer; const Astring: string);
begin
  FDocumentSentName := Astring;
  FDocumentSentName_Specified := True;
end;

function DocumentFullForActionInfo2.DocumentSentName_Specified(Index: Integer): boolean;
begin
  Result := FDocumentSentName_Specified;
end;

procedure DocumentFullForActionInfo2.SetDocumentTypeName(Index: Integer; const Astring: string);
begin
  FDocumentTypeName := Astring;
  FDocumentTypeName_Specified := True;
end;

function DocumentFullForActionInfo2.DocumentTypeName_Specified(Index: Integer): boolean;
begin
  Result := FDocumentTypeName_Specified;
end;

procedure DocumentFullForActionInfo2.SetEmployeeID(Index: Integer; const Aguid: guid);
begin
  FEmployeeID := Aguid;
  FEmployeeID_Specified := True;
end;

function DocumentFullForActionInfo2.EmployeeID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeID_Specified;
end;

procedure DocumentFullForActionInfo2.SetExtraFinalPunishmentName(Index: Integer; const Astring: string);
begin
  FExtraFinalPunishmentName := Astring;
  FExtraFinalPunishmentName_Specified := True;
end;

function DocumentFullForActionInfo2.ExtraFinalPunishmentName_Specified(Index: Integer): boolean;
begin
  Result := FExtraFinalPunishmentName_Specified;
end;

procedure DocumentFullForActionInfo2.SetFinalPunishmentName(Index: Integer; const Astring: string);
begin
  FFinalPunishmentName := Astring;
  FFinalPunishmentName_Specified := True;
end;

function DocumentFullForActionInfo2.FinalPunishmentName_Specified(Index: Integer): boolean;
begin
  Result := FFinalPunishmentName_Specified;
end;

procedure DocumentSaveInfo2.SetDocumentNumber(Index: Integer; const Astring: string);
begin
  FDocumentNumber := Astring;
  FDocumentNumber_Specified := True;
end;

function DocumentSaveInfo2.DocumentNumber_Specified(Index: Integer): boolean;
begin
  Result := FDocumentNumber_Specified;
end;

procedure DocumentSaveInfo2.SetDocumentTypeID(Index: Integer; const Aguid: guid);
begin
  FDocumentTypeID := Aguid;
  FDocumentTypeID_Specified := True;
end;

function DocumentSaveInfo2.DocumentTypeID_Specified(Index: Integer): boolean;
begin
  Result := FDocumentTypeID_Specified;
end;

procedure DocumentSaveInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function DocumentSaveInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure DocumentSaveInfo2.SetNumberAndDateOfReturn(Index: Integer; const Astring: string);
begin
  FNumberAndDateOfReturn := Astring;
  FNumberAndDateOfReturn_Specified := True;
end;

function DocumentSaveInfo2.NumberAndDateOfReturn_Specified(Index: Integer): boolean;
begin
  Result := FNumberAndDateOfReturn_Specified;
end;

procedure DocumentSaveInfo2.SetWhoTransferedDocumentID(Index: Integer; const Aguid: guid);
begin
  FWhoTransferedDocumentID := Aguid;
  FWhoTransferedDocumentID_Specified := True;
end;

function DocumentSaveInfo2.WhoTransferedDocumentID_Specified(Index: Integer): boolean;
begin
  Result := FWhoTransferedDocumentID_Specified;
end;

procedure DocumentFullInfo2.SetDecisionDocumentTypeName(Index: Integer; const Astring: string);
begin
  FDecisionDocumentTypeName := Astring;
  FDecisionDocumentTypeName_Specified := True;
end;

function DocumentFullInfo2.DecisionDocumentTypeName_Specified(Index: Integer): boolean;
begin
  Result := FDecisionDocumentTypeName_Specified;
end;

procedure DocumentFullInfo2.SetEmployeeID(Index: Integer; const Aguid: guid);
begin
  FEmployeeID := Aguid;
  FEmployeeID_Specified := True;
end;

function DocumentFullInfo2.EmployeeID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeID_Specified;
end;

procedure DocumentFullInfo2.SetWhoTransferredDecisionDocumentName(Index: Integer; const Astring: string);
begin
  FWhoTransferredDecisionDocumentName := Astring;
  FWhoTransferredDecisionDocumentName_Specified := True;
end;

function DocumentFullInfo2.WhoTransferredDecisionDocumentName_Specified(Index: Integer): boolean;
begin
  Result := FWhoTransferredDecisionDocumentName_Specified;
end;

destructor ViolatorSaveInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDocumentForActionSaveInfo)-1 do
    System.SysUtils.FreeAndNil(FDocumentForActionSaveInfo[I]);
  System.SetLength(FDocumentForActionSaveInfo, 0);
  for I := 0 to System.Length(FDocumentSaveInfo)-1 do
    System.SysUtils.FreeAndNil(FDocumentSaveInfo[I]);
  System.SetLength(FDocumentSaveInfo, 0);
  for I := 0 to System.Length(FViolationsSaveInfo)-1 do
    System.SysUtils.FreeAndNil(FViolationsSaveInfo[I]);
  System.SetLength(FViolationsSaveInfo, 0);
  inherited Destroy;
end;

procedure ViolatorSaveInfo2.SetActNumber(Index: Integer; const Astring: string);
begin
  FActNumber := Astring;
  FActNumber_Specified := True;
end;

function ViolatorSaveInfo2.ActNumber_Specified(Index: Integer): boolean;
begin
  Result := FActNumber_Specified;
end;

procedure ViolatorSaveInfo2.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function ViolatorSaveInfo2.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

procedure ViolatorSaveInfo2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ViolatorSaveInfo2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ViolatorSaveInfo2.SetDetentionID(Index: Integer; const Aguid: guid);
begin
  FDetentionID := Aguid;
  FDetentionID_Specified := True;
end;

function ViolatorSaveInfo2.DetentionID_Specified(Index: Integer): boolean;
begin
  Result := FDetentionID_Specified;
end;

procedure ViolatorSaveInfo2.SetDocumentForActionSaveInfo(Index: Integer; const AArrayOfDocumentForActionSaveInfo: ArrayOfDocumentForActionSaveInfo);
begin
  FDocumentForActionSaveInfo := AArrayOfDocumentForActionSaveInfo;
  FDocumentForActionSaveInfo_Specified := True;
end;

function ViolatorSaveInfo2.DocumentForActionSaveInfo_Specified(Index: Integer): boolean;
begin
  Result := FDocumentForActionSaveInfo_Specified;
end;

procedure ViolatorSaveInfo2.SetDocumentSaveInfo(Index: Integer; const AArrayOfDocumentSaveInfo: ArrayOfDocumentSaveInfo);
begin
  FDocumentSaveInfo := AArrayOfDocumentSaveInfo;
  FDocumentSaveInfo_Specified := True;
end;

function ViolatorSaveInfo2.DocumentSaveInfo_Specified(Index: Integer): boolean;
begin
  Result := FDocumentSaveInfo_Specified;
end;

procedure ViolatorSaveInfo2.SetEmployeeID(Index: Integer; const Aguid: guid);
begin
  FEmployeeID := Aguid;
  FEmployeeID_Specified := True;
end;

function ViolatorSaveInfo2.EmployeeID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeID_Specified;
end;

procedure ViolatorSaveInfo2.SetOrganizationID(Index: Integer; const Aguid: guid);
begin
  FOrganizationID := Aguid;
  FOrganizationID_Specified := True;
end;

function ViolatorSaveInfo2.OrganizationID_Specified(Index: Integer): boolean;
begin
  Result := FOrganizationID_Specified;
end;

procedure ViolatorSaveInfo2.SetPositionID(Index: Integer; const Aguid: guid);
begin
  FPositionID := Aguid;
  FPositionID_Specified := True;
end;

function ViolatorSaveInfo2.PositionID_Specified(Index: Integer): boolean;
begin
  Result := FPositionID_Specified;
end;

procedure ViolatorSaveInfo2.SetPunishmentID(Index: Integer; const Aguid: guid);
begin
  FPunishmentID := Aguid;
  FPunishmentID_Specified := True;
end;

function ViolatorSaveInfo2.PunishmentID_Specified(Index: Integer): boolean;
begin
  Result := FPunishmentID_Specified;
end;

procedure ViolatorSaveInfo2.SetStatusID(Index: Integer; const Aguid: guid);
begin
  FStatusID := Aguid;
  FStatusID_Specified := True;
end;

function ViolatorSaveInfo2.StatusID_Specified(Index: Integer): boolean;
begin
  Result := FStatusID_Specified;
end;

procedure ViolatorSaveInfo2.SetSubdivisionID(Index: Integer; const Aguid: guid);
begin
  FSubdivisionID := Aguid;
  FSubdivisionID_Specified := True;
end;

function ViolatorSaveInfo2.SubdivisionID_Specified(Index: Integer): boolean;
begin
  Result := FSubdivisionID_Specified;
end;

procedure ViolatorSaveInfo2.SetTabNumber(Index: Integer; const AInteger: Integer);
begin
  FTabNumber := AInteger;
  FTabNumber_Specified := True;
end;

function ViolatorSaveInfo2.TabNumber_Specified(Index: Integer): boolean;
begin
  Result := FTabNumber_Specified;
end;

procedure ViolatorSaveInfo2.SetViolationsSaveInfo(Index: Integer; const AArrayOfViolationSaveInfo: ArrayOfViolationSaveInfo);
begin
  FViolationsSaveInfo := AArrayOfViolationSaveInfo;
  FViolationsSaveInfo_Specified := True;
end;

function ViolatorSaveInfo2.ViolationsSaveInfo_Specified(Index: Integer): boolean;
begin
  Result := FViolationsSaveInfo_Specified;
end;

destructor ViolatorFullInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDocumentsData)-1 do
    System.SysUtils.FreeAndNil(FDocumentsData[I]);
  System.SetLength(FDocumentsData, 0);
  for I := 0 to System.Length(FDocumentsForActionData)-1 do
    System.SysUtils.FreeAndNil(FDocumentsForActionData[I]);
  System.SetLength(FDocumentsForActionData, 0);
  for I := 0 to System.Length(FViolationsData)-1 do
    System.SysUtils.FreeAndNil(FViolationsData[I]);
  System.SetLength(FViolationsData, 0);
  System.SysUtils.FreeAndNil(FAcsEmployeeDocumentsData);
  System.SysUtils.FreeAndNil(FAcsEmployeeFull);
  inherited Destroy;
end;

procedure ViolatorFullInfo2.SetAcsEmployeeDocumentsData(Index: Integer; const AAcsEmployeeDocumentsData2: AcsEmployeeDocumentsData2);
begin
  FAcsEmployeeDocumentsData := AAcsEmployeeDocumentsData2;
  FAcsEmployeeDocumentsData_Specified := True;
end;

function ViolatorFullInfo2.AcsEmployeeDocumentsData_Specified(Index: Integer): boolean;
begin
  Result := FAcsEmployeeDocumentsData_Specified;
end;

procedure ViolatorFullInfo2.SetAcsEmployeeFull(Index: Integer; const AAcsEmployeeFull2: AcsEmployeeFull2);
begin
  FAcsEmployeeFull := AAcsEmployeeFull2;
  FAcsEmployeeFull_Specified := True;
end;

function ViolatorFullInfo2.AcsEmployeeFull_Specified(Index: Integer): boolean;
begin
  Result := FAcsEmployeeFull_Specified;
end;

procedure ViolatorFullInfo2.SetDetentionName(Index: Integer; const Astring: string);
begin
  FDetentionName := Astring;
  FDetentionName_Specified := True;
end;

function ViolatorFullInfo2.DetentionName_Specified(Index: Integer): boolean;
begin
  Result := FDetentionName_Specified;
end;

procedure ViolatorFullInfo2.SetDocumentsData(Index: Integer; const AArrayOfDocumentFullInfo: ArrayOfDocumentFullInfo);
begin
  FDocumentsData := AArrayOfDocumentFullInfo;
  FDocumentsData_Specified := True;
end;

function ViolatorFullInfo2.DocumentsData_Specified(Index: Integer): boolean;
begin
  Result := FDocumentsData_Specified;
end;

procedure ViolatorFullInfo2.SetDocumentsForActionData(Index: Integer; const AArrayOfDocumentFullForActionInfo: ArrayOfDocumentFullForActionInfo);
begin
  FDocumentsForActionData := AArrayOfDocumentFullForActionInfo;
  FDocumentsForActionData_Specified := True;
end;

function ViolatorFullInfo2.DocumentsForActionData_Specified(Index: Integer): boolean;
begin
  Result := FDocumentsForActionData_Specified;
end;

procedure ViolatorFullInfo2.SetOrganizationName(Index: Integer; const Astring: string);
begin
  FOrganizationName := Astring;
  FOrganizationName_Specified := True;
end;

function ViolatorFullInfo2.OrganizationName_Specified(Index: Integer): boolean;
begin
  Result := FOrganizationName_Specified;
end;

procedure ViolatorFullInfo2.SetPositionName(Index: Integer; const Astring: string);
begin
  FPositionName := Astring;
  FPositionName_Specified := True;
end;

function ViolatorFullInfo2.PositionName_Specified(Index: Integer): boolean;
begin
  Result := FPositionName_Specified;
end;

procedure ViolatorFullInfo2.SetPunishmentName(Index: Integer; const Astring: string);
begin
  FPunishmentName := Astring;
  FPunishmentName_Specified := True;
end;

function ViolatorFullInfo2.PunishmentName_Specified(Index: Integer): boolean;
begin
  Result := FPunishmentName_Specified;
end;

procedure ViolatorFullInfo2.SetStatusName(Index: Integer; const Astring: string);
begin
  FStatusName := Astring;
  FStatusName_Specified := True;
end;

function ViolatorFullInfo2.StatusName_Specified(Index: Integer): boolean;
begin
  Result := FStatusName_Specified;
end;

procedure ViolatorFullInfo2.SetSubdivisionName(Index: Integer; const Astring: string);
begin
  FSubdivisionName := Astring;
  FSubdivisionName_Specified := True;
end;

function ViolatorFullInfo2.SubdivisionName_Specified(Index: Integer): boolean;
begin
  Result := FSubdivisionName_Specified;
end;

procedure ViolatorFullInfo2.SetViolationsData(Index: Integer; const AArrayOfViolationFullInfo: ArrayOfViolationFullInfo);
begin
  FViolationsData := AArrayOfViolationFullInfo;
  FViolationsData_Specified := True;
end;

function ViolatorFullInfo2.ViolationsData_Specified(Index: Integer): boolean;
begin
  Result := FViolationsData_Specified;
end;

procedure ViolationSaveInfo2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ViolationSaveInfo2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ViolationSaveInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function ViolationSaveInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure ViolationSaveInfo2.SetNatureID(Index: Integer; const Aguid: guid);
begin
  FNatureID := Aguid;
  FNatureID_Specified := True;
end;

function ViolationSaveInfo2.NatureID_Specified(Index: Integer): boolean;
begin
  Result := FNatureID_Specified;
end;

procedure ViolationSaveInfo2.SetTheftMethodID(Index: Integer; const Aguid: guid);
begin
  FTheftMethodID := Aguid;
  FTheftMethodID_Specified := True;
end;

function ViolationSaveInfo2.TheftMethodID_Specified(Index: Integer): boolean;
begin
  Result := FTheftMethodID_Specified;
end;

procedure ViolationSaveInfo2.SetTypeID(Index: Integer; const Aguid: guid);
begin
  FTypeID := Aguid;
  FTypeID_Specified := True;
end;

function ViolationSaveInfo2.TypeID_Specified(Index: Integer): boolean;
begin
  Result := FTypeID_Specified;
end;

procedure ViolationFullInfo2.SetEmployeeID(Index: Integer; const Aguid: guid);
begin
  FEmployeeID := Aguid;
  FEmployeeID_Specified := True;
end;

function ViolationFullInfo2.EmployeeID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeID_Specified;
end;

procedure ViolationFullInfo2.SetNatureName(Index: Integer; const Astring: string);
begin
  FNatureName := Astring;
  FNatureName_Specified := True;
end;

function ViolationFullInfo2.NatureName_Specified(Index: Integer): boolean;
begin
  Result := FNatureName_Specified;
end;

procedure ViolationFullInfo2.SetTheftMethodName(Index: Integer; const Astring: string);
begin
  FTheftMethodName := Astring;
  FTheftMethodName_Specified := True;
end;

function ViolationFullInfo2.TheftMethodName_Specified(Index: Integer): boolean;
begin
  Result := FTheftMethodName_Specified;
end;

procedure ViolationFullInfo2.SetTypeName(Index: Integer; const Astring: string);
begin
  FTypeName := Astring;
  FTypeName_Specified := True;
end;

function ViolationFullInfo2.TypeName_Specified(Index: Integer): boolean;
begin
  Result := FTypeName_Specified;
end;

destructor TangiblesSaveInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FPrice);
  inherited Destroy;
end;

procedure TangiblesSaveInfo2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function TangiblesSaveInfo2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure TangiblesSaveInfo2.SetMeasureID(Index: Integer; const Aguid: guid);
begin
  FMeasureID := Aguid;
  FMeasureID_Specified := True;
end;

function TangiblesSaveInfo2.MeasureID_Specified(Index: Integer): boolean;
begin
  Result := FMeasureID_Specified;
end;

procedure TangiblesSaveInfo2.SetNumber(Index: Integer; const AInteger: Integer);
begin
  FNumber := AInteger;
  FNumber_Specified := True;
end;

function TangiblesSaveInfo2.Number_Specified(Index: Integer): boolean;
begin
  Result := FNumber_Specified;
end;

procedure TangiblesSaveInfo2.SetNumberAndDateOfReturn(Index: Integer; const Astring: string);
begin
  FNumberAndDateOfReturn := Astring;
  FNumberAndDateOfReturn_Specified := True;
end;

function TangiblesSaveInfo2.NumberAndDateOfReturn_Specified(Index: Integer): boolean;
begin
  Result := FNumberAndDateOfReturn_Specified;
end;

procedure TangiblesSaveInfo2.SetPrice(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FPrice := ATXSDecimal;
  FPrice_Specified := True;
end;

function TangiblesSaveInfo2.Price_Specified(Index: Integer): boolean;
begin
  Result := FPrice_Specified;
end;

procedure TangiblesSaveInfo2.SetTangiblesID(Index: Integer; const Aguid: guid);
begin
  FTangiblesID := Aguid;
  FTangiblesID_Specified := True;
end;

function TangiblesSaveInfo2.TangiblesID_Specified(Index: Integer): boolean;
begin
  Result := FTangiblesID_Specified;
end;

procedure TangiblesSaveInfo2.SetWhoTransferedID(Index: Integer; const Aguid: guid);
begin
  FWhoTransferedID := Aguid;
  FWhoTransferedID_Specified := True;
end;

function TangiblesSaveInfo2.WhoTransferedID_Specified(Index: Integer): boolean;
begin
  Result := FWhoTransferedID_Specified;
end;

procedure TangiblesFullInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function TangiblesFullInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure TangiblesFullInfo2.SetMeasureName(Index: Integer; const Astring: string);
begin
  FMeasureName := Astring;
  FMeasureName_Specified := True;
end;

function TangiblesFullInfo2.MeasureName_Specified(Index: Integer): boolean;
begin
  Result := FMeasureName_Specified;
end;

procedure TangiblesFullInfo2.SetTangiblesName(Index: Integer; const Astring: string);
begin
  FTangiblesName := Astring;
  FTangiblesName_Specified := True;
end;

function TangiblesFullInfo2.TangiblesName_Specified(Index: Integer): boolean;
begin
  Result := FTangiblesName_Specified;
end;

procedure TangiblesFullInfo2.SetWhoTransferedName(Index: Integer; const Astring: string);
begin
  FWhoTransferedName := Astring;
  FWhoTransferedName_Specified := True;
end;

function TangiblesFullInfo2.WhoTransferedName_Specified(Index: Integer): boolean;
begin
  Result := FWhoTransferedName_Specified;
end;

destructor DictionaryElementsInfoData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FElements)-1 do
    System.SysUtils.FreeAndNil(FElements[I]);
  System.SetLength(FElements, 0);
  inherited Destroy;
end;

procedure DictionaryElementsInfoData2.SetCount(Index: Integer; const AInt64: Int64);
begin
  FCount := AInt64;
  FCount_Specified := True;
end;

function DictionaryElementsInfoData2.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure DictionaryElementsInfoData2.SetElements(Index: Integer; const AArrayOfDictionaryElementInfo: ArrayOfDictionaryElementInfo);
begin
  FElements := AArrayOfDictionaryElementInfo;
  FElements_Specified := True;
end;

function DictionaryElementsInfoData2.Elements_Specified(Index: Integer): boolean;
begin
  Result := FElements_Specified;
end;

destructor IncidentsFilter2.Destroy;
begin
  System.SysUtils.FreeAndNil(FBeginDate);
  System.SysUtils.FreeAndNil(FEndDate);
  System.SysUtils.FreeAndNil(FIncidentsMegaFilter);
  inherited Destroy;
end;

procedure IncidentsFilter2.SetBeginDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FBeginDate := ATXSDateTime;
  FBeginDate_Specified := True;
end;

function IncidentsFilter2.BeginDate_Specified(Index: Integer): boolean;
begin
  Result := FBeginDate_Specified;
end;

procedure IncidentsFilter2.SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndDate := ATXSDateTime;
  FEndDate_Specified := True;
end;

function IncidentsFilter2.EndDate_Specified(Index: Integer): boolean;
begin
  Result := FEndDate_Specified;
end;

procedure IncidentsFilter2.SetIncidentsMegaFilter(Index: Integer; const AIncidentsMegaFilter2: IncidentsMegaFilter2);
begin
  FIncidentsMegaFilter := AIncidentsMegaFilter2;
  FIncidentsMegaFilter_Specified := True;
end;

function IncidentsFilter2.IncidentsMegaFilter_Specified(Index: Integer): boolean;
begin
  Result := FIncidentsMegaFilter_Specified;
end;

procedure IncidentsFilter2.SetIsCurrentDate(Index: Integer; const ABoolean: Boolean);
begin
  FIsCurrentDate := ABoolean;
  FIsCurrentDate_Specified := True;
end;

function IncidentsFilter2.IsCurrentDate_Specified(Index: Integer): boolean;
begin
  Result := FIsCurrentDate_Specified;
end;

procedure IncidentsFilter2.SetIsCurrentEmployee(Index: Integer; const ABoolean: Boolean);
begin
  FIsCurrentEmployee := ABoolean;
  FIsCurrentEmployee_Specified := True;
end;

function IncidentsFilter2.IsCurrentEmployee_Specified(Index: Integer): boolean;
begin
  Result := FIsCurrentEmployee_Specified;
end;

procedure IncidentsFilter2.SetIsEnableFilter(Index: Integer; const ABoolean: Boolean);
begin
  FIsEnableFilter := ABoolean;
  FIsEnableFilter_Specified := True;
end;

function IncidentsFilter2.IsEnableFilter_Specified(Index: Integer): boolean;
begin
  Result := FIsEnableFilter_Specified;
end;

procedure IncidentsFilter2.SetUser(Index: Integer; const Aguid: guid);
begin
  FUser := Aguid;
  FUser_Specified := True;
end;

function IncidentsFilter2.User_Specified(Index: Integer): boolean;
begin
  Result := FUser_Specified;
end;

procedure OrganizationDictionaryElementInfo2.SetOrganizationTypeID(Index: Integer; const Aguid: guid);
begin
  FOrganizationTypeID := Aguid;
  FOrganizationTypeID_Specified := True;
end;

function OrganizationDictionaryElementInfo2.OrganizationTypeID_Specified(Index: Integer): boolean;
begin
  Result := FOrganizationTypeID_Specified;
end;

procedure OrganizationDictionaryElementInfo2.SetOrganizationTypeName(Index: Integer; const Astring: string);
begin
  FOrganizationTypeName := Astring;
  FOrganizationTypeName_Specified := True;
end;

function OrganizationDictionaryElementInfo2.OrganizationTypeName_Specified(Index: Integer): boolean;
begin
  Result := FOrganizationTypeName_Specified;
end;

procedure SecurityGroupDictionaryElementSaveInfo2.SetParentID(Index: Integer; const Aguid: guid);
begin
  FParentID := Aguid;
  FParentID_Specified := True;
end;

function SecurityGroupDictionaryElementSaveInfo2.ParentID_Specified(Index: Integer): boolean;
begin
  Result := FParentID_Specified;
end;

procedure OrganizationElementSaveInfo2.SetOrganizationTypeID(Index: Integer; const Aguid: guid);
begin
  FOrganizationTypeID := Aguid;
  FOrganizationTypeID_Specified := True;
end;

function OrganizationElementSaveInfo2.OrganizationTypeID_Specified(Index: Integer): boolean;
begin
  Result := FOrganizationTypeID_Specified;
end;

procedure SecurityGroupDictionaryElementInfo2.SetParentID(Index: Integer; const Aguid: guid);
begin
  FParentID := Aguid;
  FParentID_Specified := True;
end;

function SecurityGroupDictionaryElementInfo2.ParentID_Specified(Index: Integer): boolean;
begin
  Result := FParentID_Specified;
end;

destructor IncidentSaveInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FMembersSaveInfo)-1 do
    System.SysUtils.FreeAndNil(FMembersSaveInfo[I]);
  System.SetLength(FMembersSaveInfo, 0);
  for I := 0 to System.Length(FTangiblesSaveInfo)-1 do
    System.SysUtils.FreeAndNil(FTangiblesSaveInfo[I]);
  System.SetLength(FTangiblesSaveInfo, 0);
  for I := 0 to System.Length(FViolatorSaveInfo)-1 do
    System.SysUtils.FreeAndNil(FViolatorSaveInfo[I]);
  System.SetLength(FViolatorSaveInfo, 0);
  System.SysUtils.FreeAndNil(FDate);
  System.SysUtils.FreeAndNil(FTime);
  inherited Destroy;
end;

procedure IncidentSaveInfo2.SetDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDate := ATXSDateTime;
  FDate_Specified := True;
end;

function IncidentSaveInfo2.Date_Specified(Index: Integer): boolean;
begin
  Result := FDate_Specified;
end;

procedure IncidentSaveInfo2.SetDocumentNumber(Index: Integer; const Astring: string);
begin
  FDocumentNumber := Astring;
  FDocumentNumber_Specified := True;
end;

function IncidentSaveInfo2.DocumentNumber_Specified(Index: Integer): boolean;
begin
  Result := FDocumentNumber_Specified;
end;

procedure IncidentSaveInfo2.SetDocumentTypeID(Index: Integer; const Aguid: guid);
begin
  FDocumentTypeID := Aguid;
  FDocumentTypeID_Specified := True;
end;

function IncidentSaveInfo2.DocumentTypeID_Specified(Index: Integer): boolean;
begin
  Result := FDocumentTypeID_Specified;
end;

procedure IncidentSaveInfo2.SetEmployeeID(Index: Integer; const Aguid: guid);
begin
  FEmployeeID := Aguid;
  FEmployeeID_Specified := True;
end;

function IncidentSaveInfo2.EmployeeID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeID_Specified;
end;

procedure IncidentSaveInfo2.SetIsIncludeToReport(Index: Integer; const ABoolean: Boolean);
begin
  FIsIncludeToReport := ABoolean;
  FIsIncludeToReport_Specified := True;
end;

function IncidentSaveInfo2.IsIncludeToReport_Specified(Index: Integer): boolean;
begin
  Result := FIsIncludeToReport_Specified;
end;

procedure IncidentSaveInfo2.SetLocationClarificationID(Index: Integer; const Aguid: guid);
begin
  FLocationClarificationID := Aguid;
  FLocationClarificationID_Specified := True;
end;

function IncidentSaveInfo2.LocationClarificationID_Specified(Index: Integer): boolean;
begin
  Result := FLocationClarificationID_Specified;
end;

procedure IncidentSaveInfo2.SetLocationID(Index: Integer; const Aguid: guid);
begin
  FLocationID := Aguid;
  FLocationID_Specified := True;
end;

function IncidentSaveInfo2.LocationID_Specified(Index: Integer): boolean;
begin
  Result := FLocationID_Specified;
end;

procedure IncidentSaveInfo2.SetMembersSaveInfo(Index: Integer; const AArrayOfViolatorSaveInfo: ArrayOfViolatorSaveInfo);
begin
  FMembersSaveInfo := AArrayOfViolatorSaveInfo;
  FMembersSaveInfo_Specified := True;
end;

function IncidentSaveInfo2.MembersSaveInfo_Specified(Index: Integer): boolean;
begin
  Result := FMembersSaveInfo_Specified;
end;

procedure IncidentSaveInfo2.SetSecurityGroupID(Index: Integer; const Aguid: guid);
begin
  FSecurityGroupID := Aguid;
  FSecurityGroupID_Specified := True;
end;

function IncidentSaveInfo2.SecurityGroupID_Specified(Index: Integer): boolean;
begin
  Result := FSecurityGroupID_Specified;
end;

procedure IncidentSaveInfo2.SetSignificanceID(Index: Integer; const Aguid: guid);
begin
  FSignificanceID := Aguid;
  FSignificanceID_Specified := True;
end;

function IncidentSaveInfo2.SignificanceID_Specified(Index: Integer): boolean;
begin
  Result := FSignificanceID_Specified;
end;

procedure IncidentSaveInfo2.SetTangiblesSaveInfo(Index: Integer; const AArrayOfTangiblesSaveInfo: ArrayOfTangiblesSaveInfo);
begin
  FTangiblesSaveInfo := AArrayOfTangiblesSaveInfo;
  FTangiblesSaveInfo_Specified := True;
end;

function IncidentSaveInfo2.TangiblesSaveInfo_Specified(Index: Integer): boolean;
begin
  Result := FTangiblesSaveInfo_Specified;
end;

procedure IncidentSaveInfo2.SetTime(Index: Integer; const Aduration: duration);
begin
  FTime := Aduration;
  FTime_Specified := True;
end;

function IncidentSaveInfo2.Time_Specified(Index: Integer): boolean;
begin
  Result := FTime_Specified;
end;

procedure IncidentSaveInfo2.SetUserID(Index: Integer; const Aguid: guid);
begin
  FUserID := Aguid;
  FUserID_Specified := True;
end;

function IncidentSaveInfo2.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

procedure IncidentSaveInfo2.SetVehicleComment(Index: Integer; const Astring: string);
begin
  FVehicleComment := Astring;
  FVehicleComment_Specified := True;
end;

function IncidentSaveInfo2.VehicleComment_Specified(Index: Integer): boolean;
begin
  Result := FVehicleComment_Specified;
end;

procedure IncidentSaveInfo2.SetVehicleID(Index: Integer; const Aguid: guid);
begin
  FVehicleID := Aguid;
  FVehicleID_Specified := True;
end;

function IncidentSaveInfo2.VehicleID_Specified(Index: Integer): boolean;
begin
  Result := FVehicleID_Specified;
end;

procedure IncidentSaveInfo2.SetVehicleOrganizationID(Index: Integer; const Aguid: guid);
begin
  FVehicleOrganizationID := Aguid;
  FVehicleOrganizationID_Specified := True;
end;

function IncidentSaveInfo2.VehicleOrganizationID_Specified(Index: Integer): boolean;
begin
  Result := FVehicleOrganizationID_Specified;
end;

procedure IncidentSaveInfo2.SetViolationDescription(Index: Integer; const Astring: string);
begin
  FViolationDescription := Astring;
  FViolationDescription_Specified := True;
end;

function IncidentSaveInfo2.ViolationDescription_Specified(Index: Integer): boolean;
begin
  Result := FViolationDescription_Specified;
end;

procedure IncidentSaveInfo2.SetViolationNatureID(Index: Integer; const Aguid: guid);
begin
  FViolationNatureID := Aguid;
  FViolationNatureID_Specified := True;
end;

function IncidentSaveInfo2.ViolationNatureID_Specified(Index: Integer): boolean;
begin
  Result := FViolationNatureID_Specified;
end;

procedure IncidentSaveInfo2.SetViolationTheftMethodID(Index: Integer; const Aguid: guid);
begin
  FViolationTheftMethodID := Aguid;
  FViolationTheftMethodID_Specified := True;
end;

function IncidentSaveInfo2.ViolationTheftMethodID_Specified(Index: Integer): boolean;
begin
  Result := FViolationTheftMethodID_Specified;
end;

procedure IncidentSaveInfo2.SetViolationTypeID(Index: Integer; const Aguid: guid);
begin
  FViolationTypeID := Aguid;
  FViolationTypeID_Specified := True;
end;

function IncidentSaveInfo2.ViolationTypeID_Specified(Index: Integer): boolean;
begin
  Result := FViolationTypeID_Specified;
end;

procedure IncidentSaveInfo2.SetViolatorSaveInfo(Index: Integer; const AArrayOfViolatorSaveInfo: ArrayOfViolatorSaveInfo);
begin
  FViolatorSaveInfo := AArrayOfViolatorSaveInfo;
  FViolatorSaveInfo_Specified := True;
end;

function IncidentSaveInfo2.ViolatorSaveInfo_Specified(Index: Integer): boolean;
begin
  Result := FViolatorSaveInfo_Specified;
end;

destructor IncidentElementFullInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FMembers)-1 do
    System.SysUtils.FreeAndNil(FMembers[I]);
  System.SetLength(FMembers, 0);
  for I := 0 to System.Length(FTangibles)-1 do
    System.SysUtils.FreeAndNil(FTangibles[I]);
  System.SetLength(FTangibles, 0);
  for I := 0 to System.Length(FViolators)-1 do
    System.SysUtils.FreeAndNil(FViolators[I]);
  System.SetLength(FViolators, 0);
  System.SysUtils.FreeAndNil(FAcsEmployeeDocumentsData);
  System.SysUtils.FreeAndNil(FAcsEmployeeFull);
  System.SysUtils.FreeAndNil(FVehicle);
  inherited Destroy;
end;

procedure IncidentElementFullInfo2.SetAcsEmployeeDocumentsData(Index: Integer; const AAcsEmployeeDocumentsData2: AcsEmployeeDocumentsData2);
begin
  FAcsEmployeeDocumentsData := AAcsEmployeeDocumentsData2;
  FAcsEmployeeDocumentsData_Specified := True;
end;

function IncidentElementFullInfo2.AcsEmployeeDocumentsData_Specified(Index: Integer): boolean;
begin
  Result := FAcsEmployeeDocumentsData_Specified;
end;

procedure IncidentElementFullInfo2.SetAcsEmployeeFull(Index: Integer; const AAcsEmployeeFull2: AcsEmployeeFull2);
begin
  FAcsEmployeeFull := AAcsEmployeeFull2;
  FAcsEmployeeFull_Specified := True;
end;

function IncidentElementFullInfo2.AcsEmployeeFull_Specified(Index: Integer): boolean;
begin
  Result := FAcsEmployeeFull_Specified;
end;

procedure IncidentElementFullInfo2.SetDocumentTypeName(Index: Integer; const Astring: string);
begin
  FDocumentTypeName := Astring;
  FDocumentTypeName_Specified := True;
end;

function IncidentElementFullInfo2.DocumentTypeName_Specified(Index: Integer): boolean;
begin
  Result := FDocumentTypeName_Specified;
end;

procedure IncidentElementFullInfo2.SetEmployeeFullName(Index: Integer; const Astring: string);
begin
  FEmployeeFullName := Astring;
  FEmployeeFullName_Specified := True;
end;

function IncidentElementFullInfo2.EmployeeFullName_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeFullName_Specified;
end;

procedure IncidentElementFullInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function IncidentElementFullInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure IncidentElementFullInfo2.SetLocationClarificationName(Index: Integer; const Astring: string);
begin
  FLocationClarificationName := Astring;
  FLocationClarificationName_Specified := True;
end;

function IncidentElementFullInfo2.LocationClarificationName_Specified(Index: Integer): boolean;
begin
  Result := FLocationClarificationName_Specified;
end;

procedure IncidentElementFullInfo2.SetLocationName(Index: Integer; const Astring: string);
begin
  FLocationName := Astring;
  FLocationName_Specified := True;
end;

function IncidentElementFullInfo2.LocationName_Specified(Index: Integer): boolean;
begin
  Result := FLocationName_Specified;
end;

procedure IncidentElementFullInfo2.SetMembers(Index: Integer; const AArrayOfViolatorFullInfo: ArrayOfViolatorFullInfo);
begin
  FMembers := AArrayOfViolatorFullInfo;
  FMembers_Specified := True;
end;

function IncidentElementFullInfo2.Members_Specified(Index: Integer): boolean;
begin
  Result := FMembers_Specified;
end;

procedure IncidentElementFullInfo2.SetSecurityGroupName(Index: Integer; const Astring: string);
begin
  FSecurityGroupName := Astring;
  FSecurityGroupName_Specified := True;
end;

function IncidentElementFullInfo2.SecurityGroupName_Specified(Index: Integer): boolean;
begin
  Result := FSecurityGroupName_Specified;
end;

procedure IncidentElementFullInfo2.SetSignificanceName(Index: Integer; const Astring: string);
begin
  FSignificanceName := Astring;
  FSignificanceName_Specified := True;
end;

function IncidentElementFullInfo2.SignificanceName_Specified(Index: Integer): boolean;
begin
  Result := FSignificanceName_Specified;
end;

procedure IncidentElementFullInfo2.SetTangibles(Index: Integer; const AArrayOfTangiblesFullInfo: ArrayOfTangiblesFullInfo);
begin
  FTangibles := AArrayOfTangiblesFullInfo;
  FTangibles_Specified := True;
end;

function IncidentElementFullInfo2.Tangibles_Specified(Index: Integer): boolean;
begin
  Result := FTangibles_Specified;
end;

procedure IncidentElementFullInfo2.SetVehicle(Index: Integer; const AAcsVehicle2: AcsVehicle2);
begin
  FVehicle := AAcsVehicle2;
  FVehicle_Specified := True;
end;

function IncidentElementFullInfo2.Vehicle_Specified(Index: Integer): boolean;
begin
  Result := FVehicle_Specified;
end;

procedure IncidentElementFullInfo2.SetVehicleOrganizationName(Index: Integer; const Astring: string);
begin
  FVehicleOrganizationName := Astring;
  FVehicleOrganizationName_Specified := True;
end;

function IncidentElementFullInfo2.VehicleOrganizationName_Specified(Index: Integer): boolean;
begin
  Result := FVehicleOrganizationName_Specified;
end;

procedure IncidentElementFullInfo2.SetViolationNatureName(Index: Integer; const Astring: string);
begin
  FViolationNatureName := Astring;
  FViolationNatureName_Specified := True;
end;

function IncidentElementFullInfo2.ViolationNatureName_Specified(Index: Integer): boolean;
begin
  Result := FViolationNatureName_Specified;
end;

procedure IncidentElementFullInfo2.SetViolationTheftMethodName(Index: Integer; const Astring: string);
begin
  FViolationTheftMethodName := Astring;
  FViolationTheftMethodName_Specified := True;
end;

function IncidentElementFullInfo2.ViolationTheftMethodName_Specified(Index: Integer): boolean;
begin
  Result := FViolationTheftMethodName_Specified;
end;

procedure IncidentElementFullInfo2.SetViolationTypeName(Index: Integer; const Astring: string);
begin
  FViolationTypeName := Astring;
  FViolationTypeName_Specified := True;
end;

function IncidentElementFullInfo2.ViolationTypeName_Specified(Index: Integer): boolean;
begin
  Result := FViolationTypeName_Specified;
end;

procedure IncidentElementFullInfo2.SetViolators(Index: Integer; const AArrayOfViolatorFullInfo: ArrayOfViolatorFullInfo);
begin
  FViolators := AArrayOfViolatorFullInfo;
  FViolators_Specified := True;
end;

function IncidentElementFullInfo2.Violators_Specified(Index: Integer): boolean;
begin
  Result := FViolators_Specified;
end;

destructor IncidentsMegaFilter2.Destroy;
begin
  System.SysUtils.FreeAndNil(FBeginDate);
  System.SysUtils.FreeAndNil(FBeginTime);
  System.SysUtils.FreeAndNil(FDatOfBirth);
  System.SysUtils.FreeAndNil(FDecisionCreateDate);
  System.SysUtils.FreeAndNil(FEndDate);
  System.SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure IncidentsMegaFilter2.SetBeginDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FBeginDate := ATXSDateTime;
  FBeginDate_Specified := True;
end;

function IncidentsMegaFilter2.BeginDate_Specified(Index: Integer): boolean;
begin
  Result := FBeginDate_Specified;
end;

procedure IncidentsMegaFilter2.SetBeginTime(Index: Integer; const Aduration: duration);
begin
  FBeginTime := Aduration;
  FBeginTime_Specified := True;
end;

function IncidentsMegaFilter2.BeginTime_Specified(Index: Integer): boolean;
begin
  Result := FBeginTime_Specified;
end;

procedure IncidentsMegaFilter2.SetDatOfBirth(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDatOfBirth := ATXSDateTime;
  FDatOfBirth_Specified := True;
end;

function IncidentsMegaFilter2.DatOfBirth_Specified(Index: Integer): boolean;
begin
  Result := FDatOfBirth_Specified;
end;

procedure IncidentsMegaFilter2.SetDecisionCreateDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDecisionCreateDate := ATXSDateTime;
  FDecisionCreateDate_Specified := True;
end;

function IncidentsMegaFilter2.DecisionCreateDate_Specified(Index: Integer): boolean;
begin
  Result := FDecisionCreateDate_Specified;
end;

procedure IncidentsMegaFilter2.SetDecisionDocumentNumber(Index: Integer; const Astring: string);
begin
  FDecisionDocumentNumber := Astring;
  FDecisionDocumentNumber_Specified := True;
end;

function IncidentsMegaFilter2.DecisionDocumentNumber_Specified(Index: Integer): boolean;
begin
  Result := FDecisionDocumentNumber_Specified;
end;

procedure IncidentsMegaFilter2.SetDecisionFinalPunishmentID(Index: Integer; const Aguid: guid);
begin
  FDecisionFinalPunishmentID := Aguid;
  FDecisionFinalPunishmentID_Specified := True;
end;

function IncidentsMegaFilter2.DecisionFinalPunishmentID_Specified(Index: Integer): boolean;
begin
  Result := FDecisionFinalPunishmentID_Specified;
end;

procedure IncidentsMegaFilter2.SetDocumentNumber(Index: Integer; const Astring: string);
begin
  FDocumentNumber := Astring;
  FDocumentNumber_Specified := True;
end;

function IncidentsMegaFilter2.DocumentNumber_Specified(Index: Integer): boolean;
begin
  Result := FDocumentNumber_Specified;
end;

procedure IncidentsMegaFilter2.SetEmployeeConfirmatorID(Index: Integer; const Aguid: guid);
begin
  FEmployeeConfirmatorID := Aguid;
  FEmployeeConfirmatorID_Specified := True;
end;

function IncidentsMegaFilter2.EmployeeConfirmatorID_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeConfirmatorID_Specified;
end;

procedure IncidentsMegaFilter2.SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndDate := ATXSDateTime;
  FEndDate_Specified := True;
end;

function IncidentsMegaFilter2.EndDate_Specified(Index: Integer): boolean;
begin
  Result := FEndDate_Specified;
end;

procedure IncidentsMegaFilter2.SetEndTime(Index: Integer; const Aduration: duration);
begin
  FEndTime := Aduration;
  FEndTime_Specified := True;
end;

function IncidentsMegaFilter2.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure IncidentsMegaFilter2.SetFirstName(Index: Integer; const Astring: string);
begin
  FFirstName := Astring;
  FFirstName_Specified := True;
end;

function IncidentsMegaFilter2.FirstName_Specified(Index: Integer): boolean;
begin
  Result := FFirstName_Specified;
end;

procedure IncidentsMegaFilter2.SetIncidentDetentionID(Index: Integer; const Aguid: guid);
begin
  FIncidentDetentionID := Aguid;
  FIncidentDetentionID_Specified := True;
end;

function IncidentsMegaFilter2.IncidentDetentionID_Specified(Index: Integer): boolean;
begin
  Result := FIncidentDetentionID_Specified;
end;

procedure IncidentsMegaFilter2.SetIncidentNatureID(Index: Integer; const Aguid: guid);
begin
  FIncidentNatureID := Aguid;
  FIncidentNatureID_Specified := True;
end;

function IncidentsMegaFilter2.IncidentNatureID_Specified(Index: Integer): boolean;
begin
  Result := FIncidentNatureID_Specified;
end;

procedure IncidentsMegaFilter2.SetIncidentTheftMethodID(Index: Integer; const Aguid: guid);
begin
  FIncidentTheftMethodID := Aguid;
  FIncidentTheftMethodID_Specified := True;
end;

function IncidentsMegaFilter2.IncidentTheftMethodID_Specified(Index: Integer): boolean;
begin
  Result := FIncidentTheftMethodID_Specified;
end;

procedure IncidentsMegaFilter2.SetIncidentTypeID(Index: Integer; const Aguid: guid);
begin
  FIncidentTypeID := Aguid;
  FIncidentTypeID_Specified := True;
end;

function IncidentsMegaFilter2.IncidentTypeID_Specified(Index: Integer): boolean;
begin
  Result := FIncidentTypeID_Specified;
end;

procedure IncidentsMegaFilter2.SetLastName(Index: Integer; const Astring: string);
begin
  FLastName := Astring;
  FLastName_Specified := True;
end;

function IncidentsMegaFilter2.LastName_Specified(Index: Integer): boolean;
begin
  Result := FLastName_Specified;
end;

procedure IncidentsMegaFilter2.SetLocationClarificationID(Index: Integer; const Aguid: guid);
begin
  FLocationClarificationID := Aguid;
  FLocationClarificationID_Specified := True;
end;

function IncidentsMegaFilter2.LocationClarificationID_Specified(Index: Integer): boolean;
begin
  Result := FLocationClarificationID_Specified;
end;

procedure IncidentsMegaFilter2.SetLocationID(Index: Integer; const Aguid: guid);
begin
  FLocationID := Aguid;
  FLocationID_Specified := True;
end;

function IncidentsMegaFilter2.LocationID_Specified(Index: Integer): boolean;
begin
  Result := FLocationID_Specified;
end;

procedure IncidentsMegaFilter2.SetOrganizationID(Index: Integer; const Aguid: guid);
begin
  FOrganizationID := Aguid;
  FOrganizationID_Specified := True;
end;

function IncidentsMegaFilter2.OrganizationID_Specified(Index: Integer): boolean;
begin
  Result := FOrganizationID_Specified;
end;

procedure IncidentsMegaFilter2.SetRegistrationAddress(Index: Integer; const Astring: string);
begin
  FRegistrationAddress := Astring;
  FRegistrationAddress_Specified := True;
end;

function IncidentsMegaFilter2.RegistrationAddress_Specified(Index: Integer): boolean;
begin
  Result := FRegistrationAddress_Specified;
end;

procedure IncidentsMegaFilter2.SetResidentialAddress(Index: Integer; const Astring: string);
begin
  FResidentialAddress := Astring;
  FResidentialAddress_Specified := True;
end;

function IncidentsMegaFilter2.ResidentialAddress_Specified(Index: Integer): boolean;
begin
  Result := FResidentialAddress_Specified;
end;

procedure IncidentsMegaFilter2.SetSecondName(Index: Integer; const Astring: string);
begin
  FSecondName := Astring;
  FSecondName_Specified := True;
end;

function IncidentsMegaFilter2.SecondName_Specified(Index: Integer): boolean;
begin
  Result := FSecondName_Specified;
end;

procedure IncidentsMegaFilter2.SetSignificanceID(Index: Integer; const Aguid: guid);
begin
  FSignificanceID := Aguid;
  FSignificanceID_Specified := True;
end;

function IncidentsMegaFilter2.SignificanceID_Specified(Index: Integer): boolean;
begin
  Result := FSignificanceID_Specified;
end;

procedure IncidentsMegaFilter2.SetSubdivisionID(Index: Integer; const Aguid: guid);
begin
  FSubdivisionID := Aguid;
  FSubdivisionID_Specified := True;
end;

function IncidentsMegaFilter2.SubdivisionID_Specified(Index: Integer): boolean;
begin
  Result := FSubdivisionID_Specified;
end;

procedure IncidentsMegaFilter2.SetTabNumber(Index: Integer; const AInteger: Integer);
begin
  FTabNumber := AInteger;
  FTabNumber_Specified := True;
end;

function IncidentsMegaFilter2.TabNumber_Specified(Index: Integer): boolean;
begin
  Result := FTabNumber_Specified;
end;

procedure IncidentsMegaFilter2.SetTangiblesMeasureID(Index: Integer; const Aguid: guid);
begin
  FTangiblesMeasureID := Aguid;
  FTangiblesMeasureID_Specified := True;
end;

function IncidentsMegaFilter2.TangiblesMeasureID_Specified(Index: Integer): boolean;
begin
  Result := FTangiblesMeasureID_Specified;
end;

procedure IncidentsMegaFilter2.SetTangiblesNameID(Index: Integer; const Aguid: guid);
begin
  FTangiblesNameID := Aguid;
  FTangiblesNameID_Specified := True;
end;

function IncidentsMegaFilter2.TangiblesNameID_Specified(Index: Integer): boolean;
begin
  Result := FTangiblesNameID_Specified;
end;

procedure IncidentsMegaFilter2.SetVehicleMark(Index: Integer; const Astring: string);
begin
  FVehicleMark := Astring;
  FVehicleMark_Specified := True;
end;

function IncidentsMegaFilter2.VehicleMark_Specified(Index: Integer): boolean;
begin
  Result := FVehicleMark_Specified;
end;

procedure IncidentsMegaFilter2.SetVehicleRegistrationNumber(Index: Integer; const Astring: string);
begin
  FVehicleRegistrationNumber := Astring;
  FVehicleRegistrationNumber_Specified := True;
end;

function IncidentsMegaFilter2.VehicleRegistrationNumber_Specified(Index: Integer): boolean;
begin
  Result := FVehicleRegistrationNumber_Specified;
end;

destructor IncidentsInfoData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FIncidents)-1 do
    System.SysUtils.FreeAndNil(FIncidents[I]);
  System.SetLength(FIncidents, 0);
  inherited Destroy;
end;

procedure IncidentsInfoData2.SetCount(Index: Integer; const AInt64: Int64);
begin
  FCount := AInt64;
  FCount_Specified := True;
end;

function IncidentsInfoData2.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure IncidentsInfoData2.SetIncidents(Index: Integer; const AArrayOfIncidentElementFullInfo: ArrayOfIncidentElementFullInfo);
begin
  FIncidents := AArrayOfIncidentElementFullInfo;
  FIncidents_Specified := True;
end;

function IncidentsInfoData2.Incidents_Specified(Index: Integer): boolean;
begin
  Result := FIncidents_Specified;
end;

destructor PhotoBankShort2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDateOfBirth);
  inherited Destroy;
end;

procedure PhotoBankShort2.SetDateOfBirth(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDateOfBirth := ATXSDateTime;
  FDateOfBirth_Specified := True;
end;

function PhotoBankShort2.DateOfBirth_Specified(Index: Integer): boolean;
begin
  Result := FDateOfBirth_Specified;
end;

procedure PhotoBankShort2.SetFullName(Index: Integer; const Astring: string);
begin
  FFullName := Astring;
  FFullName_Specified := True;
end;

function PhotoBankShort2.FullName_Specified(Index: Integer): boolean;
begin
  Result := FFullName_Specified;
end;

procedure PhotoBankShort2.SetId(Index: Integer; const AInt64: Int64);
begin
  FId := AInt64;
  FId_Specified := True;
end;

function PhotoBankShort2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure PhotoBankShort2.SetPersonNumber(Index: Integer; const AInt64: Int64);
begin
  FPersonNumber := AInt64;
  FPersonNumber_Specified := True;
end;

function PhotoBankShort2.PersonNumber_Specified(Index: Integer): boolean;
begin
  Result := FPersonNumber_Specified;
end;

procedure PhotoBank2.SetPhoto(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FPhoto := ATArray;
  FPhoto_Specified := True;
end;

function PhotoBank2.Photo_Specified(Index: Integer): boolean;
begin
  Result := FPhoto_Specified;
end;

procedure EmployeeGroupForAlcoGroup2.SetGroupID(Index: Integer; const Aguid: guid);
begin
  FGroupID := Aguid;
  FGroupID_Specified := True;
end;

function EmployeeGroupForAlcoGroup2.GroupID_Specified(Index: Integer): boolean;
begin
  Result := FGroupID_Specified;
end;

procedure EmployeeGroupForAlcoGroup2.SetIncludeChilds(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeChilds := ABoolean;
  FIncludeChilds_Specified := True;
end;

function EmployeeGroupForAlcoGroup2.IncludeChilds_Specified(Index: Integer): boolean;
begin
  Result := FIncludeChilds_Specified;
end;

procedure EmployeeGroupForAlcoGroupFull2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function EmployeeGroupForAlcoGroupFull2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

destructor AcsAlcoGroupSaveData2.Destroy;
begin
  System.SysUtils.FreeAndNil(FStartAlcoTesting);
  inherited Destroy;
end;

procedure AcsAlcoGroupSaveData2.SetAssignmentFilter(Index: Integer; const AAssignmentFilter: AssignmentFilter);
begin
  FAssignmentFilter := AAssignmentFilter;
  FAssignmentFilter_Specified := True;
end;

function AcsAlcoGroupSaveData2.AssignmentFilter_Specified(Index: Integer): boolean;
begin
  Result := FAssignmentFilter_Specified;
end;

procedure AcsAlcoGroupSaveData2.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function AcsAlcoGroupSaveData2.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure AcsAlcoGroupSaveData2.SetEmployeeAssignmentType(Index: Integer; const AEmployeeAssignmentType: EmployeeAssignmentType);
begin
  FEmployeeAssignmentType := AEmployeeAssignmentType;
  FEmployeeAssignmentType_Specified := True;
end;

function AcsAlcoGroupSaveData2.EmployeeAssignmentType_Specified(Index: Integer): boolean;
begin
  Result := FEmployeeAssignmentType_Specified;
end;

procedure AcsAlcoGroupSaveData2.SetMaxCheckPerDay(Index: Integer; const AInteger: Integer);
begin
  FMaxCheckPerDay := AInteger;
  FMaxCheckPerDay_Specified := True;
end;

function AcsAlcoGroupSaveData2.MaxCheckPerDay_Specified(Index: Integer): boolean;
begin
  Result := FMaxCheckPerDay_Specified;
end;

procedure AcsAlcoGroupSaveData2.SetMaxCheckPerPeriod(Index: Integer; const AInteger: Integer);
begin
  FMaxCheckPerPeriod := AInteger;
  FMaxCheckPerPeriod_Specified := True;
end;

function AcsAlcoGroupSaveData2.MaxCheckPerPeriod_Specified(Index: Integer): boolean;
begin
  Result := FMaxCheckPerPeriod_Specified;
end;

procedure AcsAlcoGroupSaveData2.SetMinCheckPerDay(Index: Integer; const AInteger: Integer);
begin
  FMinCheckPerDay := AInteger;
  FMinCheckPerDay_Specified := True;
end;

function AcsAlcoGroupSaveData2.MinCheckPerDay_Specified(Index: Integer): boolean;
begin
  Result := FMinCheckPerDay_Specified;
end;

procedure AcsAlcoGroupSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AcsAlcoGroupSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AcsAlcoGroupSaveData2.SetPeriodAlcoTesting(Index: Integer; const AInteger: Integer);
begin
  FPeriodAlcoTesting := AInteger;
  FPeriodAlcoTesting_Specified := True;
end;

function AcsAlcoGroupSaveData2.PeriodAlcoTesting_Specified(Index: Integer): boolean;
begin
  Result := FPeriodAlcoTesting_Specified;
end;

procedure AcsAlcoGroupSaveData2.SetStartAlcoTesting(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartAlcoTesting := ATXSDateTime;
  FStartAlcoTesting_Specified := True;
end;

function AcsAlcoGroupSaveData2.StartAlcoTesting_Specified(Index: Integer): boolean;
begin
  Result := FStartAlcoTesting_Specified;
end;

procedure AcsAlcoGroupSlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function AcsAlcoGroupSlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure AcsAlcoGroupSlimInfo2.SetPriority(Index: Integer; const AInteger: Integer);
begin
  FPriority := AInteger;
  FPriority_Specified := True;
end;

function AcsAlcoGroupSlimInfo2.Priority_Specified(Index: Integer): boolean;
begin
  Result := FPriority_Specified;
end;

destructor RemoteTerminalInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FPersonalData)-1 do
    System.SysUtils.FreeAndNil(FPersonalData[I]);
  System.SetLength(FPersonalData, 0);
  for I := 0 to System.Length(FWorkZones)-1 do
    System.SysUtils.FreeAndNil(FWorkZones[I]);
  System.SetLength(FWorkZones, 0);
  System.SysUtils.FreeAndNil(FPhotoContent);
  inherited Destroy;
end;

procedure RemoteTerminalInfo2.SetPersonalData(Index: Integer; const AArrayOfPhotoidentificationPersonalData: ArrayOfPhotoidentificationPersonalData);
begin
  FPersonalData := AArrayOfPhotoidentificationPersonalData;
  FPersonalData_Specified := True;
end;

function RemoteTerminalInfo2.PersonalData_Specified(Index: Integer): boolean;
begin
  Result := FPersonalData_Specified;
end;

procedure RemoteTerminalInfo2.SetPhotoContent(Index: Integer; const APhotoOrder2: PhotoOrder2);
begin
  FPhotoContent := APhotoOrder2;
  FPhotoContent_Specified := True;
end;

function RemoteTerminalInfo2.PhotoContent_Specified(Index: Integer): boolean;
begin
  Result := FPhotoContent_Specified;
end;

procedure RemoteTerminalInfo2.SetWorkZones(Index: Integer; const AArrayOfWorkZoneSlimInfo: ArrayOfWorkZoneSlimInfo);
begin
  FWorkZones := AArrayOfWorkZoneSlimInfo;
  FWorkZones_Specified := True;
end;

function RemoteTerminalInfo2.WorkZones_Specified(Index: Integer): boolean;
begin
  Result := FWorkZones_Specified;
end;

destructor RemoteTerminalSaveData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FPersonalData)-1 do
    System.SysUtils.FreeAndNil(FPersonalData[I]);
  System.SetLength(FPersonalData, 0);
  inherited Destroy;
end;

procedure RemoteTerminalSaveData2.SetPersonalData(Index: Integer; const AArrayOfPhotoidentificationPersonalData: ArrayOfPhotoidentificationPersonalData);
begin
  FPersonalData := AArrayOfPhotoidentificationPersonalData;
  FPersonalData_Specified := True;
end;

function RemoteTerminalSaveData2.PersonalData_Specified(Index: Integer): boolean;
begin
  Result := FPersonalData_Specified;
end;

procedure RemoteTerminalSaveData2.SetPhotoContentId(Index: Integer; const Aguid: guid);
begin
  FPhotoContentId := Aguid;
  FPhotoContentId_Specified := True;
end;

function RemoteTerminalSaveData2.PhotoContentId_Specified(Index: Integer): boolean;
begin
  Result := FPhotoContentId_Specified;
end;

procedure RemoteTerminalSaveData2.SetWorkZonesIDS(Index: Integer; const AArrayOfguid: ArrayOfguid);
begin
  FWorkZonesIDS := AArrayOfguid;
  FWorkZonesIDS_Specified := True;
end;

function RemoteTerminalSaveData2.WorkZonesIDS_Specified(Index: Integer): boolean;
begin
  Result := FWorkZonesIDS_Specified;
end;

procedure ISS_Entity_Base2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function ISS_Entity_Base2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure ISS_Entity_Base2.SetISS_OBJ_ID(Index: Integer; const Astring: string);
begin
  FISS_OBJ_ID := Astring;
  FISS_OBJ_ID_Specified := True;
end;

function ISS_Entity_Base2.ISS_OBJ_ID_Specified(Index: Integer): boolean;
begin
  Result := FISS_OBJ_ID_Specified;
end;

procedure ISS_Entity_Base2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function ISS_Entity_Base2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

destructor ISS_Display_SlimInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FEventViewers)-1 do
    System.SysUtils.FreeAndNil(FEventViewers[I]);
  System.SetLength(FEventViewers, 0);
  for I := 0 to System.Length(FMonitors)-1 do
    System.SysUtils.FreeAndNil(FMonitors[I]);
  System.SetLength(FMonitors, 0);
  inherited Destroy;
end;

procedure ISS_Display_SlimInfo2.SetEventViewers(Index: Integer; const AArrayOfISS_EventViewer_SlimInfo: ArrayOfISS_EventViewer_SlimInfo);
begin
  FEventViewers := AArrayOfISS_EventViewer_SlimInfo;
  FEventViewers_Specified := True;
end;

function ISS_Display_SlimInfo2.EventViewers_Specified(Index: Integer): boolean;
begin
  Result := FEventViewers_Specified;
end;

procedure ISS_Display_SlimInfo2.SetMonitors(Index: Integer; const AArrayOfISS_Monitor_SlimInfo: ArrayOfISS_Monitor_SlimInfo);
begin
  FMonitors := AArrayOfISS_Monitor_SlimInfo;
  FMonitors_Specified := True;
end;

function ISS_Display_SlimInfo2.Monitors_Specified(Index: Integer): boolean;
begin
  Result := FMonitors_Specified;
end;

destructor ISS_Monitor_SlimInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCameras)-1 do
    System.SysUtils.FreeAndNil(FCameras[I]);
  System.SetLength(FCameras, 0);
  inherited Destroy;
end;

procedure ISS_Monitor_SlimInfo2.SetCameras(Index: Integer; const AArrayOfISS_Cam_SlimInfo: ArrayOfISS_Cam_SlimInfo);
begin
  FCameras := AArrayOfISS_Cam_SlimInfo;
  FCameras_Specified := True;
end;

function ISS_Monitor_SlimInfo2.Cameras_Specified(Index: Integer): boolean;
begin
  Result := FCameras_Specified;
end;

destructor ISS_IntegrationPoint_SlimInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FRusGuardIntegrationPoints)-1 do
    System.SysUtils.FreeAndNil(FRusGuardIntegrationPoints[I]);
  System.SetLength(FRusGuardIntegrationPoints, 0);
  inherited Destroy;
end;

procedure ISS_IntegrationPoint_SlimInfo2.SetRusGuardIntegrationPoints(Index: Integer; const AArrayOfISS_RusGuard_SlimInfo: ArrayOfISS_RusGuard_SlimInfo);
begin
  FRusGuardIntegrationPoints := AArrayOfISS_RusGuard_SlimInfo;
  FRusGuardIntegrationPoints_Specified := True;
end;

function ISS_IntegrationPoint_SlimInfo2.RusGuardIntegrationPoints_Specified(Index: Integer): boolean;
begin
  Result := FRusGuardIntegrationPoints_Specified;
end;

destructor ISS_Slave_SlimInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDisplays)-1 do
    System.SysUtils.FreeAndNil(FDisplays[I]);
  System.SetLength(FDisplays, 0);
  for I := 0 to System.Length(FIntegrationPoints)-1 do
    System.SysUtils.FreeAndNil(FIntegrationPoints[I]);
  System.SetLength(FIntegrationPoints, 0);
  inherited Destroy;
end;

procedure ISS_Slave_SlimInfo2.SetDisplays(Index: Integer; const AArrayOfISS_Display_SlimInfo: ArrayOfISS_Display_SlimInfo);
begin
  FDisplays := AArrayOfISS_Display_SlimInfo;
  FDisplays_Specified := True;
end;

function ISS_Slave_SlimInfo2.Displays_Specified(Index: Integer): boolean;
begin
  Result := FDisplays_Specified;
end;

procedure ISS_Slave_SlimInfo2.SetDns(Index: Integer; const Astring: string);
begin
  FDns := Astring;
  FDns_Specified := True;
end;

function ISS_Slave_SlimInfo2.Dns_Specified(Index: Integer): boolean;
begin
  Result := FDns_Specified;
end;

procedure ISS_Slave_SlimInfo2.SetIPAddress(Index: Integer; const Astring: string);
begin
  FIPAddress := Astring;
  FIPAddress_Specified := True;
end;

function ISS_Slave_SlimInfo2.IPAddress_Specified(Index: Integer): boolean;
begin
  Result := FIPAddress_Specified;
end;

procedure ISS_Slave_SlimInfo2.SetIntegrationPoints(Index: Integer; const AArrayOfISS_IntegrationPoint_SlimInfo: ArrayOfISS_IntegrationPoint_SlimInfo);
begin
  FIntegrationPoints := AArrayOfISS_IntegrationPoint_SlimInfo;
  FIntegrationPoints_Specified := True;
end;

function ISS_Slave_SlimInfo2.IntegrationPoints_Specified(Index: Integer): boolean;
begin
  Result := FIntegrationPoints_Specified;
end;

procedure ISS_IIDK_SaveData2.SetAddress(Index: Integer; const Astring: string);
begin
  FAddress := Astring;
  FAddress_Specified := True;
end;

function ISS_IIDK_SaveData2.Address_Specified(Index: Integer): boolean;
begin
  Result := FAddress_Specified;
end;

procedure ISS_IIDK_SaveData2.SetISS_ID(Index: Integer; const AInteger: Integer);
begin
  FISS_ID := AInteger;
  FISS_ID_Specified := True;
end;

function ISS_IIDK_SaveData2.ISS_ID_Specified(Index: Integer): boolean;
begin
  Result := FISS_ID_Specified;
end;

procedure ISS_IIDK_SaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function ISS_IIDK_SaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure ISS_IIDK_SaveData2.SetPort(Index: Integer; const AInteger: Integer);
begin
  FPort := AInteger;
  FPort_Specified := True;
end;

function ISS_IIDK_SaveData2.Port_Specified(Index: Integer): boolean;
begin
  Result := FPort_Specified;
end;

destructor ISS_IIDK_SlimInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FSlaves)-1 do
    System.SysUtils.FreeAndNil(FSlaves[I]);
  System.SetLength(FSlaves, 0);
  inherited Destroy;
end;

procedure ISS_IIDK_SlimInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function ISS_IIDK_SlimInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure ISS_IIDK_SlimInfo2.SetSlaves(Index: Integer; const AArrayOfISS_Slave_SlimInfo: ArrayOfISS_Slave_SlimInfo);
begin
  FSlaves := AArrayOfISS_Slave_SlimInfo;
  FSlaves_Specified := True;
end;

function ISS_IIDK_SlimInfo2.Slaves_Specified(Index: Integer): boolean;
begin
  Result := FSlaves_Specified;
end;

destructor AcsConfiguratorSaveData2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDriverLicensePhoto);
  System.SysUtils.FreeAndNil(FForeignPassportPhoto);
  System.SysUtils.FreeAndNil(FPassportPhoto);
  inherited Destroy;
end;

procedure AcsConfiguratorSaveData2.SetDriverLicensePhoto(Index: Integer; const APhotoOrder2: PhotoOrder2);
begin
  FDriverLicensePhoto := APhotoOrder2;
  FDriverLicensePhoto_Specified := True;
end;

function AcsConfiguratorSaveData2.DriverLicensePhoto_Specified(Index: Integer): boolean;
begin
  Result := FDriverLicensePhoto_Specified;
end;

procedure AcsConfiguratorSaveData2.SetForeignPassportPhoto(Index: Integer; const APhotoOrder2: PhotoOrder2);
begin
  FForeignPassportPhoto := APhotoOrder2;
  FForeignPassportPhoto_Specified := True;
end;

function AcsConfiguratorSaveData2.ForeignPassportPhoto_Specified(Index: Integer): boolean;
begin
  Result := FForeignPassportPhoto_Specified;
end;

procedure AcsConfiguratorSaveData2.SetIsShowPinCode(Index: Integer; const ABoolean: Boolean);
begin
  FIsShowPinCode := ABoolean;
  FIsShowPinCode_Specified := True;
end;

function AcsConfiguratorSaveData2.IsShowPinCode_Specified(Index: Integer): boolean;
begin
  Result := FIsShowPinCode_Specified;
end;

procedure AcsConfiguratorSaveData2.SetPassportPhoto(Index: Integer; const APhotoOrder2: PhotoOrder2);
begin
  FPassportPhoto := APhotoOrder2;
  FPassportPhoto_Specified := True;
end;

function AcsConfiguratorSaveData2.PassportPhoto_Specified(Index: Integer): boolean;
begin
  Result := FPassportPhoto_Specified;
end;

procedure AcsConfiguratorSaveData2.SetUseDefaultFIODocumentType(Index: Integer; const ADocumentType: DocumentType);
begin
  FUseDefaultFIODocumentType := ADocumentType;
  FUseDefaultFIODocumentType_Specified := True;
end;

function AcsConfiguratorSaveData2.UseDefaultFIODocumentType_Specified(Index: Integer): boolean;
begin
  Result := FUseDefaultFIODocumentType_Specified;
end;

procedure WorkplaceModuleSaveData2.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function WorkplaceModuleSaveData2.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

procedure WorkplaceModuleSaveData2.SetIsMobile(Index: Integer; const ABoolean: Boolean);
begin
  FIsMobile := ABoolean;
  FIsMobile_Specified := True;
end;

function WorkplaceModuleSaveData2.IsMobile_Specified(Index: Integer): boolean;
begin
  Result := FIsMobile_Specified;
end;

procedure WorkplaceModuleSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function WorkplaceModuleSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AcsConfiguratorInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function AcsConfiguratorInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure WorkplaceModuleInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function WorkplaceModuleInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure WorkplaceModuleInfo2.SetWorkplaceModuleType(Index: Integer; const AWorkplaceModuleType: WorkplaceModuleType);
begin
  FWorkplaceModuleType := AWorkplaceModuleType;
  FWorkplaceModuleType_Specified := True;
end;

function WorkplaceModuleInfo2.WorkplaceModuleType_Specified(Index: Integer): boolean;
begin
  Result := FWorkplaceModuleType_Specified;
end;

procedure WorkplaceSaveData2.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function WorkplaceSaveData2.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

procedure WorkplaceSaveData2.SetFavoriteType(Index: Integer; const AFavoriteType: FavoriteType);
begin
  FFavoriteType := AFavoriteType;
  FFavoriteType_Specified := True;
end;

function WorkplaceSaveData2.FavoriteType_Specified(Index: Integer): boolean;
begin
  Result := FFavoriteType_Specified;
end;

procedure WorkplaceSaveData2.SetIsCollapsed(Index: Integer; const ABoolean: Boolean);
begin
  FIsCollapsed := ABoolean;
  FIsCollapsed_Specified := True;
end;

function WorkplaceSaveData2.IsCollapsed_Specified(Index: Integer): boolean;
begin
  Result := FIsCollapsed_Specified;
end;

procedure WorkplaceSaveData2.SetIsEditFilterOn(Index: Integer; const ABoolean: Boolean);
begin
  FIsEditFilterOn := ABoolean;
  FIsEditFilterOn_Specified := True;
end;

function WorkplaceSaveData2.IsEditFilterOn_Specified(Index: Integer): boolean;
begin
  Result := FIsEditFilterOn_Specified;
end;

procedure WorkplaceSaveData2.SetIsMobile(Index: Integer; const ABoolean: Boolean);
begin
  FIsMobile := ABoolean;
  FIsMobile_Specified := True;
end;

function WorkplaceSaveData2.IsMobile_Specified(Index: Integer): boolean;
begin
  Result := FIsMobile_Specified;
end;

procedure WorkplaceSaveData2.SetIsRibbonCollapsed(Index: Integer; const ABoolean: Boolean);
begin
  FIsRibbonCollapsed := ABoolean;
  FIsRibbonCollapsed_Specified := True;
end;

function WorkplaceSaveData2.IsRibbonCollapsed_Specified(Index: Integer): boolean;
begin
  Result := FIsRibbonCollapsed_Specified;
end;

procedure WorkplaceSaveData2.SetIsSaveFilterOn(Index: Integer; const ABoolean: Boolean);
begin
  FIsSaveFilterOn := ABoolean;
  FIsSaveFilterOn_Specified := True;
end;

function WorkplaceSaveData2.IsSaveFilterOn_Specified(Index: Integer): boolean;
begin
  Result := FIsSaveFilterOn_Specified;
end;

procedure WorkplaceSaveData2.SetIsShowGroupCode(Index: Integer; const ABoolean: Boolean);
begin
  FIsShowGroupCode := ABoolean;
  FIsShowGroupCode_Specified := True;
end;

function WorkplaceSaveData2.IsShowGroupCode_Specified(Index: Integer): boolean;
begin
  Result := FIsShowGroupCode_Specified;
end;

procedure WorkplaceSaveData2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function WorkplaceSaveData2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

destructor WorkplaceInfo2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FModules)-1 do
    System.SysUtils.FreeAndNil(FModules[I]);
  System.SetLength(FModules, 0);
  inherited Destroy;
end;

procedure WorkplaceInfo2.SetId(Index: Integer; const Aguid: guid);
begin
  FId := Aguid;
  FId_Specified := True;
end;

function WorkplaceInfo2.Id_Specified(Index: Integer): boolean;
begin
  Result := FId_Specified;
end;

procedure WorkplaceInfo2.SetIsBuiltIn(Index: Integer; const ABoolean: Boolean);
begin
  FIsBuiltIn := ABoolean;
  FIsBuiltIn_Specified := True;
end;

function WorkplaceInfo2.IsBuiltIn_Specified(Index: Integer): boolean;
begin
  Result := FIsBuiltIn_Specified;
end;

procedure WorkplaceInfo2.SetModules(Index: Integer; const AArrayOfWorkplaceModuleInfo: ArrayOfWorkplaceModuleInfo);
begin
  FModules := AArrayOfWorkplaceModuleInfo;
  FModules_Specified := True;
end;

function WorkplaceInfo2.Modules_Specified(Index: Integer): boolean;
begin
  Result := FModules_Specified;
end;

procedure OwnerValueBase2.SetOwnerId(Index: Integer; const Aguid: guid);
begin
  FOwnerId := Aguid;
  FOwnerId_Specified := True;
end;

function OwnerValueBase2.OwnerId_Specified(Index: Integer): boolean;
begin
  Result := FOwnerId_Specified;
end;

destructor OwnerDateTimeValue2.Destroy;
begin
  System.SysUtils.FreeAndNil(FValue);
  inherited Destroy;
end;

procedure OwnerDateTimeValue2.SetValue(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FValue := ATXSDateTime;
  FValue_Specified := True;
end;

function OwnerDateTimeValue2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure OwnerDoubleValue2.SetValue(Index: Integer; const ADouble: Double);
begin
  FValue := ADouble;
  FValue_Specified := True;
end;

function OwnerDoubleValue2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

destructor AdditionalFieldValue2.Destroy;
begin
  System.SysUtils.FreeAndNil(FAdditionalFieldInfo);
  System.SysUtils.FreeAndNil(FOwnerValue);
  inherited Destroy;
end;

procedure AdditionalFieldValue2.SetAdditionalFieldInfo(Index: Integer; const AAdditionalFieldBase2: AdditionalFieldBase2);
begin
  FAdditionalFieldInfo := AAdditionalFieldBase2;
  FAdditionalFieldInfo_Specified := True;
end;

function AdditionalFieldValue2.AdditionalFieldInfo_Specified(Index: Integer): boolean;
begin
  Result := FAdditionalFieldInfo_Specified;
end;

procedure AdditionalFieldValue2.SetOwnerValue(Index: Integer; const AOwnerValueBase2: OwnerValueBase2);
begin
  FOwnerValue := AOwnerValueBase2;
  FOwnerValue_Specified := True;
end;

function AdditionalFieldValue2.OwnerValue_Specified(Index: Integer): boolean;
begin
  Result := FOwnerValue_Specified;
end;

procedure ListItem2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function ListItem2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure ListItem2.SetItemValue(Index: Integer; const Astring: string);
begin
  FItemValue := Astring;
  FItemValue_Specified := True;
end;

function ListItem2.ItemValue_Specified(Index: Integer): boolean;
begin
  Result := FItemValue_Specified;
end;

procedure ListItem2.SetOrder(Index: Integer; const AInteger: Integer);
begin
  FOrder := AInteger;
  FOrder_Specified := True;
end;

function ListItem2.Order_Specified(Index: Integer): boolean;
begin
  Result := FOrder_Specified;
end;

destructor OwnerAdditionalFieldsValue2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFields)-1 do
    System.SysUtils.FreeAndNil(FFields[I]);
  System.SetLength(FFields, 0);
  inherited Destroy;
end;

procedure OwnerAdditionalFieldsValue2.SetFields(Index: Integer; const AArrayOfAdditionalFieldValue: ArrayOfAdditionalFieldValue);
begin
  FFields := AArrayOfAdditionalFieldValue;
  FFields_Specified := True;
end;

function OwnerAdditionalFieldsValue2.Fields_Specified(Index: Integer): boolean;
begin
  Result := FFields_Specified;
end;

procedure OwnerAdditionalFieldsValue2.SetOwnerID(Index: Integer; const Aguid: guid);
begin
  FOwnerID := Aguid;
  FOwnerID_Specified := True;
end;

function OwnerAdditionalFieldsValue2.OwnerID_Specified(Index: Integer): boolean;
begin
  Result := FOwnerID_Specified;
end;

destructor OwnerListValue2.Destroy;
begin
  System.SysUtils.FreeAndNil(FValue);
  inherited Destroy;
end;

procedure OwnerListValue2.SetValue(Index: Integer; const AListItem2: ListItem2);
begin
  FValue := AListItem2;
  FValue_Specified := True;
end;

function OwnerListValue2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure OwnerIntValue2.SetValue(Index: Integer; const AInteger: Integer);
begin
  FValue := AInteger;
  FValue_Specified := True;
end;

function OwnerIntValue2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure OwnerStringValue2.SetValue(Index: Integer; const Astring: string);
begin
  FValue := Astring;
  FValue_Specified := True;
end;

function OwnerStringValue2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure OwnerColorValue2.SetValue(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FValue := ATArray;
  FValue_Specified := True;
end;

function OwnerColorValue2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

destructor CellContentFotoIdentificationSaveData2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FPersonalData)-1 do
    System.SysUtils.FreeAndNil(FPersonalData[I]);
  System.SetLength(FPersonalData, 0);
  inherited Destroy;
end;

procedure CellContentFotoIdentificationSaveData2.SetAccessPointDriverId(Index: Integer; const Aguid: guid);
begin
  FAccessPointDriverId := Aguid;
  FAccessPointDriverId_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.AccessPointDriverId_Specified(Index: Integer): boolean;
begin
  Result := FAccessPointDriverId_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetAutoAllowEntryTime(Index: Integer; const AInteger: Integer);
begin
  FAutoAllowEntryTime := AInteger;
  FAutoAllowEntryTime_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.AutoAllowEntryTime_Specified(Index: Integer): boolean;
begin
  Result := FAutoAllowEntryTime_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetAutoAllowExitTime(Index: Integer; const AInteger: Integer);
begin
  FAutoAllowExitTime := AInteger;
  FAutoAllowExitTime_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.AutoAllowExitTime_Specified(Index: Integer): boolean;
begin
  Result := FAutoAllowExitTime_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetColorFieldID(Index: Integer; const Aguid: guid);
begin
  FColorFieldID := Aguid;
  FColorFieldID_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.ColorFieldID_Specified(Index: Integer): boolean;
begin
  Result := FColorFieldID_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetDecisionHotKey(Index: Integer; const AInteger: Integer);
begin
  FDecisionHotKey := AInteger;
  FDecisionHotKey_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.DecisionHotKey_Specified(Index: Integer): boolean;
begin
  Result := FDecisionHotKey_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetDecisionHotKeyCancel(Index: Integer; const AInteger: Integer);
begin
  FDecisionHotKeyCancel := AInteger;
  FDecisionHotKeyCancel_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.DecisionHotKeyCancel_Specified(Index: Integer): boolean;
begin
  Result := FDecisionHotKeyCancel_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetDecisionHotKeyModifier(Index: Integer; const AInteger: Integer);
begin
  FDecisionHotKeyModifier := AInteger;
  FDecisionHotKeyModifier_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.DecisionHotKeyModifier_Specified(Index: Integer): boolean;
begin
  Result := FDecisionHotKeyModifier_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetDecisionHotKeyModifierCancel(Index: Integer; const AInteger: Integer);
begin
  FDecisionHotKeyModifierCancel := AInteger;
  FDecisionHotKeyModifierCancel_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.DecisionHotKeyModifierCancel_Specified(Index: Integer): boolean;
begin
  Result := FDecisionHotKeyModifierCancel_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetEnableOperatorDecisionEntryState(Index: Integer; const ABoolean: Boolean);
begin
  FEnableOperatorDecisionEntryState := ABoolean;
  FEnableOperatorDecisionEntryState_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.EnableOperatorDecisionEntryState_Specified(Index: Integer): boolean;
begin
  Result := FEnableOperatorDecisionEntryState_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetEnableOperatorDecisionExitState(Index: Integer; const ABoolean: Boolean);
begin
  FEnableOperatorDecisionExitState := ABoolean;
  FEnableOperatorDecisionExitState_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.EnableOperatorDecisionExitState_Specified(Index: Integer): boolean;
begin
  Result := FEnableOperatorDecisionExitState_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetEnableOperatorReactionTimeEntry(Index: Integer; const ABoolean: Boolean);
begin
  FEnableOperatorReactionTimeEntry := ABoolean;
  FEnableOperatorReactionTimeEntry_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.EnableOperatorReactionTimeEntry_Specified(Index: Integer): boolean;
begin
  Result := FEnableOperatorReactionTimeEntry_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetEnableOperatorReactionTimeExit(Index: Integer; const ABoolean: Boolean);
begin
  FEnableOperatorReactionTimeExit := ABoolean;
  FEnableOperatorReactionTimeExit_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.EnableOperatorReactionTimeExit_Specified(Index: Integer): boolean;
begin
  Result := FEnableOperatorReactionTimeExit_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetHidePhotoAfterTime(Index: Integer; const AInteger: Integer);
begin
  FHidePhotoAfterTime := AInteger;
  FHidePhotoAfterTime_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.HidePhotoAfterTime_Specified(Index: Integer): boolean;
begin
  Result := FHidePhotoAfterTime_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetIsAutoAllowEntry(Index: Integer; const ABoolean: Boolean);
begin
  FIsAutoAllowEntry := ABoolean;
  FIsAutoAllowEntry_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.IsAutoAllowEntry_Specified(Index: Integer): boolean;
begin
  Result := FIsAutoAllowEntry_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetIsAutoAllowExit(Index: Integer; const ABoolean: Boolean);
begin
  FIsAutoAllowExit := ABoolean;
  FIsAutoAllowExit_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.IsAutoAllowExit_Specified(Index: Integer): boolean;
begin
  Result := FIsAutoAllowExit_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetIsHidePhotoAfterTime(Index: Integer; const ABoolean: Boolean);
begin
  FIsHidePhotoAfterTime := ABoolean;
  FIsHidePhotoAfterTime_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.IsHidePhotoAfterTime_Specified(Index: Integer): boolean;
begin
  Result := FIsHidePhotoAfterTime_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetPersonalData(Index: Integer; const AArrayOfPhotoidentificationPersonalData: ArrayOfPhotoidentificationPersonalData);
begin
  FPersonalData := AArrayOfPhotoidentificationPersonalData;
  FPersonalData_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.PersonalData_Specified(Index: Integer): boolean;
begin
  Result := FPersonalData_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetPhotoContentId(Index: Integer; const Aguid: guid);
begin
  FPhotoContentId := Aguid;
  FPhotoContentId_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.PhotoContentId_Specified(Index: Integer): boolean;
begin
  Result := FPhotoContentId_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetShowOnOffButtonEnterPermitMode(Index: Integer; const ABoolean: Boolean);
begin
  FShowOnOffButtonEnterPermitMode := ABoolean;
  FShowOnOffButtonEnterPermitMode_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.ShowOnOffButtonEnterPermitMode_Specified(Index: Integer): boolean;
begin
  Result := FShowOnOffButtonEnterPermitMode_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetShowOnOffButtonExitPermitMode(Index: Integer; const ABoolean: Boolean);
begin
  FShowOnOffButtonExitPermitMode := ABoolean;
  FShowOnOffButtonExitPermitMode_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.ShowOnOffButtonExitPermitMode_Specified(Index: Integer): boolean;
begin
  Result := FShowOnOffButtonExitPermitMode_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetShowPersonalData(Index: Integer; const ABoolean: Boolean);
begin
  FShowPersonalData := ABoolean;
  FShowPersonalData_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.ShowPersonalData_Specified(Index: Integer): boolean;
begin
  Result := FShowPersonalData_Specified;
end;

procedure CellContentFotoIdentificationSaveData2.SetShowPreviousVisitorMode(Index: Integer; const AShowPreviousVisitorMode: ShowPreviousVisitorMode);
begin
  FShowPreviousVisitorMode := AShowPreviousVisitorMode;
  FShowPreviousVisitorMode_Specified := True;
end;

function CellContentFotoIdentificationSaveData2.ShowPreviousVisitorMode_Specified(Index: Integer): boolean;
begin
  Result := FShowPreviousVisitorMode_Specified;
end;

procedure CellContentFotoIdentificationInfo2.SetAccessPointDriverName(Index: Integer; const Astring: string);
begin
  FAccessPointDriverName := Astring;
  FAccessPointDriverName_Specified := True;
end;

function CellContentFotoIdentificationInfo2.AccessPointDriverName_Specified(Index: Integer): boolean;
begin
  Result := FAccessPointDriverName_Specified;
end;

procedure CellContentFotoIdentificationInfo2.SetAcsAccessPointType(Index: Integer; const AAcsAccessPointType: AcsAccessPointType);
begin
  FAcsAccessPointType := AAcsAccessPointType;
  FAcsAccessPointType_Specified := True;
end;

function CellContentFotoIdentificationInfo2.AcsAccessPointType_Specified(Index: Integer): boolean;
begin
  Result := FAcsAccessPointType_Specified;
end;

procedure CellContentFotoIdentificationInfo2.SetCellId(Index: Integer; const Aguid: guid);
begin
  FCellId := Aguid;
  FCellId_Specified := True;
end;

function CellContentFotoIdentificationInfo2.CellId_Specified(Index: Integer): boolean;
begin
  Result := FCellId_Specified;
end;

procedure CellContentFotoIdentificationInfo2.SetColorField(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FColorField := ATArray;
  FColorField_Specified := True;
end;

function CellContentFotoIdentificationInfo2.ColorField_Specified(Index: Integer): boolean;
begin
  Result := FColorField_Specified;
end;

procedure CellContentFotoIdentificationInfo2.SetColorFieldName(Index: Integer; const Astring: string);
begin
  FColorFieldName := Astring;
  FColorFieldName_Specified := True;
end;

function CellContentFotoIdentificationInfo2.ColorFieldName_Specified(Index: Integer): boolean;
begin
  Result := FColorFieldName_Specified;
end;

procedure CellContentFotoIdentificationInfo2.SetPhotoNumber(Index: Integer; const AInteger: Integer);
begin
  FPhotoNumber := AInteger;
  FPhotoNumber_Specified := True;
end;

function CellContentFotoIdentificationInfo2.PhotoNumber_Specified(Index: Integer): boolean;
begin
  Result := FPhotoNumber_Specified;
end;

procedure AdditionalFieldBase2.SetFieldType(Index: Integer; const AFieldType: FieldType);
begin
  FFieldType := AFieldType;
  FFieldType_Specified := True;
end;

function AdditionalFieldBase2.FieldType_Specified(Index: Integer): boolean;
begin
  Result := FFieldType_Specified;
end;

procedure AdditionalFieldBase2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function AdditionalFieldBase2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure AdditionalFieldBase2.SetIsForEmployee(Index: Integer; const ABoolean: Boolean);
begin
  FIsForEmployee := ABoolean;
  FIsForEmployee_Specified := True;
end;

function AdditionalFieldBase2.IsForEmployee_Specified(Index: Integer): boolean;
begin
  Result := FIsForEmployee_Specified;
end;

procedure AdditionalFieldBase2.SetIsForEmployeeGroup(Index: Integer; const ABoolean: Boolean);
begin
  FIsForEmployeeGroup := ABoolean;
  FIsForEmployeeGroup_Specified := True;
end;

function AdditionalFieldBase2.IsForEmployeeGroup_Specified(Index: Integer): boolean;
begin
  Result := FIsForEmployeeGroup_Specified;
end;

procedure AdditionalFieldBase2.SetIsNotForShow(Index: Integer; const ABoolean: Boolean);
begin
  FIsNotForShow := ABoolean;
  FIsNotForShow_Specified := True;
end;

function AdditionalFieldBase2.IsNotForShow_Specified(Index: Integer): boolean;
begin
  Result := FIsNotForShow_Specified;
end;

procedure AdditionalFieldBase2.SetIsRequired(Index: Integer; const ABoolean: Boolean);
begin
  FIsRequired := ABoolean;
  FIsRequired_Specified := True;
end;

function AdditionalFieldBase2.IsRequired_Specified(Index: Integer): boolean;
begin
  Result := FIsRequired_Specified;
end;

procedure AdditionalFieldBase2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AdditionalFieldBase2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AdditionalFieldBase2.SetOrder(Index: Integer; const AInteger: Integer);
begin
  FOrder := AInteger;
  FOrder_Specified := True;
end;

function AdditionalFieldBase2.Order_Specified(Index: Integer): boolean;
begin
  Result := FOrder_Specified;
end;

procedure AdditionalFieldBase2.SetOwnerType(Index: Integer; const AOwnerFieldType: OwnerFieldType);
begin
  FOwnerType := AOwnerFieldType;
  FOwnerType_Specified := True;
end;

function AdditionalFieldBase2.OwnerType_Specified(Index: Integer): boolean;
begin
  Result := FOwnerType_Specified;
end;

procedure IntegerField2.SetDefaultValue(Index: Integer; const AInteger: Integer);
begin
  FDefaultValue := AInteger;
  FDefaultValue_Specified := True;
end;

function IntegerField2.DefaultValue_Specified(Index: Integer): boolean;
begin
  Result := FDefaultValue_Specified;
end;

procedure ColorField2.SetDefaultValue(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FDefaultValue := ATArray;
  FDefaultValue_Specified := True;
end;

function ColorField2.DefaultValue_Specified(Index: Integer): boolean;
begin
  Result := FDefaultValue_Specified;
end;

procedure StringField2.SetDefaultValue(Index: Integer; const Astring: string);
begin
  FDefaultValue := Astring;
  FDefaultValue_Specified := True;
end;

function StringField2.DefaultValue_Specified(Index: Integer): boolean;
begin
  Result := FDefaultValue_Specified;
end;

procedure DoubleField2.SetDefaultValue(Index: Integer; const ADouble: Double);
begin
  FDefaultValue := ADouble;
  FDefaultValue_Specified := True;
end;

function DoubleField2.DefaultValue_Specified(Index: Integer): boolean;
begin
  Result := FDefaultValue_Specified;
end;

destructor ListField2.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FItems)-1 do
    System.SysUtils.FreeAndNil(FItems[I]);
  System.SetLength(FItems, 0);
  System.SysUtils.FreeAndNil(FDefaultValue);
  inherited Destroy;
end;

procedure ListField2.SetDefaultValue(Index: Integer; const AListItem2: ListItem2);
begin
  FDefaultValue := AListItem2;
  FDefaultValue_Specified := True;
end;

function ListField2.DefaultValue_Specified(Index: Integer): boolean;
begin
  Result := FDefaultValue_Specified;
end;

procedure ListField2.SetItems(Index: Integer; const AArrayOfListItem: ArrayOfListItem);
begin
  FItems := AArrayOfListItem;
  FItems_Specified := True;
end;

function ListField2.Items_Specified(Index: Integer): boolean;
begin
  Result := FItems_Specified;
end;

destructor DateTimeField2.Destroy;
begin
  System.SysUtils.FreeAndNil(FDefaultValue);
  inherited Destroy;
end;

procedure DateTimeField2.SetDefaultValue(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDefaultValue := ATXSDateTime;
  FDefaultValue_Specified := True;
end;

function DateTimeField2.DefaultValue_Specified(Index: Integer): boolean;
begin
  Result := FDefaultValue_Specified;
end;

procedure DateTimeField2.SetFormat(Index: Integer; const Astring: string);
begin
  FFormat := Astring;
  FFormat_Specified := True;
end;

function DateTimeField2.Format_Specified(Index: Integer): boolean;
begin
  Result := FFormat_Specified;
end;

procedure DateTimeField2.SetIsCurrent(Index: Integer; const ABoolean: Boolean);
begin
  FIsCurrent := ABoolean;
  FIsCurrent_Specified := True;
end;

function DateTimeField2.IsCurrent_Specified(Index: Integer): boolean;
begin
  Result := FIsCurrent_Specified;
end;

procedure AddFieldInfo2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function AddFieldInfo2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

destructor AddDateTimeInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FValue);
  inherited Destroy;
end;

procedure AddDateTimeInfo2.SetValue(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FValue := ATXSDateTime;
  FValue_Specified := True;
end;

function AddDateTimeInfo2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure AddDoubleInfo2.SetValue(Index: Integer; const ADouble: Double);
begin
  FValue := ADouble;
  FValue_Specified := True;
end;

function AddDoubleInfo2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure AddIntInfo2.SetValue(Index: Integer; const AInteger: Integer);
begin
  FValue := AInteger;
  FValue_Specified := True;
end;

function AddIntInfo2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

destructor AddListInfo2.Destroy;
begin
  System.SysUtils.FreeAndNil(FValue);
  inherited Destroy;
end;

procedure AddListInfo2.SetValue(Index: Integer; const AListItem2: ListItem2);
begin
  FValue := AListItem2;
  FValue_Specified := True;
end;

function AddListInfo2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure PhotoOrder2.SetID(Index: Integer; const Aguid: guid);
begin
  FID := Aguid;
  FID_Specified := True;
end;

function PhotoOrder2.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure PhotoOrder2.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function PhotoOrder2.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure PhotoOrder2.SetOrder(Index: Integer; const AInteger: Integer);
begin
  FOrder := AInteger;
  FOrder_Specified := True;
end;

function PhotoOrder2.Order_Specified(Index: Integer): boolean;
begin
  Result := FOrder_Specified;
end;

procedure PhotoOrder2.SetOwnerType(Index: Integer; const AOwnerFieldType: OwnerFieldType);
begin
  FOwnerType := AOwnerFieldType;
  FOwnerType_Specified := True;
end;

function PhotoOrder2.OwnerType_Specified(Index: Integer): boolean;
begin
  Result := FOwnerType_Specified;
end;

procedure PhotoOrder2.SetPhotoMarker(Index: Integer; const APhotoMarker: PhotoMarker);
begin
  FPhotoMarker := APhotoMarker;
  FPhotoMarker_Specified := True;
end;

function PhotoOrder2.PhotoMarker_Specified(Index: Integer): boolean;
begin
  Result := FPhotoMarker_Specified;
end;

procedure PhotoOrder2.SetPhotoNumber(Index: Integer; const AInteger: Integer);
begin
  FPhotoNumber := AInteger;
  FPhotoNumber_Specified := True;
end;

function PhotoOrder2.PhotoNumber_Specified(Index: Integer): boolean;
begin
  Result := FPhotoNumber_Specified;
end;

procedure AddStringInfo2.SetValue(Index: Integer; const Astring: string);
begin
  FValue := Astring;
  FValue_Specified := True;
end;

function AddStringInfo2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure AddColorInfo2.SetValue(Index: Integer; const ATArray: TArray<System.Byte>);
begin
  FValue := ATArray;
  FValue_Specified := True;
end;

function AddColorInfo2.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure RegisterTypeProc0;
begin
  RemClassRegistry.RegisterXSClass(GeEmployeesViewResult, 'http://www.rusguardsecurity.ru', 'GeEmployeesViewResult');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsEmployeePhotosInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAcsEmployeePhotosInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAscEmployeePhotoModificationDateTimeInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAscEmployeePhotoModificationDateTimeInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsEmployeeGroupReportInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAcsEmployeeGroupReportInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SearchWay), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'SearchWay');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsEmployee), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAcsEmployee');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfEmployeeShortInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfEmployeeShortInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsEmployeeGroupReactionInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAcsEmployeeGroupReactionInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EmployeeGroupType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeeGroupType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsEmployeeGroup), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAcsEmployeeGroup');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SqlDbType), 'http://schemas.datacontract.org/2004/07/System.Data', 'SqlDbType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SqlDbType), 'SmallInt_', 'SmallInt');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfEmployeeViewFieldMetadata), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfEmployeeViewFieldMetadata');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsEmployeeFaceVectorFull), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAcsEmployeeFaceVectorFull');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FaceSourceType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'FaceSourceType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsEmployeeFaceVector), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAcsEmployeeFaceVector');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsEmployeeFaceVectorSaveData), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAcsEmployeeFaceVectorSaveData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfEmployeeCurentInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfEmployeeCurentInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsEmployeeFull), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAcsEmployeeFull');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsEmployeeSchedule), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAcsEmployeeSchedule');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsEmployeeSlim), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAcsEmployeeSlim');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsVehicleSearched), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAcsVehicleSearched');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsEmployeeInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'ArrayOfAcsEmployeeInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PassageByRuleOfTwoPersonsMode), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'PassageByRuleOfTwoPersonsMode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ServerIdentificationType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'ServerIdentificationType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfServerIdentificationType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'ArrayOfServerIdentificationType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccessPointSortType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'AccessPointSortType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AccessPointSortType), 'Name_', 'Name');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AccessPointSortType), 'Type_', 'Type');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsAccessPointSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'ArrayOfAcsAccessPointSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsAccessPointDriverInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'ArrayOfAcsAccessPointDriverInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(WorkZonesAccessPointEventType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZonesAccessPointEventType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(WorkZonesAccessPointType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZonesAccessPointType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(WorkSchedulesOwner), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkSchedulesOwner');
  RemClassRegistry.RegisterXSInfo(TypeInfo(WorkZoneSortedColumn), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZoneSortedColumn');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WorkZoneSortedColumn), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(WorkZonesOwner), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZonesOwner');
  RemClassRegistry.RegisterXSInfo(TypeInfo(WorkScheduleSortedColumn), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkScheduleSortedColumn');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WorkScheduleSortedColumn), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfWorkZonesAccessPointSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'ArrayOfWorkZonesAccessPointSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfWorkTimetableSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'ArrayOfWorkTimetableSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DayForm), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'DayForm');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfWorkZoneSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'ArrayOfWorkZoneSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfWorkScheduleSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'ArrayOfWorkScheduleSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDayTypeSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'ArrayOfDayTypeSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DayMode), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'DayMode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EmployeeImageType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeeImageType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfReactionEventSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ArrayOfReactionEventSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfReactionActionSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ArrayOfReactionActionSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfReactionSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ArrayOfReactionSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReactionEventType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionEventType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReactionActionType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionActionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfUserPassEditorData), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'ArrayOfUserPassEditorData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PassBackgroundType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'PassBackgroundType');
  RemClassRegistry.RegisterXSClass(UserPassEditorSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'UserPassEditorSaveData2', 'UserPassEditorSaveData');
  RemClassRegistry.RegisterXSClass(UserPassEditorSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'UserPassEditorSaveData');
  RemClassRegistry.RegisterXSClass(Editor, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'Editor');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfReportSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report', 'ArrayOfReportSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EmployeesSortedColumn), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeesSortedColumn');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DocumentType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'DocumentType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GroupTypeSearch), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'GroupTypeSearch');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GroupTypeSearch), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VehicleTypeSearch), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'VehicleTypeSearch');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VehicleTypeSearch), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EmployeeSortedColumn), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeeSortedColumn');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ScreenCellContentType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ScreenCellContentType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfScreenCellSaveData), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ArrayOfScreenCellSaveData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfScreenCellTreeInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ArrayOfScreenCellTreeInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ScreenAspectRatio), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ScreenAspectRatio');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ScreenScaleMode), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ScreenScaleMode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfUserPassSlimData), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'ArrayOfUserPassSlimData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfScreenCellInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ArrayOfScreenCellInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfFavoriteFolderInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder', 'ArrayOfFavoriteFolderInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfFavoriteFolderInfoWithEmployeeGroup), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder', 'ArrayOfFavoriteFolderInfoWithEmployeeGroup');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccessLevelSortedColumn), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'AccessLevelSortedColumn');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AccessLevelSortedColumn), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccessLevelsOwner), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'AccessLevelsOwner');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsAccessLevelSimpleInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'ArrayOfAcsAccessLevelSimpleInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsKeyInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys', 'ArrayOfAcsKeyInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfBoxAccessLevelTagsData), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'ArrayOfBoxAccessLevelTagsData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsAccessLevelSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'ArrayOfAcsAccessLevelSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsBoxAccessElementSaveInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel', 'ArrayOfAcsBoxAccessElementSaveInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BoxAccessLevelMode), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel', 'BoxAccessLevelMode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsBoxAccessLevelSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel', 'ArrayOfAcsBoxAccessLevelSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLEmployeePositionInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS', 'ArrayOfLEmployeePositionInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfEmployeePositionSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS', 'ArrayOfEmployeePositionSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsBoxAccessLevelElementSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel', 'ArrayOfAcsBoxAccessLevelElementSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EmployeePositionSortedColumn), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS', 'EmployeePositionSortedColumn');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EmployeePositionSortedColumn), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDepartmentTreeModel), 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'ArrayOfDepartmentTreeModel');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDataForPeriodModel), 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'ArrayOfDataForPeriodModel');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfPlanModel), 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'ArrayOfPlanModel');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAbsent), 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'ArrayOfAbsent');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDataForViolator), 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'ArrayOfDataForViolator');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ViolationType), 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'ViolationType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDataOnPresenceInWorkplace), 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'ArrayOfDataOnPresenceInWorkplace');
  RemClassRegistry.RegisterXSClass(AcsBoxAccessLevelSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel', 'AcsBoxAccessLevelSaveData2', 'AcsBoxAccessLevelSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsBoxAccessLevelSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(AcsBoxAccessLevelSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel', 'AcsBoxAccessLevelSaveData');
  RemClassRegistry.RegisterXSClass(TagSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'TagSaveData2', 'TagSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TagSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(TagSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'TagSaveData');
  RemClassRegistry.RegisterXSClass(AcsAccessLevelSlimBase2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'AcsAccessLevelSlimBase2', 'AcsAccessLevelSlimBase');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsAccessLevelSlimBase2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(AcsAccessLevelSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'AcsAccessLevelSaveData2', 'AcsAccessLevelSaveData');
  RemClassRegistry.RegisterXSClass(AcsAccessLevelSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'AcsAccessLevelSaveData');
  RemClassRegistry.RegisterXSClass(AcsAccessLevelSlimBase, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'AcsAccessLevelSlimBase');
  RemClassRegistry.RegisterXSClass(ReactionSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionSaveData2', 'ReactionSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReactionSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(ReactionSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionSaveData');
  RemClassRegistry.RegisterXSClass(WorkScheduleSlimSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkScheduleSlimSaveData2', 'WorkScheduleSlimSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WorkScheduleSlimSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(WorkScheduleSlimSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkScheduleSlimSaveData');
  RemClassRegistry.RegisterXSClass(WorkZoneSlimSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZoneSlimSaveData2', 'WorkZoneSlimSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WorkZoneSlimSaveData2), 'Name_', '[ExtName="Name"]');
end;

procedure RegisterTypeProc1;
begin
  RemClassRegistry.RegisterXSClass(WorkZoneSlimSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZoneSlimSaveData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ControllerIdentificationType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'ControllerIdentificationType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MainIdentificationType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'MainIdentificationType');
  RemClassRegistry.RegisterXSClass(EmployeeViewFieldMetadata2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeeViewFieldMetadata2', 'EmployeeViewFieldMetadata');
  RemClassRegistry.RegisterXSClass(EmployeeViewFieldMetadata, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeeViewFieldMetadata');
  RemClassRegistry.RegisterXSClass(ScreenLayoutSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ScreenLayoutSaveData2', 'ScreenLayoutSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ScreenLayoutSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(ScreenLayoutSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ScreenLayoutSaveData');
  RemClassRegistry.RegisterXSClass(ReactionExecuteProgramActionSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionExecuteProgramActionSaveData2', 'ReactionExecuteProgramActionSaveData');
  RemClassRegistry.RegisterXSClass(ReactionExecuteProgramActionSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionExecuteProgramActionSaveData');
  RemClassRegistry.RegisterXSClass(ReactionExecuteProgramActionSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionExecuteProgramActionSlimInfo2', 'ReactionExecuteProgramActionSlimInfo');
  RemClassRegistry.RegisterXSClass(ReactionExecuteProgramActionSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionExecuteProgramActionSlimInfo');
  RemClassRegistry.RegisterXSClass(ReactionEventSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionEventSaveData2', 'ReactionEventSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReactionEventSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(ReactionEventSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionEventSaveData');
  RemClassRegistry.RegisterXSClass(AcsAccessPointBase2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'AcsAccessPointBase2', 'AcsAccessPointBase');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsAccessPointBase2), 'OrderedServerIdentification', '[ArrayItemName="ServerIdentificationType"]');
  RemClassRegistry.RegisterXSClass(AcsAccessPointBase, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'AcsAccessPointBase');
  RemClassRegistry.RegisterXSInfo(TypeInfo(guid), 'http://schemas.microsoft.com/2003/10/Serialization/', 'guid');
  RemClassRegistry.RegisterXSClass(DepartmentTreeModel2, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'DepartmentTreeModel2', 'DepartmentTreeModel');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DepartmentTreeModel2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(EmployeePositionSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS', 'EmployeePositionSlimInfo2', 'EmployeePositionSlimInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EmployeePositionSlimInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(EmployeePositionSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS', 'EmployeePositionSlimInfo');
  RemClassRegistry.RegisterXSClass(LEmployeePositionInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS', 'LEmployeePositionInfo2', 'LEmployeePositionInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LEmployeePositionInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(LEmployeePositionInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS', 'LEmployeePositionInfo');
  RemClassRegistry.RegisterXSClass(AcsBoxAccessLevelSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel', 'AcsBoxAccessLevelSlimInfo2', 'AcsBoxAccessLevelSlimInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsBoxAccessLevelSlimInfo2), 'BoxAccessElements', '[ArrayItemName="AcsBoxAccessLevelElementSlimInfo"]');
  RemClassRegistry.RegisterXSClass(AcsBoxAccessLevelSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel', 'AcsBoxAccessLevelSlimInfo');
  RemClassRegistry.RegisterXSClass(AcsAccessLevelSimpleInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'AcsAccessLevelSimpleInfo2', 'AcsAccessLevelSimpleInfo');
  RemClassRegistry.RegisterXSClass(AcsAccessLevelSimpleInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'AcsAccessLevelSimpleInfo');
  RemClassRegistry.RegisterXSClass(ScreenLayoutInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ScreenLayoutInfo2', 'ScreenLayoutInfo');
  RemClassRegistry.RegisterXSClass(ScreenLayoutInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ScreenLayoutInfo');
  RemClassRegistry.RegisterXSClass(ReactionEventsFromDevicesSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionEventsFromDevicesSaveData2', 'ReactionEventsFromDevicesSaveData');
  RemClassRegistry.RegisterXSClass(ReactionEventsFromDevicesSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionEventsFromDevicesSaveData');
  RemClassRegistry.RegisterXSClass(ReactionEventsFromDevicesSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionEventsFromDevicesSlimInfo2', 'ReactionEventsFromDevicesSlimInfo');
  RemClassRegistry.RegisterXSClass(ReactionEventsFromDevicesSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionEventsFromDevicesSlimInfo');
  RemClassRegistry.RegisterXSClass(UserPassEditorData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'UserPassEditorData2', 'UserPassEditorData');
  RemClassRegistry.RegisterXSClass(UserPassEditorData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'UserPassEditorData');
  RemClassRegistry.RegisterXSClass(ReactionEventSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionEventSlimInfo2', 'ReactionEventSlimInfo');
  RemClassRegistry.RegisterXSClass(ReactionEventSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionEventSlimInfo');
  RemClassRegistry.RegisterXSClass(ReactionSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionSlimInfo2', 'ReactionSlimInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReactionSlimInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(ReactionSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionSlimInfo');
  RemClassRegistry.RegisterXSClass(ReactionFullInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionFullInfo2', 'ReactionFullInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReactionFullInfo2), 'Actions', '[ArrayItemName="ReactionActionSlimInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReactionFullInfo2), 'Events', '[ArrayItemName="ReactionEventSlimInfo"]');
  RemClassRegistry.RegisterXSClass(ReactionFullInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionFullInfo');
  RemClassRegistry.RegisterXSClass(WorkScheduleSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkScheduleSlimInfo2', 'WorkScheduleSlimInfo');
  RemClassRegistry.RegisterXSClass(WorkScheduleSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkScheduleSlimInfo');
  RemClassRegistry.RegisterXSClass(WorkZoneSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZoneSlimInfo2', 'WorkZoneSlimInfo');
  RemClassRegistry.RegisterXSClass(WorkZoneSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZoneSlimInfo');
  RemClassRegistry.RegisterXSClass(WorkZonesAccessPointBase2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZonesAccessPointBase2', 'WorkZonesAccessPointBase');
  RemClassRegistry.RegisterXSClass(WorkZonesAccessPointBase, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZonesAccessPointBase');
  RemClassRegistry.RegisterXSClass(WorkZonesAccessPointSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZonesAccessPointSlimInfo2', 'WorkZonesAccessPointSlimInfo');
  RemClassRegistry.RegisterXSClass(WorkZonesAccessPointSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZonesAccessPointSlimInfo');
  RemClassRegistry.RegisterXSClass(WorkZonesAccessPointSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZonesAccessPointSaveData2', 'WorkZonesAccessPointSaveData');
  RemClassRegistry.RegisterXSClass(WorkZonesAccessPointSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZonesAccessPointSaveData');
  RemClassRegistry.RegisterXSClass(AcsAccessPointSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'AcsAccessPointSaveData2', 'AcsAccessPointSaveData');
  RemClassRegistry.RegisterXSClass(AcsAccessPointSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'AcsAccessPointSaveData');
  RemClassRegistry.RegisterXSClass(AcsAccessPointSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'AcsAccessPointSlimInfo2', 'AcsAccessPointSlimInfo');
  RemClassRegistry.RegisterXSClass(AcsAccessPointSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'AcsAccessPointSlimInfo');
  RemClassRegistry.RegisterXSClass(AcsVehicleSearched2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsVehicleSearched2', 'AcsVehicleSearched');
  RemClassRegistry.RegisterXSClass(AcsVehicleSearched, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsVehicleSearched');
  RemClassRegistry.RegisterXSClass(AcsEmployeeFaceVector2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeFaceVector2', 'AcsEmployeeFaceVector');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeeFaceVector2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(AcsEmployeeFaceVector, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeFaceVector');
  RemClassRegistry.RegisterXSClass(AcsEmployeeFaceVectorFull2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeFaceVectorFull2', 'AcsEmployeeFaceVectorFull');
  RemClassRegistry.RegisterXSClass(AcsEmployeeFaceVectorFull, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeFaceVectorFull');
  RemClassRegistry.RegisterXSClass(AcsEmployeeFaceVectorSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeFaceVectorSaveData2', 'AcsEmployeeFaceVectorSaveData');
  RemClassRegistry.RegisterXSClass(AcsEmployeeFaceVectorSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeFaceVectorSaveData');
  RemClassRegistry.RegisterXSClass(EmployeeShortInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeeShortInfo2', 'EmployeeShortInfo');
  RemClassRegistry.RegisterXSClass(EmployeeShortInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeeShortInfo');
  RemClassRegistry.RegisterXSClass(AcsEmployee2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployee2', 'AcsEmployee');
  RemClassRegistry.RegisterXSClass(AcsEmployee, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployee');
  RemClassRegistry.RegisterXSClass(AcsEmployeePhotosInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeePhotosInfo2', 'AcsEmployeePhotosInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeePhotosInfo2), 'Photos', '[ArrayItemName="AscEmployeePhotoModificationDateTimeInfo"]');
  RemClassRegistry.RegisterXSClass(AcsEmployeePhotosInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeePhotosInfo');
  RemClassRegistry.RegisterXSClass(Absent2, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'Absent2', 'Absent');
  RemClassRegistry.RegisterXSClass(AcsBoxAccessElementSaveInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel', 'AcsBoxAccessElementSaveInfo2', 'AcsBoxAccessElementSaveInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsBoxAccessElementSaveInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(AcsBoxAccessLevelElementSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel', 'AcsBoxAccessLevelElementSlimInfo2', 'AcsBoxAccessLevelElementSlimInfo');
  RemClassRegistry.RegisterXSClass(AcsBoxAccessLevelElementSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel', 'AcsBoxAccessLevelElementSlimInfo');
  RemClassRegistry.RegisterXSClass(AcsBoxAccessElementSaveInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel', 'AcsBoxAccessElementSaveInfo');
  RemClassRegistry.RegisterXSClass(FavoriteFolderSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder', 'FavoriteFolderSaveData2', 'FavoriteFolderSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FavoriteFolderSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(FavoriteFolderSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder', 'FavoriteFolderSaveData');
  RemClassRegistry.RegisterXSClass(FavoriteFolderInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder', 'FavoriteFolderInfo2', 'FavoriteFolderInfo');
  RemClassRegistry.RegisterXSClass(FavoriteFolderInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder', 'FavoriteFolderInfo');
  RemClassRegistry.RegisterXSClass(FavoriteFolderInfoWithEmployeeGroup2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder', 'FavoriteFolderInfoWithEmployeeGroup2', 'FavoriteFolderInfoWithEmployeeGroup');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FavoriteFolderInfoWithEmployeeGroup2), 'Groups', '[ArrayItemName="AcsEmployeeGroup"]');
  RemClassRegistry.RegisterXSClass(FavoriteFolderInfoWithEmployeeGroup, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder', 'FavoriteFolderInfoWithEmployeeGroup');
  RemClassRegistry.RegisterXSClass(ScreenCellSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ScreenCellSaveData2', 'ScreenCellSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ScreenCellSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(ScreenCellSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ScreenCellSaveData');
  RemClassRegistry.RegisterXSClass(ScreenCellInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ScreenCellInfo2', 'ScreenCellInfo');
  RemClassRegistry.RegisterXSClass(ScreenCellTreeInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ScreenCellTreeInfo2', 'ScreenCellTreeInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ScreenCellTreeInfo2), 'Children', '[ArrayItemName="ScreenCellTreeInfo"]');
  RemClassRegistry.RegisterXSClass(ScreenCellTreeInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ScreenCellTreeInfo');
  RemClassRegistry.RegisterXSClass(ScreenCellInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout', 'ScreenCellInfo');
  RemClassRegistry.RegisterXSClass(ReactionRecordVideoActionSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionRecordVideoActionSaveData2', 'ReactionRecordVideoActionSaveData');
  RemClassRegistry.RegisterXSClass(ReactionRecordVideoActionSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionRecordVideoActionSlimInfo2', 'ReactionRecordVideoActionSlimInfo');
  RemClassRegistry.RegisterXSClass(ReactionRecordVideoActionSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionRecordVideoActionSlimInfo');
  RemClassRegistry.RegisterXSClass(ReactionRecordVideoActionSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionRecordVideoActionSaveData');
  RemClassRegistry.RegisterXSClass(ReportSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report', 'ReportSaveData2', 'ReportSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReportSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(ReportSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report', 'ReportSlimInfo2', 'ReportSlimInfo');
  RemClassRegistry.RegisterXSClass(ReportSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report', 'ReportSlimInfo');
  RemClassRegistry.RegisterXSClass(UserPassSlimSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'UserPassSlimSaveData2', 'UserPassSlimSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserPassSlimSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(UserPassSlimData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'UserPassSlimData2', 'UserPassSlimData');
  RemClassRegistry.RegisterXSClass(UserPassSlimData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'UserPassSlimData');
  RemClassRegistry.RegisterXSClass(UserPassSlimSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'UserPassSlimSaveData');
  RemClassRegistry.RegisterXSClass(UserPassFullSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'UserPassFullSaveData2', 'UserPassFullSaveData');
  RemClassRegistry.RegisterXSClass(UserPassFullSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'UserPassFullSaveData');
  RemClassRegistry.RegisterXSClass(UserPassFullData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'UserPassFullData2', 'UserPassFullData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserPassFullData2), 'UserPassEditors', '[ArrayItemName="UserPassEditorData"]');
  RemClassRegistry.RegisterXSClass(UserPassFullData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass', 'UserPassFullData');
  RemClassRegistry.RegisterXSClass(ReactionActionSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionActionSaveData2', 'ReactionActionSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReactionActionSaveData2), 'Name_', '[ExtName="Name"]');
end;

procedure RegisterTypeProc2;
begin
  RemClassRegistry.RegisterXSClass(ReactionActionSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionActionSlimInfo2', 'ReactionActionSlimInfo');
  RemClassRegistry.RegisterXSClass(ReactionActionSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionActionSlimInfo');
  RemClassRegistry.RegisterXSClass(ReactionActionSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionActionSaveData');
  RemClassRegistry.RegisterXSClass(DayTypeSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'DayTypeSaveData2', 'DayTypeSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DayTypeSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(DayTypeSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'DayTypeSlimInfo2', 'DayTypeSlimInfo');
  RemClassRegistry.RegisterXSClass(DayTypeSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'DayTypeSlimInfo');
  RemClassRegistry.RegisterXSClass(DayTypeSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'DayTypeSaveData');
  RemClassRegistry.RegisterXSClass(AccessPointData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'AccessPointData2', 'AccessPointData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AccessPointData2), 'Points', '[ArrayItemName="AcsAccessPointDriverInfo"]');
  RemClassRegistry.RegisterXSClass(AccessPointData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'AccessPointData');
  RemClassRegistry.RegisterXSClass(AcsEmployeeSlimBase2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeSlimBase2', 'AcsEmployeeSlimBase');
  RemClassRegistry.RegisterXSClass(AcsEmployeeSlimBase, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeSlimBase');
  RemClassRegistry.RegisterXSClass(AcsEmployeeInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeInfo2', 'AcsEmployeeInfo');
  RemClassRegistry.RegisterXSClass(AcsEmployeeInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeInfo');
  RemClassRegistry.RegisterXSClass(EmployeesData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeesData2', 'EmployeesData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EmployeesData2), 'Employees', '[ArrayItemName="EmployeeCurentInfo"]');
  RemClassRegistry.RegisterXSClass(EmployeesData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeesData');
  RemClassRegistry.RegisterXSClass(EmployeeCurentInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeeCurentInfo2', 'EmployeeCurentInfo');
  RemClassRegistry.RegisterXSClass(EmployeeCurentInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeeCurentInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(duration), 'http://schemas.microsoft.com/2003/10/Serialization/', 'duration');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FactoryType), 'http://schemas.microsoft.com/2003/10/Serialization/', 'FactoryType');
  RemClassRegistry.RegisterXSClass(Exception2, 'http://schemas.datacontract.org/2004/07/System', 'Exception2', 'Exception');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(Exception2), 'FactoryType', '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  RemClassRegistry.RegisterXSClass(SystemException2, 'http://schemas.datacontract.org/2004/07/System', 'SystemException2', 'SystemException');
  RemClassRegistry.RegisterXSClass(ArgumentException2, 'http://schemas.datacontract.org/2004/07/System', 'ArgumentException2', 'ArgumentException');
  RemClassRegistry.RegisterXSClass(ArgumentNullException2, 'http://schemas.datacontract.org/2004/07/System', 'ArgumentNullException2', 'ArgumentNullException');
  RemClassRegistry.RegisterXSClass(InvalidOperationException2, 'http://schemas.datacontract.org/2004/07/System', 'InvalidOperationException2', 'InvalidOperationException');
  RemClassRegistry.RegisterXSClass(ApplicationException2, 'http://schemas.datacontract.org/2004/07/System', 'ApplicationException2', 'ApplicationException');
  RemClassRegistry.RegisterXSClass(DriverVisualStyleNotFoundException2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'DriverVisualStyleNotFoundException2', 'DriverVisualStyleNotFoundException');
  RemClassRegistry.RegisterXSClass(AssignmentAcsKeyException2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'AssignmentAcsKeyException2', 'AssignmentAcsKeyException');
  RemClassRegistry.RegisterXSClass(RemoveCardTypeException2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'RemoveCardTypeException2', 'RemoveCardTypeException');
  RemClassRegistry.RegisterXSClass(DriverNotFoundException2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'DriverNotFoundException2', 'DriverNotFoundException');
  RemClassRegistry.RegisterXSClass(DataNotFoundException2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'DataNotFoundException2', 'DataNotFoundException');
  RemClassRegistry.RegisterXSClass(DataConsistencyException2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'DataConsistencyException2', 'DataConsistencyException');
  RemClassRegistry.RegisterXSClass(DataAlreadyExistsException2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'DataAlreadyExistsException2', 'DataAlreadyExistsException');
  RemClassRegistry.RegisterXSClass(DataNotFoundException, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'DataNotFoundException');
  RemClassRegistry.RegisterXSClass(DataConsistencyException, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'DataConsistencyException');
  RemClassRegistry.RegisterXSClass(DataAlreadyExistsException, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'DataAlreadyExistsException');
  RemClassRegistry.RegisterXSClass(DriverNotFoundException, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'DriverNotFoundException');
  RemClassRegistry.RegisterXSClass(RemoveCardTypeException, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'RemoveCardTypeException');
  RemClassRegistry.RegisterXSClass(DriverVisualStyleNotFoundException, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'DriverVisualStyleNotFoundException');
  RemClassRegistry.RegisterXSClass(AssignmentAcsKeyException, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Exceptions', 'AssignmentAcsKeyException');
  RemClassRegistry.RegisterXSClass(LEmployeePositionsData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS', 'LEmployeePositionsData2', 'LEmployeePositionsData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LEmployeePositionsData2), 'UserPositions', '[ArrayItemName="LEmployeePositionInfo"]');
  RemClassRegistry.RegisterXSClass(LEmployeePositionsData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS', 'LEmployeePositionsData');
  RemClassRegistry.RegisterXSClass(LAccessLevelsData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'LAccessLevelsData2', 'LAccessLevelsData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LAccessLevelsData2), 'AccessLevelsSlimInfo', '[ArrayItemName="AcsAccessLevelSlimInfo"]');
  RemClassRegistry.RegisterXSClass(LAccessLevelsData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'LAccessLevelsData');
  RemClassRegistry.RegisterXSClass(WorkSchedulesData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkSchedulesData2', 'WorkSchedulesData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WorkSchedulesData2), 'WorkSchedulesSlimInfo', '[ArrayItemName="WorkScheduleSlimInfo"]');
  RemClassRegistry.RegisterXSClass(WorkSchedulesData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkSchedulesData');
  RemClassRegistry.RegisterXSClass(WorkZonesData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZonesData2', 'WorkZonesData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WorkZonesData2), 'WorkZonesSlimInfo', '[ArrayItemName="WorkZoneSlimInfo"]');
  RemClassRegistry.RegisterXSClass(WorkZonesData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkZonesData');
  RemClassRegistry.RegisterXSClass(EmployeesInfoData22, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeesInfoData22', 'EmployeesInfoData2');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EmployeesInfoData22), 'Employees', '[ArrayItemName="AcsEmployeeInfo"]');
  RemClassRegistry.RegisterXSClass(EmployeesInfoData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeesInfoData2');
  RemClassRegistry.RegisterXSClass(EmployeesInfoData3, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeesInfoData3', 'EmployeesInfoData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EmployeesInfoData3), 'Employees', '[ArrayItemName="AcsEmployeeSlim"]');
  RemClassRegistry.RegisterXSClass(EmployeesInfoData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeesInfoData');
  RemClassRegistry.RegisterXSClass(AcsAccessLevelSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'AcsAccessLevelSlimInfo2', 'AcsAccessLevelSlimInfo');
  RemClassRegistry.RegisterXSClass(AcsAccessLevelSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels', 'AcsAccessLevelSlimInfo');
  RemClassRegistry.RegisterXSClass(AcsKeySaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys', 'AcsKeySaveData2', 'AcsKeySaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsKeySaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(AcsKeySaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys', 'AcsKeySaveData');
  RemClassRegistry.RegisterXSClass(AcsKeyInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys', 'AcsKeyInfo2', 'AcsKeyInfo');
  RemClassRegistry.RegisterXSClass(AcsKeyInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys', 'AcsKeyInfo');
  RemClassRegistry.RegisterXSClass(WorkTimetableSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkTimetableSlimInfo2', 'WorkTimetableSlimInfo');
  RemClassRegistry.RegisterXSClass(WorkTimetableSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking', 'WorkTimetableSlimInfo');
  RemClassRegistry.RegisterXSClass(AcsEmployeeScheduleSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeScheduleSaveData2', 'AcsEmployeeScheduleSaveData');
  RemClassRegistry.RegisterXSClass(AcsEmployeeSchedule2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeSchedule2', 'AcsEmployeeSchedule');
  RemClassRegistry.RegisterXSClass(AcsEmployeeSchedule, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeSchedule');
  RemClassRegistry.RegisterXSClass(AcsEmployeeScheduleSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeScheduleSaveData');
  RemClassRegistry.RegisterXSClass(AcsEmployeeFullBase2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeFullBase2', 'AcsEmployeeFullBase');
  RemClassRegistry.RegisterXSClass(AcsEmployeeSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeSaveData2', 'AcsEmployeeSaveData');
  RemClassRegistry.RegisterXSClass(AcsEmployeeSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeSaveData');
  RemClassRegistry.RegisterXSClass(AcsEmployeeFullBase, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeFullBase');
  RemClassRegistry.RegisterXSClass(AcsEmployeeFull2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeFull2', 'AcsEmployeeFull');
  RemClassRegistry.RegisterXSClass(AcsEmployeeFull, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeFull');
  RemClassRegistry.RegisterXSClass(AcsEmployeeSlim2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeSlim2', 'AcsEmployeeSlim');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeeSlim2), 'AccessLevels', '[ArrayItemName="AcsAccessLevelSlimInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeeSlim2), 'Keys', '[ArrayItemName="AcsKeyInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeeSlim2), 'WorkSchedules', '[ArrayItemName="WorkScheduleSlimInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeeSlim2), 'WorkZones', '[ArrayItemName="WorkZoneSlimInfo"]');
  RemClassRegistry.RegisterXSClass(AcsEmployeeSlim, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeSlim');
  RemClassRegistry.RegisterXSClass(AcsEmployeeGroup2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeGroup2', 'AcsEmployeeGroup');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeeGroup2), 'EmployeeGroups', '[ArrayItemName="AcsEmployeeGroup"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeeGroup2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(AcsEmployeeGroup, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeGroup');
  RemClassRegistry.RegisterXSClass(AscEmployeePhotoModificationDateTimeInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AscEmployeePhotoModificationDateTimeInfo2', 'AscEmployeePhotoModificationDateTimeInfo');
  RemClassRegistry.RegisterXSClass(AscEmployeePhotoModificationDateTimeInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AscEmployeePhotoModificationDateTimeInfo');
  RemClassRegistry.RegisterXSClass(SearchCondition2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'SearchCondition2', 'SearchCondition');
  RemClassRegistry.RegisterXSClass(SearchCondition, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'SearchCondition');
  RemClassRegistry.RegisterXSClass(AcsEmployeeDocumentsSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeDocumentsSaveData2', 'AcsEmployeeDocumentsSaveData');
  RemClassRegistry.RegisterXSClass(AcsEmployeeDocumentsSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeDocumentsSaveData');
  RemClassRegistry.RegisterXSClass(AcsEmployeeDocumentsData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeDocumentsData2', 'AcsEmployeeDocumentsData');
  RemClassRegistry.RegisterXSClass(AcsEmployeeDocumentsData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeDocumentsData');
  RemClassRegistry.RegisterXSClass(DataForPeriodModel2, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'DataForPeriodModel2', 'DataForPeriodModel');
  RemClassRegistry.RegisterXSClass(DataOnPresenceInWorkplace2, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'DataOnPresenceInWorkplace2', 'DataOnPresenceInWorkplace');
  RemClassRegistry.RegisterXSClass(PlanModel2, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'PlanModel2', 'PlanModel');
  RemClassRegistry.RegisterXSClass(TagFullInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'TagFullInfo2', 'TagFullInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TagFullInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(ResourceTagsData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'ResourceTagsData2', 'ResourceTagsData');
  RemClassRegistry.RegisterXSClass(ResourceTagsData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'ResourceTagsData');
  RemClassRegistry.RegisterXSClass(BoxAccessLevelTagsData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'BoxAccessLevelTagsData2', 'BoxAccessLevelTagsData');
  RemClassRegistry.RegisterXSClass(BoxAccessLevelTagsData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'BoxAccessLevelTagsData');
  RemClassRegistry.RegisterXSClass(AccessLevelTagsData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'AccessLevelTagsData2', 'AccessLevelTagsData');
  RemClassRegistry.RegisterXSClass(AccessLevelTagsData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'AccessLevelTagsData');
  RemClassRegistry.RegisterXSClass(TagFullInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'TagFullInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfTagFullInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'ArrayOfTagFullInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfResourceTagsData), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'ArrayOfResourceTagsData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfKeyValueOfstringstring), 'http://schemas.microsoft.com/2003/10/Serialization/Arrays', 'ArrayOfKeyValueOfstringstring');
  RemClassRegistry.RegisterXSClass(KeyValueOfstringstring, 'http://schemas.microsoft.com/2003/10/Serialization/Arrays', 'KeyValueOfstringstring');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfunsignedShort), 'http://schemas.microsoft.com/2003/10/Serialization/Arrays', 'ArrayOfunsignedShort');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfEmployeeGroupTagsData), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'ArrayOfEmployeeGroupTagsData');
  RemClassRegistry.RegisterXSClass(EmployeeGroupTagsData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'EmployeeGroupTagsData2', 'EmployeeGroupTagsData');
  RemClassRegistry.RegisterXSClass(EmployeeGroupTagsData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'EmployeeGroupTagsData');
end;

procedure RegisterTypeProc3;
begin
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAccessLevelTagsData), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'ArrayOfAccessLevelTagsData');
  RemClassRegistry.RegisterXSClass(ReportTagsData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'ReportTagsData2', 'ReportTagsData');
  RemClassRegistry.RegisterXSClass(ReportTagsData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'ReportTagsData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfMifareProfileTagsData), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'ArrayOfMifareProfileTagsData');
  RemClassRegistry.RegisterXSClass(MifareProfileTagsData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'MifareProfileTagsData2', 'MifareProfileTagsData');
  RemClassRegistry.RegisterXSClass(MifareProfileTagsData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'MifareProfileTagsData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfReportTagsData), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag', 'ArrayOfReportTagsData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfArrayOfKeyValueOfstringstring), 'http://schemas.microsoft.com/2003/10/Serialization/Arrays', 'ArrayOfArrayOfKeyValueOfstringstring');
  RemClassRegistry.RegisterXSClass(DepartmentTreeModel, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'DepartmentTreeModel');
  RemClassRegistry.RegisterXSClass(DataForPeriodModel, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'DataForPeriodModel');
  RemClassRegistry.RegisterXSClass(DataOnPresenceInWorkplace, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'DataOnPresenceInWorkplace');
  RemClassRegistry.RegisterXSClass(PlanModel, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'PlanModel');
  RemClassRegistry.RegisterXSClass(DataForViolator2, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'DataForViolator2', 'DataForViolator');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfViolator), 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'ArrayOfViolator');
  RemClassRegistry.RegisterXSClass(Violator2, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'Violator2', 'Violator');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfint), 'http://schemas.microsoft.com/2003/10/Serialization/Arrays', 'ArrayOfint');
  RemClassRegistry.RegisterXSClass(ReactionSendEmailActionSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionSendEmailActionSaveData2', 'ReactionSendEmailActionSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReactionSendEmailActionSaveData2), 'NumbersToSendEmailForEmployeesFromEvents', '[ArrayItemName="int"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReactionSendEmailActionSaveData2), 'NumbersToSendEmailForEmployeesFromList', '[ArrayItemName="int"]');
  RemClassRegistry.RegisterXSClass(ReactionSendEmailActionSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionSendEmailActionSlimInfo2', 'ReactionSendEmailActionSlimInfo');
  RemClassRegistry.RegisterXSClass(ReactionSendEmailActionSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionSendEmailActionSlimInfo');
  RemClassRegistry.RegisterXSClass(ReactionSendEmailActionSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionSendEmailActionSaveData');
  RemClassRegistry.RegisterXSClass(ReactionSendSMSActionSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionSendSMSActionSaveData2', 'ReactionSendSMSActionSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReactionSendSMSActionSaveData2), 'NumbersToSendSMSForEmployeesFromEvents', '[ArrayItemName="int"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReactionSendSMSActionSaveData2), 'NumbersToSendSMSForEmployeesFromList', '[ArrayItemName="int"]');
  RemClassRegistry.RegisterXSClass(ReactionSendSMSActionSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionSendSMSActionSaveData');
  RemClassRegistry.RegisterXSClass(ReactionSendSMSActionSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionSendSMSActionSlimInfo2', 'ReactionSendSMSActionSlimInfo');
  RemClassRegistry.RegisterXSClass(ReactionSendSMSActionSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction', 'ReactionSendSMSActionSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfstring), 'http://schemas.microsoft.com/2003/10/Serialization/Arrays', 'ArrayOfstring');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfdateTime), 'http://schemas.microsoft.com/2003/10/Serialization/Arrays', 'ArrayOfdateTime');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfguid), 'http://schemas.microsoft.com/2003/10/Serialization/Arrays', 'ArrayOfguid');
  RemClassRegistry.RegisterXSClass(AcsEmployeeGroupReactionInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeGroupReactionInfo2', 'AcsEmployeeGroupReactionInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeeGroupReactionInfo2), 'EmployeeGroups1', '[ArrayItemName="AcsEmployeeGroupReactionInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeeGroupReactionInfo2), 'EmployeesFromGroupsGuids', '[ArrayItemName="guid"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeeGroupReactionInfo2), 'SelectedEmployeesGuids', '[ArrayItemName="guid"]');
  RemClassRegistry.RegisterXSClass(AcsEmployeeGroupReactionInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeGroupReactionInfo');
  RemClassRegistry.RegisterXSClass(AcsEmployeeGroupReportInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeGroupReportInfo2', 'AcsEmployeeGroupReportInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeeGroupReportInfo2), 'EmployeeGroups2', '[ArrayItemName="AcsEmployeeGroupReportInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeeGroupReportInfo2), 'EmployeesFromGroupsGuids', '[ArrayItemName="guid"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsEmployeeGroupReportInfo2), 'SelectedEmployeesGuids', '[ArrayItemName="guid"]');
  RemClassRegistry.RegisterXSClass(AcsEmployeeGroupReportInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'AcsEmployeeGroupReportInfo');
  RemClassRegistry.RegisterXSClass(Absent, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'Absent');
  RemClassRegistry.RegisterXSClass(DataForViolator, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'DataForViolator');
  RemClassRegistry.RegisterXSClass(Violator, 'http://schemas.datacontract.org/2004/07/RusGuard.Models', 'Violator');
  RemClassRegistry.RegisterXSClass(ArgumentOutOfRangeException2, 'http://schemas.datacontract.org/2004/07/System', 'ArgumentOutOfRangeException2', 'ArgumentOutOfRangeException');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfVariableInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ArrayOfVariableInfo');
  RemClassRegistry.RegisterXSClass(EmployeeInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeeInfo2', 'EmployeeInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EmployeeInfo2), 'Fields', '[ArrayItemName="VariableInfo"]');
  RemClassRegistry.RegisterXSClass(EmployeeInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees', 'EmployeeInfo');
  RemClassRegistry.RegisterXSClass(ReportingServicesData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ReportingServicesData2', 'ReportingServicesData');
  RemClassRegistry.RegisterXSClass(ReportingServicesData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ReportingServicesData');
  RemClassRegistry.RegisterXSClass(TimeOfDay2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'TimeOfDay2', 'TimeOfDay');
  RemClassRegistry.RegisterXSClass(TimeOfDay, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'TimeOfDay');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLServerAdded), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ArrayOfLServerAdded');
  RemClassRegistry.RegisterXSClass(LServerAdded2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LServerAdded2', 'LServerAdded');
  RemClassRegistry.RegisterXSClass(LServerAdded, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LServerAdded');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CUDType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'CUDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(LinkType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LinkType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SortOrder), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'SortOrder');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EntryType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'EntryType');
  RemClassRegistry.RegisterXSClass(AccessPoint2CameraSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'AccessPoint2CameraSaveData2', 'AccessPoint2CameraSaveData');
  RemClassRegistry.RegisterXSClass(AccessPoint2CameraSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'AccessPoint2CameraSaveData');
  RemClassRegistry.RegisterXSClass(AccessPoint2CameraChain2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'AccessPoint2CameraChain2', 'AccessPoint2CameraChain');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAccessPoint2CameraChain), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ArrayOfAccessPoint2CameraChain');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsWeekFull), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'ArrayOfAcsWeekFull');
  RemClassRegistry.RegisterXSClass(AcsWeekFull2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsWeekFull2', 'AcsWeekFull');
  RemClassRegistry.RegisterXSClass(AcsWeekFull, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsWeekFull');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsWeekScheduleFull), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'ArrayOfAcsWeekScheduleFull');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsWeekSlim), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'ArrayOfAcsWeekSlim');
  RemClassRegistry.RegisterXSClass(AcsWeekSlim2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsWeekSlim2', 'AcsWeekSlim');
  RemClassRegistry.RegisterXSClass(AcsWeekSlim, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsWeekSlim');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsWorkDayWithTransfer), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'ArrayOfAcsWorkDayWithTransfer');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AcsScheduleOwnerType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsScheduleOwnerType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AcsCustomizableDayType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsCustomizableDayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsCustomDay), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'ArrayOfAcsCustomDay');
  RemClassRegistry.RegisterXSClass(AcsCustomizableDayBase2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsCustomizableDayBase2', 'AcsCustomizableDayBase');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsCustomizableDayBase2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(AcsCustomDay2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsCustomDay2', 'AcsCustomDay');
  RemClassRegistry.RegisterXSClass(AcsCustomDay, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsCustomDay');
  RemClassRegistry.RegisterXSClass(AcsWorkDayWithTransfer2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsWorkDayWithTransfer2', 'AcsWorkDayWithTransfer');
  RemClassRegistry.RegisterXSClass(AcsWorkDayWithTransfer, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsWorkDayWithTransfer');
  RemClassRegistry.RegisterXSClass(AcsCustomizableDayBase, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsCustomizableDayBase');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsWeekScheduleSlim), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'ArrayOfAcsWeekScheduleSlim');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsDaySchedule), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'ArrayOfAcsDaySchedule');
  RemClassRegistry.RegisterXSClass(AccessPoint2CameraChain, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'AccessPoint2CameraChain');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AcsScheduleType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsScheduleType');
  RemClassRegistry.RegisterXSClass(AcsScheduleSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsScheduleSlimInfo2', 'AcsScheduleSlimInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsScheduleSlimInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(AcsScheduleSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsScheduleSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsMultiDaySchedule), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'ArrayOfAcsMultiDaySchedule');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfRGDayIntervals), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'ArrayOfRGDayIntervals');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AcsTimeIntervalType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsTimeIntervalType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AcsScheduleBuiltInType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsScheduleBuiltInType');
  RemClassRegistry.RegisterXSClass(AcsScheduleBase2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsScheduleBase2', 'AcsScheduleBase');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsScheduleBase2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(AcsMultiDaySchedule2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsMultiDaySchedule2', 'AcsMultiDaySchedule');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsMultiDaySchedule2), 'DayIntervals', '[ArrayItemName="RGDayIntervals"]');
  RemClassRegistry.RegisterXSClass(AcsMultiDaySchedule, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsMultiDaySchedule');
  RemClassRegistry.RegisterXSClass(AcsScheduleBase, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsScheduleBase');
  RemClassRegistry.RegisterXSClass(AcsWeekScheduleFull2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsWeekScheduleFull2', 'AcsWeekScheduleFull');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsWeekScheduleFull2), 'Weeks', '[ArrayItemName="AcsWeekFull"]');
  RemClassRegistry.RegisterXSClass(AcsWeekScheduleFull, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsWeekScheduleFull');
  RemClassRegistry.RegisterXSClass(AcsWeekScheduleSlim2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsWeekScheduleSlim2', 'AcsWeekScheduleSlim');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsWeekScheduleSlim2), 'Weeks', '[ArrayItemName="AcsWeekSlim"]');
  RemClassRegistry.RegisterXSClass(AcsWeekScheduleSlim, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsWeekScheduleSlim');
  RemClassRegistry.RegisterXSClass(AcsDaySchedule2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsDaySchedule2', 'AcsDaySchedule');
  RemClassRegistry.RegisterXSClass(AcsDaySchedule, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'AcsDaySchedule');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfRGTimeInterval), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'ArrayOfRGTimeInterval');
  RemClassRegistry.RegisterXSClass(RGDayIntervals2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'RGDayIntervals2', 'RGDayIntervals');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RGDayIntervals2), 'TimeIntervals', '[ArrayItemName="RGTimeInterval"]');
  RemClassRegistry.RegisterXSClass(RGDayIntervals, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'RGDayIntervals');
  RemClassRegistry.RegisterXSClass(RGTimeInterval2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'RGTimeInterval2', 'RGTimeInterval');
  RemClassRegistry.RegisterXSClass(RGTimeInterval, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule', 'RGTimeInterval');
  RemClassRegistry.RegisterXSClass(ExternalException2, 'http://schemas.datacontract.org/2004/07/System.Runtime.InteropServices', 'ExternalException2', 'ExternalException');
  RemClassRegistry.RegisterXSClass(Win32Exception2, 'http://schemas.datacontract.org/2004/07/System.ComponentModel', 'Win32Exception2', 'Win32Exception');
  RemClassRegistry.RegisterXSClass(Win32Exception, 'http://schemas.datacontract.org/2004/07/System.ComponentModel', 'Win32Exception');
  RemClassRegistry.RegisterXSClass(ExternalException, 'http://schemas.datacontract.org/2004/07/System.Runtime.InteropServices', 'ExternalException');
  RemClassRegistry.RegisterXSClass(OperationCanceledException, 'http://schemas.datacontract.org/2004/07/System', 'OperationCanceledException');
end;

procedure RegisterTypeProc4;
begin
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfIPAddress), 'http://schemas.datacontract.org/2004/07/System.Net', 'ArrayOfIPAddress');
  RemClassRegistry.RegisterXSClass(WebException, 'http://schemas.datacontract.org/2004/07/System.Net', 'WebException');
  RemClassRegistry.RegisterXSClass(WebException2, 'http://schemas.datacontract.org/2004/07/System.Net', 'WebException2', 'WebException');
  RemClassRegistry.RegisterXSClass(SocketException2, 'http://schemas.datacontract.org/2004/07/System.Net.Sockets', 'SocketException2', 'SocketException');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddressFamily), 'http://schemas.datacontract.org/2004/07/System.Net.Sockets', 'AddressFamily');
  RemClassRegistry.RegisterXSClass(IPAddress2, 'http://schemas.datacontract.org/2004/07/System.Net', 'IPAddress2', 'IPAddress');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IPAddress2), 'm_Numbers', '[ArrayItemName="unsignedShort"]');
  RemClassRegistry.RegisterXSClass(SocketException, 'http://schemas.datacontract.org/2004/07/System.Net.Sockets', 'SocketException');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfTupleOfguidNullableOfdateTimeGOBf0pnW), 'http://schemas.datacontract.org/2004/07/System', 'ArrayOfTupleOfguidNullableOfdateTimeGOBf0pnW');
  RemClassRegistry.RegisterXSClass(TupleOfguidNullableOfdateTimeGOBf0pnW2, 'http://schemas.datacontract.org/2004/07/System', 'TupleOfguidNullableOfdateTimeGOBf0pnW2', 'TupleOfguidNullableOfdateTimeGOBf0pnW');
  RemClassRegistry.RegisterXSClass(TupleOfguidNullableOfdateTimeGOBf0pnW, 'http://schemas.datacontract.org/2004/07/System', 'TupleOfguidNullableOfdateTimeGOBf0pnW');
  RemClassRegistry.RegisterXSClass(ApplicationException, 'http://schemas.datacontract.org/2004/07/System', 'ApplicationException');
  RemClassRegistry.RegisterXSClass(TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH2, 'http://schemas.datacontract.org/2004/07/System', 'TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH2', 'TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH2), 'm_Item1', '[ArrayItemName="AcsBoxAccessLevelElementSlimInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH2), 'm_Item2', '[ArrayItemName="AcsBoxAccessLevelElementSlimInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH2), 'm_Item3', '[ArrayItemName="AcsBoxAccessLevelElementSlimInfo"]');
  RemClassRegistry.RegisterXSClass(TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH, 'http://schemas.datacontract.org/2004/07/System', 'TupleOfArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoArrayOfAcsBoxAccessLevelElementSlimInfoZNgA9GgH');
  RemClassRegistry.RegisterXSClass(TimeoutException2, 'http://schemas.datacontract.org/2004/07/System', 'TimeoutException2', 'TimeoutException');
  RemClassRegistry.RegisterXSClass(TupleOfArrayOfguidArrayOfguid0dMmj3_Sh2, 'http://schemas.datacontract.org/2004/07/System', 'TupleOfArrayOfguidArrayOfguid0dMmj3_Sh2', 'TupleOfArrayOfguidArrayOfguid0dMmj3_Sh');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TupleOfArrayOfguidArrayOfguid0dMmj3_Sh2), 'm_Item1', '[ArrayItemName="guid"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TupleOfArrayOfguidArrayOfguid0dMmj3_Sh2), 'm_Item2', '[ArrayItemName="guid"]');
  RemClassRegistry.RegisterXSClass(TupleOfArrayOfguidArrayOfguid0dMmj3_Sh, 'http://schemas.datacontract.org/2004/07/System', 'TupleOfArrayOfguidArrayOfguid0dMmj3_Sh');
  RemClassRegistry.RegisterXSClass(OperationCanceledException2, 'http://schemas.datacontract.org/2004/07/System', 'OperationCanceledException2', 'OperationCanceledException');
  RemClassRegistry.RegisterXSClass(ArgumentNullException, 'http://schemas.datacontract.org/2004/07/System', 'ArgumentNullException');
  RemClassRegistry.RegisterXSClass(ArgumentOutOfRangeException, 'http://schemas.datacontract.org/2004/07/System', 'ArgumentOutOfRangeException');
  RemClassRegistry.RegisterXSClass(TimeoutException, 'http://schemas.datacontract.org/2004/07/System', 'TimeoutException');
  RemClassRegistry.RegisterXSClass(ArgumentException, 'http://schemas.datacontract.org/2004/07/System', 'ArgumentException');
  RemClassRegistry.RegisterXSClass(Exception, 'http://schemas.datacontract.org/2004/07/System', 'Exception');
  RemClassRegistry.RegisterXSClass(InvalidOperationException, 'http://schemas.datacontract.org/2004/07/System', 'InvalidOperationException');
  RemClassRegistry.RegisterXSClass(SystemException, 'http://schemas.datacontract.org/2004/07/System', 'SystemException');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLDriverAdded), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ArrayOfLDriverAdded');
  RemClassRegistry.RegisterXSClass(LDriverAdded2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LDriverAdded2', 'LDriverAdded');
  RemClassRegistry.RegisterXSClass(LDriverAdded, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LDriverAdded');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLNetworkAdded), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ArrayOfLNetworkAdded');
  RemClassRegistry.RegisterXSClass(LProperty2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LProperty2', 'LProperty');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LProperty2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(LProperty, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LProperty');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLResourcePropertyValue), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ArrayOfLResourcePropertyValue');
  RemClassRegistry.RegisterXSClass(LResourcePropertyValue2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LResourcePropertyValue2', 'LResourcePropertyValue');
  RemClassRegistry.RegisterXSClass(LResourcePropertyValue, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LResourcePropertyValue');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLResourceProperty), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ArrayOfLResourceProperty');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLResourceInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ArrayOfLResourceInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ResourceType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ResourceType');
  RemClassRegistry.RegisterXSClass(LResourceProperty2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LResourceProperty2', 'LResourceProperty');
  RemClassRegistry.RegisterXSClass(LResourceProperty, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LResourceProperty');
  RemClassRegistry.RegisterXSClass(LResourceInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LResourceInfo2', 'LResourceInfo');
  RemClassRegistry.RegisterXSClass(LResourceInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LResourceInfo');
  RemClassRegistry.RegisterXSClass(LNetworkAdded2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LNetworkAdded2', 'LNetworkAdded');
  RemClassRegistry.RegisterXSClass(LNetworkAdded, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LNetworkAdded');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLOperationResult), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ArrayOfLOperationResult');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLDriverFullInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ArrayOfLDriverFullInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OperationType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver', 'OperationType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OperationResultType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver', 'OperationResultType');
  RemClassRegistry.RegisterXSClass(LOperationResult2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LOperationResult2', 'LOperationResult');
  RemClassRegistry.RegisterXSClass(LOperationResult, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LOperationResult');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DeviceStateEnum), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver', 'DeviceStateEnum');
  RemClassRegistry.RegisterXSClass(LDriverFullInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LDriverFullInfo2', 'LDriverFullInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LDriverFullInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LDriverFullInfo2), 'Properties', '[ArrayItemName="LResourcePropertyValue"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LDriverFullInfo2), 'States', '[ArrayItemName="LResourcePropertyValue"]');
  RemClassRegistry.RegisterXSClass(LDriverFullInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LDriverFullInfo');
  RemClassRegistry.RegisterXSClass(IPAddress, 'http://schemas.datacontract.org/2004/07/System.Net', 'IPAddress');
  RemClassRegistry.RegisterXSClass(NetConfiguration2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver', 'NetConfiguration2', 'NetConfiguration');
  RemClassRegistry.RegisterXSClass(NetConfiguration, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver', 'NetConfiguration');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AcsAccessPointType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver', 'AcsAccessPointType');
  RemClassRegistry.RegisterXSClass(AcsAccessPointDriverInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'AcsAccessPointDriverInfo2', 'AcsAccessPointDriverInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsAccessPointDriverInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(AcsAccessPointDriverInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints', 'AcsAccessPointDriverInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLServerInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ArrayOfLServerInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ServerType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ServerType');
  RemClassRegistry.RegisterXSClass(LServerInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LServerInfo2', 'LServerInfo');
  RemClassRegistry.RegisterXSClass(LServerInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LServerInfo');
  RemClassRegistry.RegisterXSClass(LNetInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LNetInfo2', 'LNetInfo');
  RemClassRegistry.RegisterXSClass(LNetInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'LNetInfo');
  RemClassRegistry.RegisterXSClass(License2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'License2', 'License');
  RemClassRegistry.RegisterXSClass(License, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'License');
  RemClassRegistry.RegisterXSClass(VariableInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'VariableInfo2', 'VariableInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VariableInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(VariableInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'VariableInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLNetInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity', 'ArrayOfLNetInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfEmailAddressInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'ArrayOfEmailAddressInfo');
  RemClassRegistry.RegisterXSClass(EmailAddressSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'EmailAddressSaveData2', 'EmailAddressSaveData');
  RemClassRegistry.RegisterXSClass(EmailAddressInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'EmailAddressInfo2', 'EmailAddressInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfIvideonCameraDriverInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IvidionCamera', 'ArrayOfIvideonCameraDriverInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CameraProductType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IvidionCamera', 'CameraProductType');
  RemClassRegistry.RegisterXSClass(IvideonCameraDriverInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IvidionCamera', 'IvideonCameraDriverInfo2', 'IvideonCameraDriverInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IvideonCameraDriverInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(IvideonCameraDriverInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IvidionCamera', 'IvideonCameraDriverInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SmtpEncryptionType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'SmtpEncryptionType');
  RemClassRegistry.RegisterXSClass(EmailDistributionAddressSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'EmailDistributionAddressSaveData2', 'EmailDistributionAddressSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EmailDistributionAddressSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(EmailDistributionAddressInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'EmailDistributionAddressInfo2', 'EmailDistributionAddressInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfEmailDistributionAddressInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'ArrayOfEmailDistributionAddressInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfPhoneNumberInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'ArrayOfPhoneNumberInfo');
  RemClassRegistry.RegisterXSClass(PhoneNumberSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'PhoneNumberSaveData2', 'PhoneNumberSaveData');
  RemClassRegistry.RegisterXSClass(PhoneNumberInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'PhoneNumberInfo2', 'PhoneNumberInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ProfileTypeFilter), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'ProfileTypeFilter');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EmissionProtectionLevel), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'EmissionProtectionLevel');
  RemClassRegistry.RegisterXSClass(AccessBits2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'AccessBits2', 'AccessBits');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BlockData), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'BlockData');
  RemClassRegistry.RegisterXSClass(CellContentCameraSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera', 'CellContentCameraSaveData2', 'CellContentCameraSaveData');
  RemClassRegistry.RegisterXSClass(CellContentCameraInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera', 'CellContentCameraInfo2', 'CellContentCameraInfo');
  RemClassRegistry.RegisterXSClass(CellContentCameraSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera', 'CellContentCameraSaveData');
  RemClassRegistry.RegisterXSClass(CellContentCameraInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera', 'CellContentCameraInfo');
  RemClassRegistry.RegisterXSClass(AccessBits, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'AccessBits');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfPropertyValue), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'ArrayOfPropertyValue');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StateType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'StateType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDeviceDriverInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'ArrayOfDeviceDriverInfo');
  RemClassRegistry.RegisterXSClass(DeviceDriverInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'DeviceDriverInfo2', 'DeviceDriverInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeviceDriverInfo2), 'ArrayChilds', '[ArrayItemName="DeviceDriverInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeviceDriverInfo2), 'ArrayProperties', '[ArrayItemName="PropertyValue"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeviceDriverInfo2), 'Cameras', '[ArrayItemName="AccessPoint2CameraChain"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeviceDriverInfo2), 'DirtyArrayProperties', '[ArrayItemName="PropertyValue"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeviceDriverInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeviceDriverInfo2), 'TagIds', '[ArrayItemName="guid"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLPropertyValue), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'ArrayOfLPropertyValue');
  RemClassRegistry.RegisterXSClass(LResourcePropertyValues2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'LResourcePropertyValues2', 'LResourcePropertyValues');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LResourcePropertyValues2), 'Properties', '[ArrayItemName="LPropertyValue"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LResourcePropertyValues2), 'Type_', '[ExtName="Type"]');
  RemClassRegistry.RegisterXSClass(LPropertyValue2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'LPropertyValue2', 'LPropertyValue');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LPropertyValue2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(LResourcePropertyValues, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'LResourcePropertyValues');
  RemClassRegistry.RegisterXSClass(PropertyValue2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'PropertyValue2', 'PropertyValue');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PropertyValue2), 'Name_', '[ExtName="Name"]');
end;

procedure RegisterTypeProc5;
begin
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLResourcePropertyValues), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'ArrayOfLResourcePropertyValues');
  RemClassRegistry.RegisterXSClass(PhoneNumberInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'PhoneNumberInfo');
  RemClassRegistry.RegisterXSClass(PhoneNumberSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'PhoneNumberSaveData');
  RemClassRegistry.RegisterXSClass(EmailDistributionAddressInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'EmailDistributionAddressInfo');
  RemClassRegistry.RegisterXSClass(EmailAddressSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'EmailAddressSaveData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EmailAddressOwner), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'EmailAddressOwner');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PhoneNumberOwner), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'PhoneNumberOwner');
  RemClassRegistry.RegisterXSClass(EmailAddressInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'EmailAddressInfo');
  RemClassRegistry.RegisterXSClass(Operation2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'Operation2', 'Operation');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(Operation2), 'Path', '[ArrayItemName="guid"]');
  RemClassRegistry.RegisterXSClass(Operation, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'Operation');
  RemClassRegistry.RegisterXSClass(DeviceOperation2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'DeviceOperation2', 'DeviceOperation');
  RemClassRegistry.RegisterXSClass(DeviceOperation, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'DeviceOperation');
  RemClassRegistry.RegisterXSClass(DeviceCallMethodOperation2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'DeviceCallMethodOperation2', 'DeviceCallMethodOperation');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeviceCallMethodOperation2), 'MethodArgs', '[ArrayItemName="string"]');
  RemClassRegistry.RegisterXSClass(DeviceCallMethodOperation, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'DeviceCallMethodOperation');
  RemClassRegistry.RegisterXSClass(LLinkChanged2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'LLinkChanged2', 'LLinkChanged');
  RemClassRegistry.RegisterXSClass(LLinkChanged, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'LLinkChanged');
  RemClassRegistry.RegisterXSClass(EmailDistributionAddressSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation', 'EmailDistributionAddressSaveData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLLinkChanged), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'ArrayOfLLinkChanged');
  RemClassRegistry.RegisterXSClass(LNetworkChanges2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'LNetworkChanges2', 'LNetworkChanges');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LNetworkChanges2), 'DriversAdded', '[ArrayItemName="LDriverAdded"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LNetworkChanges2), 'LinkChanges', '[ArrayItemName="LLinkChanged"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LNetworkChanges2), 'NetworksAdded', '[ArrayItemName="LNetworkAdded"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LNetworkChanges2), 'OperationResults', '[ArrayItemName="LOperationResult"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LNetworkChanges2), 'Properties', '[ArrayItemName="LResourceProperty"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LNetworkChanges2), 'ResourcesRemoved', '[ArrayItemName="LResourceInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LNetworkChanges2), 'ServersAdded', '[ArrayItemName="LServerAdded"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LNetworkChanges2), 'States', '[ArrayItemName="LResourceProperty"]');
  RemClassRegistry.RegisterXSClass(LNetworkChanges, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'LNetworkChanges');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfISS_DriverEventPlaybackSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ArrayOfISS_DriverEventPlaybackSlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_DriverEventPlaybackSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_DriverEventPlaybackSaveData2', 'ISS_DriverEventPlaybackSaveData');
  RemClassRegistry.RegisterXSClass(ISS_DriverEventPlaybackSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_DriverEventPlaybackSlimInfo2', 'ISS_DriverEventPlaybackSlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_Driver_SaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Driver_SaveData2', 'ISS_Driver_SaveData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfISS_Cam_SlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ArrayOfISS_Cam_SlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfISS_EventViewer_SlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ArrayOfISS_EventViewer_SlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfISS_Monitor_SlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ArrayOfISS_Monitor_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_Recognition_SaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Recognition_SaveData2', 'ISS_Recognition_SaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ISS_Recognition_SaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfISS_Driver_SlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ArrayOfISS_Driver_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_Driver_SlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Driver_SlimInfo2', 'ISS_Driver_SlimInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ISS_Driver_SlimInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(ISS_Recognition_SlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Recognition_SlimInfo2', 'ISS_Recognition_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_Recognition_SlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Recognition_SlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfISS_RusGuard_SlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ArrayOfISS_RusGuard_SlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfISS_Recognition_SlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ArrayOfISS_Recognition_SlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfUidKeyInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'ArrayOfUidKeyInfo');
  RemClassRegistry.RegisterXSClass(VisitorsScoreboardWorkplaceModuleSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars', 'VisitorsScoreboardWorkplaceModuleSaveData2', 'VisitorsScoreboardWorkplaceModuleSaveData');
  RemClassRegistry.RegisterXSClass(VisitorsScoreboardWorkplaceModuleInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars', 'VisitorsScoreboardWorkplaceModuleInfo2', 'VisitorsScoreboardWorkplaceModuleInfo');
  RemClassRegistry.RegisterXSClass(VisitorsScoreboardWorkplaceModuleInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars', 'VisitorsScoreboardWorkplaceModuleInfo');
  RemClassRegistry.RegisterXSClass(VisitorsScoreboardWorkplaceModuleSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars', 'VisitorsScoreboardWorkplaceModuleSaveData');
  RemClassRegistry.RegisterXSClass(WorkZoneVisitorsCountDTO2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars', 'WorkZoneVisitorsCountDTO2', 'WorkZoneVisitorsCountDTO');
  RemClassRegistry.RegisterXSClass(WorkZoneVisitorsCountDTO, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars', 'WorkZoneVisitorsCountDTO');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SectorAuthentication), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'SectorAuthentication');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ProfileType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'ProfileType');
  RemClassRegistry.RegisterXSClass(MifareProfileSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'MifareProfileSaveData2', 'MifareProfileSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MifareProfileSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(MifareProfileSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'MifareProfileSaveData');
  RemClassRegistry.RegisterXSClass(MifareProfileFullSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'MifareProfileFullSaveData2', 'MifareProfileFullSaveData');
  RemClassRegistry.RegisterXSClass(MifareProfileFullInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'MifareProfileFullInfo2', 'MifareProfileFullInfo');
  RemClassRegistry.RegisterXSClass(MifareProfileFullInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'MifareProfileFullInfo');
  RemClassRegistry.RegisterXSClass(MifareProfileFullSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'MifareProfileFullSaveData');
  RemClassRegistry.RegisterXSClass(UidKeyInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'UidKeyInfo2', 'UidKeyInfo');
  RemClassRegistry.RegisterXSClass(UidKeyInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'UidKeyInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfMifareProfileInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'ArrayOfMifareProfileInfo');
  RemClassRegistry.RegisterXSClass(MifareProfileInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'MifareProfileInfo2', 'MifareProfileInfo');
  RemClassRegistry.RegisterXSClass(MifareProfileInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare', 'MifareProfileInfo');
  RemClassRegistry.RegisterXSClass(ISS_DriverEventPlaybackSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_DriverEventPlaybackSaveData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfMapInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace', 'ArrayOfMapInfo');
  RemClassRegistry.RegisterXSClass(ISS_DriverEventPlaybackSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_DriverEventPlaybackSlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_Recognition_SaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Recognition_SaveData');
  RemClassRegistry.RegisterXSClass(ISS_Driver_SlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Driver_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_Driver_SaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Driver_SaveData');
  RemClassRegistry.RegisterXSClass(DriverFigureSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace', 'DriverFigureSaveData2', 'DriverFigureSaveData');
  RemClassRegistry.RegisterXSClass(DriverFigureSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace', 'DriverFigureSaveData');
  RemClassRegistry.RegisterXSClass(MapSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace', 'MapSaveData2', 'MapSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MapSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(MapSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace', 'MapSaveData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDriverFigureInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace', 'ArrayOfDriverFigureInfo');
  RemClassRegistry.RegisterXSClass(MapInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace', 'MapInfo2', 'MapInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MapInfo2), 'DriverFigures', '[ArrayItemName="DriverFigureInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MapInfo2), 'Maps', '[ArrayItemName="MapInfo"]');
  RemClassRegistry.RegisterXSClass(MapInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace', 'MapInfo');
  RemClassRegistry.RegisterXSClass(DriverFigureInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace', 'DriverFigureInfo2', 'DriverFigureInfo');
  RemClassRegistry.RegisterXSClass(DriverFigureInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace', 'DriverFigureInfo');
  RemClassRegistry.RegisterXSClass(LPropertyValue, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'LPropertyValue');
  RemClassRegistry.RegisterXSClass(GetControllerConfigurationsResult_Config2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'GetControllerConfigurationsResult_Config2', 'GetControllerConfigurationsResult.Config');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetControllerConfigurationsResult_Config2), 'Configuration', '[ArrayItemName="LDriverFullInfo"]');
  RemClassRegistry.RegisterXSClass(GetControllerConfigurationsResult_FailedConfig2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'GetControllerConfigurationsResult_FailedConfig2', 'GetControllerConfigurationsResult.FailedConfig');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfGetControllerConfigurationsResult_FailedConfig), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'ArrayOfGetControllerConfigurationsResult_FailedConfig', 'ArrayOfGetControllerConfigurationsResult.FailedConfig');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfFindControllersResult_FailedConverterInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'ArrayOfFindControllersResult_FailedConverterInfo', 'ArrayOfFindControllersResult.FailedConverterInfo');
  RemClassRegistry.RegisterXSClass(CanDeviceInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'CanDeviceInfo2', 'CanDeviceInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CanDeviceInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(CanDeviceInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'CanDeviceInfo');
  RemClassRegistry.RegisterXSClass(CanDeviceNetConfig2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'CanDeviceNetConfig2', 'CanDeviceNetConfig');
  RemClassRegistry.RegisterXSClass(CanDeviceNetConfig, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'CanDeviceNetConfig');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfCanDeviceInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'ArrayOfCanDeviceInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLanCanConverter), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'ArrayOfLanCanConverter');
  RemClassRegistry.RegisterXSClass(LanCanConverter2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'LanCanConverter2', 'LanCanConverter');
  RemClassRegistry.RegisterXSClass(LanCanConverter, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'LanCanConverter');
  RemClassRegistry.RegisterXSClass(FindControllersResult2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'FindControllersResult2', 'FindControllersResult');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FindControllersResult2), 'Controllers', '[ArrayItemName="CanDeviceInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FindControllersResult2), 'FailedControllers', '[ArrayItemName="CanDeviceInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FindControllersResult2), 'FailedConverters', '[ArrayItemName="FindControllersResult.FailedConverterInfo"]');
  RemClassRegistry.RegisterXSClass(FindControllersResult, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'FindControllersResult');
  RemClassRegistry.RegisterXSClass(SetDevicesAddressBySidResult_FailedAddress2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'SetDevicesAddressBySidResult_FailedAddress2', 'SetDevicesAddressBySidResult.FailedAddress');
  RemClassRegistry.RegisterXSClass(SetDevicesAddressBySidResult_FailedAddress, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'SetDevicesAddressBySidResult_FailedAddress', 'SetDevicesAddressBySidResult.FailedAddress');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfGetControllerConfigurationsResult_Config), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'ArrayOfGetControllerConfigurationsResult_Config', 'ArrayOfGetControllerConfigurationsResult.Config');
  RemClassRegistry.RegisterXSClass(GetControllerConfigurationsResult2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'GetControllerConfigurationsResult2', 'GetControllerConfigurationsResult');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetControllerConfigurationsResult2), 'Configurations', '[ArrayItemName="GetControllerConfigurationsResult.Config"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetControllerConfigurationsResult2), 'FailedDevices', '[ArrayItemName="GetControllerConfigurationsResult.FailedConfig"]');
  RemClassRegistry.RegisterXSClass(GetControllerConfigurationsResult, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'GetControllerConfigurationsResult');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfSetDevicesAddressBySidResult_FailedAddress), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'ArrayOfSetDevicesAddressBySidResult_FailedAddress', 'ArrayOfSetDevicesAddressBySidResult.FailedAddress');
  RemClassRegistry.RegisterXSClass(FindControllersResult_FailedConverterInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'FindControllersResult_FailedConverterInfo2', 'FindControllersResult.FailedConverterInfo');
  RemClassRegistry.RegisterXSClass(FindControllersResult_FailedConverterInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'FindControllersResult_FailedConverterInfo', 'FindControllersResult.FailedConverterInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfCanDeviceNetConfig), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'ArrayOfCanDeviceNetConfig');
  RemClassRegistry.RegisterXSClass(SetDevicesAddressBySidResult2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'SetDevicesAddressBySidResult2', 'SetDevicesAddressBySidResult');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SetDevicesAddressBySidResult2), 'FailedDevices', '[ArrayItemName="SetDevicesAddressBySidResult.FailedAddress"]');
  RemClassRegistry.RegisterXSClass(SetDevicesAddressBySidResult, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'SetDevicesAddressBySidResult');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CustomizableDayType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'CustomizableDayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLCustomizableDayInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'ArrayOfLCustomizableDayInfo');
  RemClassRegistry.RegisterXSClass(LDriversCustomizableDays2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'LDriversCustomizableDays2', 'LDriversCustomizableDays');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LDriversCustomizableDays2), 'Days', '[ArrayItemName="LCustomizableDayInfo"]');
  RemClassRegistry.RegisterXSClass(LCustomizableDayInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'LCustomizableDayInfo2', 'LCustomizableDayInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LCustomizableDayInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(LDriversCustomizableDays, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'LDriversCustomizableDays');
end;

procedure RegisterTypeProc6;
begin
  RemClassRegistry.RegisterXSClass(LCustomizableDayInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'LCustomizableDayInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLDriversCustomizableDays), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'ArrayOfLDriversCustomizableDays');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLKeyInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'ArrayOfLKeyInfo');
  RemClassRegistry.RegisterXSClass(LChangedKeys2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'LChangedKeys2', 'LChangedKeys');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LChangedKeys2), 'Keys', '[ArrayItemName="LKeyInfo"]');
  RemClassRegistry.RegisterXSClass(LChangedKeys, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'LChangedKeys');
  RemClassRegistry.RegisterXSClass(CardTypeBiometricPermission2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'CardTypeBiometricPermission2', 'CardTypeBiometricPermission');
  RemClassRegistry.RegisterXSClass(CardTypeBiometricPermission, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'CardTypeBiometricPermission');
  RemClassRegistry.RegisterXSClass(GetControllerConfigurationsResult_Config, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'GetControllerConfigurationsResult_Config', 'GetControllerConfigurationsResult.Config');
  RemClassRegistry.RegisterXSClass(GetControllerConfigurationsResult_FailedConfig, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'GetControllerConfigurationsResult_FailedConfig', 'GetControllerConfigurationsResult.FailedConfig');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfCardTypeBiometricPermission), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'ArrayOfCardTypeBiometricPermission');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDoorRelay), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'ArrayOfDoorRelay');
  RemClassRegistry.RegisterXSClass(DoorRelay2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'DoorRelay2', 'DoorRelay');
  RemClassRegistry.RegisterXSClass(DoorRelay, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'DoorRelay');
  RemClassRegistry.RegisterXSClass(LChangedCustomizableDays2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'LChangedCustomizableDays2', 'LChangedCustomizableDays');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LChangedCustomizableDays2), 'Rows', '[ArrayItemName="LDriversCustomizableDays"]');
  RemClassRegistry.RegisterXSClass(LChangedCustomizableDays, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'LChangedCustomizableDays');
  RemClassRegistry.RegisterXSClass(DoorRelays2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'DoorRelays2', 'DoorRelays');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DoorRelays2), 'Relays', '[ArrayItemName="DoorRelay"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DoorRelays2), 'Type_', '[ExtName="Type"]');
  RemClassRegistry.RegisterXSClass(DoorRelays, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'DoorRelays');
  RemClassRegistry.RegisterXSClass(DriverSettings2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'DriverSettings2', 'DriverSettings');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DriverSettings2), 'OrderedServerIdentification', '[ArrayItemName="ServerIdentificationType"]');
  RemClassRegistry.RegisterXSClass(DriverSettings, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'DriverSettings');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StorageStateEnum), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'StorageStateEnum');
  RemClassRegistry.RegisterXSClass(LStateBase2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'LStateBase2', 'LStateBase');
  RemClassRegistry.RegisterXSClass(LStateBase, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'LStateBase');
  RemClassRegistry.RegisterXSClass(LKeyInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'LKeyInfo2', 'LKeyInfo');
  RemClassRegistry.RegisterXSClass(LKeyInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState', 'LKeyInfo');
  RemClassRegistry.RegisterXSClass(CardTypeSaveInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType', 'CardTypeSaveInfo2', 'CardTypeSaveInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CardTypeSaveInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(CardTypeInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType', 'CardTypeInfo2', 'CardTypeInfo');
  RemClassRegistry.RegisterXSClass(CardTypeSaveInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType', 'CardTypeSaveInfo');
  RemClassRegistry.RegisterXSClass(CardTypeInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType', 'CardTypeInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfCardTypeInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType', 'ArrayOfCardTypeInfo');
  RemClassRegistry.RegisterXSClass(CardTypesInfoData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType', 'CardTypesInfoData2', 'CardTypesInfoData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CardTypesInfoData2), 'CardTypes', '[ArrayItemName="CardTypeInfo"]');
  RemClassRegistry.RegisterXSClass(CardTypesInfoData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType', 'CardTypesInfoData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CardTypeSortedColumn), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType', 'CardTypeSortedColumn');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CardTypeSortedColumn), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLUser), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'ArrayOfLUser');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UserGroupType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'UserGroupType');
  RemClassRegistry.RegisterXSClass(LUserGroup2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'LUserGroup2', 'LUserGroup');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LUserGroup2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(LUserGroup, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'LUserGroup');
  RemClassRegistry.RegisterXSClass(LUsersData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'LUsersData2', 'LUsersData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LUsersData2), 'Users', '[ArrayItemName="LUser"]');
  RemClassRegistry.RegisterXSClass(LUsersData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'LUsersData');
  RemClassRegistry.RegisterXSClass(DeviceDriverInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'DeviceDriverInfo');
  RemClassRegistry.RegisterXSClass(PropertyValue, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities', 'PropertyValue');
  RemClassRegistry.RegisterXSClass(LUser2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'LUser2', 'LUser');
  RemClassRegistry.RegisterXSClass(LUser, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'LUser');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfClaimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'ArrayOfClaimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UserSortedColumn), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'UserSortedColumn');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UserGroupSortedColumn), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'UserGroupSortedColumn');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserGroupSortedColumn), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(ClaimSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'ClaimSaveData2', 'ClaimSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ClaimSaveData2), 'Type_', '[ExtName="Type"]');
  RemClassRegistry.RegisterXSClass(ClaimSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'ClaimSaveData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLUserGroup), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'ArrayOfLUserGroup');
  RemClassRegistry.RegisterXSClass(LUserGroupsData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'LUserGroupsData2', 'LUserGroupsData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LUserGroupsData2), 'UserGroups', '[ArrayItemName="LUserGroup"]');
  RemClassRegistry.RegisterXSClass(LUserGroupsData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'LUserGroupsData');
  RemClassRegistry.RegisterXSClass(ClaimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'ClaimInfo2', 'ClaimInfo');
  RemClassRegistry.RegisterXSClass(ClaimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security', 'ClaimInfo');
  RemClassRegistry.RegisterXSClass(IvideonCameraCollectionResult2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon', 'IvideonCameraCollectionResult2', 'IvideonCameraCollectionResult');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IvideonCameraCollectionResult2), 'DriverFullInfo', '[ArrayItemName="LDriverFullInfo"]');
  RemClassRegistry.RegisterXSClass(IvideonRemoteServerCollectionResult2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon', 'IvideonRemoteServerCollectionResult2', 'IvideonRemoteServerCollectionResult');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IvideonRemoteServerCollectionResult2), 'DriverFullInfo', '[ArrayItemName="LDriverFullInfo"]');
  RemClassRegistry.RegisterXSClass(IvideonCameraCollectionResult, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon', 'IvideonCameraCollectionResult');
  RemClassRegistry.RegisterXSClass(LanCanConverterAddress2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'LanCanConverterAddress2', 'LanCanConverterAddress');
  RemClassRegistry.RegisterXSClass(LanCanConverterAddress, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'LanCanConverterAddress');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CanConverterAddress_TagEnum), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'CanConverterAddress_TagEnum', 'CanConverterAddress.TagEnum');
  RemClassRegistry.RegisterXSClass(UsbCanConverterAddress2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'UsbCanConverterAddress2', 'UsbCanConverterAddress');
  RemClassRegistry.RegisterXSClass(UsbCanConverterAddress, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'UsbCanConverterAddress');
  RemClassRegistry.RegisterXSClass(CanConverterAddress2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'CanConverterAddress2', 'CanConverterAddress');
  RemClassRegistry.RegisterXSClass(CanConverterAddress, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'CanConverterAddress');
  RemClassRegistry.RegisterXSClass(IvideonRemoteServerCollectionResult, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon', 'IvideonRemoteServerCollectionResult');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfCanConverterAddress), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'ArrayOfCanConverterAddress');
  RemClassRegistry.RegisterXSClass(FindConvertersResult2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'FindConvertersResult2', 'FindConvertersResult');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FindConvertersResult2), 'Converters', '[ArrayItemName="CanConverterAddress"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FindConvertersResult2), 'MissingDrivers', '[ArrayItemName="string"]');
  RemClassRegistry.RegisterXSClass(FindConvertersResult, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter', 'FindConvertersResult');
  RemClassRegistry.RegisterXSClass(NUUOCamera2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO', 'NUUOCamera2', 'NUUOCamera');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NUUOCamera2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(NUUOCamera, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO', 'NUUOCamera');
  RemClassRegistry.RegisterXSClass(PanasonicCameraCollectionResult2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Panasonic', 'PanasonicCameraCollectionResult2', 'PanasonicCameraCollectionResult');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PanasonicCameraCollectionResult2), 'DriverFullInfo', '[ArrayItemName="LDriverFullInfo"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfEmployeePassageNotification), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications', 'ArrayOfEmployeePassageNotification');
  RemClassRegistry.RegisterXSClass(NotificationInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications', 'NotificationInfo2', 'NotificationInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationInfo2), 'EmployeePassageNotifications', '[ArrayItemName="EmployeePassageNotification"]');
  RemClassRegistry.RegisterXSClass(NotificationInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications', 'NotificationInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfNUUOVideoRecorder), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO', 'ArrayOfNUUOVideoRecorder');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfNUUOCamera), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO', 'ArrayOfNUUOCamera');
  RemClassRegistry.RegisterXSClass(NUUOVideoRecorder2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO', 'NUUOVideoRecorder2', 'NUUOVideoRecorder');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NUUOVideoRecorder2), 'Cameras', '[ArrayItemName="NUUOCamera"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NUUOVideoRecorder2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(NUUOVideoRecorder, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO', 'NUUOVideoRecorder');
  RemClassRegistry.RegisterXSClass(NUUOArchiveServer2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO', 'NUUOArchiveServer2', 'NUUOArchiveServer');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NUUOArchiveServer2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NUUOArchiveServer2), 'VideoRecorders', '[ArrayItemName="NUUOVideoRecorder"]');
  RemClassRegistry.RegisterXSClass(NUUOArchiveServer, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO', 'NUUOArchiveServer');
  RemClassRegistry.RegisterXSClass(PanasonicCameraCollectionResult, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Panasonic', 'PanasonicCameraCollectionResult');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfNUUOArchiveServer), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO', 'ArrayOfNUUOArchiveServer');
  RemClassRegistry.RegisterXSClass(NUUOArchiveServerCollectionResult2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO', 'NUUOArchiveServerCollectionResult2', 'NUUOArchiveServerCollectionResult');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NUUOArchiveServerCollectionResult2), 'ArchiveServers', '[ArrayItemName="NUUOArchiveServer"]');
  RemClassRegistry.RegisterXSClass(NUUOArchiveServerCollectionResult, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO', 'NUUOArchiveServerCollectionResult');
  RemClassRegistry.RegisterXSInfo(TypeInfo(IncidentSortedColumn), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentSortedColumn');
  RemClassRegistry.RegisterXSClass(Employee2OrganizationAssignment2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'Employee2OrganizationAssignment2', 'Employee2OrganizationAssignment');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DictionaryType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DictionaryType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DictionaryElementSortedColumn), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DictionaryElementSortedColumn');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DictionaryElementSortedColumn), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfEmployee2OrganizationAssignment), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfEmployee2OrganizationAssignment');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfFirebirdIncidentEventsResult), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfFirebirdIncidentEventsResult');
  RemClassRegistry.RegisterXSClass(FirebirdIncidentEventsResult2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'FirebirdIncidentEventsResult2', 'FirebirdIncidentEventsResult');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FirebirdIncidentEventsResult2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfViolation), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfViolation');
  RemClassRegistry.RegisterXSClass(ViolatorFilter2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ViolatorFilter2', 'ViolatorFilter');
  RemClassRegistry.RegisterXSClass(Template, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'Template');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfEmployee2OrganizationAssignmentFull), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfEmployee2OrganizationAssignmentFull');
  RemClassRegistry.RegisterXSClass(Employee2OrganizationAssignmentFull2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'Employee2OrganizationAssignmentFull2', 'Employee2OrganizationAssignmentFull');
  RemClassRegistry.RegisterXSClass(IncidentTemplateSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentTemplateSaveData2', 'IncidentTemplateSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IncidentTemplateSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(Violation2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'Violation2', 'Violation');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfIncidentTemplateInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfIncidentTemplateInfo');
  RemClassRegistry.RegisterXSClass(IncidentTemplateInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentTemplateInfo2', 'IncidentTemplateInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfIncidentTypeInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents', 'ArrayOfIncidentTypeInfo');
  RemClassRegistry.RegisterXSClass(IncidentStatisticData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents', 'IncidentStatisticData2', 'IncidentStatisticData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IncidentStatisticData2), 'ImportantIncidentTypeIds', '[ArrayItemName="guid"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IncidentStatisticData2), 'OtherIncidentTypeIds', '[ArrayItemName="guid"]');
end;

procedure RegisterTypeProc7;
begin
  RemClassRegistry.RegisterXSClass(Employee2OrganizationAssignment, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'Employee2OrganizationAssignment');
  RemClassRegistry.RegisterXSClass(IncidentTemplateInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentTemplateInfo');
  RemClassRegistry.RegisterXSClass(IncidentTemplateSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentTemplateSaveData');
  RemClassRegistry.RegisterXSClass(Employee2OrganizationAssignmentFull, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'Employee2OrganizationAssignmentFull');
  RemClassRegistry.RegisterXSClass(PhotoidentificationPersonalDataSaveInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification', 'PhotoidentificationPersonalDataSaveInfo2', 'PhotoidentificationPersonalDataSaveInfo');
  RemClassRegistry.RegisterXSClass(PhotoidentificationPersonalData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification', 'PhotoidentificationPersonalData2', 'PhotoidentificationPersonalData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfPhotoidentificationPersonalData), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification', 'ArrayOfPhotoidentificationPersonalData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Extension), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents', 'Extension');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(Extension), 'Word_', 'Word');
  RemClassRegistry.RegisterXSClass(IncidentStatisticData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents', 'IncidentStatisticData');
  RemClassRegistry.RegisterXSClass(Violation, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'Violation');
  RemClassRegistry.RegisterXSClass(ViolatorFilter, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ViolatorFilter');
  RemClassRegistry.RegisterXSClass(FirebirdIncidentEventsResult, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'FirebirdIncidentEventsResult');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsVehicle), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle', 'ArrayOfAcsVehicle');
  RemClassRegistry.RegisterXSClass(AcsVehicleSavedData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle', 'AcsVehicleSavedData2', 'AcsVehicleSavedData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsVehicleSavedData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(AcsVehicle2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle', 'AcsVehicle2', 'AcsVehicle');
  RemClassRegistry.RegisterXSClass(AcsVehicleSavedData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle', 'AcsVehicleSavedData');
  RemClassRegistry.RegisterXSClass(DictionaryElementSaveInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DictionaryElementSaveInfo2', 'DictionaryElementSaveInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DictionaryElementSaveInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(DictionaryElementSaveInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DictionaryElementSaveInfo');
  RemClassRegistry.RegisterXSClass(AcsVehicle, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle', 'AcsVehicle');
  RemClassRegistry.RegisterXSClass(DictionaryElementInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DictionaryElementInfo2', 'DictionaryElementInfo');
  RemClassRegistry.RegisterXSClass(IncidentTypeInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents', 'IncidentTypeInfo2', 'IncidentTypeInfo');
  RemClassRegistry.RegisterXSClass(IncidentTypeInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents', 'IncidentTypeInfo');
  RemClassRegistry.RegisterXSClass(DictionaryElementInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DictionaryElementInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfEmployeesVehicle), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle', 'ArrayOfEmployeesVehicle');
  RemClassRegistry.RegisterXSClass(EmployeesVehicle2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle', 'EmployeesVehicle2', 'EmployeesVehicle');
  RemClassRegistry.RegisterXSClass(EmployeesVehicle, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle', 'EmployeesVehicle');
  RemClassRegistry.RegisterXSInfo(TypeInfo(LogMessageSortedColumn), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'LogMessageSortedColumn');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LogMessageSortedColumn), 'Message_', 'Message');
  RemClassRegistry.RegisterXSInfo(TypeInfo(LogMsgType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'LogMsgType');
  RemClassRegistry.RegisterXSClass(LogMessageTypeSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'LogMessageTypeSlimInfo2', 'LogMessageTypeSlimInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LogMessageTypeSlimInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(LogMessageTypeSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'LogMessageTypeSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLogMessageSubtypeSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'ArrayOfLogMessageSubtypeSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLogMessageTypeSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'ArrayOfLogMessageTypeSlimInfo');
  RemClassRegistry.RegisterXSClass(ReportSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report', 'ReportSaveData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(LogMsgSubType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'LogMsgSubType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLogMsgSubType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'ArrayOfLogMsgSubType');
  RemClassRegistry.RegisterXSClass(DriverEventNotification2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications', 'DriverEventNotification2', 'DriverEventNotification');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DriverEventNotification2), 'Message_', '[ExtName="Message"]');
  RemClassRegistry.RegisterXSClass(DriverEventNotification, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications', 'DriverEventNotification');
  RemClassRegistry.RegisterXSClass(EmployeePassageNotification2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications', 'EmployeePassageNotification2', 'EmployeePassageNotification');
  RemClassRegistry.RegisterXSClass(EmployeePassageNotification, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications', 'EmployeePassageNotification');
  RemClassRegistry.RegisterXSInfo(TypeInfo(LogMessageContentDataType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'LogMessageContentDataType');
  RemClassRegistry.RegisterXSClass(LogMessage2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'LogMessage2', 'LogMessage');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LogMessage2), 'Message_', '[ExtName="Message"]');
  RemClassRegistry.RegisterXSClass(LogMessage, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'LogMessage');
  RemClassRegistry.RegisterXSInfo(TypeInfo(LogSubjectType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'LogSubjectType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLogMessage), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'ArrayOfLogMessage');
  RemClassRegistry.RegisterXSClass(LogMessageSubtypeSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'LogMessageSubtypeSlimInfo2', 'LogMessageSubtypeSlimInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LogMessageSubtypeSlimInfo2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(LogMessageSubtypeSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'LogMessageSubtypeSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfLogMsgType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'ArrayOfLogMsgType');
  RemClassRegistry.RegisterXSClass(LogData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'LogData2', 'LogData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LogData2), 'Messages', '[ArrayItemName="LogMessage"]');
  RemClassRegistry.RegisterXSClass(LogData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log', 'LogData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfViolationSaveInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfViolationSaveInfo');
  RemClassRegistry.RegisterXSClass(DocumentForActionSaveInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DocumentForActionSaveInfo2', 'DocumentForActionSaveInfo');
  RemClassRegistry.RegisterXSClass(DocumentForActionSaveInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DocumentForActionSaveInfo');
  RemClassRegistry.RegisterXSClass(DocumentFullForActionInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DocumentFullForActionInfo2', 'DocumentFullForActionInfo');
  RemClassRegistry.RegisterXSClass(DocumentFullForActionInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DocumentFullForActionInfo');
  RemClassRegistry.RegisterXSClass(DocumentSaveInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DocumentSaveInfo2', 'DocumentSaveInfo');
  RemClassRegistry.RegisterXSClass(DocumentSaveInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DocumentSaveInfo');
  RemClassRegistry.RegisterXSClass(DocumentFullInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DocumentFullInfo2', 'DocumentFullInfo');
  RemClassRegistry.RegisterXSClass(DocumentFullInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DocumentFullInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDocumentSaveInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfDocumentSaveInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfTangiblesSaveInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfTangiblesSaveInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDocumentForActionSaveInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfDocumentForActionSaveInfo');
  RemClassRegistry.RegisterXSClass(ViolatorSaveInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ViolatorSaveInfo2', 'ViolatorSaveInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ViolatorSaveInfo2), 'DocumentForActionSaveInfo', '[ArrayItemName="DocumentForActionSaveInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ViolatorSaveInfo2), 'DocumentSaveInfo', '[ArrayItemName="DocumentSaveInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ViolatorSaveInfo2), 'ViolationsSaveInfo', '[ArrayItemName="ViolationSaveInfo"]');
  RemClassRegistry.RegisterXSClass(ViolatorSaveInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ViolatorSaveInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDocumentFullInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfDocumentFullInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDocumentFullForActionInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfDocumentFullForActionInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfViolationFullInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfViolationFullInfo');
  RemClassRegistry.RegisterXSClass(ViolatorFullInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ViolatorFullInfo2', 'ViolatorFullInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ViolatorFullInfo2), 'DocumentsData', '[ArrayItemName="DocumentFullInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ViolatorFullInfo2), 'DocumentsForActionData', '[ArrayItemName="DocumentFullForActionInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ViolatorFullInfo2), 'ViolationsData', '[ArrayItemName="ViolationFullInfo"]');
  RemClassRegistry.RegisterXSClass(ViolatorFullInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ViolatorFullInfo');
  RemClassRegistry.RegisterXSClass(ViolationSaveInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ViolationSaveInfo2', 'ViolationSaveInfo');
  RemClassRegistry.RegisterXSClass(ViolationSaveInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ViolationSaveInfo');
  RemClassRegistry.RegisterXSClass(ViolationFullInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ViolationFullInfo2', 'ViolationFullInfo');
  RemClassRegistry.RegisterXSClass(ViolationFullInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ViolationFullInfo');
  RemClassRegistry.RegisterXSClass(TangiblesSaveInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'TangiblesSaveInfo2', 'TangiblesSaveInfo');
  RemClassRegistry.RegisterXSClass(TangiblesSaveInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'TangiblesSaveInfo');
  RemClassRegistry.RegisterXSClass(TangiblesFullInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'TangiblesFullInfo2', 'TangiblesFullInfo');
  RemClassRegistry.RegisterXSClass(TangiblesFullInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'TangiblesFullInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfViolatorSaveInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfViolatorSaveInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDictionaryElementInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfDictionaryElementInfo');
  RemClassRegistry.RegisterXSClass(DictionaryElementsInfoData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DictionaryElementsInfoData2', 'DictionaryElementsInfoData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DictionaryElementsInfoData2), 'Elements', '[ArrayItemName="DictionaryElementInfo"]');
  RemClassRegistry.RegisterXSClass(DictionaryElementsInfoData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'DictionaryElementsInfoData');
  RemClassRegistry.RegisterXSClass(IncidentsFilter2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentsFilter2', 'IncidentsFilter');
  RemClassRegistry.RegisterXSClass(IncidentsFilter, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentsFilter');
  RemClassRegistry.RegisterXSClass(OrganizationDictionaryElementInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'OrganizationDictionaryElementInfo2', 'OrganizationDictionaryElementInfo');
  RemClassRegistry.RegisterXSClass(OrganizationDictionaryElementInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'OrganizationDictionaryElementInfo');
  RemClassRegistry.RegisterXSClass(SecurityGroupDictionaryElementSaveInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'SecurityGroupDictionaryElementSaveInfo2', 'SecurityGroupDictionaryElementSaveInfo');
  RemClassRegistry.RegisterXSClass(SecurityGroupDictionaryElementSaveInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'SecurityGroupDictionaryElementSaveInfo');
  RemClassRegistry.RegisterXSClass(OrganizationElementSaveInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'OrganizationElementSaveInfo2', 'OrganizationElementSaveInfo');
  RemClassRegistry.RegisterXSClass(OrganizationElementSaveInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'OrganizationElementSaveInfo');
  RemClassRegistry.RegisterXSClass(SecurityGroupDictionaryElementInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'SecurityGroupDictionaryElementInfo2', 'SecurityGroupDictionaryElementInfo');
  RemClassRegistry.RegisterXSClass(SecurityGroupDictionaryElementInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'SecurityGroupDictionaryElementInfo');
  RemClassRegistry.RegisterXSClass(IncidentSaveInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentSaveInfo2', 'IncidentSaveInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IncidentSaveInfo2), 'MembersSaveInfo', '[ArrayItemName="ViolatorSaveInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IncidentSaveInfo2), 'TangiblesSaveInfo', '[ArrayItemName="TangiblesSaveInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IncidentSaveInfo2), 'ViolatorSaveInfo', '[ArrayItemName="ViolatorSaveInfo"]');
  RemClassRegistry.RegisterXSClass(IncidentSaveInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentSaveInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfViolatorFullInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfViolatorFullInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfTangiblesFullInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfTangiblesFullInfo');
  RemClassRegistry.RegisterXSClass(IncidentElementFullInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentElementFullInfo2', 'IncidentElementFullInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IncidentElementFullInfo2), 'Members', '[ArrayItemName="ViolatorFullInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IncidentElementFullInfo2), 'Tangibles', '[ArrayItemName="TangiblesFullInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IncidentElementFullInfo2), 'Violators', '[ArrayItemName="ViolatorFullInfo"]');
  RemClassRegistry.RegisterXSClass(IncidentElementFullInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentElementFullInfo');
  RemClassRegistry.RegisterXSClass(IncidentsMegaFilter2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentsMegaFilter2', 'IncidentsMegaFilter');
  RemClassRegistry.RegisterXSClass(IncidentsMegaFilter, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentsMegaFilter');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfIncidentElementFullInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'ArrayOfIncidentElementFullInfo');
  RemClassRegistry.RegisterXSClass(IncidentsInfoData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentsInfoData2', 'IncidentsInfoData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(IncidentsInfoData2), 'Incidents', '[ArrayItemName="IncidentElementFullInfo"]');
end;

procedure RegisterTypeProc8;
begin
  RemClassRegistry.RegisterXSClass(IncidentsInfoData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries', 'IncidentsInfoData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAcsAlcoGroupSlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup', 'ArrayOfAcsAlcoGroupSlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfPhotoBankShort), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank', 'ArrayOfPhotoBankShort');
  RemClassRegistry.RegisterXSClass(PhotoBankShort2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank', 'PhotoBankShort2', 'PhotoBankShort');
  RemClassRegistry.RegisterXSClass(PhotoBank2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank', 'PhotoBank2', 'PhotoBank');
  RemClassRegistry.RegisterXSClass(PhotoBank, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank', 'PhotoBank');
  RemClassRegistry.RegisterXSClass(PhotoBankShort, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank', 'PhotoBankShort');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfEmployeeGroupForAlcoGroupFull), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup', 'ArrayOfEmployeeGroupForAlcoGroupFull');
  RemClassRegistry.RegisterXSClass(EmployeeGroupForAlcoGroup2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup', 'EmployeeGroupForAlcoGroup2', 'EmployeeGroupForAlcoGroup');
  RemClassRegistry.RegisterXSClass(EmployeeGroupForAlcoGroupFull2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup', 'EmployeeGroupForAlcoGroupFull2', 'EmployeeGroupForAlcoGroupFull');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EmployeeGroupForAlcoGroupFull2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EmployeeAssignmentType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup', 'EmployeeAssignmentType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AssignmentFilter), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup', 'AssignmentFilter');
  RemClassRegistry.RegisterXSClass(AcsAlcoGroupSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup', 'AcsAlcoGroupSaveData2', 'AcsAlcoGroupSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AcsAlcoGroupSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(AcsAlcoGroupSlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup', 'AcsAlcoGroupSlimInfo2', 'AcsAlcoGroupSlimInfo');
  RemClassRegistry.RegisterXSClass(RemoteTerminalInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal', 'RemoteTerminalInfo2', 'RemoteTerminalInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RemoteTerminalInfo2), 'PersonalData', '[ArrayItemName="PhotoidentificationPersonalData"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RemoteTerminalInfo2), 'WorkZones', '[ArrayItemName="WorkZoneSlimInfo"]');
  RemClassRegistry.RegisterXSClass(RemoteTerminalInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal', 'RemoteTerminalInfo');
  RemClassRegistry.RegisterXSClass(RemoteTerminalSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal', 'RemoteTerminalSaveData2', 'RemoteTerminalSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RemoteTerminalSaveData2), 'PersonalData', '[ArrayItemName="PhotoidentificationPersonalData"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RemoteTerminalSaveData2), 'WorkZonesIDS', '[ArrayItemName="guid"]');
  RemClassRegistry.RegisterXSClass(RemoteTerminalSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal', 'RemoteTerminalSaveData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfPhotoOrder), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Photo', 'ArrayOfPhotoOrder');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfISS_IIDK_SlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ArrayOfISS_IIDK_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_Entity_Base2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Entity_Base2', 'ISS_Entity_Base');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ISS_Entity_Base2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(ISS_Display_SlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Display_SlimInfo2', 'ISS_Display_SlimInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ISS_Display_SlimInfo2), 'EventViewers', '[ArrayItemName="ISS_EventViewer_SlimInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ISS_Display_SlimInfo2), 'Monitors', '[ArrayItemName="ISS_Monitor_SlimInfo"]');
  RemClassRegistry.RegisterXSClass(ISS_Display_SlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Display_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_RusGuard_SlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_RusGuard_SlimInfo2', 'ISS_RusGuard_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_RusGuard_SlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_RusGuard_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_EventViewer_SlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_EventViewer_SlimInfo2', 'ISS_EventViewer_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_EventViewer_SlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_EventViewer_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_Monitor_SlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Monitor_SlimInfo2', 'ISS_Monitor_SlimInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ISS_Monitor_SlimInfo2), 'Cameras', '[ArrayItemName="ISS_Cam_SlimInfo"]');
  RemClassRegistry.RegisterXSClass(ISS_Monitor_SlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Monitor_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_IntegrationPoint_SlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_IntegrationPoint_SlimInfo2', 'ISS_IntegrationPoint_SlimInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ISS_IntegrationPoint_SlimInfo2), 'RusGuardIntegrationPoints', '[ArrayItemName="ISS_RusGuard_SlimInfo"]');
  RemClassRegistry.RegisterXSClass(ISS_IntegrationPoint_SlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_IntegrationPoint_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_Cam_SlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Cam_SlimInfo2', 'ISS_Cam_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_Cam_SlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Cam_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_Entity_Base, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Entity_Base');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfISS_Display_SlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ArrayOfISS_Display_SlimInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfISS_IntegrationPoint_SlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ArrayOfISS_IntegrationPoint_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_Slave_SlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Slave_SlimInfo2', 'ISS_Slave_SlimInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ISS_Slave_SlimInfo2), 'Displays', '[ArrayItemName="ISS_Display_SlimInfo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ISS_Slave_SlimInfo2), 'IntegrationPoints', '[ArrayItemName="ISS_IntegrationPoint_SlimInfo"]');
  RemClassRegistry.RegisterXSClass(ISS_Slave_SlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_Slave_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_IIDK_SaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_IIDK_SaveData2', 'ISS_IIDK_SaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ISS_IIDK_SaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(ISS_IIDK_SaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_IIDK_SaveData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfISS_Slave_SlimInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ArrayOfISS_Slave_SlimInfo');
  RemClassRegistry.RegisterXSClass(ISS_IIDK_SlimInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_IIDK_SlimInfo2', 'ISS_IIDK_SlimInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ISS_IIDK_SlimInfo2), 'Slaves', '[ArrayItemName="ISS_Slave_SlimInfo"]');
  RemClassRegistry.RegisterXSClass(ISS_IIDK_SlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS', 'ISS_IIDK_SlimInfo');
  RemClassRegistry.RegisterXSClass(AcsConfiguratorSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'AcsConfiguratorSaveData2', 'AcsConfiguratorSaveData');
  RemClassRegistry.RegisterXSClass(AcsConfiguratorSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'AcsConfiguratorSaveData');
  RemClassRegistry.RegisterXSClass(EmployeeGroupForAlcoGroup, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup', 'EmployeeGroupForAlcoGroup');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfWorkplaceInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'ArrayOfWorkplaceInfo');
  RemClassRegistry.RegisterXSClass(EmployeeGroupForAlcoGroupFull, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup', 'EmployeeGroupForAlcoGroupFull');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfEmployeeGroupForAlcoGroup), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup', 'ArrayOfEmployeeGroupForAlcoGroup');
  RemClassRegistry.RegisterXSClass(AcsAlcoGroupSlimInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup', 'AcsAlcoGroupSlimInfo');
  RemClassRegistry.RegisterXSClass(AcsAlcoGroupSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup', 'AcsAlcoGroupSaveData');
  RemClassRegistry.RegisterXSClass(WorkplaceModuleSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'WorkplaceModuleSaveData2', 'WorkplaceModuleSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WorkplaceModuleSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(WorkplaceModuleSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'WorkplaceModuleSaveData');
  RemClassRegistry.RegisterXSInfo(TypeInfo(WorkplaceModuleType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'WorkplaceModuleType');
  RemClassRegistry.RegisterXSClass(AcsConfiguratorInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'AcsConfiguratorInfo2', 'AcsConfiguratorInfo');
  RemClassRegistry.RegisterXSClass(AcsConfiguratorInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'AcsConfiguratorInfo');
  RemClassRegistry.RegisterXSClass(WorkplaceModuleInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'WorkplaceModuleInfo2', 'WorkplaceModuleInfo');
  RemClassRegistry.RegisterXSClass(WorkplaceModuleInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'WorkplaceModuleInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfWorkplaceModuleInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'ArrayOfWorkplaceModuleInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FavoriteType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'FavoriteType');
  RemClassRegistry.RegisterXSClass(WorkplaceSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'WorkplaceSaveData2', 'WorkplaceSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WorkplaceSaveData2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(WorkplaceInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'WorkplaceInfo2', 'WorkplaceInfo');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WorkplaceInfo2), 'Modules', '[ArrayItemName="WorkplaceModuleInfo"]');
  RemClassRegistry.RegisterXSClass(WorkplaceInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'WorkplaceInfo');
  RemClassRegistry.RegisterXSClass(WorkplaceSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace', 'WorkplaceSaveData');
  RemClassRegistry.RegisterXSClass(OwnerValueBase2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerValueBase2', 'OwnerValueBase');
  RemClassRegistry.RegisterXSClass(OwnerDateTimeValue2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerDateTimeValue2', 'OwnerDateTimeValue');
  RemClassRegistry.RegisterXSClass(OwnerDoubleValue2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerDoubleValue2', 'OwnerDoubleValue');
  RemClassRegistry.RegisterXSClass(AdditionalFieldValue2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AdditionalFieldValue2', 'AdditionalFieldValue');
  RemClassRegistry.RegisterXSClass(ListItem2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ListItem2', 'ListItem');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfListItem), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ArrayOfListItem');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAdditionalFieldValue), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ArrayOfAdditionalFieldValue');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfOwnerAdditionalFieldsValue), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ArrayOfOwnerAdditionalFieldsValue');
  RemClassRegistry.RegisterXSClass(OwnerAdditionalFieldsValue2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerAdditionalFieldsValue2', 'OwnerAdditionalFieldsValue');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OwnerAdditionalFieldsValue2), 'Fields', '[ArrayItemName="AdditionalFieldValue"]');
  RemClassRegistry.RegisterXSClass(OwnerAdditionalFieldsValue, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerAdditionalFieldsValue');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAddDateTimeInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ArrayOfAddDateTimeInfo');
  RemClassRegistry.RegisterXSClass(OwnerListValue2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerListValue2', 'OwnerListValue');
  RemClassRegistry.RegisterXSClass(OwnerListValue, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerListValue');
  RemClassRegistry.RegisterXSClass(OwnerIntValue2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerIntValue2', 'OwnerIntValue');
  RemClassRegistry.RegisterXSClass(OwnerStringValue2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerStringValue2', 'OwnerStringValue');
  RemClassRegistry.RegisterXSClass(OwnerColorValue2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerColorValue2', 'OwnerColorValue');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAdditionalFieldBase), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ArrayOfAdditionalFieldBase');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShowPreviousVisitorMode), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification', 'ShowPreviousVisitorMode');
  RemClassRegistry.RegisterXSClass(CellContentFotoIdentificationSaveData2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification', 'CellContentFotoIdentificationSaveData2', 'CellContentFotoIdentificationSaveData');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CellContentFotoIdentificationSaveData2), 'PersonalData', '[ArrayItemName="PhotoidentificationPersonalData"]');
  RemClassRegistry.RegisterXSClass(CellContentFotoIdentificationSaveData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification', 'CellContentFotoIdentificationSaveData');
  RemClassRegistry.RegisterXSClass(CellContentFotoIdentificationInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification', 'CellContentFotoIdentificationInfo2', 'CellContentFotoIdentificationInfo');
  RemClassRegistry.RegisterXSClass(CellContentFotoIdentificationInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification', 'CellContentFotoIdentificationInfo');
  RemClassRegistry.RegisterXSClass(PhotoidentificationPersonalData, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification', 'PhotoidentificationPersonalData');
  RemClassRegistry.RegisterXSClass(PhotoidentificationPersonalDataSaveInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification', 'PhotoidentificationPersonalDataSaveInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FieldType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'FieldType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FieldType), 'String_', 'String');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FieldType), 'Integer_', 'Integer');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FieldType), 'Double_', 'Double');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OwnerFieldType), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerFieldType');
  RemClassRegistry.RegisterXSClass(AdditionalFieldBase2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AdditionalFieldBase2', 'AdditionalFieldBase');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AdditionalFieldBase2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(IntegerField2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'IntegerField2', 'IntegerField');
  RemClassRegistry.RegisterXSClass(ColorField2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ColorField2', 'ColorField');
  RemClassRegistry.RegisterXSClass(StringField2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'StringField2', 'StringField');
  RemClassRegistry.RegisterXSClass(DoubleField2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'DoubleField2', 'DoubleField');
  RemClassRegistry.RegisterXSClass(ListField2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ListField2', 'ListField');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListField2), 'Items', '[ArrayItemName="ListItem"]');
  RemClassRegistry.RegisterXSClass(DateTimeField2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'DateTimeField2', 'DateTimeField');
  RemClassRegistry.RegisterXSClass(ColorField, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ColorField');
  RemClassRegistry.RegisterXSClass(ListField, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ListField');
  RemClassRegistry.RegisterXSClass(ListItem, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ListItem');
end;

procedure RegisterTypeProc9;
begin
  RemClassRegistry.RegisterXSClass(StringField, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'StringField');
  RemClassRegistry.RegisterXSClass(DateTimeField, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'DateTimeField');
  RemClassRegistry.RegisterXSClass(IntegerField, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'IntegerField');
  RemClassRegistry.RegisterXSClass(DoubleField, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'DoubleField');
  RemClassRegistry.RegisterXSClass(OwnerIntValue, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerIntValue');
  RemClassRegistry.RegisterXSClass(OwnerStringValue, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerStringValue');
  RemClassRegistry.RegisterXSClass(OwnerColorValue, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerColorValue');
  RemClassRegistry.RegisterXSClass(OwnerDoubleValue, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerDoubleValue');
  RemClassRegistry.RegisterXSClass(AdditionalFieldValue, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AdditionalFieldValue');
  RemClassRegistry.RegisterXSClass(OwnerValueBase, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerValueBase');
  RemClassRegistry.RegisterXSClass(OwnerDateTimeValue, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'OwnerDateTimeValue');
  RemClassRegistry.RegisterXSClass(AdditionalFieldBase, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AdditionalFieldBase');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAddIntInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ArrayOfAddIntInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAddStringInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ArrayOfAddStringInfo');
  RemClassRegistry.RegisterXSClass(AddFieldInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddFieldInfo2', 'AddFieldInfo');
  RemClassRegistry.RegisterXSClass(AddDateTimeInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddDateTimeInfo2', 'AddDateTimeInfo');
  RemClassRegistry.RegisterXSClass(AddDateTimeInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddDateTimeInfo');
  RemClassRegistry.RegisterXSClass(AddDoubleInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddDoubleInfo2', 'AddDoubleInfo');
  RemClassRegistry.RegisterXSClass(AddDoubleInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddDoubleInfo');
  RemClassRegistry.RegisterXSClass(AddIntInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddIntInfo2', 'AddIntInfo');
  RemClassRegistry.RegisterXSClass(AddIntInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddIntInfo');
  RemClassRegistry.RegisterXSClass(AddFieldInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddFieldInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAddDoubleInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ArrayOfAddDoubleInfo');
  RemClassRegistry.RegisterXSClass(AddListInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddListInfo2', 'AddListInfo');
  RemClassRegistry.RegisterXSClass(AddListInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddListInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PhotoMarker), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'PhotoMarker');
  RemClassRegistry.RegisterXSClass(PhotoOrder2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Photo', 'PhotoOrder2', 'PhotoOrder');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PhotoOrder2), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(PhotoOrder, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Photo', 'PhotoOrder');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SavedFieldContext), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'SavedFieldContext');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAddListInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ArrayOfAddListInfo');
  RemClassRegistry.RegisterXSClass(AddStringInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddStringInfo2', 'AddStringInfo');
  RemClassRegistry.RegisterXSClass(AddStringInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddStringInfo');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfAddColorInfo), 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'ArrayOfAddColorInfo');
  RemClassRegistry.RegisterXSClass(AddColorInfo2, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddColorInfo2', 'AddColorInfo');
  RemClassRegistry.RegisterXSClass(AddColorInfo, 'http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields', 'AddColorInfo');
end;

procedure RegisterTypeProc10;
begin
end;

initialization
  { ILNetworkService }
  InvRegistry.RegisterInterface(TypeInfo(ILNetworkService), 'http://www.rusguardsecurity.ru', 'utf-8');
  InvRegistry.RegisterAllSOAPActions(TypeInfo(ILNetworkService), '|http://www.rusguardsecurity.ru/ILDataService/GetTagsByResourceID'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetTags'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetFavoriteFolders'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetFavoriteFoldersByWorkplace'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetFavoriteFoldersWithEmployeeGroups'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetFavoriteFoldersWithEmployeeGroupsByWorkplace'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetFavoriteFolderForEmployeeGroup'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetFavoriteFolderForEmployeeGroupByWorkplace'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetUserPasses'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/LoadUserPass'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetReactions'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetReactionFullInfo'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeesOfReactionAction'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeeGroupsOfReactionAction'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetReactionSendSMSAction'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetReactionSendEmailAction'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetReactionExecuteProgramAction'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetReactionRecordVideoAction'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetReports'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetDriversOfReportParameters'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetLogMessageSubtypesOfReportParameters'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeesOfReportParameters'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeeGroupsOfReportParameters'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkZonesOfReportParameters'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetIncidentTypeOfReportParameters'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetIncidentStatisticReport'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetIncidentStatisticReportByWeek'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeesOfReactionEvent'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeeGroupsOfReactionEvent'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetDriversOfReactionEvent'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetLogMessageSubtypesOfReactionEvent'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetSwitchedOffLogMessageSubtypesOfWorkplace'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetSwitchedOffLogDriversOfWorkplace'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetRemoteTerminalInfoByWorkplaceModuleId'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetReactionEventsFromDevices'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetLicense'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeeIDsByTableNumbers'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeesDocuments'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeePhotoInfos'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeePhoto'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeePhotoByType'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeesByAccessLevel'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsKeysForEmployee'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAssignedAcsKeyByKeyNumber'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsKeysForEmployeeWithLost'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsKeysForEmployeeWithLostIncludeRemovedEmployees'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/FindEmployees'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/FindGroups'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/FindVehicle'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetUnResolvedPhotoBankDetails'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetPhoto'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/ResolvePhotoBankEntity'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsVehiclesByGroup'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsVehiclesGuidsByGroups'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsVehicle'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkTimeTable'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeeTimeTable'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetDayTypesSlimInfo'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkSchedulesSlimInfo'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkZonesSlimInfo'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkZonesAccessPoints'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsBoxAccessElements'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsBoxAccessLevelsSlimInfo'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsAccessLevelsSlimInfo'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAlcoGroupsSlimInfo'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeePostionsForAlcoGroup'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetPositionCodes'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeeGroupsForAlcoGroup'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsAccessPointDrivers'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsAccessPoints'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GeFilteredtDrivers'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkZonesByDriverID'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkZonesByEmployeeID'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkZonesByEmployeeIDIncludeRemovedEmployees'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkZonesByEmployeeGroupID'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkSchedulesByEmployeeID'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkSchedulesByEmployeeIDIncludeRemovedEmployees'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkSchedulesByEmployeeGroupID'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeeForAlcoGroup'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkplaces'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetISS_IIDKs'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetISS_Recognition'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetISS_Drivers'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetISS_IIDK_Slaves'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/Get_ISS_DriverEventsPlayback'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAllMaps'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetMapById'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetMapImage'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsConfiguratorSettingsByWorkplaceModule'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetVisitorsScoreboardSettingsByWorkplaceModuleId'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/SetVisitorsScoreboardSettingsByWorkplaceModuleId'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetWorkZoneVisitorsCount'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetUidsKeys'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetKeyByUid'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GenerateKey'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetMifareProfiles'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetMifareProfilesFullInfo'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetScreenLayoutForWorkplaceModule'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetScreenCellPhotoIdentificationContent'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetScreenCellCameraContent'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetIvideonCameraDrivers'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetPhotoidentificationPersonalData'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmailAddresses'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmailAddressesIncludeRemovedEmployees'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetPhoneNumbers'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetPhoneNumbersIncludeRemovedEmployees'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeeSchedules'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeeSchedulesIncludeRemovedEmployees'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmailDistributionAddresses'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/SendEmail'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetFields'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAdditionalFieldsValue'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAdditionalFields'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAdditionalFieldsValueForOwners'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAdditionalFieldsForOwners'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetPhotoOrders'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetTagsByMifareProfileID'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetTagsByReportID'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetTagsByEmployeeGroupID'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetTagsByAccessLevelID'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetTagsByBoxAccessLevelID'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetVariable'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetChildrenNets'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAllNets'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetLocalNet'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetNetServers'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetServer'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetRootServerDrivers'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetDriversByType'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetServerDriversFullInfo'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetNetworkChanges'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetDriver'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetLogMessageTypes'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetLogMessageSubtypes'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEvents'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetLastEvent'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEventsByDeviceIDs'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetFilteredEvents'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetLastEventByDeviceIDs'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEventsByDeviceTypes'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetLastEventByDeviceTypes'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetUser'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetOperator'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetUsers'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetUserGroup'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetUserGroups'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetUserGroupsByUserID'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetUsersByUserGroupID'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetClaim'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetClaimsForUserGroup'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetClaimsForUserByUserId'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetClaimsForUserByUserLogin'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsDaySchedules'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsDaySchedulesByOwner'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsDaySchedule'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsDayScheduleByOwner'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsMultiDaySchedules'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsMultiDaySchedule'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsWeekSlimSchedules'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsWeekFullSchedules'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsWeekSchedule'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsCustomDays'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsCustomDay'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsWorkDaysWithTransfer'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsWorkDayWithTransfer'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetDictionaryElement'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetDictionaryElements'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetCardType'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetIncidents'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetIncident'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/SearchFirebirdIncidents'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/FindViolationByEmployee'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetIncidentTemplates'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetOrganizationForEmployee'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetSubdivisionsForEmployee'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetOrganizationAssignmentsForEmployee'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetOrganizationAssignmentsForEmployeeIncludeRemovedEmployees'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetOrganizationForVehicle'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetSubdivisionsForVehicle'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetOrganizationAssignmentsForVehicle'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetCardTypes'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeePosition'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeePositions'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeePositionsForIncident'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeeGroupsFull'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeeGroups'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetViolatorAcsEmployeeGroup'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeeGroupsByTags'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeeGroup'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeeGroupsForReportParameters'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeeGroupsForReactionEvent'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeeGroupsForReactionAction'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeesByGroup'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployees'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeeFaceById'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeeFaces'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeeFacesIncludeRemovedEmployees'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetEmployeeFacesFull'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeesByGroups'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetListAcsEmployeesByGroup'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeesGuidsByGroups'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployee'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeeForRemoteTerminal'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GeEmployeesView'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GeEmployeesViewMetadata'
                                                                +'|http://www.rusguardsecurity.ru/ILDataService/GetAcsEmployeesByTableNumbers'
                                                                +'|http://www.rusguardsecurity.ru/ILNetworkService/Connect'
                                                                +'|http://www.rusguardsecurity.ru/ILNetworkService/Disconnect'
                                                                +'|http://www.rusguardsecurity.ru/ILNetworkService/GetNotification'
                                                                +'|http://www.rusguardsecurity.ru/ILNetworkService/Process'
                                                                +'|http://www.rusguardsecurity.ru/ILNetworkService/IsSessionExists'
                                                                );
  InvRegistry.RegisterInvokeOptions(TypeInfo(ILNetworkService), ioDocument);
  { ILNetworkService.GetTagsByResourceID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetTagsByResourceID', '',
                                 '[ReturnName="GetTagsByResourceIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetTagsByResourceID', 'resourceID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetTagsByResourceID', 'GetTagsByResourceIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag", ArrayItemName="ResourceTagsData"]', IS_NLBL);
  { ILNetworkService.GetTags }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetTags', '',
                                 '[ReturnName="GetTagsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetTags', 'GetTagsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag", ArrayItemName="TagFullInfo"]', IS_NLBL);
  { ILNetworkService.GetFavoriteFolders }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetFavoriteFolders', '',
                                 '[ReturnName="GetFavoriteFoldersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFolders', 'userId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFolders', 'folderId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFolders', 'left_key', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFolders', 'GetFavoriteFoldersResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder", ArrayItemName="FavoriteFolderInfo"]', IS_NLBL);
  { ILNetworkService.GetFavoriteFoldersByWorkplace }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetFavoriteFoldersByWorkplace', '',
                                 '[ReturnName="GetFavoriteFoldersByWorkplaceResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFoldersByWorkplace', 'workpplaceId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFoldersByWorkplace', 'folderId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFoldersByWorkplace', 'left_key', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFoldersByWorkplace', 'GetFavoriteFoldersByWorkplaceResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder", ArrayItemName="FavoriteFolderInfo"]', IS_NLBL);
  { ILNetworkService.GetFavoriteFoldersWithEmployeeGroups }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetFavoriteFoldersWithEmployeeGroups', '',
                                 '[ReturnName="GetFavoriteFoldersWithEmployeeGroupsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFoldersWithEmployeeGroups', 'userId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFoldersWithEmployeeGroups', 'folderId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFoldersWithEmployeeGroups', 'GetFavoriteFoldersWithEmployeeGroupsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder", ArrayItemName="FavoriteFolderInfoWithEmployeeGroup"]', IS_NLBL);
  { ILNetworkService.GetFavoriteFoldersWithEmployeeGroupsByWorkplace }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetFavoriteFoldersWithEmployeeGroupsByWorkplace', '',
                                 '[ReturnName="GetFavoriteFoldersWithEmployeeGroupsByWorkplaceResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFoldersWithEmployeeGroupsByWorkplace', 'workpplaceId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFoldersWithEmployeeGroupsByWorkplace', 'folderId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFoldersWithEmployeeGroupsByWorkplace', 'GetFavoriteFoldersWithEmployeeGroupsByWorkplaceResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder", ArrayItemName="FavoriteFolderInfoWithEmployeeGroup"]', IS_NLBL);
  { ILNetworkService.GetFavoriteFolderForEmployeeGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetFavoriteFolderForEmployeeGroup', '',
                                 '[ReturnName="GetFavoriteFolderForEmployeeGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFolderForEmployeeGroup', 'userId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFolderForEmployeeGroup', 'employeeGroupId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFolderForEmployeeGroup', 'GetFavoriteFolderForEmployeeGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"]', IS_NLBL);
  { ILNetworkService.GetFavoriteFolderForEmployeeGroupByWorkplace }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetFavoriteFolderForEmployeeGroupByWorkplace', '',
                                 '[ReturnName="GetFavoriteFolderForEmployeeGroupByWorkplaceResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFolderForEmployeeGroupByWorkplace', 'workpplaceId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFolderForEmployeeGroupByWorkplace', 'employeeGroupId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFavoriteFolderForEmployeeGroupByWorkplace', 'GetFavoriteFolderForEmployeeGroupByWorkplaceResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"]', IS_NLBL);
  { ILNetworkService.GetUserPasses }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetUserPasses', '',
                                 '[ReturnName="GetUserPassesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUserPasses', 'GetUserPassesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass", ArrayItemName="UserPassSlimData"]', IS_NLBL);
  { ILNetworkService.LoadUserPass }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'LoadUserPass', '',
                                 '[ReturnName="LoadUserPassResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'LoadUserPass', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'LoadUserPass', 'LoadUserPassResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"]', IS_NLBL);
  { ILNetworkService.GetReactions }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetReactions', '',
                                 '[ReturnName="GetReactionsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReactions', 'GetReactionsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction", ArrayItemName="ReactionSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetReactionFullInfo }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetReactionFullInfo', '',
                                 '[ReturnName="GetReactionFullInfoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReactionFullInfo', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReactionFullInfo', 'GetReactionFullInfoResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkService.GetEmployeesOfReactionAction }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeesOfReactionAction', '',
                                 '[ReturnName="GetEmployeesOfReactionActionResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeesOfReactionAction', 'actionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeesOfReactionAction', 'GetEmployeesOfReactionActionResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.GetEmployeeGroupsOfReactionAction }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeeGroupsOfReactionAction', '',
                                 '[ReturnName="GetEmployeeGroupsOfReactionActionResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeGroupsOfReactionAction', 'actionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeGroupsOfReactionAction', 'GetEmployeeGroupsOfReactionActionResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.GetReactionSendSMSAction }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetReactionSendSMSAction', '',
                                 '[ReturnName="GetReactionSendSMSActionResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReactionSendSMSAction', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReactionSendSMSAction', 'GetReactionSendSMSActionResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkService.GetReactionSendEmailAction }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetReactionSendEmailAction', '',
                                 '[ReturnName="GetReactionSendEmailActionResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReactionSendEmailAction', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReactionSendEmailAction', 'GetReactionSendEmailActionResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkService.GetReactionExecuteProgramAction }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetReactionExecuteProgramAction', '',
                                 '[ReturnName="GetReactionExecuteProgramActionResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReactionExecuteProgramAction', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReactionExecuteProgramAction', 'GetReactionExecuteProgramActionResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkService.GetReactionRecordVideoAction }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetReactionRecordVideoAction', '',
                                 '[ReturnName="GetReactionRecordVideoActionResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReactionRecordVideoAction', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReactionRecordVideoAction', 'GetReactionRecordVideoActionResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkService.GetReports }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetReports', '',
                                 '[ReturnName="GetReportsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReports', 'reportIdentity', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReports', 'GetReportsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report", ArrayItemName="ReportSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetDriversOfReportParameters }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetDriversOfReportParameters', '',
                                 '[ReturnName="GetDriversOfReportParametersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDriversOfReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDriversOfReportParameters', 'GetDriversOfReportParametersResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.GetLogMessageSubtypesOfReportParameters }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetLogMessageSubtypesOfReportParameters', '',
                                 '[ReturnName="GetLogMessageSubtypesOfReportParametersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLogMessageSubtypesOfReportParameters', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLogMessageSubtypesOfReportParameters', 'GetLogMessageSubtypesOfReportParametersResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  { ILNetworkService.GetEmployeesOfReportParameters }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeesOfReportParameters', '',
                                 '[ReturnName="GetEmployeesOfReportParametersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeesOfReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeesOfReportParameters', 'GetEmployeesOfReportParametersResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.GetEmployeeGroupsOfReportParameters }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeeGroupsOfReportParameters', '',
                                 '[ReturnName="GetEmployeeGroupsOfReportParametersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeGroupsOfReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeGroupsOfReportParameters', 'GetEmployeeGroupsOfReportParametersResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.GetWorkZonesOfReportParameters }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkZonesOfReportParameters', '',
                                 '[ReturnName="GetWorkZonesOfReportParametersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesOfReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesOfReportParameters', 'GetWorkZonesOfReportParametersResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.GetIncidentTypeOfReportParameters }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetIncidentTypeOfReportParameters', '',
                                 '[ReturnName="GetIncidentTypeOfReportParametersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncidentTypeOfReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncidentTypeOfReportParameters', 'GetIncidentTypeOfReportParametersResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents", ArrayItemName="IncidentTypeInfo"]', IS_NLBL);
  { ILNetworkService.GetIncidentStatisticReport }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetIncidentStatisticReport', '',
                                 '[ReturnName="GetIncidentStatisticReportResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncidentStatisticReport', 'incidentStatisticData', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncidentStatisticReport', 'extension', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncidentStatisticReport', 'GetIncidentStatisticReportResult', '',
                                '', IS_NLBL);
  { ILNetworkService.GetIncidentStatisticReportByWeek }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetIncidentStatisticReportByWeek', '',
                                 '[ReturnName="GetIncidentStatisticReportByWeekResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncidentStatisticReportByWeek', 'incidentStatisticData', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncidentStatisticReportByWeek', 'extension', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report.Incidents"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncidentStatisticReportByWeek', 'GetIncidentStatisticReportByWeekResult', '',
                                '', IS_NLBL);
  { ILNetworkService.GetEmployeesOfReactionEvent }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeesOfReactionEvent', '',
                                 '[ReturnName="GetEmployeesOfReactionEventResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeesOfReactionEvent', 'eventId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeesOfReactionEvent', 'GetEmployeesOfReactionEventResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.GetEmployeeGroupsOfReactionEvent }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeeGroupsOfReactionEvent', '',
                                 '[ReturnName="GetEmployeeGroupsOfReactionEventResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeGroupsOfReactionEvent', 'eventId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeGroupsOfReactionEvent', 'GetEmployeeGroupsOfReactionEventResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.GetDriversOfReactionEvent }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetDriversOfReactionEvent', '',
                                 '[ReturnName="GetDriversOfReactionEventResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDriversOfReactionEvent', 'eventId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDriversOfReactionEvent', 'GetDriversOfReactionEventResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.GetLogMessageSubtypesOfReactionEvent }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetLogMessageSubtypesOfReactionEvent', '',
                                 '[ReturnName="GetLogMessageSubtypesOfReactionEventResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLogMessageSubtypesOfReactionEvent', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLogMessageSubtypesOfReactionEvent', 'GetLogMessageSubtypesOfReactionEventResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  { ILNetworkService.GetSwitchedOffLogMessageSubtypesOfWorkplace }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetSwitchedOffLogMessageSubtypesOfWorkplace', '',
                                 '[ReturnName="GetSwitchedOffLogMessageSubtypesOfWorkplaceResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetSwitchedOffLogMessageSubtypesOfWorkplace', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetSwitchedOffLogMessageSubtypesOfWorkplace', 'GetSwitchedOffLogMessageSubtypesOfWorkplaceResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  { ILNetworkService.GetSwitchedOffLogDriversOfWorkplace }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetSwitchedOffLogDriversOfWorkplace', '',
                                 '[ReturnName="GetSwitchedOffLogDriversOfWorkplaceResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetSwitchedOffLogDriversOfWorkplace', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetSwitchedOffLogDriversOfWorkplace', 'GetSwitchedOffLogDriversOfWorkplaceResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.GetRemoteTerminalInfoByWorkplaceModuleId }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetRemoteTerminalInfoByWorkplaceModuleId', '',
                                 '[ReturnName="GetRemoteTerminalInfoByWorkplaceModuleIdResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetRemoteTerminalInfoByWorkplaceModuleId', 'moduleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetRemoteTerminalInfoByWorkplaceModuleId', 'GetRemoteTerminalInfoByWorkplaceModuleIdResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal"]', IS_NLBL);
  { ILNetworkService.GetReactionEventsFromDevices }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetReactionEventsFromDevices', '',
                                 '[ReturnName="GetReactionEventsFromDevicesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReactionEventsFromDevices', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetReactionEventsFromDevices', 'GetReactionEventsFromDevicesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkService.GetLicense }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetLicense', '',
                                 '[ReturnName="GetLicenseResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLicense', 'moduleID', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLicense', 'elementID', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLicense', 'GetLicenseResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeeIDsByTableNumbers }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeIDsByTableNumbers', '',
                                 '[ReturnName="GetAcsEmployeeIDsByTableNumbersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeIDsByTableNumbers', 'tableNumbers', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="int"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeIDsByTableNumbers', 'GetAcsEmployeeIDsByTableNumbersResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeesDocuments }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesDocuments', '',
                                 '[ReturnName="GetAcsEmployeesDocumentsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesDocuments', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesDocuments', 'GetAcsEmployeesDocumentsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeePhotoInfos }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeePhotoInfos', '',
                                 '[ReturnName="GetAcsEmployeePhotoInfosResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeePhotoInfos', 'GetAcsEmployeePhotoInfosResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeePhotosInfo"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeePhoto }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeePhoto', '',
                                 '[ReturnName="GetAcsEmployeePhotoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeePhoto', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeePhoto', 'GetAcsEmployeePhotoResult', '',
                                '', IS_NLBL);
  { ILNetworkService.GetAcsEmployeePhotoByType }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeePhotoByType', '',
                                 '[ReturnName="GetAcsEmployeePhotoByTypeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeePhotoByType', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeePhotoByType', 'imageType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeePhotoByType', 'GetAcsEmployeePhotoByTypeResult', '',
                                '', IS_NLBL);
  { ILNetworkService.GetEmployeesByAccessLevel }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeesByAccessLevel', '',
                                 '[ReturnName="GetEmployeesByAccessLevelResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeesByAccessLevel', 'accessLevelId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeesByAccessLevel', 'GetEmployeesByAccessLevelResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="EmployeeShortInfo"]', IS_NLBL);
  { ILNetworkService.GetAcsKeysForEmployee }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsKeysForEmployee', '',
                                 '[ReturnName="GetAcsKeysForEmployeeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsKeysForEmployee', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsKeysForEmployee', 'GetAcsKeysForEmployeeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys", ArrayItemName="AcsKeyInfo"]', IS_NLBL);
  { ILNetworkService.GetAssignedAcsKeyByKeyNumber }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAssignedAcsKeyByKeyNumber', '',
                                 '[ReturnName="GetAssignedAcsKeyByKeyNumberResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAssignedAcsKeyByKeyNumber', 'GetAssignedAcsKeyByKeyNumberResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys"]', IS_NLBL);
  { ILNetworkService.GetAcsKeysForEmployeeWithLost }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsKeysForEmployeeWithLost', '',
                                 '[ReturnName="GetAcsKeysForEmployeeWithLostResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsKeysForEmployeeWithLost', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsKeysForEmployeeWithLost', 'GetAcsKeysForEmployeeWithLostResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys", ArrayItemName="AcsKeyInfo"]', IS_NLBL);
  { ILNetworkService.GetAcsKeysForEmployeeWithLostIncludeRemovedEmployees }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsKeysForEmployeeWithLostIncludeRemovedEmployees', '',
                                 '[ReturnName="GetAcsKeysForEmployeeWithLostIncludeRemovedEmployeesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsKeysForEmployeeWithLostIncludeRemovedEmployees', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsKeysForEmployeeWithLostIncludeRemovedEmployees', 'GetAcsKeysForEmployeeWithLostIncludeRemovedEmployeesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys", ArrayItemName="AcsKeyInfo"]', IS_NLBL);
  { ILNetworkService.FindEmployees }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'FindEmployees', '',
                                 '[ReturnName="FindEmployeesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'FindEmployees', 'searchCondition', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'FindEmployees', 'FindEmployeesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployee"]', IS_NLBL);
  { ILNetworkService.FindGroups }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'FindGroups', '',
                                 '[ReturnName="FindGroupsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'FindGroups', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'FindGroups', 'typeSearch', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'FindGroups', 'FindGroupsResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.FindVehicle }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'FindVehicle', '',
                                 '[ReturnName="FindVehicleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'FindVehicle', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'FindVehicle', 'typeSearch', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'FindVehicle', 'FindVehicleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsVehicleSearched"]', IS_NLBL);
  { ILNetworkService.GetUnResolvedPhotoBankDetails }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetUnResolvedPhotoBankDetails', '',
                                 '[ReturnName="GetUnResolvedPhotoBankDetailsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUnResolvedPhotoBankDetails', 'GetUnResolvedPhotoBankDetailsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank", ArrayItemName="PhotoBankShort"]', IS_NLBL);
  { ILNetworkService.GetPhoto }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetPhoto', '',
                                 '[ReturnName="GetPhotoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetPhoto', 'GetPhotoResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.PhotoBank"]', IS_NLBL);
  { ILNetworkService.GetAcsVehiclesByGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsVehiclesByGroup', '',
                                 '[ReturnName="GetAcsVehiclesByGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsVehiclesByGroup', 'groupIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsVehiclesByGroup', 'GetAcsVehiclesByGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle", ArrayItemName="AcsVehicle"]', IS_NLBL);
  { ILNetworkService.GetAcsVehiclesGuidsByGroups }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsVehiclesGuidsByGroups', '',
                                 '[ReturnName="GetAcsVehiclesGuidsByGroupsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsVehiclesGuidsByGroups', 'groupIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsVehiclesGuidsByGroups', 'GetAcsVehiclesGuidsByGroupsResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.GetAcsVehicle }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsVehicle', '',
                                 '[ReturnName="GetAcsVehicleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsVehicle', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsVehicle', 'GetAcsVehicleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle"]', IS_NLBL);
  { ILNetworkService.GetWorkTimeTable }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkTimeTable', '',
                                 '[ReturnName="GetWorkTimeTableResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkTimeTable', 'workScheduleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkTimeTable', 'GetWorkTimeTableResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking", ArrayItemName="WorkTimetableSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetEmployeeTimeTable }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeeTimeTable', '',
                                 '[ReturnName="GetEmployeeTimeTableResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeTimeTable', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeTimeTable', 'GetEmployeeTimeTableResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking", ArrayItemName="WorkTimetableSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetDayTypesSlimInfo }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetDayTypesSlimInfo', '',
                                 '[ReturnName="GetDayTypesSlimInfoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDayTypesSlimInfo', 'GetDayTypesSlimInfoResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking", ArrayItemName="DayTypeSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetWorkSchedulesSlimInfo }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesSlimInfo', '',
                                 '[ReturnName="GetWorkSchedulesSlimInfoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesSlimInfo', 'GetWorkSchedulesSlimInfoResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking", ArrayItemName="WorkScheduleSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetWorkZonesSlimInfo }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkZonesSlimInfo', '',
                                 '[ReturnName="GetWorkZonesSlimInfoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesSlimInfo', 'GetWorkZonesSlimInfoResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking", ArrayItemName="WorkZoneSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetWorkZonesAccessPoints }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkZonesAccessPoints', '',
                                 '[ReturnName="GetWorkZonesAccessPointsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesAccessPoints', 'workZoneId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesAccessPoints', 'GetWorkZonesAccessPointsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking", ArrayItemName="WorkZonesAccessPointSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetAcsBoxAccessElements }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsBoxAccessElements', '',
                                 '[ReturnName="GetAcsBoxAccessElementsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsBoxAccessElements', 'boxAccessLevelId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsBoxAccessElements', 'GetAcsBoxAccessElementsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel", ArrayItemName="AcsBoxAccessLevelElementSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetAcsBoxAccessLevelsSlimInfo }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsBoxAccessLevelsSlimInfo', '',
                                 '[ReturnName="GetAcsBoxAccessLevelsSlimInfoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsBoxAccessLevelsSlimInfo', 'GetAcsBoxAccessLevelsSlimInfoResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel", ArrayItemName="AcsBoxAccessLevelSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetAcsAccessLevelsSlimInfo }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsAccessLevelsSlimInfo', '',
                                 '[ReturnName="GetAcsAccessLevelsSlimInfoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsAccessLevelsSlimInfo', 'GetAcsAccessLevelsSlimInfoResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels", ArrayItemName="AcsAccessLevelSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetAlcoGroupsSlimInfo }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAlcoGroupsSlimInfo', '',
                                 '[ReturnName="GetAlcoGroupsSlimInfoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAlcoGroupsSlimInfo', 'GetAlcoGroupsSlimInfoResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup", ArrayItemName="AcsAlcoGroupSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetEmployeePostionsForAlcoGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeePostionsForAlcoGroup', '',
                                 '[ReturnName="GetEmployeePostionsForAlcoGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeePostionsForAlcoGroup', 'groupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeePostionsForAlcoGroup', 'GetEmployeePostionsForAlcoGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS", ArrayItemName="EmployeePositionSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetPositionCodes }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetPositionCodes', '',
                                 '[ReturnName="GetPositionCodesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetPositionCodes', 'alcoGroupId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetPositionCodes', 'GetPositionCodesResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="string"]', IS_NLBL);
  { ILNetworkService.GetEmployeeGroupsForAlcoGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeeGroupsForAlcoGroup', '',
                                 '[ReturnName="GetEmployeeGroupsForAlcoGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeGroupsForAlcoGroup', 'groupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeGroupsForAlcoGroup', 'GetEmployeeGroupsForAlcoGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup", ArrayItemName="EmployeeGroupForAlcoGroupFull"]', IS_NLBL);
  { ILNetworkService.GetAcsAccessPointDrivers }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsAccessPointDrivers', '',
                                 '[ReturnName="GetAcsAccessPointDriversResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsAccessPointDrivers', 'GetAcsAccessPointDriversResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints", ArrayItemName="AcsAccessPointDriverInfo"]', IS_NLBL);
  { ILNetworkService.GetAcsAccessPoints }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsAccessPoints', '',
                                 '[ReturnName="GetAcsAccessPointsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsAccessPoints', 'accessLevelId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsAccessPoints', 'GetAcsAccessPointsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints", ArrayItemName="AcsAccessPointSlimInfo"]', IS_NLBL);
  { ILNetworkService.GeFilteredtDrivers }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GeFilteredtDrivers', '',
                                 '[ReturnName="GeFilteredtDriversResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GeFilteredtDrivers', 'searchString', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GeFilteredtDrivers', 'sortType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GeFilteredtDrivers', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GeFilteredtDrivers', 'GeFilteredtDriversResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"]', IS_NLBL);
  { ILNetworkService.GetWorkZonesByDriverID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByDriverID', '',
                                 '[ReturnName="GetWorkZonesByDriverIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByDriverID', 'driverID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByDriverID', 'GetWorkZonesByDriverIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking", ArrayItemName="WorkZoneSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetWorkZonesByEmployeeID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeID', '',
                                 '[ReturnName="GetWorkZonesByEmployeeIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeID', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeID', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeID', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeID', 'workZonesOwner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeID', 'GetWorkZonesByEmployeeIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkService.GetWorkZonesByEmployeeIDIncludeRemovedEmployees }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeIDIncludeRemovedEmployees', '',
                                 '[ReturnName="GetWorkZonesByEmployeeIDIncludeRemovedEmployeesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeIDIncludeRemovedEmployees', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeIDIncludeRemovedEmployees', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeIDIncludeRemovedEmployees', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeIDIncludeRemovedEmployees', 'workZonesOwner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeIDIncludeRemovedEmployees', 'GetWorkZonesByEmployeeIDIncludeRemovedEmployeesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkService.GetWorkZonesByEmployeeGroupID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeGroupID', '',
                                 '[ReturnName="GetWorkZonesByEmployeeGroupIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeGroupID', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeGroupID', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeGroupID', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeGroupID', 'workZonessOwner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZonesByEmployeeGroupID', 'GetWorkZonesByEmployeeGroupIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkService.GetWorkSchedulesByEmployeeID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeID', '',
                                 '[ReturnName="GetWorkSchedulesByEmployeeIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeID', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeID', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeID', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeID', 'workSchedulesOwner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeID', 'GetWorkSchedulesByEmployeeIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkService.GetWorkSchedulesByEmployeeIDIncludeRemovedEmployees }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeIDIncludeRemovedEmployees', '',
                                 '[ReturnName="GetWorkSchedulesByEmployeeIDIncludeRemovedEmployeesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeIDIncludeRemovedEmployees', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeIDIncludeRemovedEmployees', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeIDIncludeRemovedEmployees', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeIDIncludeRemovedEmployees', 'workSchedulesOwner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeIDIncludeRemovedEmployees', 'GetWorkSchedulesByEmployeeIDIncludeRemovedEmployeesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkService.GetWorkSchedulesByEmployeeGroupID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeGroupID', '',
                                 '[ReturnName="GetWorkSchedulesByEmployeeGroupIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeGroupID', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeGroupID', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeGroupID', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeGroupID', 'workSchedulesOwner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkSchedulesByEmployeeGroupID', 'GetWorkSchedulesByEmployeeGroupIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkService.GetEmployeeForAlcoGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeeForAlcoGroup', '',
                                 '[ReturnName="GetEmployeeForAlcoGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeForAlcoGroup', 'alcoGroupId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeForAlcoGroup', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeForAlcoGroup', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeForAlcoGroup', 'GetEmployeeForAlcoGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkService.GetWorkplaces }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkplaces', '',
                                 '[ReturnName="GetWorkplacesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkplaces', 'GetWorkplacesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace", ArrayItemName="WorkplaceInfo"]', IS_NLBL);
  { ILNetworkService.GetISS_IIDKs }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetISS_IIDKs', '',
                                 '[ReturnName="GetISS_IIDKsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetISS_IIDKs', 'GetISS_IIDKsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS", ArrayItemName="ISS_IIDK_SlimInfo"]', IS_NLBL);
  { ILNetworkService.GetISS_Recognition }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetISS_Recognition', '',
                                 '[ReturnName="GetISS_RecognitionResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetISS_Recognition', 'GetISS_RecognitionResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS", ArrayItemName="ISS_Recognition_SlimInfo"]', IS_NLBL);
  { ILNetworkService.GetISS_Drivers }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetISS_Drivers', '',
                                 '[ReturnName="GetISS_DriversResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetISS_Drivers', 'integrationPointId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetISS_Drivers', 'GetISS_DriversResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS", ArrayItemName="ISS_Driver_SlimInfo"]', IS_NLBL);
  { ILNetworkService.GetISS_IIDK_Slaves }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetISS_IIDK_Slaves', '',
                                 '[ReturnName="GetISS_IIDK_SlavesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetISS_IIDK_Slaves', 'iidkId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetISS_IIDK_Slaves', 'GetISS_IIDK_SlavesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS", ArrayItemName="ISS_Slave_SlimInfo"]', IS_NLBL);
  { ILNetworkService.Get_ISS_DriverEventsPlayback }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'Get_ISS_DriverEventsPlayback', '',
                                 '[ReturnName="Get_ISS_DriverEventsPlaybackResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'Get_ISS_DriverEventsPlayback', 'Get_ISS_DriverEventsPlaybackResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS", ArrayItemName="ISS_DriverEventPlaybackSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetAllMaps }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAllMaps', '',
                                 '[ReturnName="GetAllMapsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAllMaps', 'mapsWorkplaceModuleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAllMaps', 'GetAllMapsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace", ArrayItemName="MapInfo"]', IS_NLBL);
  { ILNetworkService.GetMapById }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetMapById', '',
                                 '[ReturnName="GetMapByIdResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetMapById', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetMapById', 'GetMapByIdResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"]', IS_NLBL);
  { ILNetworkService.GetMapImage }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetMapImage', '',
                                 '[ReturnName="GetMapImageResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetMapImage', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetMapImage', 'GetMapImageResult', '',
                                '', IS_NLBL);
  { ILNetworkService.GetAcsConfiguratorSettingsByWorkplaceModule }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsConfiguratorSettingsByWorkplaceModule', '',
                                 '[ReturnName="GetAcsConfiguratorSettingsByWorkplaceModuleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsConfiguratorSettingsByWorkplaceModule', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsConfiguratorSettingsByWorkplaceModule', 'GetAcsConfiguratorSettingsByWorkplaceModuleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"]', IS_NLBL);
  { ILNetworkService.GetVisitorsScoreboardSettingsByWorkplaceModuleId }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetVisitorsScoreboardSettingsByWorkplaceModuleId', '',
                                 '[ReturnName="GetVisitorsScoreboardSettingsByWorkplaceModuleIdResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetVisitorsScoreboardSettingsByWorkplaceModuleId', 'moduleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetVisitorsScoreboardSettingsByWorkplaceModuleId', 'GetVisitorsScoreboardSettingsByWorkplaceModuleIdResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars"]', IS_NLBL);
  { ILNetworkService.SetVisitorsScoreboardSettingsByWorkplaceModuleId }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'SetVisitorsScoreboardSettingsByWorkplaceModuleId', 'moduleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'SetVisitorsScoreboardSettingsByWorkplaceModuleId', 'saveData', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars"]', IS_NLBL);
  { ILNetworkService.GetWorkZoneVisitorsCount }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetWorkZoneVisitorsCount', '',
                                 '[ReturnName="GetWorkZoneVisitorsCountResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZoneVisitorsCount', 'workZoneID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetWorkZoneVisitorsCount', 'GetWorkZoneVisitorsCountResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.VisitorsScoreboars"]', IS_NLBL);
  { ILNetworkService.GetUidsKeys }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetUidsKeys', '',
                                 '[ReturnName="GetUidsKeysResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUidsKeys', 'GetUidsKeysResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare", ArrayItemName="UidKeyInfo"]', IS_NLBL);
  { ILNetworkService.GetKeyByUid }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetKeyByUid', '',
                                 '[ReturnName="GetKeyByUidResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetKeyByUid', 'uid', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetKeyByUid', 'GetKeyByUidResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"]', IS_NLBL);
  { ILNetworkService.GenerateKey }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GenerateKey', '',
                                 '[ReturnName="GenerateKeyResult"]', IS_OPTN);
  { ILNetworkService.GetMifareProfiles }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetMifareProfiles', '',
                                 '[ReturnName="GetMifareProfilesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetMifareProfiles', 'filter', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetMifareProfiles', 'GetMifareProfilesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare", ArrayItemName="MifareProfileInfo"]', IS_NLBL);
  { ILNetworkService.GetMifareProfilesFullInfo }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetMifareProfilesFullInfo', '',
                                 '[ReturnName="GetMifareProfilesFullInfoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetMifareProfilesFullInfo', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetMifareProfilesFullInfo', 'GetMifareProfilesFullInfoResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"]', IS_NLBL);
  { ILNetworkService.GetScreenLayoutForWorkplaceModule }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetScreenLayoutForWorkplaceModule', '',
                                 '[ReturnName="GetScreenLayoutForWorkplaceModuleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetScreenLayoutForWorkplaceModule', 'moduleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetScreenLayoutForWorkplaceModule', 'GetScreenLayoutForWorkplaceModuleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"]', IS_NLBL);
  { ILNetworkService.GetScreenCellPhotoIdentificationContent }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetScreenCellPhotoIdentificationContent', '',
                                 '[ReturnName="GetScreenCellPhotoIdentificationContentResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetScreenCellPhotoIdentificationContent', 'cellId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetScreenCellPhotoIdentificationContent', 'GetScreenCellPhotoIdentificationContentResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification"]', IS_NLBL);
  { ILNetworkService.GetScreenCellCameraContent }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetScreenCellCameraContent', '',
                                 '[ReturnName="GetScreenCellCameraContentResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetScreenCellCameraContent', 'cellId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetScreenCellCameraContent', 'GetScreenCellCameraContentResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera"]', IS_NLBL);
  { ILNetworkService.GetIvideonCameraDrivers }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetIvideonCameraDrivers', '',
                                 '[ReturnName="GetIvideonCameraDriversResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIvideonCameraDrivers', 'GetIvideonCameraDriversResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IvidionCamera", ArrayItemName="IvideonCameraDriverInfo"]', IS_NLBL);
  { ILNetworkService.GetPhotoidentificationPersonalData }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetPhotoidentificationPersonalData', '',
                                 '[ReturnName="GetPhotoidentificationPersonalDataResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetPhotoidentificationPersonalData', 'cellId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetPhotoidentificationPersonalData', 'GetPhotoidentificationPersonalDataResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification", ArrayItemName="PhotoidentificationPersonalData"]', IS_NLBL);
  { ILNetworkService.GetEmailAddresses }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmailAddresses', '',
                                 '[ReturnName="GetEmailAddressesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmailAddresses', 'owner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmailAddresses', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmailAddresses', 'GetEmailAddressesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation", ArrayItemName="EmailAddressInfo"]', IS_NLBL);
  { ILNetworkService.GetEmailAddressesIncludeRemovedEmployees }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmailAddressesIncludeRemovedEmployees', '',
                                 '[ReturnName="GetEmailAddressesIncludeRemovedEmployeesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmailAddressesIncludeRemovedEmployees', 'owner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmailAddressesIncludeRemovedEmployees', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmailAddressesIncludeRemovedEmployees', 'GetEmailAddressesIncludeRemovedEmployeesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation", ArrayItemName="EmailAddressInfo"]', IS_NLBL);
  { ILNetworkService.GetPhoneNumbers }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetPhoneNumbers', '',
                                 '[ReturnName="GetPhoneNumbersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetPhoneNumbers', 'owner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetPhoneNumbers', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetPhoneNumbers', 'GetPhoneNumbersResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation", ArrayItemName="PhoneNumberInfo"]', IS_NLBL);
  { ILNetworkService.GetPhoneNumbersIncludeRemovedEmployees }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetPhoneNumbersIncludeRemovedEmployees', '',
                                 '[ReturnName="GetPhoneNumbersIncludeRemovedEmployeesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetPhoneNumbersIncludeRemovedEmployees', 'owner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetPhoneNumbersIncludeRemovedEmployees', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetPhoneNumbersIncludeRemovedEmployees', 'GetPhoneNumbersIncludeRemovedEmployeesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation", ArrayItemName="PhoneNumberInfo"]', IS_NLBL);
  { ILNetworkService.GetEmployeeSchedules }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeeSchedules', '',
                                 '[ReturnName="GetEmployeeSchedulesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeSchedules', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeSchedules', 'GetEmployeeSchedulesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeSchedule"]', IS_NLBL);
  { ILNetworkService.GetEmployeeSchedulesIncludeRemovedEmployees }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeeSchedulesIncludeRemovedEmployees', '',
                                 '[ReturnName="GetEmployeeSchedulesIncludeRemovedEmployeesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeSchedulesIncludeRemovedEmployees', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeSchedulesIncludeRemovedEmployees', 'GetEmployeeSchedulesIncludeRemovedEmployeesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeSchedule"]', IS_NLBL);
  { ILNetworkService.GetEmailDistributionAddresses }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmailDistributionAddresses', '',
                                 '[ReturnName="GetEmailDistributionAddressesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmailDistributionAddresses', 'GetEmailDistributionAddressesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation", ArrayItemName="EmailDistributionAddressInfo"]', IS_NLBL);
  { ILNetworkService.SendEmail }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'SendEmail', 'emailDistributionAddressId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'SendEmail', 'subject', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'SendEmail', 'message_', 'message',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'SendEmail', 'toEmailAddress', '',
                                '', IS_NLBL);
  { ILNetworkService.GetFields }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetFields', '',
                                 '[ReturnName="GetFieldsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFields', 'ownerType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFields', 'GetFieldsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields", ArrayItemName="AdditionalFieldBase"]', IS_NLBL);
  { ILNetworkService.GetAdditionalFieldsValue }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAdditionalFieldsValue', '',
                                 '[ReturnName="GetAdditionalFieldsValueResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFieldsValue', 'ownerType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFieldsValue', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFieldsValue', 'GetAdditionalFieldsValueResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields", ArrayItemName="AdditionalFieldValue"]', IS_NLBL);
  { ILNetworkService.GetAdditionalFields }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAdditionalFields', '',
                                 '[ReturnName="GetAdditionalFieldsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFields', 'ownerType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFields', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFields', 'savedFieldContext', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFields', 'GetAdditionalFieldsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields", ArrayItemName="AdditionalFieldValue"]', IS_NLBL);
  { ILNetworkService.GetAdditionalFieldsValueForOwners }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAdditionalFieldsValueForOwners', '',
                                 '[ReturnName="GetAdditionalFieldsValueForOwnersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFieldsValueForOwners', 'ownerType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFieldsValueForOwners', 'ownerIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFieldsValueForOwners', 'GetAdditionalFieldsValueForOwnersResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields", ArrayItemName="OwnerAdditionalFieldsValue"]', IS_NLBL);
  { ILNetworkService.GetAdditionalFieldsForOwners }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAdditionalFieldsForOwners', '',
                                 '[ReturnName="GetAdditionalFieldsForOwnersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFieldsForOwners', 'ownerType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFieldsForOwners', 'ownerIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFieldsForOwners', 'savedFieldContext', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAdditionalFieldsForOwners', 'GetAdditionalFieldsForOwnersResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields", ArrayItemName="OwnerAdditionalFieldsValue"]', IS_NLBL);
  { ILNetworkService.GetPhotoOrders }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetPhotoOrders', '',
                                 '[ReturnName="GetPhotoOrdersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetPhotoOrders', 'ownerType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetPhotoOrders', 'GetPhotoOrdersResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Photo", ArrayItemName="PhotoOrder"]', IS_NLBL);
  { ILNetworkService.GetTagsByMifareProfileID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetTagsByMifareProfileID', '',
                                 '[ReturnName="GetTagsByMifareProfileIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetTagsByMifareProfileID', 'mifareID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetTagsByMifareProfileID', 'GetTagsByMifareProfileIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag", ArrayItemName="MifareProfileTagsData"]', IS_NLBL);
  { ILNetworkService.GetTagsByReportID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetTagsByReportID', '',
                                 '[ReturnName="GetTagsByReportIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetTagsByReportID', 'reportID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetTagsByReportID', 'GetTagsByReportIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag", ArrayItemName="ReportTagsData"]', IS_NLBL);
  { ILNetworkService.GetTagsByEmployeeGroupID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetTagsByEmployeeGroupID', '',
                                 '[ReturnName="GetTagsByEmployeeGroupIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetTagsByEmployeeGroupID', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetTagsByEmployeeGroupID', 'GetTagsByEmployeeGroupIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag", ArrayItemName="EmployeeGroupTagsData"]', IS_NLBL);
  { ILNetworkService.GetTagsByAccessLevelID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetTagsByAccessLevelID', '',
                                 '[ReturnName="GetTagsByAccessLevelIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetTagsByAccessLevelID', 'accessLevelID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetTagsByAccessLevelID', 'GetTagsByAccessLevelIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag", ArrayItemName="AccessLevelTagsData"]', IS_NLBL);
  { ILNetworkService.GetTagsByBoxAccessLevelID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetTagsByBoxAccessLevelID', '',
                                 '[ReturnName="GetTagsByBoxAccessLevelIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetTagsByBoxAccessLevelID', 'accessLevelID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetTagsByBoxAccessLevelID', 'GetTagsByBoxAccessLevelIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag", ArrayItemName="BoxAccessLevelTagsData"]', IS_NLBL);
  { ILNetworkService.GetVariable }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetVariable', '',
                                 '[ReturnName="GetVariableResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetVariable', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetVariable', 'GetVariableResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]', IS_NLBL);
  { ILNetworkService.GetChildrenNets }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetChildrenNets', '',
                                 '[ReturnName="GetChildrenNetsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetChildrenNets', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetChildrenNets', 'GetChildrenNetsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity", ArrayItemName="LNetInfo"]', IS_NLBL);
  { ILNetworkService.GetAllNets }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAllNets', '',
                                 '[ReturnName="GetAllNetsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAllNets', 'GetAllNetsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity", ArrayItemName="LNetInfo"]', IS_NLBL);
  { ILNetworkService.GetLocalNet }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetLocalNet', '',
                                 '[ReturnName="GetLocalNetResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLocalNet', 'GetLocalNetResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]', IS_NLBL);
  { ILNetworkService.GetNetServers }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetNetServers', '',
                                 '[ReturnName="GetNetServersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetNetServers', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetNetServers', 'GetNetServersResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity", ArrayItemName="LServerInfo"]', IS_NLBL);
  { ILNetworkService.GetServer }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetServer', '',
                                 '[ReturnName="GetServerResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetServer', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetServer', 'GetServerResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]', IS_NLBL);
  { ILNetworkService.GetRootServerDrivers }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetRootServerDrivers', '',
                                 '[ReturnName="GetRootServerDriversResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetRootServerDrivers', 'serverId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetRootServerDrivers', 'GetRootServerDriversResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity", ArrayItemName="LDriverFullInfo"]', IS_NLBL);
  { ILNetworkService.GetDriversByType }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetDriversByType', '',
                                 '[ReturnName="GetDriversByTypeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDriversByType', 'serverId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDriversByType', 'driverType', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDriversByType', 'property_', 'property',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDriversByType', 'GetDriversByTypeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity", ArrayItemName="LDriverFullInfo"]', IS_NLBL);
  { ILNetworkService.GetServerDriversFullInfo }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetServerDriversFullInfo', '',
                                 '[ReturnName="GetServerDriversFullInfoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetServerDriversFullInfo', 'serverID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetServerDriversFullInfo', 'workplaceModuleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetServerDriversFullInfo', 'GetServerDriversFullInfoResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity", ArrayItemName="LDriverFullInfo"]', IS_NLBL);
  { ILNetworkService.GetNetworkChanges }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetNetworkChanges', '',
                                 '[ReturnName="GetNetworkChangesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetNetworkChanges', 'connectionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetNetworkChanges', 'GetNetworkChangesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"]', IS_NLBL);
  { ILNetworkService.GetDriver }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetDriver', '',
                                 '[ReturnName="GetDriverResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDriver', 'driverID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDriver', 'GetDriverResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]', IS_NLBL);
  { ILNetworkService.GetLogMessageTypes }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetLogMessageTypes', '',
                                 '[ReturnName="GetLogMessageTypesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLogMessageTypes', 'GetLogMessageTypesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMessageTypeSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetLogMessageSubtypes }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetLogMessageSubtypes', '',
                                 '[ReturnName="GetLogMessageSubtypesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLogMessageSubtypes', 'GetLogMessageSubtypesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMessageSubtypeSlimInfo"]', IS_NLBL);
  { ILNetworkService.GetEvents }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEvents', '',
                                 '[ReturnName="GetEventsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEvents', 'msgTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEvents', 'msgSubTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEvents', 'subjectIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEvents', 'subjectType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEvents', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEvents', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEvents', 'GetEventsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]', IS_NLBL);
  { ILNetworkService.GetLastEvent }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetLastEvent', '',
                                 '[ReturnName="GetLastEventResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEvent', 'msgTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEvent', 'msgSubTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEvent', 'subjectIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEvent', 'subjectType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEvent', 'GetLastEventResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]', IS_NLBL);
  { ILNetworkService.GetEventsByDeviceIDs }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceIDs', '',
                                 '[ReturnName="GetEventsByDeviceIDsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceIDs', 'msgTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceIDs', 'msgSubTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceIDs', 'deviceIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceIDs', 'subjectIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceIDs', 'subjectType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceIDs', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceIDs', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceIDs', 'GetEventsByDeviceIDsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]', IS_NLBL);
  { ILNetworkService.GetFilteredEvents }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetFilteredEvents', '',
                                 '[ReturnName="GetFilteredEventsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFilteredEvents', 'msgTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFilteredEvents', 'msgSubTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFilteredEvents', 'deviceIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFilteredEvents', 'subjectIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFilteredEvents', 'subjectType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFilteredEvents', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFilteredEvents', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFilteredEvents', 'subjectIDs2', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFilteredEvents', 'subjectType2', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFilteredEvents', 'isShowRemovedEmployes', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetFilteredEvents', 'GetFilteredEventsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]', IS_NLBL);
  { ILNetworkService.GetLastEventByDeviceIDs }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceIDs', '',
                                 '[ReturnName="GetLastEventByDeviceIDsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceIDs', 'msgTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceIDs', 'msgSubTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceIDs', 'deviceIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceIDs', 'subjectIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceIDs', 'subjectType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceIDs', 'GetLastEventByDeviceIDsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]', IS_NLBL);
  { ILNetworkService.GetEventsByDeviceTypes }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceTypes', '',
                                 '[ReturnName="GetEventsByDeviceTypesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceTypes', 'msgTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceTypes', 'msgSubTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceTypes', 'deviceTypes', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="string"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceTypes', 'subjectIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceTypes', 'subjectType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceTypes', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceTypes', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEventsByDeviceTypes', 'GetEventsByDeviceTypesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]', IS_NLBL);
  { ILNetworkService.GetLastEventByDeviceTypes }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceTypes', '',
                                 '[ReturnName="GetLastEventByDeviceTypesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceTypes', 'msgTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceTypes', 'msgSubTypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceTypes', 'deviceTypes', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="string"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceTypes', 'subjectIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceTypes', 'subjectType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetLastEventByDeviceTypes', 'GetLastEventByDeviceTypesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]', IS_NLBL);
  { ILNetworkService.GetUser }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetUser', '',
                                 '[ReturnName="GetUserResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUser', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUser', 'GetUserResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]', IS_NLBL);
  { ILNetworkService.GetOperator }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetOperator', '',
                                 '[ReturnName="GetOperatorResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetOperator', 'login', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetOperator', 'GetOperatorResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]', IS_NLBL);
  { ILNetworkService.GetUsers }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetUsers', '',
                                 '[ReturnName="GetUsersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUsers', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUsers', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUsers', 'GetUsersResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]', IS_NLBL);
  { ILNetworkService.GetUserGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetUserGroup', '',
                                 '[ReturnName="GetUserGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUserGroup', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUserGroup', 'GetUserGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]', IS_NLBL);
  { ILNetworkService.GetUserGroups }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetUserGroups', '',
                                 '[ReturnName="GetUserGroupsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUserGroups', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUserGroups', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUserGroups', 'GetUserGroupsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]', IS_NLBL);
  { ILNetworkService.GetUserGroupsByUserID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetUserGroupsByUserID', '',
                                 '[ReturnName="GetUserGroupsByUserIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUserGroupsByUserID', 'userID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUserGroupsByUserID', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUserGroupsByUserID', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUserGroupsByUserID', 'GetUserGroupsByUserIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]', IS_NLBL);
  { ILNetworkService.GetUsersByUserGroupID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetUsersByUserGroupID', '',
                                 '[ReturnName="GetUsersByUserGroupIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUsersByUserGroupID', 'userGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUsersByUserGroupID', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUsersByUserGroupID', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetUsersByUserGroupID', 'GetUsersByUserGroupIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]', IS_NLBL);
  { ILNetworkService.GetClaim }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetClaim', '',
                                 '[ReturnName="GetClaimResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetClaim', 'claimId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetClaim', 'GetClaimResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]', IS_NLBL);
  { ILNetworkService.GetClaimsForUserGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetClaimsForUserGroup', '',
                                 '[ReturnName="GetClaimsForUserGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetClaimsForUserGroup', 'userGroupId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetClaimsForUserGroup', 'GetClaimsForUserGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security", ArrayItemName="ClaimInfo"]', IS_NLBL);
  { ILNetworkService.GetClaimsForUserByUserId }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetClaimsForUserByUserId', '',
                                 '[ReturnName="GetClaimsForUserByUserIdResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetClaimsForUserByUserId', 'userId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetClaimsForUserByUserId', 'GetClaimsForUserByUserIdResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security", ArrayItemName="ClaimInfo"]', IS_NLBL);
  { ILNetworkService.GetClaimsForUserByUserLogin }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetClaimsForUserByUserLogin', '',
                                 '[ReturnName="GetClaimsForUserByUserLoginResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetClaimsForUserByUserLogin', 'login', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetClaimsForUserByUserLogin', 'GetClaimsForUserByUserLoginResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security", ArrayItemName="ClaimInfo"]', IS_NLBL);
  { ILNetworkService.GetAcsDaySchedules }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsDaySchedules', '',
                                 '[ReturnName="GetAcsDaySchedulesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsDaySchedules', 'GetAcsDaySchedulesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule", ArrayItemName="AcsDaySchedule"]', IS_NLBL);
  { ILNetworkService.GetAcsDaySchedulesByOwner }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsDaySchedulesByOwner', '',
                                 '[ReturnName="GetAcsDaySchedulesByOwnerResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsDaySchedulesByOwner', 'owner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsDaySchedulesByOwner', 'GetAcsDaySchedulesByOwnerResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule", ArrayItemName="AcsDaySchedule"]', IS_NLBL);
  { ILNetworkService.GetAcsDaySchedule }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsDaySchedule', '',
                                 '[ReturnName="GetAcsDayScheduleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsDaySchedule', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsDaySchedule', 'GetAcsDayScheduleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  { ILNetworkService.GetAcsDayScheduleByOwner }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsDayScheduleByOwner', '',
                                 '[ReturnName="GetAcsDayScheduleByOwnerResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsDayScheduleByOwner', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsDayScheduleByOwner', 'owner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsDayScheduleByOwner', 'GetAcsDayScheduleByOwnerResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  { ILNetworkService.GetAcsMultiDaySchedules }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsMultiDaySchedules', '',
                                 '[ReturnName="GetAcsMultiDaySchedulesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsMultiDaySchedules', 'GetAcsMultiDaySchedulesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule", ArrayItemName="AcsMultiDaySchedule"]', IS_NLBL);
  { ILNetworkService.GetAcsMultiDaySchedule }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsMultiDaySchedule', '',
                                 '[ReturnName="GetAcsMultiDayScheduleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsMultiDaySchedule', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsMultiDaySchedule', 'GetAcsMultiDayScheduleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  { ILNetworkService.GetAcsWeekSlimSchedules }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsWeekSlimSchedules', '',
                                 '[ReturnName="GetAcsWeekSlimSchedulesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsWeekSlimSchedules', 'GetAcsWeekSlimSchedulesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule", ArrayItemName="AcsWeekScheduleSlim"]', IS_NLBL);
  { ILNetworkService.GetAcsWeekFullSchedules }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsWeekFullSchedules', '',
                                 '[ReturnName="GetAcsWeekFullSchedulesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsWeekFullSchedules', 'GetAcsWeekFullSchedulesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule", ArrayItemName="AcsWeekScheduleFull"]', IS_NLBL);
  { ILNetworkService.GetAcsWeekSchedule }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsWeekSchedule', '',
                                 '[ReturnName="GetAcsWeekScheduleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsWeekSchedule', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsWeekSchedule', 'GetAcsWeekScheduleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  { ILNetworkService.GetAcsCustomDays }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsCustomDays', '',
                                 '[ReturnName="GetAcsCustomDaysResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsCustomDays', 'GetAcsCustomDaysResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule", ArrayItemName="AcsCustomDay"]', IS_NLBL);
  { ILNetworkService.GetAcsCustomDay }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsCustomDay', '',
                                 '[ReturnName="GetAcsCustomDayResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsCustomDay', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsCustomDay', 'GetAcsCustomDayResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  { ILNetworkService.GetAcsWorkDaysWithTransfer }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsWorkDaysWithTransfer', '',
                                 '[ReturnName="GetAcsWorkDaysWithTransferResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsWorkDaysWithTransfer', 'GetAcsWorkDaysWithTransferResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule", ArrayItemName="AcsWorkDayWithTransfer"]', IS_NLBL);
  { ILNetworkService.GetAcsWorkDayWithTransfer }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsWorkDayWithTransfer', '',
                                 '[ReturnName="GetAcsWorkDayWithTransferResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsWorkDayWithTransfer', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsWorkDayWithTransfer', 'GetAcsWorkDayWithTransferResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  { ILNetworkService.GetDictionaryElement }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetDictionaryElement', '',
                                 '[ReturnName="GetDictionaryElementResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDictionaryElement', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDictionaryElement', 'type_', 'type',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDictionaryElement', 'GetDictionaryElementResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  { ILNetworkService.GetDictionaryElements }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetDictionaryElements', '',
                                 '[ReturnName="GetDictionaryElementsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDictionaryElements', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDictionaryElements', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDictionaryElements', 'type_', 'type',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetDictionaryElements', 'GetDictionaryElementsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  { ILNetworkService.GetCardType }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetCardType', '',
                                 '[ReturnName="GetCardTypeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetCardType', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetCardType', 'GetCardTypeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType"]', IS_NLBL);
  { ILNetworkService.GetIncidents }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetIncidents', '',
                                 '[ReturnName="GetIncidentsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncidents', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncidents', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncidents', 'filter', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncidents', 'GetIncidentsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  { ILNetworkService.GetIncident }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetIncident', '',
                                 '[ReturnName="GetIncidentResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncident', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncident', 'GetIncidentResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  { ILNetworkService.SearchFirebirdIncidents }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'SearchFirebirdIncidents', '',
                                 '[ReturnName="SearchFirebirdIncidentsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'SearchFirebirdIncidents', 'filter', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'SearchFirebirdIncidents', 'SearchFirebirdIncidentsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries", ArrayItemName="FirebirdIncidentEventsResult"]', IS_NLBL);
  { ILNetworkService.FindViolationByEmployee }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'FindViolationByEmployee', '',
                                 '[ReturnName="FindViolationByEmployeeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'FindViolationByEmployee', 'violatorFilter', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'FindViolationByEmployee', 'FindViolationByEmployeeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries", ArrayItemName="Violation"]', IS_NLBL);
  { ILNetworkService.GetIncidentTemplates }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetIncidentTemplates', '',
                                 '[ReturnName="GetIncidentTemplatesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetIncidentTemplates', 'GetIncidentTemplatesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries", ArrayItemName="IncidentTemplateInfo"]', IS_NLBL);
  { ILNetworkService.GetOrganizationForEmployee }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetOrganizationForEmployee', '',
                                 '[ReturnName="GetOrganizationForEmployeeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetOrganizationForEmployee', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetOrganizationForEmployee', 'GetOrganizationForEmployeeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries", ArrayItemName="DictionaryElementInfo"]', IS_NLBL);
  { ILNetworkService.GetSubdivisionsForEmployee }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetSubdivisionsForEmployee', '',
                                 '[ReturnName="GetSubdivisionsForEmployeeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetSubdivisionsForEmployee', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetSubdivisionsForEmployee', 'organizationId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetSubdivisionsForEmployee', 'GetSubdivisionsForEmployeeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries", ArrayItemName="DictionaryElementInfo"]', IS_NLBL);
  { ILNetworkService.GetOrganizationAssignmentsForEmployee }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetOrganizationAssignmentsForEmployee', '',
                                 '[ReturnName="GetOrganizationAssignmentsForEmployeeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetOrganizationAssignmentsForEmployee', 'vehicleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetOrganizationAssignmentsForEmployee', 'GetOrganizationAssignmentsForEmployeeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries", ArrayItemName="Employee2OrganizationAssignmentFull"]', IS_NLBL);
  { ILNetworkService.GetOrganizationAssignmentsForEmployeeIncludeRemovedEmployees }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetOrganizationAssignmentsForEmployeeIncludeRemovedEmployees', '',
                                 '[ReturnName="GetOrganizationAssignmentsForEmployeeIncludeRemovedEmployeesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetOrganizationAssignmentsForEmployeeIncludeRemovedEmployees', 'vehicleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetOrganizationAssignmentsForEmployeeIncludeRemovedEmployees', 'GetOrganizationAssignmentsForEmployeeIncludeRemovedEmployeesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries", ArrayItemName="Employee2OrganizationAssignmentFull"]', IS_NLBL);
  { ILNetworkService.GetOrganizationForVehicle }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetOrganizationForVehicle', '',
                                 '[ReturnName="GetOrganizationForVehicleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetOrganizationForVehicle', 'vehicleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetOrganizationForVehicle', 'GetOrganizationForVehicleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries", ArrayItemName="DictionaryElementInfo"]', IS_NLBL);
  { ILNetworkService.GetSubdivisionsForVehicle }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetSubdivisionsForVehicle', '',
                                 '[ReturnName="GetSubdivisionsForVehicleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetSubdivisionsForVehicle', 'vehicleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetSubdivisionsForVehicle', 'organizationId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetSubdivisionsForVehicle', 'GetSubdivisionsForVehicleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries", ArrayItemName="DictionaryElementInfo"]', IS_NLBL);
  { ILNetworkService.GetOrganizationAssignmentsForVehicle }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetOrganizationAssignmentsForVehicle', '',
                                 '[ReturnName="GetOrganizationAssignmentsForVehicleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetOrganizationAssignmentsForVehicle', 'vehicleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetOrganizationAssignmentsForVehicle', 'GetOrganizationAssignmentsForVehicleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries", ArrayItemName="Employee2OrganizationAssignmentFull"]', IS_NLBL);
  { ILNetworkService.GetCardTypes }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetCardTypes', '',
                                 '[ReturnName="GetCardTypesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetCardTypes', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetCardTypes', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetCardTypes', 'GetCardTypesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType"]', IS_NLBL);
  { ILNetworkService.GetEmployeePosition }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeePosition', '',
                                 '[ReturnName="GetEmployeePositionResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeePosition', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeePosition', 'GetEmployeePositionResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"]', IS_NLBL);
  { ILNetworkService.GetEmployeePositions }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeePositions', '',
                                 '[ReturnName="GetEmployeePositionsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeePositions', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeePositions', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeePositions', 'GetEmployeePositionsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"]', IS_NLBL);
  { ILNetworkService.GetEmployeePositionsForIncident }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeePositionsForIncident', '',
                                 '[ReturnName="GetEmployeePositionsForIncidentResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeePositionsForIncident', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeePositionsForIncident', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeePositionsForIncident', 'GetEmployeePositionsForIncidentResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeeGroupsFull }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsFull', '',
                                 '[ReturnName="GetAcsEmployeeGroupsFullResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsFull', 'GetAcsEmployeeGroupsFullResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeGroup"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeeGroups }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroups', '',
                                 '[ReturnName="GetAcsEmployeeGroupsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroups', 'GetAcsEmployeeGroupsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeGroup"]', IS_NLBL);
  { ILNetworkService.GetViolatorAcsEmployeeGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetViolatorAcsEmployeeGroup', '',
                                 '[ReturnName="GetViolatorAcsEmployeeGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetViolatorAcsEmployeeGroup', 'GetViolatorAcsEmployeeGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeeGroupsByTags }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsByTags', '',
                                 '[ReturnName="GetAcsEmployeeGroupsByTagsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsByTags', 'tagsIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsByTags', 'GetAcsEmployeeGroupsByTagsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeGroup"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeeGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroup', '',
                                 '[ReturnName="GetAcsEmployeeGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroup', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroup', 'GetAcsEmployeeGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeeGroupsForReportParameters }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsForReportParameters', '',
                                 '[ReturnName="GetAcsEmployeeGroupsForReportParametersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsForReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsForReportParameters', 'GetAcsEmployeeGroupsForReportParametersResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeGroupReportInfo"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeeGroupsForReactionEvent }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsForReactionEvent', '',
                                 '[ReturnName="GetAcsEmployeeGroupsForReactionEventResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsForReactionEvent', 'reactionEventId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsForReactionEvent', 'GetAcsEmployeeGroupsForReactionEventResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeGroupReactionInfo"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeeGroupsForReactionAction }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsForReactionAction', '',
                                 '[ReturnName="GetAcsEmployeeGroupsForReactionActionResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsForReactionAction', 'reactionActiond', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeGroupsForReactionAction', 'GetAcsEmployeeGroupsForReactionActionResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeGroupReactionInfo"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeesByGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesByGroup', '',
                                 '[ReturnName="GetAcsEmployeesByGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesByGroup', 'groupId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesByGroup', 'GetAcsEmployeesByGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeSlim"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployees }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployees', '',
                                 '[ReturnName="GetAcsEmployeesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployees', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployees', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployees', 'securityGroupIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployees', 'GetAcsEmployeesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkService.GetEmployeeFaceById }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeeFaceById', '',
                                 '[ReturnName="GetEmployeeFaceByIdResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeFaceById', 'faceId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeFaceById', 'GetEmployeeFaceByIdResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkService.GetEmployeeFaces }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeeFaces', '',
                                 '[ReturnName="GetEmployeeFacesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeFaces', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeFaces', 'GetEmployeeFacesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeFaceVector"]', IS_NLBL);
  { ILNetworkService.GetEmployeeFacesIncludeRemovedEmployees }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeeFacesIncludeRemovedEmployees', '',
                                 '[ReturnName="GetEmployeeFacesIncludeRemovedEmployeesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeFacesIncludeRemovedEmployees', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeFacesIncludeRemovedEmployees', 'GetEmployeeFacesIncludeRemovedEmployeesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeFaceVector"]', IS_NLBL);
  { ILNetworkService.GetEmployeeFacesFull }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetEmployeeFacesFull', '',
                                 '[ReturnName="GetEmployeeFacesFullResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeFacesFull', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetEmployeeFacesFull', 'GetEmployeeFacesFullResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeFaceVectorFull"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeesByGroups }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesByGroups', '',
                                 '[ReturnName="GetAcsEmployeesByGroupsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesByGroups', 'groupIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesByGroups', 'GetAcsEmployeesByGroupsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeSlim"]', IS_NLBL);
  { ILNetworkService.GetListAcsEmployeesByGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetListAcsEmployeesByGroup', '',
                                 '[ReturnName="GetListAcsEmployeesByGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetListAcsEmployeesByGroup', 'groupIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetListAcsEmployeesByGroup', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetListAcsEmployeesByGroup', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetListAcsEmployeesByGroup', 'foundEmployeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetListAcsEmployeesByGroup', 'GetListAcsEmployeesByGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeesGuidsByGroups }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesGuidsByGroups', '',
                                 '[ReturnName="GetAcsEmployeesGuidsByGroupsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesGuidsByGroups', 'groupIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesGuidsByGroups', 'GetAcsEmployeesGuidsByGroupsResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployee }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployee', '',
                                 '[ReturnName="GetAcsEmployeeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployee', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployee', 'GetAcsEmployeeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeeForRemoteTerminal }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeForRemoteTerminal', '',
                                 '[ReturnName="GetAcsEmployeeForRemoteTerminalResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeForRemoteTerminal', 'remoteTerminalModuleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeeForRemoteTerminal', 'GetAcsEmployeeForRemoteTerminalResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkService.GeEmployeesView }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GeEmployeesView', '',
                                 '[ReturnName="GeEmployeesViewResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GeEmployeesView', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GeEmployeesView', 'GeEmployeesViewResult', '',
                                '', IS_NLBL);
  { ILNetworkService.GeEmployeesViewMetadata }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GeEmployeesViewMetadata', '',
                                 '[ReturnName="GeEmployeesViewMetadataResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GeEmployeesViewMetadata', 'GeEmployeesViewMetadataResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="EmployeeViewFieldMetadata"]', IS_NLBL);
  { ILNetworkService.GetAcsEmployeesByTableNumbers }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesByTableNumbers', '',
                                 '[ReturnName="GetAcsEmployeesByTableNumbersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesByTableNumbers', 'tableNumbers', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="int"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetAcsEmployeesByTableNumbers', 'GetAcsEmployeesByTableNumbersResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeFull"]', IS_NLBL);
  { ILNetworkService.Connect }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'Connect', '',
                                 '[ReturnName="ConnectResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'Connect', 'ConnectResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkService.Disconnect }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'Disconnect', 'connectionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkService.GetNotification }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'GetNotification', '',
                                 '[ReturnName="GetNotificationResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetNotification', 'connectionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'GetNotification', 'GetNotificationResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Notifications"]', IS_NLBL);
  { ILNetworkService.Process }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'Process', 'operation', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'Process', 'connectionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkService.IsSessionExists }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkService), 'IsSessionExists', '',
                                 '[ReturnName="IsSessionExistsResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkService), 'IsSessionExists', 'guid', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILMonitoringService }
  InvRegistry.RegisterInterface(TypeInfo(ILMonitoringService), 'http://www.rusguardsecurity.ru', 'utf-8');
  InvRegistry.RegisterDefaultSOAPAction(TypeInfo(ILMonitoringService), 'http://www.rusguardsecurity.ru/ILMonitoringService/Ping');
  InvRegistry.RegisterInvokeOptions(TypeInfo(ILMonitoringService), ioDocument);
  { ILSubnetworkSubscribeService }
  InvRegistry.RegisterInterface(TypeInfo(ILSubnetworkSubscribeService), 'http://www.rusguardsecurity.ru', 'utf-8');
  InvRegistry.RegisterDefaultSOAPAction(TypeInfo(ILSubnetworkSubscribeService), 'http://www.rusguardsecurity.ru/ILSubnetworkSubscribeService/ProcessSubnetworkStateChanged');
  InvRegistry.RegisterInvokeOptions(TypeInfo(ILSubnetworkSubscribeService), ioDocument);
  { ILSubnetworkSubscribeService.ProcessSubnetworkStateChanged }
  InvRegistry.RegisterParamInfo(TypeInfo(ILSubnetworkSubscribeService), 'ProcessSubnetworkStateChanged', 'subnetworkId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService }
  InvRegistry.RegisterInterface(TypeInfo(ILNetworkConfigurationService), 'http://www.rusguardsecurity.ru', 'utf-8');
  InvRegistry.RegisterDefaultSOAPAction(TypeInfo(ILNetworkConfigurationService), 'http://www.rusguardsecurity.ru/ILNetworkConfigurationService/%operationName%');
  InvRegistry.RegisterInvokeOptions(TypeInfo(ILNetworkConfigurationService), ioDocument);
  { ILNetworkConfigurationService.RemoveFavoriteFolderByWorkplace }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveFavoriteFolderByWorkplace', 'workplaceId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveFavoriteFolderByWorkplace', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.RemoveEmployeeGroupFromFavoriteFolder }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeeGroupFromFavoriteFolder', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeeGroupFromFavoriteFolder', 'favoriteFolderID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SetEmployeeGroupToFavoriteFolder }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployeeGroupToFavoriteFolder', 'userId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployeeGroupToFavoriteFolder', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployeeGroupToFavoriteFolder', 'favoriteFolderID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployeeGroupToFavoriteFolder', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployeeGroupToFavoriteFolder', 'path', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.SetEmployeeGroupToFavoriteFolderByWorkplace }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployeeGroupToFavoriteFolderByWorkplace', 'workplaceId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployeeGroupToFavoriteFolderByWorkplace', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployeeGroupToFavoriteFolderByWorkplace', 'favoriteFolderID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployeeGroupToFavoriteFolderByWorkplace', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployeeGroupToFavoriteFolderByWorkplace', 'path', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.AddTag }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddTag', '',
                                 '[ReturnName="AddTagResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddTag', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddTag', 'AddTagResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SaveTag }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveTag', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveTag', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveTag }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveTag', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddUserPass }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddUserPass', '',
                                 '[ReturnName="AddUserPassResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUserPass', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUserPass', 'AddUserPassResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SaveUserPass }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveUserPass', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveUserPass', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveUserPassFull }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveUserPassFull', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveUserPassFull', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveUserPass }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveUserPass', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SetUserPassEditor }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'SetUserPassEditor', '',
                                 '[ReturnName="SetUserPassEditorResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetUserPassEditor', 'passID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetUserPassEditor', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.UserPass"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetUserPassEditor', 'SetUserPassEditorResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.RemoveUserPassEditor }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveUserPassEditor', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddReaction }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddReaction', '',
                                 '[ReturnName="AddReactionResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddReaction', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddReaction', 'AddReactionResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SaveReaction }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReaction', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReaction', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveReaction }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveReaction', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddReactionAction }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddReactionAction', '',
                                 '[ReturnName="AddReactionActionResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddReactionAction', 'reactionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddReactionAction', 'actionType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddReactionAction', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddReactionAction', 'AddReactionActionResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SaveReactionActionCommonData }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionActionCommonData', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionActionCommonData', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveReactionActions }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveReactionActions', 'actionIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddEmployeesToReactionAction }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeesToReactionAction', 'actionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeesToReactionAction', 'employeeIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveEmployeesFromReactionAction }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeesFromReactionAction', 'actionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeesFromReactionAction', 'employeeIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddEmployeeGroupsToReactionAction }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeeGroupsToReactionAction', 'actionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeeGroupsToReactionAction', 'employeeGroupIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveEmployeeGroupsFromReactionAction }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeeGroupsFromReactionAction', 'actionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeeGroupsFromReactionAction', 'employeeGroupIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveReactionSendSMSAction }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionSendSMSAction', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionSendSMSAction', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveReactionSendEmailAction }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionSendEmailAction', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionSendEmailAction', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveReactionExecuteProgramAction }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionExecuteProgramAction', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionExecuteProgramAction', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveReactionRecordVideoAction }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionRecordVideoAction', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionRecordVideoAction', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkConfigurationService.AddReport }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddReport', '',
                                 '[ReturnName="AddReportResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddReport', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddReport', 'tagIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddReport', 'AddReportResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SaveReport }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReport', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReport', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Report"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReport', 'tagIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveReport }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveReport', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.RemoveDriversFromReportParameters }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveDriversFromReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveDriversFromReportParameters', 'driverIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddDriversToReportParameters }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriversToReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriversToReportParameters', 'driverIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveLogMessageSubtypesFromReportParameters }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveLogMessageSubtypesFromReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveLogMessageSubtypesFromReportParameters', 'subtypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  { ILNetworkConfigurationService.AddLogMessageSubtypesToReportParameters }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddLogMessageSubtypesToReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddLogMessageSubtypesToReportParameters', 'subtypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  { ILNetworkConfigurationService.AddEmployeeGroupsToReportParameters }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeeGroupsToReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeeGroupsToReportParameters', 'employeeGroupIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveEmployeeGroupsFromReportParameters }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeeGroupsFromReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeeGroupsFromReportParameters', 'employeeGroupIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddEmployeesToReportParameters }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeesToReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeesToReportParameters', 'employeeIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveEmployeesFromReportParameters }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeesFromReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeesFromReportParameters', 'employeeIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddWorkZonesToReportParameters }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZonesToReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZonesToReportParameters', 'workZoneIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveWorkZonesFromReportParameters }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkZonesFromReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkZonesFromReportParameters', 'workZoneIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddReactionEvent }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddReactionEvent', '',
                                 '[ReturnName="AddReactionEventResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddReactionEvent', 'reactionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddReactionEvent', 'eventType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddReactionEvent', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddReactionEvent', 'AddReactionEventResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SaveReactionEventCommonData }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionEventCommonData', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionEventCommonData', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveReactionEvents }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveReactionEvents', 'eventIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddEmployeesToReactionEvent }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeesToReactionEvent', 'eventId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeesToReactionEvent', 'employeeIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveEmployeesFromReactionEvent }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeesFromReactionEvent', 'eventId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeesFromReactionEvent', 'employeeIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddEmployeeGroupsToReactionEvent }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeeGroupsToReactionEvent', 'eventId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeeGroupsToReactionEvent', 'employeeGroupIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveEmployeeGroupsFromReactionEvent }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeeGroupsFromReactionEvent', 'eventId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeeGroupsFromReactionEvent', 'employeeGroupIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddDriversToReactionEvent }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriversToReactionEvent', 'eventId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriversToReactionEvent', 'driverIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveDriversFromReactionEvent }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveDriversFromReactionEvent', 'eventId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveDriversFromReactionEvent', 'driverIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddLogMessageSubtypesToReactionEvent }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddLogMessageSubtypesToReactionEvent', 'eventId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddLogMessageSubtypesToReactionEvent', 'subtypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveLogMessageSubtypesFromReactionEvent }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveLogMessageSubtypesFromReactionEvent', 'eventId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveLogMessageSubtypesFromReactionEvent', 'subtypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  { ILNetworkConfigurationService.AddSwitchedOffLogMessageSubtypesToWorkplace }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddSwitchedOffLogMessageSubtypesToWorkplace', 'workplaceId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddSwitchedOffLogMessageSubtypesToWorkplace', 'subtypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveSwitchedOffLogMessageSubtypesFromWorkplace }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveSwitchedOffLogMessageSubtypesFromWorkplace', 'workplaceId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveSwitchedOffLogMessageSubtypesFromWorkplace', 'subtypes', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log", ArrayItemName="LogMsgSubType"]', IS_NLBL);
  { ILNetworkConfigurationService.SetRemoteTerminalSettingsByWorkplaceModuleId }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetRemoteTerminalSettingsByWorkplaceModuleId', 'moduleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetRemoteTerminalSettingsByWorkplaceModuleId', 'saveData', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.RemoteTerminal"]', IS_NLBL);
  { ILNetworkConfigurationService.AddSwitchedOffLogDriversToWorkplace }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddSwitchedOffLogDriversToWorkplace', 'workplaceId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddSwitchedOffLogDriversToWorkplace', 'driverIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveSwitchedOffLogDriversFromWorkplace }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveSwitchedOffLogDriversFromWorkplace', 'workplaceId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveSwitchedOffLogDriversFromWorkplace', 'driverIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveReactionEventsFromDevices }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionEventsFromDevices', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveReactionEventsFromDevices', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Reaction"]', IS_NLBL);
  { ILNetworkConfigurationService.GetViolationPlan }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetViolationPlan', '',
                                 '[ReturnName="GetViolationPlanResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetViolationPlan', 'group', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetViolationPlan', 'GetViolationPlanResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models", ArrayItemName="PlanModel"]', IS_NLBL);
  { ILNetworkConfigurationService.SetViolationPlan }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'SetViolationPlan', '',
                                 '[ReturnName="SetViolationPlanResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetViolationPlan', 'group', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetViolationPlan', 'plan', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models", ArrayItemName="PlanModel"]', IS_NLBL);
  { ILNetworkConfigurationService.UpdateDriverFigureOnTheMap }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateDriverFigureOnTheMap', 'driverFigureId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateDriverFigureOnTheMap', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveDriverFigureFromMap }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveDriverFigureFromMap', 'driverFigureId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SetAcsConfiguratorSettingsByWorkplaceModule }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAcsConfiguratorSettingsByWorkplaceModule', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAcsConfiguratorSettingsByWorkplaceModule', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"]', IS_NLBL);
  { ILNetworkConfigurationService.GetReportingServicesUrl }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetReportingServicesUrl', '',
                                 '[ReturnName="GetReportingServicesUrlResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetReportingServicesUrl', 'GetReportingServicesUrlResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]', IS_NLBL);
  { ILNetworkConfigurationService.SetIncidentTypeToReportParameters }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetIncidentTypeToReportParameters', 'reportId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetIncidentTypeToReportParameters', 'incidentTypeIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddWorkSchedulesToEmployee }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkSchedulesToEmployee', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkSchedulesToEmployee', 'workScheduleIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddWorkSchedulesToEmployeeGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkSchedulesToEmployeeGroup', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkSchedulesToEmployeeGroup', 'workScheduleIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveWorkSchedulesFromEmployee }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkSchedulesFromEmployee', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkSchedulesFromEmployee', 'workScheduleIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveWorkSchedulesFromEmployeeGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkSchedulesFromEmployeeGroup', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkSchedulesFromEmployeeGroup', 'workScheduleIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.SetUseEmployeeParentWorkSchedule }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetUseEmployeeParentWorkSchedule', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SetUseEmployeeGroupParentWorkSchedule }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetUseEmployeeGroupParentWorkSchedule', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddWorkZonesToEmployee }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZonesToEmployee', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZonesToEmployee', 'workZoneIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddWorkZonesToEmployeeGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZonesToEmployeeGroup', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZonesToEmployeeGroup', 'workZoneIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveWorkZoneFromEmployee }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkZoneFromEmployee', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkZoneFromEmployee', 'workZoneIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveWorkZoneFromEmployeeGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkZoneFromEmployeeGroup', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkZoneFromEmployeeGroup', 'workZoneIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.SetUseEmployeeParentWorkZone }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetUseEmployeeParentWorkZone', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SetUseEmployeeGroupParentWorkZone }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetUseEmployeeGroupParentWorkZone', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddDayType }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddDayType', '',
                                 '[ReturnName="AddDayTypeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDayType', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDayType', 'AddDayTypeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveWorkTimtable }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveWorkTimtable', 'workScheduleID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveWorkTimtable', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking", ArrayItemName="WorkTimetableSlimInfo"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveEmployeeTimtable }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmployeeTimtable', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmployeeTimtable', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking", ArrayItemName="WorkTimetableSlimInfo"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveDayType }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveDayType', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveDayType', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveDayTypes }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveDayTypes', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.DeleteWorkTimetable }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'DeleteWorkTimetable', 'workScheduleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.DeleteEmployeeTimetable }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'DeleteEmployeeTimetable', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'DeleteEmployeeTimetable', 'dates', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="dateTime"]', IS_NLBL);
  { ILNetworkConfigurationService.UpdateWorkTimeTable }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateWorkTimeTable', 'workScheduleID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateWorkTimeTable', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking", ArrayItemName="WorkTimetableSlimInfo"]', IS_NLBL);
  { ILNetworkConfigurationService.UpdateEmployeeTimeTable }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateEmployeeTimeTable', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateEmployeeTimeTable', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking", ArrayItemName="WorkTimetableSlimInfo"]', IS_NLBL);
  { ILNetworkConfigurationService.AddWorkSchedule }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkSchedule', '',
                                 '[ReturnName="AddWorkScheduleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkSchedule', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkSchedule', 'AddWorkScheduleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveWorkSchedule }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveWorkSchedule', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveWorkSchedule', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveWorkSchedules }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkSchedules', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddWorkZone }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZone', '',
                                 '[ReturnName="AddWorkZoneResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZone', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZone', 'AddWorkZoneResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveWorkZones }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkZones', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveWorkZone }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveWorkZone', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveWorkZone', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkConfigurationService.AddWorkZonesAccessPoint }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZonesAccessPoint', '',
                                 '[ReturnName="AddWorkZonesAccessPointResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZonesAccessPoint', 'workZoneId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZonesAccessPoint', 'acsAccessPointDriverId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZonesAccessPoint', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkZonesAccessPoint', 'AddWorkZonesAccessPointResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveWorkZonesAccessPoint }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveWorkZonesAccessPoint', 'accessPointId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveWorkZonesAccessPoint', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.TimeTracking"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveWorkZonesAccessPoint }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkZonesAccessPoint', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SyncFaceX }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SyncFaceX', 'address', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.ClearFaceX }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ClearFaceX', 'address', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.RemoveISS_IIDKs }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveISS_IIDKs', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveISS_Recognition }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveISS_Recognition', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveISS_Drivers }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveISS_Drivers', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="int"]', IS_NLBL);
  { ILNetworkConfigurationService.Save_ISS_IIDK }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Save_ISS_IIDK', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Save_ISS_IIDK', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"]', IS_NLBL);
  { ILNetworkConfigurationService.Save_ISS_Recognition }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Save_ISS_Recognition', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Save_ISS_Recognition', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"]', IS_NLBL);
  { ILNetworkConfigurationService.Save_ISS_Driver }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Save_ISS_Driver', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"]', IS_NLBL);
  { ILNetworkConfigurationService.Add_ISS_IIDK }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'Add_ISS_IIDK', '',
                                 '[ReturnName="Add_ISS_IIDKResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Add_ISS_IIDK', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Add_ISS_IIDK', 'Add_ISS_IIDKResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"]', IS_NLBL);
  { ILNetworkConfigurationService.Add_ISS_Recognition }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'Add_ISS_Recognition', '',
                                 '[ReturnName="Add_ISS_RecognitionResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Add_ISS_Recognition', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Add_ISS_Recognition', 'Add_ISS_RecognitionResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"]', IS_NLBL);
  { ILNetworkConfigurationService.Add_ISS_Driver }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'Add_ISS_Driver', '',
                                 '[ReturnName="Add_ISS_DriverResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Add_ISS_Driver', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Add_ISS_Driver', 'Add_ISS_DriverResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"]', IS_NLBL);
  { ILNetworkConfigurationService.UpdateSecurOSConfiguration }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateSecurOSConfiguration', 'iidkId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.GetSecureOSCameras }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetSecureOSCameras', '',
                                 '[ReturnName="GetSecureOSCamerasResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetSecureOSCameras', 'iidkId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetSecureOSCameras', 'GetSecureOSCamerasResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="ArrayOfKeyValueOfstringstring"]', IS_NLBL);
  { ILNetworkConfigurationService.Add_ISS_DriverEventPlayback }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Add_ISS_DriverEventPlayback', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"]', IS_NLBL);
  { ILNetworkConfigurationService.Remove_ISS_DriverEventPlayback }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Remove_ISS_DriverEventPlayback', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ISS"]', IS_NLBL);
  { ILNetworkConfigurationService.LoadPanasonicConfiguration }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'LoadPanasonicConfiguration', '',
                                 '[ReturnName="LoadPanasonicConfigurationResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadPanasonicConfiguration', 'deviceServerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadPanasonicConfiguration', 'ip', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadPanasonicConfiguration', 'login', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadPanasonicConfiguration', 'password', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadPanasonicConfiguration', 'LoadPanasonicConfigurationResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Panasonic"]', IS_NLBL);
  { ILNetworkConfigurationService.UpdateBasIpDrivers }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateBasIpDrivers', '',
                                 '[ReturnName="UpdateBasIpDriversResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateBasIpDrivers', 'serverID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateBasIpDrivers', 'resources', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities", ArrayItemName="LResourcePropertyValues"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateBasIpDrivers', 'UpdateBasIpDriversResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity", ArrayItemName="LDriverFullInfo"]', IS_NLBL);
  { ILNetworkConfigurationService.LoadNUUOConfiguration }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'LoadNUUOConfiguration', '',
                                 '[ReturnName="LoadNUUOConfigurationResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadNUUOConfiguration', 'deviceServerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadNUUOConfiguration', 'ip', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadNUUOConfiguration', 'login', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadNUUOConfiguration', 'password', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadNUUOConfiguration', 'LoadNUUOConfigurationResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.NUUO"]', IS_NLBL);
  { ILNetworkConfigurationService.LoadServerConfiguration }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'LoadServerConfiguration', '',
                                 '[ReturnName="LoadServerConfigurationResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadServerConfiguration', 'deviceServerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadServerConfiguration', 'serverName', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadServerConfiguration', 'password', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadServerConfiguration', 'LoadServerConfigurationResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon"]', IS_NLBL);
  { ILNetworkConfigurationService.LoadPersonalCabinetConfiguration }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'LoadPersonalCabinetConfiguration', '',
                                 '[ReturnName="LoadPersonalCabinetConfigurationResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadPersonalCabinetConfiguration', 'deviceServerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadPersonalCabinetConfiguration', 'login', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadPersonalCabinetConfiguration', 'password', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LoadPersonalCabinetConfiguration', 'LoadPersonalCabinetConfigurationResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.Ivideon"]', IS_NLBL);
  { ILNetworkConfigurationService.BroadcastFindBasIpDevices }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'BroadcastFindBasIpDevices', '',
                                 '[ReturnName="BroadcastFindBasIpDevicesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'BroadcastFindBasIpDevices', 'deviceServerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'BroadcastFindBasIpDevices', 'BroadcastFindBasIpDevicesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/System.Net", ArrayItemName="IPAddress"]', IS_NLBL);
  { ILNetworkConfigurationService.FindUsbCanConverters }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'FindUsbCanConverters', '',
                                 '[ReturnName="FindUsbCanConvertersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'FindUsbCanConverters', 'deviceServerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'FindUsbCanConverters', 'FindUsbCanConvertersResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"]', IS_NLBL);
  { ILNetworkConfigurationService.BroadcastFindLanConverters }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'BroadcastFindLanConverters', '',
                                 '[ReturnName="BroadcastFindLanConvertersResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'BroadcastFindLanConverters', 'deviceServerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'BroadcastFindLanConverters', 'BroadcastFindLanConvertersResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter", ArrayItemName="LanCanConverter"]', IS_NLBL);
  { ILNetworkConfigurationService.FindLanConverter }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'FindLanConverter', '',
                                 '[ReturnName="FindLanConverterResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'FindLanConverter', 'deviceServerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'FindLanConverter', 'address', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/System.Net"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'FindLanConverter', 'FindLanConverterResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"]', IS_NLBL);
  { ILNetworkConfigurationService.FindCanControllersViaCanConverter }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'FindCanControllersViaCanConverter', '',
                                 '[ReturnName="FindCanControllersViaCanConverterResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'FindCanControllersViaCanConverter', 'deviceServerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'FindCanControllersViaCanConverter', 'converters', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter", ArrayItemName="CanConverterAddress"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'FindCanControllersViaCanConverter', 'FindCanControllersViaCanConverterResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"]', IS_NLBL);
  { ILNetworkConfigurationService.SetDevicesAddressBySidViaCanConverter }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'SetDevicesAddressBySidViaCanConverter', '',
                                 '[ReturnName="SetDevicesAddressBySidViaCanConverterResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetDevicesAddressBySidViaCanConverter', 'deviceServerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetDevicesAddressBySidViaCanConverter', 'devices', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter", ArrayItemName="CanDeviceNetConfig"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetDevicesAddressBySidViaCanConverter', 'SetDevicesAddressBySidViaCanConverterResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"]', IS_NLBL);
  { ILNetworkConfigurationService.SetNetworkConfigurationToDevice }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetNetworkConfigurationToDevice', 'newConfiguration', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetNetworkConfigurationToDevice', 'address', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/System.Net"]', IS_NLBL);
  { ILNetworkConfigurationService.GetControllerConfigurationsViaCanConverter }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetControllerConfigurationsViaCanConverter', '',
                                 '[ReturnName="GetControllerConfigurationsViaCanConverterResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetControllerConfigurationsViaCanConverter', 'deviceServerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetControllerConfigurationsViaCanConverter', 'devices', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter", ArrayItemName="CanDeviceNetConfig"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetControllerConfigurationsViaCanConverter', 'GetControllerConfigurationsViaCanConverterResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Driver.CanDriversViaUsbConverter"]', IS_NLBL);
  { ILNetworkConfigurationService.AddNestedCell }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddNestedCell', '',
                                 '[ReturnName="AddNestedCellResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddNestedCell', 'parentCellId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddNestedCell', 'saveData', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout", ArrayItemName="ScreenCellSaveData"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddNestedCell', 'AddNestedCellResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveCell }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveCell', 'saveData', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout", ArrayItemName="ScreenCellInfo"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveCell }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveCell', 'cellIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveScreen }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveScreen', 'screenId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveScreen', 'saveData', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout"]', IS_NLBL);
  { ILNetworkConfigurationService.SetScreenCellContentToNone }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetScreenCellContentToNone', 'cellId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SetScreenCellContentToPhotoIdentification }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetScreenCellContentToPhotoIdentification', 'cellId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetScreenCellContentToPhotoIdentification', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.PhotoIdentification"]', IS_NLBL);
  { ILNetworkConfigurationService.SetScreenCellContentToCamera }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetScreenCellContentToCamera', 'cellId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetScreenCellContentToCamera', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ScreenLayout.CellContent.Camera"]', IS_NLBL);
  { ILNetworkConfigurationService.AddEmailAddress }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmailAddress', '',
                                 '[ReturnName="AddEmailAddressResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmailAddress', 'owner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmailAddress', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmailAddress', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmailAddress', 'AddEmailAddressResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SaveEmailAddress }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmailAddress', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmailAddress', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveEmailAddress }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmailAddress', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddPhoneNumber }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddPhoneNumber', '',
                                 '[ReturnName="AddPhoneNumberResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddPhoneNumber', 'owner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddPhoneNumber', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddPhoneNumber', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddPhoneNumber', 'AddPhoneNumberResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SavePhoneNumber }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SavePhoneNumber', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SavePhoneNumber', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"]', IS_NLBL);
  { ILNetworkConfigurationService.RemovePhoneNumbers }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemovePhoneNumbers', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddEmailDistributionAddress }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmailDistributionAddress', '',
                                 '[ReturnName="AddEmailDistributionAddressResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmailDistributionAddress', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmailDistributionAddress', 'AddEmailDistributionAddressResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SaveEmailDistributionAddress }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmailDistributionAddress', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmailDistributionAddress', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ContactInformation"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveEmailDistributionAddresses }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmailDistributionAddresses', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddFavoriteFolder }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddFavoriteFolder', '',
                                 '[ReturnName="AddFavoriteFolderResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddFavoriteFolder', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddFavoriteFolder', 'AddFavoriteFolderResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"]', IS_NLBL);
  { ILNetworkConfigurationService.AddFavoriteFolderByWorplace }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddFavoriteFolderByWorplace', '',
                                 '[ReturnName="AddFavoriteFolderByWorplaceResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddFavoriteFolderByWorplace', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddFavoriteFolderByWorplace', 'AddFavoriteFolderByWorplaceResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveFavoriteFolder }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'SaveFavoriteFolder', '',
                                 '[ReturnName="SaveFavoriteFolderResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveFavoriteFolder', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveFavoriteFolder', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveFavoriteFolder', 'SaveFavoriteFolderResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"]', IS_NLBL);
  { ILNetworkConfigurationService.MoveFavoriteFolder }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolder', '',
                                 '[ReturnName="MoveFavoriteFolderResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolder', 'userId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolder', 'folderId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolder', 'parentId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolder', 'beforeFolderId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolder', 'afterFolderId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolder', 'MoveFavoriteFolderResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"]', IS_NLBL);
  { ILNetworkConfigurationService.MoveFavoriteFolderByWorkplace }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolderByWorkplace', '',
                                 '[ReturnName="MoveFavoriteFolderByWorkplaceResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolderByWorkplace', 'workplaceId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolderByWorkplace', 'folderId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolderByWorkplace', 'parentId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolderByWorkplace', 'beforeFolderId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolderByWorkplace', 'afterFolderId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveFavoriteFolderByWorkplace', 'MoveFavoriteFolderByWorkplaceResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.FavoriteFolder"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveFavoriteFolder }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveFavoriteFolder', 'userId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveFavoriteFolder', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.ForceAssignAcsKeyForEmployee }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'ForceAssignAcsKeyForEmployee', '',
                                 '[ReturnName="ForceAssignAcsKeyForEmployeeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ForceAssignAcsKeyForEmployee', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ForceAssignAcsKeyForEmployee', 'keyData', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ForceAssignAcsKeyForEmployee', 'ForceAssignAcsKeyForEmployeeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys"]', IS_NLBL);
  { ILNetworkConfigurationService.SetStatusOfAcsKeyAsLost }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetStatusOfAcsKeyAsLost', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SetStatusOfAcsKeyAsClear }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetStatusOfAcsKeyAsClear', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddAccessPoint2CameraChain }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAccessPoint2CameraChain', '',
                                 '[ReturnName="AddAccessPoint2CameraChainResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAccessPoint2CameraChain', 'saveData', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAccessPoint2CameraChain', 'AddAccessPoint2CameraChainResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveAccessPoint2CameraChain }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAccessPoint2CameraChain', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.GetAccessPoint2CameraForAccessPoint }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessPoint2CameraForAccessPoint', '',
                                 '[ReturnName="GetAccessPoint2CameraForAccessPointResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessPoint2CameraForAccessPoint', 'driverId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessPoint2CameraForAccessPoint', 'GetAccessPoint2CameraForAccessPointResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity", ArrayItemName="AccessPoint2CameraChain"]', IS_NLBL);
  { ILNetworkConfigurationService.AddAcsVehicle }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsVehicle', '',
                                 '[ReturnName="AddAcsVehicleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsVehicle', 'VehicleGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsVehicle', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsVehicle', 'AddAcsVehicleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsVehicle }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsVehicle', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsVehicle', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveAcsVehicle }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAcsVehicle', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.MoveVehiclesToGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveVehiclesToGroup', 'groupId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveVehiclesToGroup', 'VehiclesIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddEmployee2VehicleChain }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployee2VehicleChain', '',
                                 '[ReturnName="AddEmployee2VehicleChainResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployee2VehicleChain', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployee2VehicleChain', 'vehicles', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle", ArrayItemName="EmployeesVehicle"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployee2VehicleChain', 'AddEmployee2VehicleChainResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/System"]', IS_NLBL);
  { ILNetworkConfigurationService.GetVehicleForEmployee }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetVehicleForEmployee', '',
                                 '[ReturnName="GetVehicleForEmployeeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetVehicleForEmployee', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetVehicleForEmployee', 'GetVehicleForEmployeeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle", ArrayItemName="AcsVehicle"]', IS_NLBL);
  { ILNetworkConfigurationService.GetVehicleForEmployeeIncludeRemovedEmployees }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetVehicleForEmployeeIncludeRemovedEmployees', '',
                                 '[ReturnName="GetVehicleForEmployeeIncludeRemovedEmployeesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetVehicleForEmployeeIncludeRemovedEmployees', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetVehicleForEmployeeIncludeRemovedEmployees', 'GetVehicleForEmployeeIncludeRemovedEmployeesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Vehicle", ArrayItemName="AcsVehicle"]', IS_NLBL);
  { ILNetworkConfigurationService.GetEmployeesForVehicle }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetEmployeesForVehicle', '',
                                 '[ReturnName="GetEmployeesForVehicleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetEmployeesForVehicle', 'vehicleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetEmployeesForVehicle', 'GetEmployeesForVehicleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeFull"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveAllEmployee2VehicleChainForEmployee }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAllEmployee2VehicleChainForEmployee', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddLogMessageForAccessPoint }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddLogMessageForAccessPoint', '',
                                 '[ReturnName="AddLogMessageForAccessPointResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddLogMessageForAccessPoint', 'accessPointID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddLogMessageForAccessPoint', 'subType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Log"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddLogMessageForAccessPoint', 'message_', 'message',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddLogMessageForAccessPoint', 'details', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddLogMessageForAccessPoint', 'operatorID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  { ILNetworkConfigurationService.SetAdditionalDateTimeValue }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalDateTimeValue', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalDateTimeValue', 'fieldId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalDateTimeValue', 'value', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalDateTimeValue', 'savedFieldContext', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  { ILNetworkConfigurationService.SetAdditionalIntValue }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalIntValue', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalIntValue', 'fieldId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalIntValue', 'value', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalIntValue', 'savedFieldContext', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  { ILNetworkConfigurationService.SetAdditionalDoubleValue }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalDoubleValue', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalDoubleValue', 'fieldId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalDoubleValue', 'value', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalDoubleValue', 'savedFieldContext', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  { ILNetworkConfigurationService.SetAdditionalColorValue }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalColorValue', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalColorValue', 'fieldId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalColorValue', 'value', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalColorValue', 'savedFieldContext', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  { ILNetworkConfigurationService.SetAdditionalListValue }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalListValue', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalListValue', 'fieldId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalListValue', 'value', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalListValue', 'savedFieldContext', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  { ILNetworkConfigurationService.SetAdditionalStringValue }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalStringValue', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalStringValue', 'fieldId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalStringValue', 'value', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalStringValue', 'savedFieldContext', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  { ILNetworkConfigurationService.SetAdditionalFieldsVlaues }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalFieldsVlaues', 'ownerId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalFieldsVlaues', 'addDateTimeInfos', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields", ArrayItemName="AddDateTimeInfo"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalFieldsVlaues', 'addDoubleInfo', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields", ArrayItemName="AddDoubleInfo"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalFieldsVlaues', 'addIntInfos', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields", ArrayItemName="AddIntInfo"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalFieldsVlaues', 'addStringInfos', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields", ArrayItemName="AddStringInfo"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalFieldsVlaues', 'addColorInfo', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields", ArrayItemName="AddColorInfo"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalFieldsVlaues', 'addListInfo', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields", ArrayItemName="AddListInfo"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAdditionalFieldsVlaues', 'savedFieldContext', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]');
  { ILNetworkConfigurationService.AddField }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddField', '',
                                 '[ReturnName="AddFieldResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddField', 'field', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddField', 'AddFieldResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SaveField }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveField', 'field', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.AdditionalFields"]', IS_NLBL);
  { ILNetworkConfigurationService.DeleteFields }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'DeleteFields', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddPhotoOrder }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddPhotoOrder', '',
                                 '[ReturnName="AddPhotoOrderResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddPhotoOrder', 'photoOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Photo"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddPhotoOrder', 'AddPhotoOrderResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SavePhotoOrder }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SavePhotoOrder', 'photoOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Photo"]', IS_NLBL);
  { ILNetworkConfigurationService.DeletePhotoFields }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'DeletePhotoFields', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsBoxAccessElements }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsBoxAccessElements', '',
                                 '[ReturnName="SaveAcsBoxAccessElementsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsBoxAccessElements', 'boxAccessLevelId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsBoxAccessElements', 'deletedElements', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsBoxAccessElements', 'editedElements', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel", ArrayItemName="AcsBoxAccessLevelElementSlimInfo"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsBoxAccessElements', 'addedElements', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel", ArrayItemName="AcsBoxAccessElementSaveInfo"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsBoxAccessElements', 'SaveAcsBoxAccessElementsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/System"]', IS_NLBL);
  { ILNetworkConfigurationService.AddAcsBoxAccessLevel }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsBoxAccessLevel', '',
                                 '[ReturnName="AddAcsBoxAccessLevelResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsBoxAccessLevel', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsBoxAccessLevel', 'tagIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsBoxAccessLevel', 'AddAcsBoxAccessLevelResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsBoxAccessLevel }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsBoxAccessLevel', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsBoxAccessLevel', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.BoxAccessLevel"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsBoxAccessLevel', 'tagIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveAcsBoxAccessLevel }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAcsBoxAccessLevel', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAcsBoxAccessLevel', 'accessElementIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddAcsAccessLevel }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsAccessLevel', '',
                                 '[ReturnName="AddAcsAccessLevelResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsAccessLevel', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsAccessLevel', 'tagIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsAccessLevel', 'AddAcsAccessLevelResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveAlcoGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAlcoGroup', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddAlcoGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAlcoGroup', '',
                                 '[ReturnName="AddAlcoGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAlcoGroup', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAlcoGroup', 'AddAlcoGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"]', IS_NLBL);
  { ILNetworkConfigurationService.AlcoGroupChangePriority }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AlcoGroupChangePriority', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAlcoGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAlcoGroup', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAlcoGroup', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup"]', IS_NLBL);
  { ILNetworkConfigurationService.SetEmployees2AlcoGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployees2AlcoGroup', 'alcoGroupId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployees2AlcoGroup', 'employeesIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployees2AlcoGroup', 'deletedEmployeesIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddEmployeePositionsToAlcoGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeePositionsToAlcoGroup', 'alcoGroupId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeePositionsToAlcoGroup', 'positionIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.SetPositionCodesToAlcoGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetPositionCodesToAlcoGroup', 'alcoGroupId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetPositionCodesToAlcoGroup', 'codes', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="string"]', IS_NLBL);
  { ILNetworkConfigurationService.SetBiometricPermissions }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetBiometricPermissions', 'perms', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState", ArrayItemName="CardTypeBiometricPermission"]', IS_NLBL);
  { ILNetworkConfigurationService.AddEmployeeGroupsToAlcoGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeeGroupsToAlcoGroup', 'alcoGroupId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeeGroupsToAlcoGroup', 'groups', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AlcoGroup", ArrayItemName="EmployeeGroupForAlcoGroup"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsAccessLevel }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsAccessLevel', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsAccessLevel', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsAccessLevel', 'tagIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveAcsAccessLevel }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAcsAccessLevel', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAcsAccessLevel', 'accessPointIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddAcsAccessPoint }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsAccessPoint', '',
                                 '[ReturnName="AddAcsAccessPointResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsAccessPoint', 'acsAccessLevelId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsAccessPoint', 'acsAccessPointDriverId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsAccessPoint', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsAccessPoint', 'AddAcsAccessPointResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsAccessPoint }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsAccessPoint', 'accessPointId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsAccessPoint', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveAcsAccessPoint }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAcsAccessPoint', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.ReplaceAccessPointDriver }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'ReplaceAccessPointDriver', '',
                                 '[ReturnName="ReplaceAccessPointDriverResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ReplaceAccessPointDriver', 'accessPointId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ReplaceAccessPointDriver', 'acsAccessLevelId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ReplaceAccessPointDriver', 'oldAcsAccessPointDriverId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ReplaceAccessPointDriver', 'acsAccessPointDriverId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ReplaceAccessPointDriver', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ReplaceAccessPointDriver', 'ReplaceAccessPointDriverResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels.AcsAccesPoints"]', IS_NLBL);
  { ILNetworkConfigurationService.AddEmployeesToSecurityGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeesToSecurityGroup', '',
                                 '[ReturnName="AddEmployeesToSecurityGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeesToSecurityGroup', 'securityGroup', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeesToSecurityGroup', 'employeeIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeesToSecurityGroup', 'AddEmployeesToSecurityGroupResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveEmployeesToSecurityGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeesToSecurityGroup', 'securityGroup', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeesToSecurityGroup', 'employeeIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddAccessLevelsToEmployeeWithPeriod }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAccessLevelsToEmployeeWithPeriod', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAccessLevelsToEmployeeWithPeriod', 'accessLevelInfo', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/System", ArrayItemName="TupleOfguidNullableOfdateTimeGOBf0pnW"]', IS_NLBL);
  { ILNetworkConfigurationService.AddAccessLevelsToEmployeeGroupWithPeriod }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAccessLevelsToEmployeeGroupWithPeriod', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAccessLevelsToEmployeeGroupWithPeriod', 'accessLevelInfo', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/System", ArrayItemName="TupleOfguidNullableOfdateTimeGOBf0pnW"]', IS_NLBL);
  { ILNetworkConfigurationService.AddAccessLevelsToEmployee }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAccessLevelsToEmployee', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAccessLevelsToEmployee', 'accessLevelIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddAccessLevelsToEmployeeGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAccessLevelsToEmployeeGroup', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAccessLevelsToEmployeeGroup', 'accessLevelIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveAccessLevelsFromEmployeeForce }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAccessLevelsFromEmployeeForce', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAccessLevelsFromEmployeeForce', 'accessLevelInfo', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/System", ArrayItemName="TupleOfguidNullableOfdateTimeGOBf0pnW"]', IS_NLBL);
  { ILNetworkConfigurationService.AddAccessLevelsToEmployeeForce }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAccessLevelsToEmployeeForce', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAccessLevelsToEmployeeForce', 'accessLevelInfo', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/System", ArrayItemName="TupleOfguidNullableOfdateTimeGOBf0pnW"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveAccessLevelFromEmployee }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAccessLevelFromEmployee', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAccessLevelFromEmployee', 'accessLevelIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveAccessLevelFromEmployeeGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAccessLevelFromEmployeeGroup', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAccessLevelFromEmployeeGroup', 'accessLevelIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.GetAccessLevelsByEmployeeID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeID', '',
                                 '[ReturnName="GetAccessLevelsByEmployeeIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeID', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeID', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeID', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeID', 'accessLevelsOwner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeID', 'GetAccessLevelsByEmployeeIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]', IS_NLBL);
  { ILNetworkConfigurationService.GetAccessLevelsByEmployeeIDIncludeRemovedEmployees }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeIDIncludeRemovedEmployees', '',
                                 '[ReturnName="GetAccessLevelsByEmployeeIDIncludeRemovedEmployeesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeIDIncludeRemovedEmployees', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeIDIncludeRemovedEmployees', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeIDIncludeRemovedEmployees', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeIDIncludeRemovedEmployees', 'accessLevelsOwner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeIDIncludeRemovedEmployees', 'GetAccessLevelsByEmployeeIDIncludeRemovedEmployeesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]', IS_NLBL);
  { ILNetworkConfigurationService.GetAccessLevelsByDriverID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByDriverID', '',
                                 '[ReturnName="GetAccessLevelsByDriverIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByDriverID', 'driverID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByDriverID', 'GetAccessLevelsByDriverIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels", ArrayItemName="AcsAccessLevelSimpleInfo"]', IS_NLBL);
  { ILNetworkConfigurationService.GetBiometricPermissions }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetBiometricPermissions', '',
                                 '[ReturnName="GetBiometricPermissionsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetBiometricPermissions', 'GetBiometricPermissionsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState", ArrayItemName="CardTypeBiometricPermission"]', IS_NLBL);
  { ILNetworkConfigurationService.GetAccessLevelsByEmployeeGroupID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeGroupID', '',
                                 '[ReturnName="GetAccessLevelsByEmployeeGroupIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeGroupID', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeGroupID', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeGroupID', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeGroupID', 'accessLevelsOwner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAccessLevelsByEmployeeGroupID', 'GetAccessLevelsByEmployeeGroupIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]', IS_NLBL);
  { ILNetworkConfigurationService.GetAllAccessLevelsByEmployeeGroupID }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetAllAccessLevelsByEmployeeGroupID', '',
                                 '[ReturnName="GetAllAccessLevelsByEmployeeGroupIDResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAllAccessLevelsByEmployeeGroupID', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAllAccessLevelsByEmployeeGroupID', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAllAccessLevelsByEmployeeGroupID', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAllAccessLevelsByEmployeeGroupID', 'accessLevelsOwner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetAllAccessLevelsByEmployeeGroupID', 'GetAllAccessLevelsByEmployeeGroupIDResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AccessLevels"]', IS_NLBL);
  { ILNetworkConfigurationService.SetUseEmployeeParentAccessLevel }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetUseEmployeeParentAccessLevel', 'employeeID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SetUseEmployeeGroupParentAccessLevel }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetUseEmployeeGroupParentAccessLevel', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.GetKeysChanges }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetKeysChanges', '',
                                 '[ReturnName="GetKeysChangesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetKeysChanges', 'idDriver', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetKeysChanges', 'GetKeysChangesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"]', IS_NLBL);
  { ILNetworkConfigurationService.ProcessSyncDriver }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ProcessSyncDriver', 'processDriverID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ProcessSyncDriver', 'connectionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ProcessSyncDriver', 'driverIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.ProcessSyncDriverLight }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ProcessSyncDriverLight', 'processDriverID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ProcessSyncDriverLight', 'connectionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ProcessSyncDriverLight', 'driverIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.GetCustomizableDaysChanges }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetCustomizableDaysChanges', '',
                                 '[ReturnName="GetCustomizableDaysChangesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetCustomizableDaysChanges', 'driverID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetCustomizableDaysChanges', 'GetCustomizableDaysChangesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.StorageState"]', IS_NLBL);
  { ILNetworkConfigurationService.Import }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'Import', 'data', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.UpdateDeviceDrivers }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateDeviceDrivers', '',
                                 '[ReturnName="UpdateDeviceDriversResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateDeviceDrivers', 'driversTreeInfo', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities", ArrayItemName="DeviceDriverInfo"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateDeviceDrivers', 'UpdateDeviceDriversResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities", ArrayItemName="DeviceDriverInfo"]', IS_NLBL);
  { ILNetworkConfigurationService.AddWorkplace }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkplace', '',
                                 '[ReturnName="AddWorkplaceResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkplace', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkplace', 'AddWorkplaceResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveWorkplace }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveWorkplace', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveWorkplace', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveWorkplace }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkplace', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddWorkplaceModule }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkplaceModule', '',
                                 '[ReturnName="AddWorkplaceModuleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkplaceModule', 'workplaceId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkplaceModule', 'moduleType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkplaceModule', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddWorkplaceModule', 'AddWorkplaceModuleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveWorkplaceModule }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveWorkplaceModule', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveWorkplaceModule', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveWorkplaceModule }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveWorkplaceModule', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddRootMap }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddRootMap', '',
                                 '[ReturnName="AddRootMapResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddRootMap', 'mapsWorkplaceModuleId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddRootMap', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddRootMap', 'AddRootMapResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"]', IS_NLBL);
  { ILNetworkConfigurationService.AddMap }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddMap', '',
                                 '[ReturnName="AddMapResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddMap', 'rootMapId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddMap', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddMap', 'AddMapResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveMap }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveMap', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveMap', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveMap }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveMap', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SetMapImage }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetMapImage', 'mapId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetMapImage', 'image', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.AddDriverFigureToMap }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriverFigureToMap', '',
                                 '[ReturnName="AddDriverFigureToMapResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriverFigureToMap', 'mapId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriverFigureToMap', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriverFigureToMap', 'AddDriverFigureToMapResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Workplace.MapsWorkplace"]', IS_NLBL);
  { ILNetworkConfigurationService.GetTagsByClaim }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetTagsByClaim', '',
                                 '[ReturnName="GetTagsByClaimResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetTagsByClaim', 'claim', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetTagsByClaim', 'GetTagsByClaimResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Tag", ArrayItemName="TagFullInfo"]', IS_NLBL);
  { ILNetworkConfigurationService.SetVariable }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetVariable', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]', IS_NLBL);
  { ILNetworkConfigurationService.AddNetwork }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddNetwork', '',
                                 '[ReturnName="AddNetworkResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddNetwork', 'networkId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddNetwork', 'gatewayUrl', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddNetwork', 'AddNetworkResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.RemoveNetwork }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveNetwork', 'networkId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddLocalServer }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddLocalServer', '',
                                 '[ReturnName="AddLocalServerResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddLocalServer', 'serverType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddLocalServer', 'url', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddLocalServer', 'AddLocalServerResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddServer }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddServer', '',
                                 '[ReturnName="AddServerResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddServer', 'networkId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddServer', 'serverType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddServer', 'url', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddServer', 'AddServerResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.RemoveServer }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveServer', 'serverId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddRootDriverProps }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddRootDriverProps', '',
                                 '[ReturnName="AddRootDriverPropsResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddRootDriverProps', 'serverId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddRootDriverProps', 'driverType', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddRootDriverProps', 'properties', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities", ArrayItemName="LPropertyValue"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddRootDriverProps', 'AddRootDriverPropsResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddDriverProps }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriverProps', '',
                                 '[ReturnName="AddDriverPropsResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriverProps', 'parentId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriverProps', 'parentPropertyName', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriverProps', 'driverType', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriverProps', 'properties', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities", ArrayItemName="LPropertyValue"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDriverProps', 'AddDriverPropsResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.RemoveDriver }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveDriver', '',
                                 '[ReturnName="RemoveDriverResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveDriver', 'driverId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveDriver', 'RemoveDriverResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]', IS_NLBL);
  { ILNetworkConfigurationService.AddNetworkToSubnetworkLink }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddNetworkToSubnetworkLink', 'parentId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddNetworkToSubnetworkLink', 'childId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.RemoveNetworkToSubnetworkLink }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveNetworkToSubnetworkLink', 'parentId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveNetworkToSubnetworkLink', 'childId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SetProperty }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetProperty', 'resourceType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetProperty', 'resourceId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetProperty', 'propertyName', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetProperty', 'propertyValue', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.SetPropertyValues }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetPropertyValues', 'resources', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.Net.Services.Entities", ArrayItemName="LResourcePropertyValues"]', IS_NLBL);
  { ILNetworkConfigurationService.AddUser }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddUser', '',
                                 '[ReturnName="AddUserResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUser', 'login', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUser', 'passsword', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUser', 'fullName', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUser', 'description', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUser', 'AddUserResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveUser }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveUser', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveUser', 'login', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveUser', 'password', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveUser', 'fullName', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveUser', 'description', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.RemoveUser }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveUser', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddUserGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddUserGroup', '',
                                 '[ReturnName="AddUserGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUserGroup', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUserGroup', 'description', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUserGroup', 'AddUserGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveUserGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveUserGroup', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveUserGroup', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveUserGroup', 'description', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.RemoveUserGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveUserGroup', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddUsersToUserGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUsersToUserGroup', 'userGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUsersToUserGroup', 'userIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveUsersFromUserGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveUsersFromUserGroup', 'userGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveUsersFromUserGroup', 'userIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddUserGroupsToUser }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUserGroupsToUser', 'userID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddUserGroupsToUser', 'userGroupIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveUserGroupsFromUser }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveUserGroupsFromUser', 'userID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveUserGroupsFromUser', 'userGroupIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddClaim }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddClaim', '',
                                 '[ReturnName="AddClaimResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddClaim', 'userGroupId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddClaim', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Security"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddClaim', 'AddClaimResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.RemoveClaim }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveClaim', 'claimId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.RemoveAcsSchedule }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAcsSchedule', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddAcsDaySchedule }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsDaySchedule', '',
                                 '[ReturnName="AddAcsDayScheduleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsDaySchedule', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsDaySchedule', 'comment', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsDaySchedule', 'dayIntervals', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsDaySchedule', 'AddAcsDayScheduleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  { ILNetworkConfigurationService.AddAcsDayScheduleForOwner }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsDayScheduleForOwner', '',
                                 '[ReturnName="AddAcsDayScheduleForOwnerResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsDayScheduleForOwner', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsDayScheduleForOwner', 'comment', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsDayScheduleForOwner', 'dayIntervals', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsDayScheduleForOwner', 'owner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsDayScheduleForOwner', 'AddAcsDayScheduleForOwnerResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsDaySchedule }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsDaySchedule', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsDaySchedule', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsDaySchedule', 'comment', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsDaySchedule', 'dayIntervals', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsDayScheduleForOwner }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsDayScheduleForOwner', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsDayScheduleForOwner', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsDayScheduleForOwner', 'comment', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsDayScheduleForOwner', 'dayIntervals', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsDayScheduleForOwner', 'owner', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]');
  { ILNetworkConfigurationService.AddAcsMultiDaySchedule }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsMultiDaySchedule', '',
                                 '[ReturnName="AddAcsMultiDayScheduleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsMultiDaySchedule', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsMultiDaySchedule', 'comment', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsMultiDaySchedule', 'dayIntervals', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule", ArrayItemName="RGDayIntervals"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsMultiDaySchedule', 'AddAcsMultiDayScheduleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsMultiDaySchedule }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsMultiDaySchedule', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsMultiDaySchedule', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsMultiDaySchedule', 'comment', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsMultiDaySchedule', 'dayIntervals', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule", ArrayItemName="RGDayIntervals"]', IS_NLBL);
  { ILNetworkConfigurationService.AddAcsWeekSchedule }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsWeekSchedule', '',
                                 '[ReturnName="AddAcsWeekScheduleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsWeekSchedule', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsWeekSchedule', 'comment', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsWeekSchedule', 'weeks', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule", ArrayItemName="AcsWeekSlim"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsWeekSchedule', 'AddAcsWeekScheduleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsWeekSchedule }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsWeekSchedule', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsWeekSchedule', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsWeekSchedule', 'comment', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsWeekSchedule', 'weeks', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule", ArrayItemName="AcsWeekSlim"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveAcsDay }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAcsDay', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddAcsCustomDay }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsCustomDay', '',
                                 '[ReturnName="AddAcsCustomDayResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsCustomDay', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsCustomDay', 'dayType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsCustomDay', 'AddAcsCustomDayResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsCustomDay }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsCustomDay', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsCustomDay', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsCustomDay', 'dayType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]');
  { ILNetworkConfigurationService.AddAcsWorkDayWithTransfer }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsWorkDayWithTransfer', '',
                                 '[ReturnName="AddAcsWorkDayWithTransferResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsWorkDayWithTransfer', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsWorkDayWithTransfer', 'AddAcsWorkDayWithTransferResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Schedule"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsWorkDayWithTransfer }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsWorkDayWithTransfer', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsWorkDayWithTransfer', 'name_', 'name',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.AddEmployeePosition }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeePosition', '',
                                 '[ReturnName="AddEmployeePositionResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeePosition', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeePosition', 'description', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeePosition', 'code', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeePosition', 'AddEmployeePositionResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"]', IS_NLBL);
  { ILNetworkConfigurationService.AddEmployeePositionForIncident }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeePositionForIncident', '',
                                 '[ReturnName="AddEmployeePositionForIncidentResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeePositionForIncident', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeePositionForIncident', 'description', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeePositionForIncident', 'code', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeePositionForIncident', 'AddEmployeePositionForIncidentResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveEmployeePosition }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmployeePosition', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmployeePosition', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmployeePosition', 'description', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmployeePosition', 'code', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.SaveEmployeePositionForIncident }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmployeePositionForIncident', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmployeePositionForIncident', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmployeePositionForIncident', 'description', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmployeePositionForIncident', 'code', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.RemoveEmployeePosition }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeePosition', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.RemoveEmployeePositionForIncident }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeePositionForIncident', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddIncidentTemplate }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddIncidentTemplate', '',
                                 '[ReturnName="AddIncidentTemplateResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddIncidentTemplate', 'info', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddIncidentTemplate', 'AddIncidentTemplateResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveIncidentTemplate }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveIncidentTemplate', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveIncidentTemplate', 'info', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveIncidentTemplate }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveIncidentTemplate', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddIncident }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddIncident', '',
                                 '[ReturnName="AddIncidentResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddIncident', 'info', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddIncident', 'AddIncidentResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveIncident }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveIncident', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveIncident', 'info', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveIncidents }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveIncidents', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.AddDictionaryElement }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddDictionaryElement', '',
                                 '[ReturnName="AddDictionaryElementResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDictionaryElement', 'info', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDictionaryElement', 'type_', 'type',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddDictionaryElement', 'AddDictionaryElementResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveDictionaryElement }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveDictionaryElement', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveDictionaryElement', 'info', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveDictionaryElement', 'type_', 'type',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]');
  { ILNetworkConfigurationService.RemoveDectionaryElement }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveDectionaryElement', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveDectionaryElement', 'type_', 'type',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries"]');
  { ILNetworkConfigurationService.SetOrganization2EmployeeChain }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetOrganization2EmployeeChain', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetOrganization2EmployeeChain', 'organizationAssignments', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries", ArrayItemName="Employee2OrganizationAssignment"]', IS_NLBL);
  { ILNetworkConfigurationService.SetOrganization2VehicleChain }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetOrganization2VehicleChain', 'vehicleID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetOrganization2VehicleChain', 'organizationAssignments', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.IncidentDictionaries", ArrayItemName="Employee2OrganizationAssignment"]', IS_NLBL);
  { ILNetworkConfigurationService.AddCardType }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddCardType', '',
                                 '[ReturnName="AddCardTypeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddCardType', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddCardType', 'description', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddCardType', 'AddCardTypeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.CardType"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveCardType }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveCardType', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveCardType', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveCardType', 'description', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.RemoveCardType }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveCardType', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddMifareProfile }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddMifareProfile', '',
                                 '[ReturnName="AddMifareProfileResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddMifareProfile', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddMifareProfile', 'tagIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddMifareProfile', 'AddMifareProfileResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveMifareProfile }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveMifareProfile', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.SaveMifareProfile }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'SaveMifareProfile', '',
                                 '[ReturnName="SaveMifareProfileResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveMifareProfile', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveMifareProfile', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveMifareProfile', 'connectionId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveMifareProfile', 'tagIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveMifareProfile', 'SaveMifareProfileResult', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.SetUidsKeys }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetUidsKeys', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.Mifare", ArrayItemName="UidKeyInfo"]', IS_NLBL);
  { ILNetworkConfigurationService.AddAcsEmployeeGroup }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroup', '',
                                 '[ReturnName="AddAcsEmployeeGroupResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroup', 'parentId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroup', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroup', 'comment', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroup', 'tagIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroup', 'groupCode', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroup', 'AddAcsEmployeeGroupResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsEmployeeGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployeeGroup', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployeeGroup', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployeeGroup', 'comment', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployeeGroup', 'tagIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployeeGroup', 'groupCode', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.AddAcsEmployeeGroupWithGroupType }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroupWithGroupType', '',
                                 '[ReturnName="AddAcsEmployeeGroupWithGroupTypeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroupWithGroupType', 'parentId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroupWithGroupType', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroupWithGroupType', 'comment', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroupWithGroupType', 'tagIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroupWithGroupType', 'isGuestGroup', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroupWithGroupType', 'groupCode', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployeeGroupWithGroupType', 'AddAcsEmployeeGroupWithGroupTypeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsEmployeeGroupWithGroupType }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployeeGroupWithGroupType', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployeeGroupWithGroupType', 'name_', 'name',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployeeGroupWithGroupType', 'comment', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployeeGroupWithGroupType', 'tagIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployeeGroupWithGroupType', 'isGuestGroup', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployeeGroupWithGroupType', 'groupCode', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.RemoveAcsEmployeeGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAcsEmployeeGroup', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddAcsEmployee }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployee', '',
                                 '[ReturnName="AddAcsEmployeeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployee', 'employeeGroupID', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployee', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddAcsEmployee', 'AddAcsEmployeeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkConfigurationService.MoveEmployeesToGroup }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveEmployeesToGroup', 'groupId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'MoveEmployeesToGroup', 'employeesIDs', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.GetFilteredEmployees }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'GetFilteredEmployees', '',
                                 '[ReturnName="GetFilteredEmployeesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetFilteredEmployees', 'searchString', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetFilteredEmployees', 'sortedColumn', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetFilteredEmployees', 'sortOrder', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'GetFilteredEmployees', 'GetFilteredEmployeesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsEmployee }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployee', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployee', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveAcsEmployeesDocuments }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployeesDocuments', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveAcsEmployeesDocuments', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkConfigurationService.SetEmployeeFaces }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployeeFaces', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetEmployeeFaces', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees", ArrayItemName="AcsEmployeeFaceVectorSaveData"]', IS_NLBL);
  { ILNetworkConfigurationService.LockAcsEmployee }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'LockAcsEmployee', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveAcsEmployee }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveAcsEmployee', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.AddEmployeeSchedule }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeeSchedule', '',
                                 '[ReturnName="AddEmployeeScheduleResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeeSchedule', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeeSchedule', 'saveData', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AddEmployeeSchedule', 'AddEmployeeScheduleResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkConfigurationService.SaveEmployeeSchedule }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmployeeSchedule', 'id', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SaveEmployeeSchedule', 'data', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]', IS_NLBL);
  { ILNetworkConfigurationService.RemoveEmployeeSchedule }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'RemoveEmployeeSchedule', 'ids', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  { ILNetworkConfigurationService.SetAcsEmployeePhoto }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAcsEmployeePhoto', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAcsEmployeePhoto', 'data', '',
                                '', IS_NLBL);
  { ILNetworkConfigurationService.SetAcsEmployeePhotoByType }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAcsEmployeePhotoByType', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAcsEmployeePhotoByType', 'data', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'SetAcsEmployeePhotoByType', 'imageType', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.Employees"]');
  { ILNetworkConfigurationService.AssignAcsKeyForEmployee }
  InvRegistry.RegisterMethodInfo(TypeInfo(ILNetworkConfigurationService), 'AssignAcsKeyForEmployee', '',
                                 '[ReturnName="AssignAcsKeyForEmployeeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AssignAcsKeyForEmployee', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AssignAcsKeyForEmployee', 'keyData', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'AssignAcsKeyForEmployee', 'AssignAcsKeyForEmployeeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/VVIInvestment.RusGuard.DAL.Entities.Entity.ACS.AcsKeys"]', IS_NLBL);
  { ILNetworkConfigurationService.ReindexKeys }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'ReindexKeys', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { ILNetworkConfigurationService.UpdateAcsKeyEndTime }
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateAcsKeyEndTime', 'employeeId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(ILNetworkConfigurationService), 'UpdateAcsKeyEndTime', 'endDate', '',
                                '', IS_NLBL);
  { IOperatorContract }
  InvRegistry.RegisterInterface(TypeInfo(IOperatorContract), 'http://tempuri.org/', 'utf-8');
  InvRegistry.RegisterDefaultSOAPAction(TypeInfo(IOperatorContract), 'http://tempuri.org/IOperatorContract/%operationName%');
  InvRegistry.RegisterInvokeOptions(TypeInfo(IOperatorContract), ioDocument);
  { IOperatorContract.GetDepartmentTree }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'GetDepartmentTree', '',
                                 '[ReturnName="GetDepartmentTreeResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetDepartmentTree', 'departmentId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetDepartmentTree', 'GetDepartmentTreeResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models", ArrayItemName="DepartmentTreeModel"]', IS_NLBL);
  { IOperatorContract.GetDataForPeriodByDepartments }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'GetDataForPeriodByDepartments', '',
                                 '[ReturnName="GetDataForPeriodByDepartmentsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetDataForPeriodByDepartments', 'login', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetDataForPeriodByDepartments', 'departmentsIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetDataForPeriodByDepartments', 'type_', 'type',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetDataForPeriodByDepartments', 'GetDataForPeriodByDepartmentsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models", ArrayItemName="DataForPeriodModel"]', IS_NLBL);
  { IOperatorContract.GetDataForPeriodByDepartmentsDetail }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'GetDataForPeriodByDepartmentsDetail', '',
                                 '[ReturnName="GetDataForPeriodByDepartmentsDetailResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetDataForPeriodByDepartmentsDetail', 'login', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetDataForPeriodByDepartmentsDetail', 'departmentId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetDataForPeriodByDepartmentsDetail', 'GetDataForPeriodByDepartmentsDetailResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models", ArrayItemName="DataForPeriodModel"]', IS_NLBL);
  { IOperatorContract.GetIsPresentInWorkplace }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'GetIsPresentInWorkplace', '',
                                 '[ReturnName="GetIsPresentInWorkplaceResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetIsPresentInWorkplace', 'departmentsIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetIsPresentInWorkplace', 'GetIsPresentInWorkplaceResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models", ArrayItemName="DataOnPresenceInWorkplace"]', IS_NLBL);
  { IOperatorContract.GetAbscenceInWorkplace }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'GetAbscenceInWorkplace', '',
                                 '[ReturnName="GetAbscenceInWorkplaceResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetAbscenceInWorkplace', 'departmentId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetAbscenceInWorkplace', 'GetAbscenceInWorkplaceResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models", ArrayItemName="Absent"]', IS_NLBL);
  { IOperatorContract.GetDataForGraph }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'GetDataForGraph', '',
                                 '[ReturnName="GetDataForGraphResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetDataForGraph', 'departmentId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetDataForGraph', 'type_', 'type',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetDataForGraph', 'GetDataForGraphResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models", ArrayItemName="DataForViolator"]', IS_NLBL);
  { IOperatorContract.GetProblemDates }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'GetProblemDates', '',
                                 '[ReturnName="GetProblemDatesResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetProblemDates', 'departmentsIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetProblemDates', 'GetProblemDatesResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models", ArrayItemName="DataForViolator"]', IS_NLBL);
  { IOperatorContract.GetSystematicViolation }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'GetSystematicViolation', '',
                                 '[ReturnName="GetSystematicViolationResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetSystematicViolation', 'userId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { IOperatorContract.GetSystematicViolationByLogin }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'GetSystematicViolationByLogin', '',
                                 '[ReturnName="GetSystematicViolationByLoginResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetSystematicViolationByLogin', 'login', '',
                                '', IS_NLBL);
  { IOperatorContract.SaveSystematicViolation }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'SaveSystematicViolation', '',
                                 '[ReturnName="SaveSystematicViolationResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'SaveSystematicViolation', 'userId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  { IOperatorContract.SaveSystematicViolationByLogin }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'SaveSystematicViolationByLogin', '',
                                 '[ReturnName="SaveSystematicViolationByLoginResult"]', IS_OPTN);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'SaveSystematicViolationByLogin', 'login', '',
                                '', IS_NLBL);
  { IOperatorContract.GetListOfViolations }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'GetListOfViolations', '',
                                 '[ReturnName="GetListOfViolationsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetListOfViolations', 'userId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetListOfViolations', 'departmentsIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetListOfViolations', 'type_', 'type',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetListOfViolations', 'GetListOfViolationsResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models", ArrayItemName="Violator"]', IS_NLBL);
  { IOperatorContract.GetListOfViolationsByLogin }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'GetListOfViolationsByLogin', '',
                                 '[ReturnName="GetListOfViolationsByLoginResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetListOfViolationsByLogin', 'login', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetListOfViolationsByLogin', 'departmentsIds', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", ArrayItemName="guid"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetListOfViolationsByLogin', 'type_', 'type',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models"]', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetListOfViolationsByLogin', 'GetListOfViolationsByLoginResult', '',
                                '[Namespace="http://schemas.datacontract.org/2004/07/RusGuard.Models", ArrayItemName="Violator"]', IS_NLBL);
  { IOperatorContract.GetPhoto }
  InvRegistry.RegisterMethodInfo(TypeInfo(IOperatorContract), 'GetPhoto', '',
                                 '[ReturnName="GetPhotoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetPhoto', 'UserId', '',
                                '[Namespace="http://schemas.microsoft.com/2003/10/Serialization/"]');
  InvRegistry.RegisterParamInfo(TypeInfo(IOperatorContract), 'GetPhoto', 'GetPhotoResult', '',
                                '', IS_NLBL);
  RegisterTypeProc0;
  RegisterTypeProc1;
  RegisterTypeProc2;
  RegisterTypeProc3;
  RegisterTypeProc4;
  RegisterTypeProc5;
  RegisterTypeProc6;
  RegisterTypeProc7;
  RegisterTypeProc8;
  RegisterTypeProc9;

end.
